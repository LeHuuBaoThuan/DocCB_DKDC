
0_main_prj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08006fe8  08006fe8  00007fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e4  080070e4  00009014  2**0
                  CONTENTS
  4 .ARM          00000008  080070e4  080070e4  000080e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070ec  080070ec  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070ec  080070ec  000080ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070f0  080070f0  000080f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080070f4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba4  20000014  08007108  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bb8  08007108  00009bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1bc  00000000  00000000  0000903d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003957  00000000  00000000  000241f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  00027b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001392  00000000  00000000  00029428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001988b  00000000  00000000  0002a7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dfe8  00000000  00000000  00044045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000988d9  00000000  00000000  0006202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa906  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069f4  00000000  00000000  000fa94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  00101340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08006fd0 	.word	0x08006fd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08006fd0 	.word	0x08006fd0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <CLCD_Delay>:
//************************** Low Level Function ****************************************************************//
uint8_t currentline;
uint8_t Xcursor,Ycursor,countWriteChar,CurrentWriteChar;
CLCD_I2C_Name LCD1;
static void CLCD_Delay(uint16_t Time)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	4618      	mov	r0, r3
 800016e:	f000 ffcf 	bl	8001110 <HAL_Delay>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}

0800017a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b086      	sub	sp, #24
 800017e:	af02      	add	r7, sp, #8
 8000180:	6078      	str	r0, [r7, #4]
 8000182:	460b      	mov	r3, r1
 8000184:	70fb      	strb	r3, [r7, #3]
 8000186:	4613      	mov	r3, r2
 8000188:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800018a:	78fb      	ldrb	r3, [r7, #3]
 800018c:	f023 030f 	bic.w	r3, r3, #15
 8000190:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000192:	78fb      	ldrb	r3, [r7, #3]
 8000194:	011b      	lsls	r3, r3, #4
 8000196:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	7adb      	ldrb	r3, [r3, #11]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d007      	beq.n	80001b0 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	f043 0308 	orr.w	r3, r3, #8
 80001a6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 80001a8:	7bbb      	ldrb	r3, [r7, #14]
 80001aa:	f043 0308 	orr.w	r3, r3, #8
 80001ae:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80001b0:	78bb      	ldrb	r3, [r7, #2]
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	d108      	bne.n	80001c8 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
 80001b8:	f043 0301 	orr.w	r3, r3, #1
 80001bc:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	73bb      	strb	r3, [r7, #14]
 80001c6:	e00a      	b.n	80001de <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001c8:	78bb      	ldrb	r3, [r7, #2]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d107      	bne.n	80001de <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f023 0301 	bic.w	r3, r3, #1
 80001d4:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001d6:	7bbb      	ldrb	r3, [r7, #14]
 80001d8:	f023 0301 	bic.w	r3, r3, #1
 80001dc:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffb9 	bl	8000160 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001f2:	7bbb      	ldrb	r3, [r7, #14]
 80001f4:	f043 0304 	orr.w	r3, r3, #4
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f7ff ffaf 	bl	8000160 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6818      	ldr	r0, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	791b      	ldrb	r3, [r3, #4]
 800020e:	4619      	mov	r1, r3
 8000210:	f107 0208 	add.w	r2, r7, #8
 8000214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2304      	movs	r3, #4
 800021c:	f001 fc30 	bl	8001a80 <HAL_I2C_Master_Transmit>

}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <CLCD_I2C_Init>:
//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	4611      	mov	r1, r2
 8000234:	461a      	mov	r2, r3
 8000236:	460b      	mov	r3, r1
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	4613      	mov	r3, r2
 800023c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	79fa      	ldrb	r2, [r7, #7]
 8000248:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	7e3a      	ldrb	r2, [r7, #24]
 8000254:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2228      	movs	r2, #40	@ 0x28
 800025a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2206      	movs	r2, #6
 8000260:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	220c      	movs	r2, #12
 8000266:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	2214      	movs	r2, #20
 800026c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2208      	movs	r2, #8
 8000272:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000274:	2032      	movs	r0, #50	@ 0x32
 8000276:	f7ff ff73 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800027a:	2200      	movs	r2, #0
 800027c:	2133      	movs	r1, #51	@ 0x33
 800027e:	68f8      	ldr	r0, [r7, #12]
 8000280:	f7ff ff7b 	bl	800017a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000284:	2200      	movs	r2, #0
 8000286:	2133      	movs	r1, #51	@ 0x33
 8000288:	68f8      	ldr	r0, [r7, #12]
 800028a:	f7ff ff76 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028e:	2005      	movs	r0, #5
 8000290:	f7ff ff66 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000294:	2200      	movs	r2, #0
 8000296:	2132      	movs	r1, #50	@ 0x32
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f7ff ff6e 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029e:	2005      	movs	r0, #5
 80002a0:	f7ff ff5e 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2120      	movs	r1, #32
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff66 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80002ae:	2005      	movs	r0, #5
 80002b0:	f7ff ff56 	bl	8000160 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	79db      	ldrb	r3, [r3, #7]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f7ff ff5c 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	7a1b      	ldrb	r3, [r3, #8]
 80002c6:	2200      	movs	r2, #0
 80002c8:	4619      	mov	r1, r3
 80002ca:	68f8      	ldr	r0, [r7, #12]
 80002cc:	f7ff ff55 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	7a5b      	ldrb	r3, [r3, #9]
 80002d4:	2200      	movs	r2, #0
 80002d6:	4619      	mov	r1, r3
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	f7ff ff4e 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	7a9b      	ldrb	r3, [r3, #10]
 80002e2:	2200      	movs	r2, #0
 80002e4:	4619      	mov	r1, r3
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff47 	bl	800017a <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2101      	movs	r1, #1
 80002f0:	68f8      	ldr	r0, [r7, #12]
 80002f2:	f7ff ff42 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2102      	movs	r1, #2
 80002fa:	68f8      	ldr	r0, [r7, #12]
 80002fc:	f7ff ff3d 	bl	800017a <CLCD_WriteI2C>
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <Init_Sys>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void Init_Sys (void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L_ERR_GPIO_Port, L_ERR_Pin, GPIO_PIN_SET);
 800030c:	2201      	movs	r2, #1
 800030e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000312:	480b      	ldr	r0, [pc, #44]	@ (8000340 <Init_Sys+0x38>)
 8000314:	f001 fa36 	bl	8001784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_USR_GPIO_Port, L_USR_Pin, GPIO_PIN_SET);
 8000318:	2201      	movs	r2, #1
 800031a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800031e:	4808      	ldr	r0, [pc, #32]	@ (8000340 <Init_Sys+0x38>)
 8000320:	f001 fa30 	bl	8001784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_DBG_GPIO_Port, L_DBG_Pin, GPIO_PIN_SET);
 8000324:	2201      	movs	r2, #1
 8000326:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800032a:	4806      	ldr	r0, [pc, #24]	@ (8000344 <Init_Sys+0x3c>)
 800032c:	f001 fa2a 	bl	8001784 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_CTR_GPIO_Port, LCD_CTR_Pin, GPIO_PIN_SET);
 8000330:	2201      	movs	r2, #1
 8000332:	2180      	movs	r1, #128	@ 0x80
 8000334:	4804      	ldr	r0, [pc, #16]	@ (8000348 <Init_Sys+0x40>)
 8000336:	f001 fa25 	bl	8001784 <HAL_GPIO_WritePin>
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010800 	.word	0x40010800
 8000344:	40011000 	.word	0x40011000
 8000348:	40010c00 	.word	0x40010c00

0800034c <HAL_UART_RxCpltCallback>:
uint8_t rxData = 0;;
uint8_t rxArray[20] = {};
uint8_t rxCounter = 1;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	if(&huart1 == huart)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a3e      	ldr	r2, [pc, #248]	@ (8000450 <HAL_UART_RxCpltCallback+0x104>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d138      	bne.n	80003ce <HAL_UART_RxCpltCallback+0x82>
	{

		if(rxData == '\r')
 800035c:	4b3d      	ldr	r3, [pc, #244]	@ (8000454 <HAL_UART_RxCpltCallback+0x108>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b0d      	cmp	r3, #13
 8000362:	d11a      	bne.n	800039a <HAL_UART_RxCpltCallback+0x4e>
		{
			HAL_UART_Transmit(&huart1, rxArray, strlen((const char *)rxArray), 100);
 8000364:	483c      	ldr	r0, [pc, #240]	@ (8000458 <HAL_UART_RxCpltCallback+0x10c>)
 8000366:	f7ff fef3 	bl	8000150 <strlen>
 800036a:	4603      	mov	r3, r0
 800036c:	b29a      	uxth	r2, r3
 800036e:	2364      	movs	r3, #100	@ 0x64
 8000370:	4939      	ldr	r1, [pc, #228]	@ (8000458 <HAL_UART_RxCpltCallback+0x10c>)
 8000372:	4837      	ldr	r0, [pc, #220]	@ (8000450 <HAL_UART_RxCpltCallback+0x104>)
 8000374:	f003 f890 	bl	8003498 <HAL_UART_Transmit>
			for(uint8_t i = 0; i < 20; i++)
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]
 800037c:	e009      	b.n	8000392 <HAL_UART_RxCpltCallback+0x46>
			{
				rxArray[i] = 0;
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	4a35      	ldr	r2, [pc, #212]	@ (8000458 <HAL_UART_RxCpltCallback+0x10c>)
 8000382:	2100      	movs	r1, #0
 8000384:	54d1      	strb	r1, [r2, r3]
				rxCounter = 0;
 8000386:	4b35      	ldr	r3, [pc, #212]	@ (800045c <HAL_UART_RxCpltCallback+0x110>)
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 20; i++)
 800038c:	7bfb      	ldrb	r3, [r7, #15]
 800038e:	3301      	adds	r3, #1
 8000390:	73fb      	strb	r3, [r7, #15]
 8000392:	7bfb      	ldrb	r3, [r7, #15]
 8000394:	2b13      	cmp	r3, #19
 8000396:	d9f2      	bls.n	800037e <HAL_UART_RxCpltCallback+0x32>
 8000398:	e00c      	b.n	80003b4 <HAL_UART_RxCpltCallback+0x68>
			}
		}
		else
		{
			rxArray[rxCounter] = rxData;
 800039a:	4b30      	ldr	r3, [pc, #192]	@ (800045c <HAL_UART_RxCpltCallback+0x110>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	461a      	mov	r2, r3
 80003a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000454 <HAL_UART_RxCpltCallback+0x108>)
 80003a2:	7819      	ldrb	r1, [r3, #0]
 80003a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000458 <HAL_UART_RxCpltCallback+0x10c>)
 80003a6:	5499      	strb	r1, [r3, r2]
			rxCounter++;
 80003a8:	4b2c      	ldr	r3, [pc, #176]	@ (800045c <HAL_UART_RxCpltCallback+0x110>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	3301      	adds	r3, #1
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	4b2a      	ldr	r3, [pc, #168]	@ (800045c <HAL_UART_RxCpltCallback+0x110>)
 80003b2:	701a      	strb	r2, [r3, #0]
		}
		if(rxCounter >= 20)
 80003b4:	4b29      	ldr	r3, [pc, #164]	@ (800045c <HAL_UART_RxCpltCallback+0x110>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b13      	cmp	r3, #19
 80003ba:	d902      	bls.n	80003c2 <HAL_UART_RxCpltCallback+0x76>
		{
			rxCounter = 0;
 80003bc:	4b27      	ldr	r3, [pc, #156]	@ (800045c <HAL_UART_RxCpltCallback+0x110>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80003c2:	2201      	movs	r2, #1
 80003c4:	4923      	ldr	r1, [pc, #140]	@ (8000454 <HAL_UART_RxCpltCallback+0x108>)
 80003c6:	4822      	ldr	r0, [pc, #136]	@ (8000450 <HAL_UART_RxCpltCallback+0x104>)
 80003c8:	f003 f8e9 	bl	800359e <HAL_UART_Receive_IT>
			rxCounter = 0;
		}
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
	}

}
 80003cc:	e03b      	b.n	8000446 <HAL_UART_RxCpltCallback+0xfa>
	else if(&huart2 == huart)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a23      	ldr	r2, [pc, #140]	@ (8000460 <HAL_UART_RxCpltCallback+0x114>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d137      	bne.n	8000446 <HAL_UART_RxCpltCallback+0xfa>
		if(rxData == '\r')
 80003d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000454 <HAL_UART_RxCpltCallback+0x108>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b0d      	cmp	r3, #13
 80003dc:	d11a      	bne.n	8000414 <HAL_UART_RxCpltCallback+0xc8>
			HAL_UART_Transmit(&huart2, rxArray, strlen((const char *)rxArray), 100);
 80003de:	481e      	ldr	r0, [pc, #120]	@ (8000458 <HAL_UART_RxCpltCallback+0x10c>)
 80003e0:	f7ff feb6 	bl	8000150 <strlen>
 80003e4:	4603      	mov	r3, r0
 80003e6:	b29a      	uxth	r2, r3
 80003e8:	2364      	movs	r3, #100	@ 0x64
 80003ea:	491b      	ldr	r1, [pc, #108]	@ (8000458 <HAL_UART_RxCpltCallback+0x10c>)
 80003ec:	481c      	ldr	r0, [pc, #112]	@ (8000460 <HAL_UART_RxCpltCallback+0x114>)
 80003ee:	f003 f853 	bl	8003498 <HAL_UART_Transmit>
			for(uint8_t i = 0; i < 20; i++)
 80003f2:	2300      	movs	r3, #0
 80003f4:	73bb      	strb	r3, [r7, #14]
 80003f6:	e009      	b.n	800040c <HAL_UART_RxCpltCallback+0xc0>
				rxArray[i] = 0;
 80003f8:	7bbb      	ldrb	r3, [r7, #14]
 80003fa:	4a17      	ldr	r2, [pc, #92]	@ (8000458 <HAL_UART_RxCpltCallback+0x10c>)
 80003fc:	2100      	movs	r1, #0
 80003fe:	54d1      	strb	r1, [r2, r3]
				rxCounter = 0;
 8000400:	4b16      	ldr	r3, [pc, #88]	@ (800045c <HAL_UART_RxCpltCallback+0x110>)
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 20; i++)
 8000406:	7bbb      	ldrb	r3, [r7, #14]
 8000408:	3301      	adds	r3, #1
 800040a:	73bb      	strb	r3, [r7, #14]
 800040c:	7bbb      	ldrb	r3, [r7, #14]
 800040e:	2b13      	cmp	r3, #19
 8000410:	d9f2      	bls.n	80003f8 <HAL_UART_RxCpltCallback+0xac>
 8000412:	e00c      	b.n	800042e <HAL_UART_RxCpltCallback+0xe2>
			rxArray[rxCounter] = rxData;
 8000414:	4b11      	ldr	r3, [pc, #68]	@ (800045c <HAL_UART_RxCpltCallback+0x110>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	461a      	mov	r2, r3
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <HAL_UART_RxCpltCallback+0x108>)
 800041c:	7819      	ldrb	r1, [r3, #0]
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <HAL_UART_RxCpltCallback+0x10c>)
 8000420:	5499      	strb	r1, [r3, r2]
			rxCounter++;
 8000422:	4b0e      	ldr	r3, [pc, #56]	@ (800045c <HAL_UART_RxCpltCallback+0x110>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	3301      	adds	r3, #1
 8000428:	b2da      	uxtb	r2, r3
 800042a:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <HAL_UART_RxCpltCallback+0x110>)
 800042c:	701a      	strb	r2, [r3, #0]
		if(rxCounter >= 20)
 800042e:	4b0b      	ldr	r3, [pc, #44]	@ (800045c <HAL_UART_RxCpltCallback+0x110>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b13      	cmp	r3, #19
 8000434:	d902      	bls.n	800043c <HAL_UART_RxCpltCallback+0xf0>
			rxCounter = 0;
 8000436:	4b09      	ldr	r3, [pc, #36]	@ (800045c <HAL_UART_RxCpltCallback+0x110>)
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 800043c:	2201      	movs	r2, #1
 800043e:	4905      	ldr	r1, [pc, #20]	@ (8000454 <HAL_UART_RxCpltCallback+0x108>)
 8000440:	4807      	ldr	r0, [pc, #28]	@ (8000460 <HAL_UART_RxCpltCallback+0x114>)
 8000442:	f003 f8ac 	bl	800359e <HAL_UART_Receive_IT>
}
 8000446:	bf00      	nop
 8000448:	3710      	adds	r7, #16
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	2000016c 	.word	0x2000016c
 8000454:	2000020c 	.word	0x2000020c
 8000458:	20000210 	.word	0x20000210
 800045c:	20000000 	.word	0x20000000
 8000460:	200001b4 	.word	0x200001b4

08000464 <Task_action>:

void Task_action(char* sms)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, sms, 1, 100);
 800046c:	2364      	movs	r3, #100	@ 0x64
 800046e:	2201      	movs	r2, #1
 8000470:	6879      	ldr	r1, [r7, #4]
 8000472:	4806      	ldr	r0, [pc, #24]	@ (800048c <Task_action+0x28>)
 8000474:	f003 f810 	bl	8003498 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "\n", 1, 100);
 8000478:	2364      	movs	r3, #100	@ 0x64
 800047a:	2201      	movs	r2, #1
 800047c:	4904      	ldr	r1, [pc, #16]	@ (8000490 <Task_action+0x2c>)
 800047e:	4803      	ldr	r0, [pc, #12]	@ (800048c <Task_action+0x28>)
 8000480:	f003 f80a 	bl	8003498 <HAL_UART_Transmit>
}
 8000484:	bf00      	nop
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	2000016c 	.word	0x2000016c
 8000490:	0800700c 	.word	0x0800700c

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fe07 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f86d 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 fa0d 	bl	80008c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004a6:	f000 f8dd 	bl	8000664 <MX_SPI1_Init>
  MX_TIM2_Init();
 80004aa:	f000 f961 	bl	8000770 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004ae:	f000 f9b3 	bl	8000818 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80004b2:	f000 f90d 	bl	80006d0 <MX_TIM1_Init>
  MX_I2C1_Init();
 80004b6:	f000 f8a7 	bl	8000608 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80004ba:	f000 f9d7 	bl	800086c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Init_Sys();
 80004be:	f7ff ff23 	bl	8000308 <Init_Sys>

  HAL_GPIO_WritePin(LCD_CTR_GPIO_Port, LCD_CTR_Pin, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2180      	movs	r1, #128	@ 0x80
 80004c6:	481d      	ldr	r0, [pc, #116]	@ (800053c <main+0xa8>)
 80004c8:	f001 f95c 	bl	8001784 <HAL_GPIO_WritePin>

  CLCD_I2C_Init(&LCD1,&hi2c1,ADDR_PCF8574,20,4);
 80004cc:	1d38      	adds	r0, r7, #4
 80004ce:	2304      	movs	r3, #4
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2314      	movs	r3, #20
 80004d4:	227e      	movs	r2, #126	@ 0x7e
 80004d6:	491a      	ldr	r1, [pc, #104]	@ (8000540 <main+0xac>)
 80004d8:	f7ff fea6 	bl	8000228 <CLCD_I2C_Init>
//  LCD_I2C_Init();

#if (TEST_UART)
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80004dc:	2201      	movs	r2, #1
 80004de:	4919      	ldr	r1, [pc, #100]	@ (8000544 <main+0xb0>)
 80004e0:	4819      	ldr	r0, [pc, #100]	@ (8000548 <main+0xb4>)
 80004e2:	f003 f85c 	bl	800359e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 80004e6:	2201      	movs	r2, #1
 80004e8:	4916      	ldr	r1, [pc, #88]	@ (8000544 <main+0xb0>)
 80004ea:	4818      	ldr	r0, [pc, #96]	@ (800054c <main+0xb8>)
 80004ec:	f003 f857 	bl	800359e <HAL_UART_Receive_IT>
#endif

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f003 fdfa 	bl	80040e8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (8, sizeof(uint8_t), &myQueue01_attributes);
 80004f4:	4a16      	ldr	r2, [pc, #88]	@ (8000550 <main+0xbc>)
 80004f6:	2101      	movs	r1, #1
 80004f8:	2008      	movs	r0, #8
 80004fa:	f003 ff33 	bl	8004364 <osMessageQueueNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a14      	ldr	r2, [pc, #80]	@ (8000554 <main+0xc0>)
 8000502:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sender1 */
  sender1Handle = osThreadNew(StartSender1_Hand, NULL, &sender1_attributes);
 8000504:	4a14      	ldr	r2, [pc, #80]	@ (8000558 <main+0xc4>)
 8000506:	2100      	movs	r1, #0
 8000508:	4814      	ldr	r0, [pc, #80]	@ (800055c <main+0xc8>)
 800050a:	f003 fe53 	bl	80041b4 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a13      	ldr	r2, [pc, #76]	@ (8000560 <main+0xcc>)
 8000512:	6013      	str	r3, [r2, #0]

  /* creation of sender2 */
  sender2Handle = osThreadNew(StartSender2_Hand, NULL, &sender2_attributes);
 8000514:	4a13      	ldr	r2, [pc, #76]	@ (8000564 <main+0xd0>)
 8000516:	2100      	movs	r1, #0
 8000518:	4813      	ldr	r0, [pc, #76]	@ (8000568 <main+0xd4>)
 800051a:	f003 fe4b 	bl	80041b4 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a12      	ldr	r2, [pc, #72]	@ (800056c <main+0xd8>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of Receive */
  ReceiveHandle = osThreadNew(StartReceive_Hand, NULL, &Receive_attributes);
 8000524:	4a12      	ldr	r2, [pc, #72]	@ (8000570 <main+0xdc>)
 8000526:	2100      	movs	r1, #0
 8000528:	4812      	ldr	r0, [pc, #72]	@ (8000574 <main+0xe0>)
 800052a:	f003 fe43 	bl	80041b4 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a11      	ldr	r2, [pc, #68]	@ (8000578 <main+0xe4>)
 8000532:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000534:	f003 fe0a 	bl	800414c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <main+0xa4>
 800053c:	40010c00 	.word	0x40010c00
 8000540:	20000030 	.word	0x20000030
 8000544:	2000020c 	.word	0x2000020c
 8000548:	2000016c 	.word	0x2000016c
 800054c:	200001b4 	.word	0x200001b4
 8000550:	080070a0 	.word	0x080070a0
 8000554:	20000208 	.word	0x20000208
 8000558:	08007034 	.word	0x08007034
 800055c:	08000a3d 	.word	0x08000a3d
 8000560:	200001fc 	.word	0x200001fc
 8000564:	08007058 	.word	0x08007058
 8000568:	08000a75 	.word	0x08000a75
 800056c:	20000200 	.word	0x20000200
 8000570:	0800707c 	.word	0x0800707c
 8000574:	08000aad 	.word	0x08000aad
 8000578:	20000204 	.word	0x20000204

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b090      	sub	sp, #64	@ 0x40
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0318 	add.w	r3, r7, #24
 8000586:	2228      	movs	r2, #40	@ 0x28
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f006 fce6 	bl	8006f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059e:	2301      	movs	r3, #1
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005ba:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0318 	add.w	r3, r7, #24
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fdb3 	bl	8002130 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005d0:	f000 faa8 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2102      	movs	r1, #2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 f820 	bl	8002634 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005fa:	f000 fa93 	bl	8000b24 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3740      	adds	r7, #64	@ 0x40
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800060c:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <MX_I2C1_Init+0x50>)
 800060e:	4a13      	ldr	r2, [pc, #76]	@ (800065c <MX_I2C1_Init+0x54>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000612:	4b11      	ldr	r3, [pc, #68]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000614:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <MX_I2C1_Init+0x58>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000618:	4b0f      	ldr	r3, [pc, #60]	@ (8000658 <MX_I2C1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061e:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000624:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000626:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800062a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062c:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000632:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000638:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	@ (8000658 <MX_I2C1_Init+0x50>)
 8000646:	f001 f8d7 	bl	80017f8 <HAL_I2C_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000650:	f000 fa68 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000030 	.word	0x20000030
 800065c:	40005400 	.word	0x40005400
 8000660:	000186a0 	.word	0x000186a0

08000664 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000668:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <MX_SPI1_Init+0x64>)
 800066a:	4a18      	ldr	r2, [pc, #96]	@ (80006cc <MX_SPI1_Init+0x68>)
 800066c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800066e:	4b16      	ldr	r3, [pc, #88]	@ (80006c8 <MX_SPI1_Init+0x64>)
 8000670:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000674:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000676:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <MX_SPI1_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800067c:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <MX_SPI1_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_SPI1_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_SPI1_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_SPI1_Init+0x64>)
 8000690:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000694:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000696:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_SPI1_Init+0x64>)
 8000698:	2228      	movs	r2, #40	@ 0x28
 800069a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800069c:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <MX_SPI1_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006a2:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_SPI1_Init+0x64>)
 80006b0:	220a      	movs	r2, #10
 80006b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <MX_SPI1_Init+0x64>)
 80006b6:	f002 f97b 	bl	80029b0 <HAL_SPI_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006c0:	f000 fa30 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000084 	.word	0x20000084
 80006cc:	40013000 	.word	0x40013000

080006d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_TIM1_Init+0x98>)
 80006ee:	4a1f      	ldr	r2, [pc, #124]	@ (800076c <MX_TIM1_Init+0x9c>)
 80006f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000768 <MX_TIM1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_TIM1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <MX_TIM1_Init+0x98>)
 8000700:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000704:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000706:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <MX_TIM1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800070c:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <MX_TIM1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <MX_TIM1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000718:	4813      	ldr	r0, [pc, #76]	@ (8000768 <MX_TIM1_Init+0x98>)
 800071a:	f002 f9cd 	bl	8002ab8 <HAL_TIM_Base_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000724:	f000 f9fe 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000728:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	4619      	mov	r1, r3
 8000734:	480c      	ldr	r0, [pc, #48]	@ (8000768 <MX_TIM1_Init+0x98>)
 8000736:	f002 fc0b 	bl	8002f50 <HAL_TIM_ConfigClockSource>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000740:	f000 f9f0 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000744:	2300      	movs	r3, #0
 8000746:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_TIM1_Init+0x98>)
 8000752:	f002 fde1 	bl	8003318 <HAL_TIMEx_MasterConfigSynchronization>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800075c:	f000 f9e2 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000dc 	.word	0x200000dc
 800076c:	40012c00 	.word	0x40012c00

08000770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	@ 0x30
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2224      	movs	r2, #36	@ 0x24
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f006 fbec 	bl	8006f5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800078c:	4b21      	ldr	r3, [pc, #132]	@ (8000814 <MX_TIM2_Init+0xa4>)
 800078e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000794:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <MX_TIM2_Init+0xa4>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079a:	4b1e      	ldr	r3, [pc, #120]	@ (8000814 <MX_TIM2_Init+0xa4>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000814 <MX_TIM2_Init+0xa4>)
 80007a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <MX_TIM2_Init+0xa4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ae:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <MX_TIM2_Init+0xa4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007b4:	2301      	movs	r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007bc:	2301      	movs	r3, #1
 80007be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007cc:	2301      	movs	r3, #1
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	480d      	ldr	r0, [pc, #52]	@ (8000814 <MX_TIM2_Init+0xa4>)
 80007e0:	f002 fa0c 	bl	8002bfc <HAL_TIM_Encoder_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007ea:	f000 f99b 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4619      	mov	r1, r3
 80007fa:	4806      	ldr	r0, [pc, #24]	@ (8000814 <MX_TIM2_Init+0xa4>)
 80007fc:	f002 fd8c 	bl	8003318 <HAL_TIMEx_MasterConfigSynchronization>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000806:	f000 f98d 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	3730      	adds	r7, #48	@ 0x30
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000124 	.word	0x20000124

08000818 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 800081e:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <MX_USART1_UART_Init+0x50>)
 8000820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	@ (8000864 <MX_USART1_UART_Init+0x4c>)
 8000850:	f002 fdd2 	bl	80033f8 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800085a:	f000 f963 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000016c 	.word	0x2000016c
 8000868:	40013800 	.word	0x40013800

0800086c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000870:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000872:	4a12      	ldr	r2, [pc, #72]	@ (80008bc <MX_USART2_UART_Init+0x50>)
 8000874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_USART2_UART_Init+0x4c>)
 80008a4:	f002 fda8 	bl	80033f8 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ae:	f000 f939 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200001b4 	.word	0x200001b4
 80008bc:	40004400 	.word	0x40004400

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d4:	4b54      	ldr	r3, [pc, #336]	@ (8000a28 <MX_GPIO_Init+0x168>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a53      	ldr	r2, [pc, #332]	@ (8000a28 <MX_GPIO_Init+0x168>)
 80008da:	f043 0310 	orr.w	r3, r3, #16
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b51      	ldr	r3, [pc, #324]	@ (8000a28 <MX_GPIO_Init+0x168>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0310 	and.w	r3, r3, #16
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ec:	4b4e      	ldr	r3, [pc, #312]	@ (8000a28 <MX_GPIO_Init+0x168>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a4d      	ldr	r2, [pc, #308]	@ (8000a28 <MX_GPIO_Init+0x168>)
 80008f2:	f043 0320 	orr.w	r3, r3, #32
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b4b      	ldr	r3, [pc, #300]	@ (8000a28 <MX_GPIO_Init+0x168>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0320 	and.w	r3, r3, #32
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b48      	ldr	r3, [pc, #288]	@ (8000a28 <MX_GPIO_Init+0x168>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a47      	ldr	r2, [pc, #284]	@ (8000a28 <MX_GPIO_Init+0x168>)
 800090a:	f043 0304 	orr.w	r3, r3, #4
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b45      	ldr	r3, [pc, #276]	@ (8000a28 <MX_GPIO_Init+0x168>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0304 	and.w	r3, r3, #4
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091c:	4b42      	ldr	r3, [pc, #264]	@ (8000a28 <MX_GPIO_Init+0x168>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a41      	ldr	r2, [pc, #260]	@ (8000a28 <MX_GPIO_Init+0x168>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b3f      	ldr	r3, [pc, #252]	@ (8000a28 <MX_GPIO_Init+0x168>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0308 	and.w	r3, r3, #8
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_DBG_GPIO_Port, L_DBG_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800093a:	483c      	ldr	r0, [pc, #240]	@ (8000a2c <MX_GPIO_Init+0x16c>)
 800093c:	f000 ff22 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LCD_CTR_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2181      	movs	r1, #129	@ 0x81
 8000944:	483a      	ldr	r0, [pc, #232]	@ (8000a30 <MX_GPIO_Init+0x170>)
 8000946:	f000 ff1d 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_ERR_Pin|L_USR_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000950:	4838      	ldr	r0, [pc, #224]	@ (8000a34 <MX_GPIO_Init+0x174>)
 8000952:	f000 ff17 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : L_DBG_Pin */
  GPIO_InitStruct.Pin = L_DBG_Pin;
 8000956:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800095a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000960:	2301      	movs	r3, #1
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2302      	movs	r3, #2
 8000966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_DBG_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	4619      	mov	r1, r3
 800096e:	482f      	ldr	r0, [pc, #188]	@ (8000a2c <MX_GPIO_Init+0x16c>)
 8000970:	f000 fd84 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000974:	2301      	movs	r3, #1
 8000976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2302      	movs	r3, #2
 8000982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	4619      	mov	r1, r3
 800098a:	4829      	ldr	r0, [pc, #164]	@ (8000a30 <MX_GPIO_Init+0x170>)
 800098c:	f000 fd76 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_IT12_Pin BTN2_IT13_Pin BTN3_IT14_Pin BTN4_IT15_Pin */
  GPIO_InitStruct.Pin = BTN1_IT12_Pin|BTN2_IT13_Pin|BTN3_IT14_Pin|BTN4_IT15_Pin;
 8000990:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000996:	4b28      	ldr	r3, [pc, #160]	@ (8000a38 <MX_GPIO_Init+0x178>)
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4619      	mov	r1, r3
 80009a4:	4822      	ldr	r0, [pc, #136]	@ (8000a30 <MX_GPIO_Init+0x170>)
 80009a6:	f000 fd69 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN5_IT8_Pin */
  GPIO_InitStruct.Pin = BTN5_IT8_Pin;
 80009aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b0:	4b21      	ldr	r3, [pc, #132]	@ (8000a38 <MX_GPIO_Init+0x178>)
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN5_IT8_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4619      	mov	r1, r3
 80009be:	481d      	ldr	r0, [pc, #116]	@ (8000a34 <MX_GPIO_Init+0x174>)
 80009c0:	f000 fd5c 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : L_ERR_Pin L_USR_Pin */
  GPIO_InitStruct.Pin = L_ERR_Pin|L_USR_Pin;
 80009c4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	4619      	mov	r1, r3
 80009dc:	4815      	ldr	r0, [pc, #84]	@ (8000a34 <MX_GPIO_Init+0x174>)
 80009de:	f000 fd4d 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CTR_Pin */
  GPIO_InitStruct.Pin = LCD_CTR_Pin;
 80009e2:	2380      	movs	r3, #128	@ 0x80
 80009e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CTR_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	4619      	mov	r1, r3
 80009f8:	480d      	ldr	r0, [pc, #52]	@ (8000a30 <MX_GPIO_Init+0x170>)
 80009fa:	f000 fd3f 	bl	800147c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2105      	movs	r1, #5
 8000a02:	2017      	movs	r0, #23
 8000a04:	f000 fc5d 	bl	80012c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a08:	2017      	movs	r0, #23
 8000a0a:	f000 fc76 	bl	80012fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2105      	movs	r1, #5
 8000a12:	2028      	movs	r0, #40	@ 0x28
 8000a14:	f000 fc55 	bl	80012c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a18:	2028      	movs	r0, #40	@ 0x28
 8000a1a:	f000 fc6e 	bl	80012fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1e:	bf00      	nop
 8000a20:	3720      	adds	r7, #32
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40011000 	.word	0x40011000
 8000a30:	40010c00 	.word	0x40010c00
 8000a34:	40010800 	.word	0x40010800
 8000a38:	10210000 	.word	0x10210000

08000a3c <StartSender1_Hand>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSender1_Hand */
void StartSender1_Hand(void *argument)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t x = 1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  Task_action("s");
 8000a48:	4808      	ldr	r0, [pc, #32]	@ (8000a6c <StartSender1_Hand+0x30>)
 8000a4a:	f7ff fd0b 	bl	8000464 <Task_action>
	  osMessageQueuePut(myQueue01Handle, &x, 0, 200);
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <StartSender1_Hand+0x34>)
 8000a50:	6818      	ldr	r0, [r3, #0]
 8000a52:	f107 010f 	add.w	r1, r7, #15
 8000a56:	23c8      	movs	r3, #200	@ 0xc8
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f003 fd09 	bl	8004470 <osMessageQueuePut>
	  osDelay(2000);
 8000a5e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a62:	f003 fc51 	bl	8004308 <osDelay>
	  Task_action("s");
 8000a66:	bf00      	nop
 8000a68:	e7ee      	b.n	8000a48 <StartSender1_Hand+0xc>
 8000a6a:	bf00      	nop
 8000a6c:	08007010 	.word	0x08007010
 8000a70:	20000208 	.word	0x20000208

08000a74 <StartSender2_Hand>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSender2_Hand */
void StartSender2_Hand(void *argument)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSender2_Hand */
	uint8_t x = 2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  Task_action("S");
 8000a80:	4808      	ldr	r0, [pc, #32]	@ (8000aa4 <StartSender2_Hand+0x30>)
 8000a82:	f7ff fcef 	bl	8000464 <Task_action>
	  osMessageQueuePut(myQueue01Handle, &x, 0, 200);
 8000a86:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <StartSender2_Hand+0x34>)
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	f107 010f 	add.w	r1, r7, #15
 8000a8e:	23c8      	movs	r3, #200	@ 0xc8
 8000a90:	2200      	movs	r2, #0
 8000a92:	f003 fced 	bl	8004470 <osMessageQueuePut>
	  osDelay(2000);
 8000a96:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a9a:	f003 fc35 	bl	8004308 <osDelay>
	  Task_action("S");
 8000a9e:	bf00      	nop
 8000aa0:	e7ee      	b.n	8000a80 <StartSender2_Hand+0xc>
 8000aa2:	bf00      	nop
 8000aa4:	08007014 	.word	0x08007014
 8000aa8:	20000208 	.word	0x20000208

08000aac <StartReceive_Hand>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceive_Hand */
void StartReceive_Hand(void *argument)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceive_Hand */
	uint8_t res = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]
	uint8_t char_send = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	73bb      	strb	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	  Task_action("R");
 8000abc:	480e      	ldr	r0, [pc, #56]	@ (8000af8 <StartReceive_Hand+0x4c>)
 8000abe:	f7ff fcd1 	bl	8000464 <Task_action>
	  if(osMessageQueueGet(myQueue01Handle, &res, NULL, 4000) == osOK)
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <StartReceive_Hand+0x50>)
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	f107 010f 	add.w	r1, r7, #15
 8000aca:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f003 fd42 	bl	8004558 <osMessageQueueGet>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d108      	bne.n	8000aec <StartReceive_Hand+0x40>
	  {
		  char_send = res + 48;
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	3330      	adds	r3, #48	@ 0x30
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	73bb      	strb	r3, [r7, #14]
		  Task_action((char *)(&char_send));
 8000ae2:	f107 030e 	add.w	r3, r7, #14
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fcbc 	bl	8000464 <Task_action>
	  }
	  osDelay(2000);
 8000aec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000af0:	f003 fc0a 	bl	8004308 <osDelay>
	  Task_action("R");
 8000af4:	e7e2      	b.n	8000abc <StartReceive_Hand+0x10>
 8000af6:	bf00      	nop
 8000af8:	08007018 	.word	0x08007018
 8000afc:	20000208 	.word	0x20000208

08000b00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	@ (8000b20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d101      	bne.n	8000b16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b12:	f000 fae1 	bl	80010d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40000400 	.word	0x40000400

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <Error_Handler+0x8>

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b36:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <HAL_MspInit+0x68>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	4a17      	ldr	r2, [pc, #92]	@ (8000b98 <HAL_MspInit+0x68>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6193      	str	r3, [r2, #24]
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <HAL_MspInit+0x68>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <HAL_MspInit+0x68>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	4a11      	ldr	r2, [pc, #68]	@ (8000b98 <HAL_MspInit+0x68>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b58:	61d3      	str	r3, [r2, #28]
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <HAL_MspInit+0x68>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	210f      	movs	r1, #15
 8000b6a:	f06f 0001 	mvn.w	r0, #1
 8000b6e:	f000 fba8 	bl	80012c2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b72:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <HAL_MspInit+0x6c>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <HAL_MspInit+0x6c>)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010000 	.word	0x40010000

08000ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	@ 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a1d      	ldr	r2, [pc, #116]	@ (8000c30 <HAL_I2C_MspInit+0x90>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d132      	bne.n	8000c26 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <HAL_I2C_MspInit+0x94>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <HAL_I2C_MspInit+0x94>)
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_I2C_MspInit+0x94>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bd8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bde:	2312      	movs	r3, #18
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4812      	ldr	r0, [pc, #72]	@ (8000c38 <HAL_I2C_MspInit+0x98>)
 8000bee:	f000 fc45 	bl	800147c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000bf2:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <HAL_I2C_MspInit+0x9c>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfa:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c02:	f043 0302 	orr.w	r3, r3, #2
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c08:	4a0c      	ldr	r2, [pc, #48]	@ (8000c3c <HAL_I2C_MspInit+0x9c>)
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <HAL_I2C_MspInit+0x94>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	4a08      	ldr	r2, [pc, #32]	@ (8000c34 <HAL_I2C_MspInit+0x94>)
 8000c14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c18:	61d3      	str	r3, [r2, #28]
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_I2C_MspInit+0x94>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	@ 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40005400 	.word	0x40005400
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	40010000 	.word	0x40010000

08000c40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d12f      	bne.n	8000cc0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a19      	ldr	r2, [pc, #100]	@ (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000c66:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a13      	ldr	r2, [pc, #76]	@ (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c90:	23a0      	movs	r3, #160	@ 0xa0
 8000c92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480b      	ldr	r0, [pc, #44]	@ (8000cd0 <HAL_SPI_MspInit+0x90>)
 8000ca4:	f000 fbea 	bl	800147c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ca8:	2340      	movs	r3, #64	@ 0x40
 8000caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <HAL_SPI_MspInit+0x90>)
 8000cbc:	f000 fbde 	bl	800147c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3720      	adds	r7, #32
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40013000 	.word	0x40013000
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010800 	.word	0x40010800

08000cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a09      	ldr	r2, [pc, #36]	@ (8000d08 <HAL_TIM_Base_MspInit+0x34>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d10b      	bne.n	8000cfe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <HAL_TIM_Base_MspInit+0x38>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a08      	ldr	r2, [pc, #32]	@ (8000d0c <HAL_TIM_Base_MspInit+0x38>)
 8000cec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_TIM_Base_MspInit+0x38>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	40012c00 	.word	0x40012c00
 8000d0c:	40021000 	.word	0x40021000

08000d10 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d2e:	d123      	bne.n	8000d78 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d30:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	4a12      	ldr	r2, [pc, #72]	@ (8000d80 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	61d3      	str	r3, [r2, #28]
 8000d3c:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d80 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCB_T2C1_Pin|ENCA_T2C2_Pin;
 8000d60:	2303      	movs	r3, #3
 8000d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4619      	mov	r1, r3
 8000d72:	4804      	ldr	r0, [pc, #16]	@ (8000d84 <HAL_TIM_Encoder_MspInit+0x74>)
 8000d74:	f000 fb82 	bl	800147c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010800 	.word	0x40010800

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	@ 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0318 	add.w	r3, r7, #24
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a3f      	ldr	r2, [pc, #252]	@ (8000ea0 <HAL_UART_MspInit+0x118>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d13a      	bne.n	8000e1e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000da8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ea4 <HAL_UART_MspInit+0x11c>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a3d      	ldr	r2, [pc, #244]	@ (8000ea4 <HAL_UART_MspInit+0x11c>)
 8000dae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea4 <HAL_UART_MspInit+0x11c>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	4b38      	ldr	r3, [pc, #224]	@ (8000ea4 <HAL_UART_MspInit+0x11c>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a37      	ldr	r2, [pc, #220]	@ (8000ea4 <HAL_UART_MspInit+0x11c>)
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b35      	ldr	r3, [pc, #212]	@ (8000ea4 <HAL_UART_MspInit+0x11c>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0318 	add.w	r3, r7, #24
 8000dea:	4619      	mov	r1, r3
 8000dec:	482e      	ldr	r0, [pc, #184]	@ (8000ea8 <HAL_UART_MspInit+0x120>)
 8000dee:	f000 fb45 	bl	800147c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000df2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0318 	add.w	r3, r7, #24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4828      	ldr	r0, [pc, #160]	@ (8000ea8 <HAL_UART_MspInit+0x120>)
 8000e08:	f000 fb38 	bl	800147c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2105      	movs	r1, #5
 8000e10:	2025      	movs	r0, #37	@ 0x25
 8000e12:	f000 fa56 	bl	80012c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e16:	2025      	movs	r0, #37	@ 0x25
 8000e18:	f000 fa6f 	bl	80012fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e1c:	e03c      	b.n	8000e98 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a22      	ldr	r2, [pc, #136]	@ (8000eac <HAL_UART_MspInit+0x124>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d137      	bne.n	8000e98 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea4 <HAL_UART_MspInit+0x11c>)
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea4 <HAL_UART_MspInit+0x11c>)
 8000e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e32:	61d3      	str	r3, [r2, #28]
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <HAL_UART_MspInit+0x11c>)
 8000e36:	69db      	ldr	r3, [r3, #28]
 8000e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <HAL_UART_MspInit+0x11c>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a17      	ldr	r2, [pc, #92]	@ (8000ea4 <HAL_UART_MspInit+0x11c>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <HAL_UART_MspInit+0x11c>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART2_TX_Pin;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UART2_TX_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 0318 	add.w	r3, r7, #24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480f      	ldr	r0, [pc, #60]	@ (8000ea8 <HAL_UART_MspInit+0x120>)
 8000e6c:	f000 fb06 	bl	800147c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART2_RX_Pin;
 8000e70:	2308      	movs	r3, #8
 8000e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	4619      	mov	r1, r3
 8000e82:	4809      	ldr	r0, [pc, #36]	@ (8000ea8 <HAL_UART_MspInit+0x120>)
 8000e84:	f000 fafa 	bl	800147c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2105      	movs	r1, #5
 8000e8c:	2026      	movs	r0, #38	@ 0x26
 8000e8e:	f000 fa18 	bl	80012c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e92:	2026      	movs	r0, #38	@ 0x26
 8000e94:	f000 fa31 	bl	80012fa <HAL_NVIC_EnableIRQ>
}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	@ 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40013800 	.word	0x40013800
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010800 	.word	0x40010800
 8000eac:	40004400 	.word	0x40004400

08000eb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	@ 0x38
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000ec6:	4b34      	ldr	r3, [pc, #208]	@ (8000f98 <HAL_InitTick+0xe8>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a33      	ldr	r2, [pc, #204]	@ (8000f98 <HAL_InitTick+0xe8>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b31      	ldr	r3, [pc, #196]	@ (8000f98 <HAL_InitTick+0xe8>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ede:	f107 0210 	add.w	r2, r7, #16
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 fd13 	bl	8002914 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000eee:	6a3b      	ldr	r3, [r7, #32]
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d103      	bne.n	8000f00 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ef8:	f001 fce4 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8000efc:	6378      	str	r0, [r7, #52]	@ 0x34
 8000efe:	e004      	b.n	8000f0a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f00:	f001 fce0 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8000f04:	4603      	mov	r3, r0
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f0c:	4a23      	ldr	r2, [pc, #140]	@ (8000f9c <HAL_InitTick+0xec>)
 8000f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f12:	0c9b      	lsrs	r3, r3, #18
 8000f14:	3b01      	subs	r3, #1
 8000f16:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000f18:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <HAL_InitTick+0xf0>)
 8000f1a:	4a22      	ldr	r2, [pc, #136]	@ (8000fa4 <HAL_InitTick+0xf4>)
 8000f1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <HAL_InitTick+0xf0>)
 8000f20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f24:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000f26:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa0 <HAL_InitTick+0xf0>)
 8000f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f2a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <HAL_InitTick+0xf0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <HAL_InitTick+0xf0>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f38:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <HAL_InitTick+0xf0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000f3e:	4818      	ldr	r0, [pc, #96]	@ (8000fa0 <HAL_InitTick+0xf0>)
 8000f40:	f001 fdba 	bl	8002ab8 <HAL_TIM_Base_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f4a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d11b      	bne.n	8000f8a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000f52:	4813      	ldr	r0, [pc, #76]	@ (8000fa0 <HAL_InitTick+0xf0>)
 8000f54:	f001 fe00 	bl	8002b58 <HAL_TIM_Base_Start_IT>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d111      	bne.n	8000f8a <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f66:	201d      	movs	r0, #29
 8000f68:	f000 f9c7 	bl	80012fa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b0f      	cmp	r3, #15
 8000f70:	d808      	bhi.n	8000f84 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000f72:	2200      	movs	r2, #0
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	201d      	movs	r0, #29
 8000f78:	f000 f9a3 	bl	80012c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_InitTick+0xf8>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e002      	b.n	8000f8a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3738      	adds	r7, #56	@ 0x38
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	431bde83 	.word	0x431bde83
 8000fa0:	20000224 	.word	0x20000224
 8000fa4:	40000400 	.word	0x40000400
 8000fa8:	20000008 	.word	0x20000008

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN5_IT8_Pin);
 8000fe4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000fe8:	f000 fbe4 	bl	80017b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ff4:	4802      	ldr	r0, [pc, #8]	@ (8001000 <TIM3_IRQHandler+0x10>)
 8000ff6:	f001 fea3 	bl	8002d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000224 	.word	0x20000224

08001004 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <USART1_IRQHandler+0x10>)
 800100a:	f002 faed 	bl	80035e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000016c 	.word	0x2000016c

08001018 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <USART2_IRQHandler+0x10>)
 800101e:	f002 fae3 	bl	80035e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001b4 	.word	0x200001b4

0800102c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_IT12_Pin);
 8001030:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001034:	f000 fbbe 	bl	80017b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_IT13_Pin);
 8001038:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800103c:	f000 fbba 	bl	80017b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_IT14_Pin);
 8001040:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001044:	f000 fbb6 	bl	80017b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN4_IT15_Pin);
 8001048:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800104c:	f000 fbb2 	bl	80017b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001060:	f7ff fff8 	bl	8001054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001064:	480b      	ldr	r0, [pc, #44]	@ (8001094 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001066:	490c      	ldr	r1, [pc, #48]	@ (8001098 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001068:	4a0c      	ldr	r2, [pc, #48]	@ (800109c <LoopFillZerobss+0x16>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a09      	ldr	r2, [pc, #36]	@ (80010a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800107c:	4c09      	ldr	r4, [pc, #36]	@ (80010a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108a:	f005 ff6f 	bl	8006f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800108e:	f7ff fa01 	bl	8000494 <main>
  bx lr
 8001092:	4770      	bx	lr
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800109c:	080070f4 	.word	0x080070f4
  ldr r2, =_sbss
 80010a0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80010a4:	20001bb8 	.word	0x20001bb8

080010a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC1_2_IRQHandler>
	...

080010ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <HAL_Init+0x28>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a07      	ldr	r2, [pc, #28]	@ (80010d4 <HAL_Init+0x28>)
 80010b6:	f043 0310 	orr.w	r3, r3, #16
 80010ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 f8f5 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c2:	200f      	movs	r0, #15
 80010c4:	f7ff fef4 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c8:	f7ff fd32 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40022000 	.word	0x40022000

080010d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b05      	ldr	r3, [pc, #20]	@ (80010f4 <HAL_IncTick+0x1c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <HAL_IncTick+0x20>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a03      	ldr	r2, [pc, #12]	@ (80010f8 <HAL_IncTick+0x20>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	2000000c 	.word	0x2000000c
 80010f8:	2000026c 	.word	0x2000026c

080010fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001100:	4b02      	ldr	r3, [pc, #8]	@ (800110c <HAL_GetTick+0x10>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	2000026c 	.word	0x2000026c

08001110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff fff0 	bl	80010fc <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d005      	beq.n	8001136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112a:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <HAL_Delay+0x44>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001136:	bf00      	nop
 8001138:	f7ff ffe0 	bl	80010fc <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d8f7      	bhi.n	8001138 <HAL_Delay+0x28>
  {
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000000c 	.word	0x2000000c

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	@ (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0b      	blt.n	80011e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	4906      	ldr	r1, [pc, #24]	@ (80011f0 <__NVIC_EnableIRQ+0x34>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	@ (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	@ (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	@ 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	@ 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff4f 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d4:	f7ff ff64 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 80012d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ffb2 	bl	8001248 <NVIC_EncodePriority>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff81 	bl	80011f4 <__NVIC_SetPriority>
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff57 	bl	80011bc <__NVIC_EnableIRQ>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001316:	b480      	push	{r7}
 8001318:	b085      	sub	sp, #20
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d008      	beq.n	8001340 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2204      	movs	r2, #4
 8001332:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e020      	b.n	8001382 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 020e 	bic.w	r2, r2, #14
 800134e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001368:	2101      	movs	r1, #1
 800136a:	fa01 f202 	lsl.w	r2, r1, r2
 800136e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001380:	7bfb      	ldrb	r3, [r7, #15]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d005      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2204      	movs	r2, #4
 80013a8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	73fb      	strb	r3, [r7, #15]
 80013ae:	e051      	b.n	8001454 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 020e 	bic.w	r2, r2, #14
 80013be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0201 	bic.w	r2, r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a22      	ldr	r2, [pc, #136]	@ (8001460 <HAL_DMA_Abort_IT+0xd4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d029      	beq.n	800142e <HAL_DMA_Abort_IT+0xa2>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a21      	ldr	r2, [pc, #132]	@ (8001464 <HAL_DMA_Abort_IT+0xd8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d022      	beq.n	800142a <HAL_DMA_Abort_IT+0x9e>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001468 <HAL_DMA_Abort_IT+0xdc>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d01a      	beq.n	8001424 <HAL_DMA_Abort_IT+0x98>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1e      	ldr	r2, [pc, #120]	@ (800146c <HAL_DMA_Abort_IT+0xe0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d012      	beq.n	800141e <HAL_DMA_Abort_IT+0x92>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001470 <HAL_DMA_Abort_IT+0xe4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d00a      	beq.n	8001418 <HAL_DMA_Abort_IT+0x8c>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a1b      	ldr	r2, [pc, #108]	@ (8001474 <HAL_DMA_Abort_IT+0xe8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d102      	bne.n	8001412 <HAL_DMA_Abort_IT+0x86>
 800140c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001410:	e00e      	b.n	8001430 <HAL_DMA_Abort_IT+0xa4>
 8001412:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001416:	e00b      	b.n	8001430 <HAL_DMA_Abort_IT+0xa4>
 8001418:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800141c:	e008      	b.n	8001430 <HAL_DMA_Abort_IT+0xa4>
 800141e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001422:	e005      	b.n	8001430 <HAL_DMA_Abort_IT+0xa4>
 8001424:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001428:	e002      	b.n	8001430 <HAL_DMA_Abort_IT+0xa4>
 800142a:	2310      	movs	r3, #16
 800142c:	e000      	b.n	8001430 <HAL_DMA_Abort_IT+0xa4>
 800142e:	2301      	movs	r3, #1
 8001430:	4a11      	ldr	r2, [pc, #68]	@ (8001478 <HAL_DMA_Abort_IT+0xec>)
 8001432:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	4798      	blx	r3
    } 
  }
  return status;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40020008 	.word	0x40020008
 8001464:	4002001c 	.word	0x4002001c
 8001468:	40020030 	.word	0x40020030
 800146c:	40020044 	.word	0x40020044
 8001470:	40020058 	.word	0x40020058
 8001474:	4002006c 	.word	0x4002006c
 8001478:	40020000 	.word	0x40020000

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b08b      	sub	sp, #44	@ 0x2c
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800148e:	e169      	b.n	8001764 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001490:	2201      	movs	r2, #1
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	69fa      	ldr	r2, [r7, #28]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	f040 8158 	bne.w	800175e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4a9a      	ldr	r2, [pc, #616]	@ (800171c <HAL_GPIO_Init+0x2a0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d05e      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014b8:	4a98      	ldr	r2, [pc, #608]	@ (800171c <HAL_GPIO_Init+0x2a0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d875      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014be:	4a98      	ldr	r2, [pc, #608]	@ (8001720 <HAL_GPIO_Init+0x2a4>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d058      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014c4:	4a96      	ldr	r2, [pc, #600]	@ (8001720 <HAL_GPIO_Init+0x2a4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d86f      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014ca:	4a96      	ldr	r2, [pc, #600]	@ (8001724 <HAL_GPIO_Init+0x2a8>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d052      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014d0:	4a94      	ldr	r2, [pc, #592]	@ (8001724 <HAL_GPIO_Init+0x2a8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d869      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014d6:	4a94      	ldr	r2, [pc, #592]	@ (8001728 <HAL_GPIO_Init+0x2ac>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d04c      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014dc:	4a92      	ldr	r2, [pc, #584]	@ (8001728 <HAL_GPIO_Init+0x2ac>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d863      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014e2:	4a92      	ldr	r2, [pc, #584]	@ (800172c <HAL_GPIO_Init+0x2b0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d046      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014e8:	4a90      	ldr	r2, [pc, #576]	@ (800172c <HAL_GPIO_Init+0x2b0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d85d      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014ee:	2b12      	cmp	r3, #18
 80014f0:	d82a      	bhi.n	8001548 <HAL_GPIO_Init+0xcc>
 80014f2:	2b12      	cmp	r3, #18
 80014f4:	d859      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014f6:	a201      	add	r2, pc, #4	@ (adr r2, 80014fc <HAL_GPIO_Init+0x80>)
 80014f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fc:	08001577 	.word	0x08001577
 8001500:	08001551 	.word	0x08001551
 8001504:	08001563 	.word	0x08001563
 8001508:	080015a5 	.word	0x080015a5
 800150c:	080015ab 	.word	0x080015ab
 8001510:	080015ab 	.word	0x080015ab
 8001514:	080015ab 	.word	0x080015ab
 8001518:	080015ab 	.word	0x080015ab
 800151c:	080015ab 	.word	0x080015ab
 8001520:	080015ab 	.word	0x080015ab
 8001524:	080015ab 	.word	0x080015ab
 8001528:	080015ab 	.word	0x080015ab
 800152c:	080015ab 	.word	0x080015ab
 8001530:	080015ab 	.word	0x080015ab
 8001534:	080015ab 	.word	0x080015ab
 8001538:	080015ab 	.word	0x080015ab
 800153c:	080015ab 	.word	0x080015ab
 8001540:	08001559 	.word	0x08001559
 8001544:	0800156d 	.word	0x0800156d
 8001548:	4a79      	ldr	r2, [pc, #484]	@ (8001730 <HAL_GPIO_Init+0x2b4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800154e:	e02c      	b.n	80015aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e029      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	3304      	adds	r3, #4
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e024      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	3308      	adds	r3, #8
 8001568:	623b      	str	r3, [r7, #32]
          break;
 800156a:	e01f      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	330c      	adds	r3, #12
 8001572:	623b      	str	r3, [r7, #32]
          break;
 8001574:	e01a      	b.n	80015ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d102      	bne.n	8001584 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800157e:	2304      	movs	r3, #4
 8001580:	623b      	str	r3, [r7, #32]
          break;
 8001582:	e013      	b.n	80015ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d105      	bne.n	8001598 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800158c:	2308      	movs	r3, #8
 800158e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	611a      	str	r2, [r3, #16]
          break;
 8001596:	e009      	b.n	80015ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001598:	2308      	movs	r3, #8
 800159a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	615a      	str	r2, [r3, #20]
          break;
 80015a2:	e003      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
          break;
 80015a8:	e000      	b.n	80015ac <HAL_GPIO_Init+0x130>
          break;
 80015aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2bff      	cmp	r3, #255	@ 0xff
 80015b0:	d801      	bhi.n	80015b6 <HAL_GPIO_Init+0x13a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	e001      	b.n	80015ba <HAL_GPIO_Init+0x13e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3304      	adds	r3, #4
 80015ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2bff      	cmp	r3, #255	@ 0xff
 80015c0:	d802      	bhi.n	80015c8 <HAL_GPIO_Init+0x14c>
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	e002      	b.n	80015ce <HAL_GPIO_Init+0x152>
 80015c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ca:	3b08      	subs	r3, #8
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	210f      	movs	r1, #15
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	401a      	ands	r2, r3
 80015e0:	6a39      	ldr	r1, [r7, #32]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	431a      	orrs	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80b1 	beq.w	800175e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001734 <HAL_GPIO_Init+0x2b8>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a4c      	ldr	r2, [pc, #304]	@ (8001734 <HAL_GPIO_Init+0x2b8>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b4a      	ldr	r3, [pc, #296]	@ (8001734 <HAL_GPIO_Init+0x2b8>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001614:	4a48      	ldr	r2, [pc, #288]	@ (8001738 <HAL_GPIO_Init+0x2bc>)
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001620:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4013      	ands	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a40      	ldr	r2, [pc, #256]	@ (800173c <HAL_GPIO_Init+0x2c0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d013      	beq.n	8001668 <HAL_GPIO_Init+0x1ec>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a3f      	ldr	r2, [pc, #252]	@ (8001740 <HAL_GPIO_Init+0x2c4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d00d      	beq.n	8001664 <HAL_GPIO_Init+0x1e8>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a3e      	ldr	r2, [pc, #248]	@ (8001744 <HAL_GPIO_Init+0x2c8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d007      	beq.n	8001660 <HAL_GPIO_Init+0x1e4>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a3d      	ldr	r2, [pc, #244]	@ (8001748 <HAL_GPIO_Init+0x2cc>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d101      	bne.n	800165c <HAL_GPIO_Init+0x1e0>
 8001658:	2303      	movs	r3, #3
 800165a:	e006      	b.n	800166a <HAL_GPIO_Init+0x1ee>
 800165c:	2304      	movs	r3, #4
 800165e:	e004      	b.n	800166a <HAL_GPIO_Init+0x1ee>
 8001660:	2302      	movs	r3, #2
 8001662:	e002      	b.n	800166a <HAL_GPIO_Init+0x1ee>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <HAL_GPIO_Init+0x1ee>
 8001668:	2300      	movs	r3, #0
 800166a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800166c:	f002 0203 	and.w	r2, r2, #3
 8001670:	0092      	lsls	r2, r2, #2
 8001672:	4093      	lsls	r3, r2
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800167a:	492f      	ldr	r1, [pc, #188]	@ (8001738 <HAL_GPIO_Init+0x2bc>)
 800167c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001694:	4b2d      	ldr	r3, [pc, #180]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	492c      	ldr	r1, [pc, #176]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016a2:	4b2a      	ldr	r3, [pc, #168]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4928      	ldr	r1, [pc, #160]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016bc:	4b23      	ldr	r3, [pc, #140]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	4922      	ldr	r1, [pc, #136]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60cb      	str	r3, [r1, #12]
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	491e      	ldr	r1, [pc, #120]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	4918      	ldr	r1, [pc, #96]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016f2:	4b16      	ldr	r3, [pc, #88]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	4914      	ldr	r1, [pc, #80]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d021      	beq.n	8001750 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	490e      	ldr	r1, [pc, #56]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]
 8001718:	e021      	b.n	800175e <HAL_GPIO_Init+0x2e2>
 800171a:	bf00      	nop
 800171c:	10320000 	.word	0x10320000
 8001720:	10310000 	.word	0x10310000
 8001724:	10220000 	.word	0x10220000
 8001728:	10210000 	.word	0x10210000
 800172c:	10120000 	.word	0x10120000
 8001730:	10110000 	.word	0x10110000
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	40010800 	.word	0x40010800
 8001740:	40010c00 	.word	0x40010c00
 8001744:	40011000 	.word	0x40011000
 8001748:	40011400 	.word	0x40011400
 800174c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <HAL_GPIO_Init+0x304>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	43db      	mvns	r3, r3
 8001758:	4909      	ldr	r1, [pc, #36]	@ (8001780 <HAL_GPIO_Init+0x304>)
 800175a:	4013      	ands	r3, r2
 800175c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	3301      	adds	r3, #1
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176a:	fa22 f303 	lsr.w	r3, r2, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	f47f ae8e 	bne.w	8001490 <HAL_GPIO_Init+0x14>
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	372c      	adds	r7, #44	@ 0x2c
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	40010400 	.word	0x40010400

08001784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
 8001790:	4613      	mov	r3, r2
 8001792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001794:	787b      	ldrb	r3, [r7, #1]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017a0:	e003      	b.n	80017aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	041a      	lsls	r2, r3, #16
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	611a      	str	r2, [r3, #16]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017be:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ca:	4a05      	ldr	r2, [pc, #20]	@ (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f806 	bl	80017e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40010400 	.word	0x40010400

080017e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e12b      	b.n	8001a62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff f9be 	bl	8000ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2224      	movs	r2, #36	@ 0x24
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0201 	bic.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800184a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800185a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800185c:	f001 f832 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8001860:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4a81      	ldr	r2, [pc, #516]	@ (8001a6c <HAL_I2C_Init+0x274>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d807      	bhi.n	800187c <HAL_I2C_Init+0x84>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4a80      	ldr	r2, [pc, #512]	@ (8001a70 <HAL_I2C_Init+0x278>)
 8001870:	4293      	cmp	r3, r2
 8001872:	bf94      	ite	ls
 8001874:	2301      	movls	r3, #1
 8001876:	2300      	movhi	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	e006      	b.n	800188a <HAL_I2C_Init+0x92>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4a7d      	ldr	r2, [pc, #500]	@ (8001a74 <HAL_I2C_Init+0x27c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	bf94      	ite	ls
 8001884:	2301      	movls	r3, #1
 8001886:	2300      	movhi	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0e7      	b.n	8001a62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4a78      	ldr	r2, [pc, #480]	@ (8001a78 <HAL_I2C_Init+0x280>)
 8001896:	fba2 2303 	umull	r2, r3, r2, r3
 800189a:	0c9b      	lsrs	r3, r3, #18
 800189c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4a6a      	ldr	r2, [pc, #424]	@ (8001a6c <HAL_I2C_Init+0x274>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d802      	bhi.n	80018cc <HAL_I2C_Init+0xd4>
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	3301      	adds	r3, #1
 80018ca:	e009      	b.n	80018e0 <HAL_I2C_Init+0xe8>
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	4a69      	ldr	r2, [pc, #420]	@ (8001a7c <HAL_I2C_Init+0x284>)
 80018d8:	fba2 2303 	umull	r2, r3, r2, r3
 80018dc:	099b      	lsrs	r3, r3, #6
 80018de:	3301      	adds	r3, #1
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	430b      	orrs	r3, r1
 80018e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	495c      	ldr	r1, [pc, #368]	@ (8001a6c <HAL_I2C_Init+0x274>)
 80018fc:	428b      	cmp	r3, r1
 80018fe:	d819      	bhi.n	8001934 <HAL_I2C_Init+0x13c>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1e59      	subs	r1, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fbb1 f3f3 	udiv	r3, r1, r3
 800190e:	1c59      	adds	r1, r3, #1
 8001910:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001914:	400b      	ands	r3, r1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00a      	beq.n	8001930 <HAL_I2C_Init+0x138>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1e59      	subs	r1, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fbb1 f3f3 	udiv	r3, r1, r3
 8001928:	3301      	adds	r3, #1
 800192a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800192e:	e051      	b.n	80019d4 <HAL_I2C_Init+0x1dc>
 8001930:	2304      	movs	r3, #4
 8001932:	e04f      	b.n	80019d4 <HAL_I2C_Init+0x1dc>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d111      	bne.n	8001960 <HAL_I2C_Init+0x168>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1e58      	subs	r0, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6859      	ldr	r1, [r3, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	440b      	add	r3, r1
 800194a:	fbb0 f3f3 	udiv	r3, r0, r3
 800194e:	3301      	adds	r3, #1
 8001950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001954:	2b00      	cmp	r3, #0
 8001956:	bf0c      	ite	eq
 8001958:	2301      	moveq	r3, #1
 800195a:	2300      	movne	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	e012      	b.n	8001986 <HAL_I2C_Init+0x18e>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1e58      	subs	r0, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6859      	ldr	r1, [r3, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	0099      	lsls	r1, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	fbb0 f3f3 	udiv	r3, r0, r3
 8001976:	3301      	adds	r3, #1
 8001978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf0c      	ite	eq
 8001980:	2301      	moveq	r3, #1
 8001982:	2300      	movne	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_I2C_Init+0x196>
 800198a:	2301      	movs	r3, #1
 800198c:	e022      	b.n	80019d4 <HAL_I2C_Init+0x1dc>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10e      	bne.n	80019b4 <HAL_I2C_Init+0x1bc>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1e58      	subs	r0, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6859      	ldr	r1, [r3, #4]
 800199e:	460b      	mov	r3, r1
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	440b      	add	r3, r1
 80019a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a8:	3301      	adds	r3, #1
 80019aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019b2:	e00f      	b.n	80019d4 <HAL_I2C_Init+0x1dc>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1e58      	subs	r0, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6859      	ldr	r1, [r3, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	0099      	lsls	r1, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	6809      	ldr	r1, [r1, #0]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69da      	ldr	r2, [r3, #28]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6911      	ldr	r1, [r2, #16]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	68d2      	ldr	r2, [r2, #12]
 8001a0e:	4311      	orrs	r1, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	430b      	orrs	r3, r1
 8001a16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695a      	ldr	r2, [r3, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	000186a0 	.word	0x000186a0
 8001a70:	001e847f 	.word	0x001e847f
 8001a74:	003d08ff 	.word	0x003d08ff
 8001a78:	431bde83 	.word	0x431bde83
 8001a7c:	10624dd3 	.word	0x10624dd3

08001a80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	817b      	strh	r3, [r7, #10]
 8001a90:	4613      	mov	r3, r2
 8001a92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff fb32 	bl	80010fc <HAL_GetTick>
 8001a98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b20      	cmp	r3, #32
 8001aa4:	f040 80e0 	bne.w	8001c68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2319      	movs	r3, #25
 8001aae:	2201      	movs	r2, #1
 8001ab0:	4970      	ldr	r1, [pc, #448]	@ (8001c74 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 f964 	bl	8001d80 <I2C_WaitOnFlagUntilTimeout>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e0d3      	b.n	8001c6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_I2C_Master_Transmit+0x50>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e0cc      	b.n	8001c6a <HAL_I2C_Master_Transmit+0x1ea>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d007      	beq.n	8001af6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0201 	orr.w	r2, r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2221      	movs	r2, #33	@ 0x21
 8001b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2210      	movs	r2, #16
 8001b12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	893a      	ldrh	r2, [r7, #8]
 8001b26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4a50      	ldr	r2, [pc, #320]	@ (8001c78 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b38:	8979      	ldrh	r1, [r7, #10]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	6a3a      	ldr	r2, [r7, #32]
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 f89c 	bl	8001c7c <I2C_MasterRequestWrite>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e08d      	b.n	8001c6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b64:	e066      	b.n	8001c34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	6a39      	ldr	r1, [r7, #32]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 fa22 	bl	8001fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00d      	beq.n	8001b92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d107      	bne.n	8001b8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e06b      	b.n	8001c6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d11b      	bne.n	8001c08 <HAL_I2C_Master_Transmit+0x188>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d017      	beq.n	8001c08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	6a39      	ldr	r1, [r7, #32]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 fa19 	bl	8002044 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00d      	beq.n	8001c34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d107      	bne.n	8001c30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e01a      	b.n	8001c6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d194      	bne.n	8001b66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e000      	b.n	8001c6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c68:	2302      	movs	r3, #2
  }
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	00100002 	.word	0x00100002
 8001c78:	ffff0000 	.word	0xffff0000

08001c7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d006      	beq.n	8001ca6 <I2C_MasterRequestWrite+0x2a>
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d003      	beq.n	8001ca6 <I2C_MasterRequestWrite+0x2a>
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ca4:	d108      	bne.n	8001cb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e00b      	b.n	8001cd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbc:	2b12      	cmp	r3, #18
 8001cbe:	d107      	bne.n	8001cd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f84f 	bl	8001d80 <I2C_WaitOnFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00d      	beq.n	8001d04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cf6:	d103      	bne.n	8001d00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cfe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e035      	b.n	8001d70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d0c:	d108      	bne.n	8001d20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d0e:	897b      	ldrh	r3, [r7, #10]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d1c:	611a      	str	r2, [r3, #16]
 8001d1e:	e01b      	b.n	8001d58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d20:	897b      	ldrh	r3, [r7, #10]
 8001d22:	11db      	asrs	r3, r3, #7
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	f003 0306 	and.w	r3, r3, #6
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f063 030f 	orn	r3, r3, #15
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	490e      	ldr	r1, [pc, #56]	@ (8001d78 <I2C_MasterRequestWrite+0xfc>)
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f898 	bl	8001e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e010      	b.n	8001d70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d4e:	897b      	ldrh	r3, [r7, #10]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4907      	ldr	r1, [pc, #28]	@ (8001d7c <I2C_MasterRequestWrite+0x100>)
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 f888 	bl	8001e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	00010008 	.word	0x00010008
 8001d7c:	00010002 	.word	0x00010002

08001d80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d90:	e048      	b.n	8001e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d044      	beq.n	8001e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d9a:	f7ff f9af 	bl	80010fc <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d302      	bcc.n	8001db0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d139      	bne.n	8001e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	0c1b      	lsrs	r3, r3, #16
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d10d      	bne.n	8001dd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	43da      	mvns	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf0c      	ite	eq
 8001dcc:	2301      	moveq	r3, #1
 8001dce:	2300      	movne	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	e00c      	b.n	8001df0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	43da      	mvns	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	4013      	ands	r3, r2
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d116      	bne.n	8001e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	f043 0220 	orr.w	r2, r3, #32
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e023      	b.n	8001e6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d10d      	bne.n	8001e4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	43da      	mvns	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	e00c      	b.n	8001e64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	43da      	mvns	r2, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	4013      	ands	r3, r2
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d093      	beq.n	8001d92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e82:	e071      	b.n	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e92:	d123      	bne.n	8001edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ea2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001eac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec8:	f043 0204 	orr.w	r2, r3, #4
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e067      	b.n	8001fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee2:	d041      	beq.n	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ee4:	f7ff f90a 	bl	80010fc <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d302      	bcc.n	8001efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d136      	bne.n	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	0c1b      	lsrs	r3, r3, #16
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d10c      	bne.n	8001f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bf14      	ite	ne
 8001f16:	2301      	movne	r3, #1
 8001f18:	2300      	moveq	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	e00b      	b.n	8001f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	43da      	mvns	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf14      	ite	ne
 8001f30:	2301      	movne	r3, #1
 8001f32:	2300      	moveq	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d016      	beq.n	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f54:	f043 0220 	orr.w	r2, r3, #32
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e021      	b.n	8001fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	0c1b      	lsrs	r3, r3, #16
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d10c      	bne.n	8001f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf14      	ite	ne
 8001f84:	2301      	movne	r3, #1
 8001f86:	2300      	moveq	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	e00b      	b.n	8001fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4013      	ands	r3, r2
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf14      	ite	ne
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	2300      	moveq	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f47f af6d 	bne.w	8001e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fc0:	e034      	b.n	800202c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f886 	bl	80020d4 <I2C_IsAcknowledgeFailed>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e034      	b.n	800203c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d028      	beq.n	800202c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fda:	f7ff f88f 	bl	80010fc <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d302      	bcc.n	8001ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d11d      	bne.n	800202c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ffa:	2b80      	cmp	r3, #128	@ 0x80
 8001ffc:	d016      	beq.n	800202c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f043 0220 	orr.w	r2, r3, #32
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e007      	b.n	800203c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002036:	2b80      	cmp	r3, #128	@ 0x80
 8002038:	d1c3      	bne.n	8001fc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002050:	e034      	b.n	80020bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f83e 	bl	80020d4 <I2C_IsAcknowledgeFailed>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e034      	b.n	80020cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002068:	d028      	beq.n	80020bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800206a:	f7ff f847 	bl	80010fc <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	429a      	cmp	r2, r3
 8002078:	d302      	bcc.n	8002080 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d11d      	bne.n	80020bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b04      	cmp	r3, #4
 800208c:	d016      	beq.n	80020bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	f043 0220 	orr.w	r2, r3, #32
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e007      	b.n	80020cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d1c3      	bne.n	8002052 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ea:	d11b      	bne.n	8002124 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	f043 0204 	orr.w	r2, r3, #4
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e272      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8087 	beq.w	800225e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002150:	4b92      	ldr	r3, [pc, #584]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	2b04      	cmp	r3, #4
 800215a:	d00c      	beq.n	8002176 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800215c:	4b8f      	ldr	r3, [pc, #572]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b08      	cmp	r3, #8
 8002166:	d112      	bne.n	800218e <HAL_RCC_OscConfig+0x5e>
 8002168:	4b8c      	ldr	r3, [pc, #560]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002174:	d10b      	bne.n	800218e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002176:	4b89      	ldr	r3, [pc, #548]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d06c      	beq.n	800225c <HAL_RCC_OscConfig+0x12c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d168      	bne.n	800225c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e24c      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x76>
 8002198:	4b80      	ldr	r3, [pc, #512]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a7f      	ldr	r2, [pc, #508]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 800219e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	e02e      	b.n	8002204 <HAL_RCC_OscConfig+0xd4>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x98>
 80021ae:	4b7b      	ldr	r3, [pc, #492]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a7a      	ldr	r2, [pc, #488]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	4b78      	ldr	r3, [pc, #480]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a77      	ldr	r2, [pc, #476]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e01d      	b.n	8002204 <HAL_RCC_OscConfig+0xd4>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0xbc>
 80021d2:	4b72      	ldr	r3, [pc, #456]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a71      	ldr	r2, [pc, #452]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b6f      	ldr	r3, [pc, #444]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a6e      	ldr	r2, [pc, #440]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e00b      	b.n	8002204 <HAL_RCC_OscConfig+0xd4>
 80021ec:	4b6b      	ldr	r3, [pc, #428]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a6a      	ldr	r2, [pc, #424]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b68      	ldr	r3, [pc, #416]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a67      	ldr	r2, [pc, #412]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002202:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe ff76 	bl	80010fc <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002214:	f7fe ff72 	bl	80010fc <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	@ 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e200      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	4b5d      	ldr	r3, [pc, #372]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0xe4>
 8002232:	e014      	b.n	800225e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7fe ff62 	bl	80010fc <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7fe ff5e 	bl	80010fc <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	@ 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e1ec      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224e:	4b53      	ldr	r3, [pc, #332]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x10c>
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d063      	beq.n	8002332 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800226a:	4b4c      	ldr	r3, [pc, #304]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002276:	4b49      	ldr	r3, [pc, #292]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b08      	cmp	r3, #8
 8002280:	d11c      	bne.n	80022bc <HAL_RCC_OscConfig+0x18c>
 8002282:	4b46      	ldr	r3, [pc, #280]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d116      	bne.n	80022bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228e:	4b43      	ldr	r3, [pc, #268]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_RCC_OscConfig+0x176>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d001      	beq.n	80022a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e1c0      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a6:	4b3d      	ldr	r3, [pc, #244]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4939      	ldr	r1, [pc, #228]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	e03a      	b.n	8002332 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d020      	beq.n	8002306 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c4:	4b36      	ldr	r3, [pc, #216]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7fe ff17 	bl	80010fc <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d2:	f7fe ff13 	bl	80010fc <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e1a1      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e4:	4b2d      	ldr	r3, [pc, #180]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f0:	4b2a      	ldr	r3, [pc, #168]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4927      	ldr	r1, [pc, #156]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
 8002304:	e015      	b.n	8002332 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002306:	4b26      	ldr	r3, [pc, #152]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7fe fef6 	bl	80010fc <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002314:	f7fe fef2 	bl	80010fc <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e180      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002326:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d03a      	beq.n	80023b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d019      	beq.n	800237a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002346:	4b17      	ldr	r3, [pc, #92]	@ (80023a4 <HAL_RCC_OscConfig+0x274>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234c:	f7fe fed6 	bl	80010fc <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002354:	f7fe fed2 	bl	80010fc <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e160      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002366:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002372:	2001      	movs	r0, #1
 8002374:	f000 fafe 	bl	8002974 <RCC_Delay>
 8002378:	e01c      	b.n	80023b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_RCC_OscConfig+0x274>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7fe febc 	bl	80010fc <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002386:	e00f      	b.n	80023a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002388:	f7fe feb8 	bl	80010fc <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d908      	bls.n	80023a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e146      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	42420000 	.word	0x42420000
 80023a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a8:	4b92      	ldr	r3, [pc, #584]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1e9      	bne.n	8002388 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80a6 	beq.w	800250e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c6:	4b8b      	ldr	r3, [pc, #556]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10d      	bne.n	80023ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	4b88      	ldr	r3, [pc, #544]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	4a87      	ldr	r2, [pc, #540]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023dc:	61d3      	str	r3, [r2, #28]
 80023de:	4b85      	ldr	r3, [pc, #532]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ee:	4b82      	ldr	r3, [pc, #520]	@ (80025f8 <HAL_RCC_OscConfig+0x4c8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d118      	bne.n	800242c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fa:	4b7f      	ldr	r3, [pc, #508]	@ (80025f8 <HAL_RCC_OscConfig+0x4c8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a7e      	ldr	r2, [pc, #504]	@ (80025f8 <HAL_RCC_OscConfig+0x4c8>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002406:	f7fe fe79 	bl	80010fc <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240e:	f7fe fe75 	bl	80010fc <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b64      	cmp	r3, #100	@ 0x64
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e103      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002420:	4b75      	ldr	r3, [pc, #468]	@ (80025f8 <HAL_RCC_OscConfig+0x4c8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x312>
 8002434:	4b6f      	ldr	r3, [pc, #444]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a6e      	ldr	r2, [pc, #440]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	e02d      	b.n	800249e <HAL_RCC_OscConfig+0x36e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x334>
 800244a:	4b6a      	ldr	r3, [pc, #424]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4a69      	ldr	r2, [pc, #420]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	6213      	str	r3, [r2, #32]
 8002456:	4b67      	ldr	r3, [pc, #412]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a66      	ldr	r2, [pc, #408]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	f023 0304 	bic.w	r3, r3, #4
 8002460:	6213      	str	r3, [r2, #32]
 8002462:	e01c      	b.n	800249e <HAL_RCC_OscConfig+0x36e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b05      	cmp	r3, #5
 800246a:	d10c      	bne.n	8002486 <HAL_RCC_OscConfig+0x356>
 800246c:	4b61      	ldr	r3, [pc, #388]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	4a60      	ldr	r2, [pc, #384]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002472:	f043 0304 	orr.w	r3, r3, #4
 8002476:	6213      	str	r3, [r2, #32]
 8002478:	4b5e      	ldr	r3, [pc, #376]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4a5d      	ldr	r2, [pc, #372]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6213      	str	r3, [r2, #32]
 8002484:	e00b      	b.n	800249e <HAL_RCC_OscConfig+0x36e>
 8002486:	4b5b      	ldr	r3, [pc, #364]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4a5a      	ldr	r2, [pc, #360]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	6213      	str	r3, [r2, #32]
 8002492:	4b58      	ldr	r3, [pc, #352]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4a57      	ldr	r2, [pc, #348]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d015      	beq.n	80024d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a6:	f7fe fe29 	bl	80010fc <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7fe fe25 	bl	80010fc <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e0b1      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	4b4b      	ldr	r3, [pc, #300]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ee      	beq.n	80024ae <HAL_RCC_OscConfig+0x37e>
 80024d0:	e014      	b.n	80024fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d2:	f7fe fe13 	bl	80010fc <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe fe0f 	bl	80010fc <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e09b      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f0:	4b40      	ldr	r3, [pc, #256]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1ee      	bne.n	80024da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024fc:	7dfb      	ldrb	r3, [r7, #23]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d105      	bne.n	800250e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002502:	4b3c      	ldr	r3, [pc, #240]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	4a3b      	ldr	r2, [pc, #236]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800250c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 8087 	beq.w	8002626 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002518:	4b36      	ldr	r3, [pc, #216]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d061      	beq.n	80025e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d146      	bne.n	80025ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b33      	ldr	r3, [pc, #204]	@ (80025fc <HAL_RCC_OscConfig+0x4cc>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7fe fde3 	bl	80010fc <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7fe fddf 	bl	80010fc <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e06d      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254c:	4b29      	ldr	r3, [pc, #164]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f0      	bne.n	800253a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002560:	d108      	bne.n	8002574 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002562:	4b24      	ldr	r3, [pc, #144]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	4921      	ldr	r1, [pc, #132]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002574:	4b1f      	ldr	r3, [pc, #124]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a19      	ldr	r1, [r3, #32]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	430b      	orrs	r3, r1
 8002586:	491b      	ldr	r1, [pc, #108]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258c:	4b1b      	ldr	r3, [pc, #108]	@ (80025fc <HAL_RCC_OscConfig+0x4cc>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fe fdb3 	bl	80010fc <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe fdaf 	bl	80010fc <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e03d      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ac:	4b11      	ldr	r3, [pc, #68]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x46a>
 80025b8:	e035      	b.n	8002626 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <HAL_RCC_OscConfig+0x4cc>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe fd9c 	bl	80010fc <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe fd98 	bl	80010fc <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e026      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025da:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x498>
 80025e6:	e01e      	b.n	8002626 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e019      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40007000 	.word	0x40007000
 80025fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_OscConfig+0x500>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	429a      	cmp	r2, r3
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000

08002634 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0d0      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002648:	4b6a      	ldr	r3, [pc, #424]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d910      	bls.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b67      	ldr	r3, [pc, #412]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 0207 	bic.w	r2, r3, #7
 800265e:	4965      	ldr	r1, [pc, #404]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b63      	ldr	r3, [pc, #396]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0b8      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d020      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002690:	4b59      	ldr	r3, [pc, #356]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a58      	ldr	r2, [pc, #352]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800269a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a8:	4b53      	ldr	r3, [pc, #332]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a52      	ldr	r2, [pc, #328]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b4:	4b50      	ldr	r3, [pc, #320]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	494d      	ldr	r1, [pc, #308]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d040      	beq.n	8002754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b47      	ldr	r3, [pc, #284]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d115      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e07f      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f2:	4b41      	ldr	r3, [pc, #260]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e073      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002702:	4b3d      	ldr	r3, [pc, #244]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e06b      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002712:	4b39      	ldr	r3, [pc, #228]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f023 0203 	bic.w	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4936      	ldr	r1, [pc, #216]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002724:	f7fe fcea 	bl	80010fc <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	e00a      	b.n	8002742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272c:	f7fe fce6 	bl	80010fc <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e053      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	4b2d      	ldr	r3, [pc, #180]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 020c 	and.w	r2, r3, #12
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	429a      	cmp	r2, r3
 8002752:	d1eb      	bne.n	800272c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002754:	4b27      	ldr	r3, [pc, #156]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d210      	bcs.n	8002784 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b24      	ldr	r3, [pc, #144]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 0207 	bic.w	r2, r3, #7
 800276a:	4922      	ldr	r1, [pc, #136]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b20      	ldr	r3, [pc, #128]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e032      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002790:	4b19      	ldr	r3, [pc, #100]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4916      	ldr	r1, [pc, #88]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ae:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	490e      	ldr	r1, [pc, #56]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027c2:	f000 f821 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027c6:	4602      	mov	r2, r0
 80027c8:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	490a      	ldr	r1, [pc, #40]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027d4:	5ccb      	ldrb	r3, [r1, r3]
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	4a09      	ldr	r2, [pc, #36]	@ (8002800 <HAL_RCC_ClockConfig+0x1cc>)
 80027dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027de:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <HAL_RCC_ClockConfig+0x1d0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fb64 	bl	8000eb0 <HAL_InitTick>

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40021000 	.word	0x40021000
 80027fc:	080070b8 	.word	0x080070b8
 8002800:	20000004 	.word	0x20000004
 8002804:	20000008 	.word	0x20000008

08002808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002822:	4b1e      	ldr	r3, [pc, #120]	@ (800289c <HAL_RCC_GetSysClockFreq+0x94>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b04      	cmp	r3, #4
 8002830:	d002      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x30>
 8002832:	2b08      	cmp	r3, #8
 8002834:	d003      	beq.n	800283e <HAL_RCC_GetSysClockFreq+0x36>
 8002836:	e027      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800283a:	613b      	str	r3, [r7, #16]
      break;
 800283c:	e027      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	0c9b      	lsrs	r3, r3, #18
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	4a17      	ldr	r2, [pc, #92]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002848:	5cd3      	ldrb	r3, [r2, r3]
 800284a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d010      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <HAL_RCC_GetSysClockFreq+0x94>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	0c5b      	lsrs	r3, r3, #17
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	4a11      	ldr	r2, [pc, #68]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002862:	5cd3      	ldrb	r3, [r2, r3]
 8002864:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a0d      	ldr	r2, [pc, #52]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800286a:	fb03 f202 	mul.w	r2, r3, r2
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	fbb2 f3f3 	udiv	r3, r2, r3
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e004      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a0c      	ldr	r2, [pc, #48]	@ (80028ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800287c:	fb02 f303 	mul.w	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	613b      	str	r3, [r7, #16]
      break;
 8002886:	e002      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002888:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800288a:	613b      	str	r3, [r7, #16]
      break;
 800288c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288e:	693b      	ldr	r3, [r7, #16]
}
 8002890:	4618      	mov	r0, r3
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
 80028a0:	007a1200 	.word	0x007a1200
 80028a4:	080070d0 	.word	0x080070d0
 80028a8:	080070e0 	.word	0x080070e0
 80028ac:	003d0900 	.word	0x003d0900

080028b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b4:	4b02      	ldr	r3, [pc, #8]	@ (80028c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	20000004 	.word	0x20000004

080028c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028c8:	f7ff fff2 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4903      	ldr	r1, [pc, #12]	@ (80028e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000
 80028e8:	080070c8 	.word	0x080070c8

080028ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028f0:	f7ff ffde 	bl	80028b0 <HAL_RCC_GetHCLKFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b05      	ldr	r3, [pc, #20]	@ (800290c <HAL_RCC_GetPCLK2Freq+0x20>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	0adb      	lsrs	r3, r3, #11
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	4903      	ldr	r1, [pc, #12]	@ (8002910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	080070c8 	.word	0x080070c8

08002914 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	220f      	movs	r2, #15
 8002922:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002924:	4b11      	ldr	r3, [pc, #68]	@ (800296c <HAL_RCC_GetClockConfig+0x58>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002930:	4b0e      	ldr	r3, [pc, #56]	@ (800296c <HAL_RCC_GetClockConfig+0x58>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800293c:	4b0b      	ldr	r3, [pc, #44]	@ (800296c <HAL_RCC_GetClockConfig+0x58>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002948:	4b08      	ldr	r3, [pc, #32]	@ (800296c <HAL_RCC_GetClockConfig+0x58>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	08db      	lsrs	r3, r3, #3
 800294e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002956:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <HAL_RCC_GetClockConfig+0x5c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0207 	and.w	r2, r3, #7
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	40021000 	.word	0x40021000
 8002970:	40022000 	.word	0x40022000

08002974 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800297c:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <RCC_Delay+0x34>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <RCC_Delay+0x38>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	0a5b      	lsrs	r3, r3, #9
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002990:	bf00      	nop
  }
  while (Delay --);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1e5a      	subs	r2, r3, #1
 8002996:	60fa      	str	r2, [r7, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f9      	bne.n	8002990 <RCC_Delay+0x1c>
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	20000004 	.word	0x20000004
 80029ac:	10624dd3 	.word	0x10624dd3

080029b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e076      	b.n	8002ab0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d108      	bne.n	80029dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029d2:	d009      	beq.n	80029e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
 80029da:	e005      	b.n	80029e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fe f91c 	bl	8000c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6c:	ea42 0103 	orr.w	r1, r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	0c1a      	lsrs	r2, r3, #16
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f002 0204 	and.w	r2, r2, #4
 8002a8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e041      	b.n	8002b4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fe f8f8 	bl	8000cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3304      	adds	r3, #4
 8002af4:	4619      	mov	r1, r3
 8002af6:	4610      	mov	r0, r2
 8002af8:	f000 fb16 	bl	8003128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d001      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e03a      	b.n	8002be6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a18      	ldr	r2, [pc, #96]	@ (8002bf0 <HAL_TIM_Base_Start_IT+0x98>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x58>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b9a:	d009      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x58>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a14      	ldr	r2, [pc, #80]	@ (8002bf4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x58>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a13      	ldr	r2, [pc, #76]	@ (8002bf8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d111      	bne.n	8002bd4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d010      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd2:	e007      	b.n	8002be4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	40012c00 	.word	0x40012c00
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	40000800 	.word	0x40000800

08002bfc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e093      	b.n	8002d38 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d106      	bne.n	8002c2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7fe f873 	bl	8000d10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c40:	f023 0307 	bic.w	r3, r3, #7
 8002c44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4610      	mov	r0, r2
 8002c52:	f000 fa69 	bl	8003128 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c7e:	f023 0303 	bic.w	r3, r3, #3
 8002c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002c9c:	f023 030c 	bic.w	r3, r3, #12
 8002ca0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ca8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	011a      	lsls	r2, r3, #4
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	031b      	lsls	r3, r3, #12
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002cda:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d122      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d11b      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0202 	mvn.w	r2, #2
 8002d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f9b4 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f9a7 	bl	80030de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f9b6 	bl	8003102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d122      	bne.n	8002df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d11b      	bne.n	8002df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0204 	mvn.w	r2, #4
 8002dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f98a 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002ddc:	e005      	b.n	8002dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f97d 	bl	80030de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f98c 	bl	8003102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d122      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d11b      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0208 	mvn.w	r2, #8
 8002e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2204      	movs	r2, #4
 8002e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f960 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002e30:	e005      	b.n	8002e3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f953 	bl	80030de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f962 	bl	8003102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b10      	cmp	r3, #16
 8002e50:	d122      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b10      	cmp	r3, #16
 8002e5e:	d11b      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0210 	mvn.w	r2, #16
 8002e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f936 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002e84:	e005      	b.n	8002e92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f929 	bl	80030de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f938 	bl	8003102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d107      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0201 	mvn.w	r2, #1
 8002ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fd fe1e 	bl	8000b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ece:	2b80      	cmp	r3, #128	@ 0x80
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002edc:	2b80      	cmp	r3, #128	@ 0x80
 8002ede:	d107      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa7b 	bl	80033e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efa:	2b40      	cmp	r3, #64	@ 0x40
 8002efc:	d10e      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f08:	2b40      	cmp	r3, #64	@ 0x40
 8002f0a:	d107      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f8fc 	bl	8003114 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	d10e      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d107      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0220 	mvn.w	r2, #32
 8002f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fa46 	bl	80033d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_TIM_ConfigClockSource+0x1c>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e0b4      	b.n	80030d6 <HAL_TIM_ConfigClockSource+0x186>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fa4:	d03e      	beq.n	8003024 <HAL_TIM_ConfigClockSource+0xd4>
 8002fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002faa:	f200 8087 	bhi.w	80030bc <HAL_TIM_ConfigClockSource+0x16c>
 8002fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb2:	f000 8086 	beq.w	80030c2 <HAL_TIM_ConfigClockSource+0x172>
 8002fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fba:	d87f      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x16c>
 8002fbc:	2b70      	cmp	r3, #112	@ 0x70
 8002fbe:	d01a      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0xa6>
 8002fc0:	2b70      	cmp	r3, #112	@ 0x70
 8002fc2:	d87b      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x16c>
 8002fc4:	2b60      	cmp	r3, #96	@ 0x60
 8002fc6:	d050      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x11a>
 8002fc8:	2b60      	cmp	r3, #96	@ 0x60
 8002fca:	d877      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x16c>
 8002fcc:	2b50      	cmp	r3, #80	@ 0x50
 8002fce:	d03c      	beq.n	800304a <HAL_TIM_ConfigClockSource+0xfa>
 8002fd0:	2b50      	cmp	r3, #80	@ 0x50
 8002fd2:	d873      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x16c>
 8002fd4:	2b40      	cmp	r3, #64	@ 0x40
 8002fd6:	d058      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x13a>
 8002fd8:	2b40      	cmp	r3, #64	@ 0x40
 8002fda:	d86f      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x16c>
 8002fdc:	2b30      	cmp	r3, #48	@ 0x30
 8002fde:	d064      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x15a>
 8002fe0:	2b30      	cmp	r3, #48	@ 0x30
 8002fe2:	d86b      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x16c>
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d060      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x15a>
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d867      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x16c>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d05c      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x15a>
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d05a      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x15a>
 8002ff4:	e062      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003006:	f000 f968 	bl	80032da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	609a      	str	r2, [r3, #8]
      break;
 8003022:	e04f      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003034:	f000 f951 	bl	80032da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003046:	609a      	str	r2, [r3, #8]
      break;
 8003048:	e03c      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003056:	461a      	mov	r2, r3
 8003058:	f000 f8c8 	bl	80031ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2150      	movs	r1, #80	@ 0x50
 8003062:	4618      	mov	r0, r3
 8003064:	f000 f91f 	bl	80032a6 <TIM_ITRx_SetConfig>
      break;
 8003068:	e02c      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003076:	461a      	mov	r2, r3
 8003078:	f000 f8e6 	bl	8003248 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2160      	movs	r1, #96	@ 0x60
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f90f 	bl	80032a6 <TIM_ITRx_SetConfig>
      break;
 8003088:	e01c      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003096:	461a      	mov	r2, r3
 8003098:	f000 f8a8 	bl	80031ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2140      	movs	r1, #64	@ 0x40
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 f8ff 	bl	80032a6 <TIM_ITRx_SetConfig>
      break;
 80030a8:	e00c      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f000 f8f6 	bl	80032a6 <TIM_ITRx_SetConfig>
      break;
 80030ba:	e003      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      break;
 80030c0:	e000      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr
	...

08003128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a29      	ldr	r2, [pc, #164]	@ (80031e0 <TIM_Base_SetConfig+0xb8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00b      	beq.n	8003158 <TIM_Base_SetConfig+0x30>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003146:	d007      	beq.n	8003158 <TIM_Base_SetConfig+0x30>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a26      	ldr	r2, [pc, #152]	@ (80031e4 <TIM_Base_SetConfig+0xbc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d003      	beq.n	8003158 <TIM_Base_SetConfig+0x30>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a25      	ldr	r2, [pc, #148]	@ (80031e8 <TIM_Base_SetConfig+0xc0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d108      	bne.n	800316a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800315e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a1c      	ldr	r2, [pc, #112]	@ (80031e0 <TIM_Base_SetConfig+0xb8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00b      	beq.n	800318a <TIM_Base_SetConfig+0x62>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003178:	d007      	beq.n	800318a <TIM_Base_SetConfig+0x62>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a19      	ldr	r2, [pc, #100]	@ (80031e4 <TIM_Base_SetConfig+0xbc>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d003      	beq.n	800318a <TIM_Base_SetConfig+0x62>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a18      	ldr	r2, [pc, #96]	@ (80031e8 <TIM_Base_SetConfig+0xc0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d108      	bne.n	800319c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a07      	ldr	r2, [pc, #28]	@ (80031e0 <TIM_Base_SetConfig+0xb8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d103      	bne.n	80031d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	615a      	str	r2, [r3, #20]
}
 80031d6:	bf00      	nop
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	40000400 	.word	0x40000400
 80031e8:	40000800 	.word	0x40000800

080031ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f023 0201 	bic.w	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f023 030a 	bic.w	r3, r3, #10
 8003228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	621a      	str	r2, [r3, #32]
}
 800323e:	bf00      	nop
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f023 0210 	bic.w	r2, r3, #16
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	031b      	lsls	r3, r3, #12
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003284:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	621a      	str	r2, [r3, #32]
}
 800329c:	bf00      	nop
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b085      	sub	sp, #20
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f043 0307 	orr.w	r3, r3, #7
 80032c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	609a      	str	r2, [r3, #8]
}
 80032d0:	bf00      	nop
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032da:	b480      	push	{r7}
 80032dc:	b087      	sub	sp, #28
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	021a      	lsls	r2, r3, #8
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4313      	orrs	r3, r2
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	609a      	str	r2, [r3, #8]
}
 800330e:	bf00      	nop
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800332c:	2302      	movs	r3, #2
 800332e:	e046      	b.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a16      	ldr	r2, [pc, #88]	@ (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00e      	beq.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337c:	d009      	beq.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a12      	ldr	r2, [pc, #72]	@ (80033cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a10      	ldr	r2, [pc, #64]	@ (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d10c      	bne.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003398:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	40012c00 	.word	0x40012c00
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40000800 	.word	0x40000800

080033d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e042      	b.n	8003490 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fd fcb2 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2224      	movs	r2, #36	@ 0x24
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800343a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fdc5 	bl	8003fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	@ 0x28
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	4613      	mov	r3, r2
 80034a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d16d      	bne.n	8003594 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_UART_Transmit+0x2c>
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e066      	b.n	8003596 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2221      	movs	r2, #33	@ 0x21
 80034d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034d6:	f7fd fe11 	bl	80010fc <HAL_GetTick>
 80034da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	88fa      	ldrh	r2, [r7, #6]
 80034e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	88fa      	ldrh	r2, [r7, #6]
 80034e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f0:	d108      	bne.n	8003504 <HAL_UART_Transmit+0x6c>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d104      	bne.n	8003504 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	e003      	b.n	800350c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800350c:	e02a      	b.n	8003564 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	2180      	movs	r1, #128	@ 0x80
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fb14 	bl	8003b46 <UART_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e036      	b.n	8003596 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10b      	bne.n	8003546 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800353c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	3302      	adds	r3, #2
 8003542:	61bb      	str	r3, [r7, #24]
 8003544:	e007      	b.n	8003556 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	3301      	adds	r3, #1
 8003554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1cf      	bne.n	800350e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	2140      	movs	r1, #64	@ 0x40
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 fae4 	bl	8003b46 <UART_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e006      	b.n	8003596 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	e000      	b.n	8003596 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003594:	2302      	movs	r3, #2
  }
}
 8003596:	4618      	mov	r0, r3
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	4613      	mov	r3, r2
 80035aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d112      	bne.n	80035de <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_UART_Receive_IT+0x26>
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e00b      	b.n	80035e0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	461a      	mov	r2, r3
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 fb24 	bl	8003c22 <UART_Start_Receive_IT>
 80035da:	4603      	mov	r3, r0
 80035dc:	e000      	b.n	80035e0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80035de:	2302      	movs	r3, #2
  }
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b0ba      	sub	sp, #232	@ 0xe8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800360e:	2300      	movs	r3, #0
 8003610:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003614:	2300      	movs	r3, #0
 8003616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800361a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10f      	bne.n	800364e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800362e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <HAL_UART_IRQHandler+0x66>
 800363a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fc01 	bl	8003e4e <UART_Receive_IT>
      return;
 800364c:	e25b      	b.n	8003b06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800364e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 80de 	beq.w	8003814 <HAL_UART_IRQHandler+0x22c>
 8003658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d106      	bne.n	8003672 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003668:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80d1 	beq.w	8003814 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_UART_IRQHandler+0xae>
 800367e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f043 0201 	orr.w	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_UART_IRQHandler+0xd2>
 80036a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b2:	f043 0202 	orr.w	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <HAL_UART_IRQHandler+0xf6>
 80036c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d6:	f043 0204 	orr.w	r2, r3, #4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d011      	beq.n	800370e <HAL_UART_IRQHandler+0x126>
 80036ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d105      	bne.n	8003702 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003706:	f043 0208 	orr.w	r2, r3, #8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 81f2 	beq.w	8003afc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_UART_IRQHandler+0x14e>
 8003724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fb8c 	bl	8003e4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf14      	ite	ne
 8003744:	2301      	movne	r3, #1
 8003746:	2300      	moveq	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d103      	bne.n	8003762 <HAL_UART_IRQHandler+0x17a>
 800375a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d04f      	beq.n	8003802 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fa96 	bl	8003c94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d041      	beq.n	80037fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003784:	e853 3f00 	ldrex	r3, [r3]
 8003788:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800378c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003790:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003794:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3314      	adds	r3, #20
 800379e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1d9      	bne.n	8003776 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d013      	beq.n	80037f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ce:	4a7e      	ldr	r2, [pc, #504]	@ (80039c8 <HAL_UART_IRQHandler+0x3e0>)
 80037d0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd fdd8 	bl	800138c <HAL_DMA_Abort_IT>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d016      	beq.n	8003810 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037ec:	4610      	mov	r0, r2
 80037ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f0:	e00e      	b.n	8003810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f993 	bl	8003b1e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f8:	e00a      	b.n	8003810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f98f 	bl	8003b1e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003800:	e006      	b.n	8003810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f98b 	bl	8003b1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800380e:	e175      	b.n	8003afc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003810:	bf00      	nop
    return;
 8003812:	e173      	b.n	8003afc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003818:	2b01      	cmp	r3, #1
 800381a:	f040 814f 	bne.w	8003abc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800381e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 8148 	beq.w	8003abc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800382c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 8141 	beq.w	8003abc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800383a:	2300      	movs	r3, #0
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 80b6 	beq.w	80039cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800386c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 8145 	beq.w	8003b00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800387a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800387e:	429a      	cmp	r2, r3
 8003880:	f080 813e 	bcs.w	8003b00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800388a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b20      	cmp	r3, #32
 8003894:	f000 8088 	beq.w	80039a8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	330c      	adds	r3, #12
 800389e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	330c      	adds	r3, #12
 80038c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038c4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1d9      	bne.n	8003898 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3314      	adds	r3, #20
 80038ea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3314      	adds	r3, #20
 8003904:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003908:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800390c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003910:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003914:	e841 2300 	strex	r3, r2, [r1]
 8003918:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800391a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e1      	bne.n	80038e4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3314      	adds	r3, #20
 8003926:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800392a:	e853 3f00 	ldrex	r3, [r3]
 800392e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003930:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003936:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3314      	adds	r3, #20
 8003940:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003944:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003946:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800394a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003952:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e3      	bne.n	8003920 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003978:	f023 0310 	bic.w	r3, r3, #16
 800397c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	330c      	adds	r3, #12
 8003986:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800398a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800398c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003990:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e3      	bne.n	8003966 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fd fcb7 	bl	8001316 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8b6 	bl	8003b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039c4:	e09c      	b.n	8003b00 <HAL_UART_IRQHandler+0x518>
 80039c6:	bf00      	nop
 80039c8:	08003d59 	.word	0x08003d59
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 808e 	beq.w	8003b04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8089 	beq.w	8003b04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	330c      	adds	r3, #12
 80039f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a16:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e3      	bne.n	80039f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3314      	adds	r3, #20
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	623b      	str	r3, [r7, #32]
   return(result);
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3314      	adds	r3, #20
 8003a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e3      	bne.n	8003a2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	330c      	adds	r3, #12
 8003a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	e853 3f00 	ldrex	r3, [r3]
 8003a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0310 	bic.w	r3, r3, #16
 8003a86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	330c      	adds	r3, #12
 8003a90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a94:	61fa      	str	r2, [r7, #28]
 8003a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	69b9      	ldr	r1, [r7, #24]
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e3      	bne.n	8003a70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003aae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f83b 	bl	8003b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aba:	e023      	b.n	8003b04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d009      	beq.n	8003adc <HAL_UART_IRQHandler+0x4f4>
 8003ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f953 	bl	8003d80 <UART_Transmit_IT>
    return;
 8003ada:	e014      	b.n	8003b06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00e      	beq.n	8003b06 <HAL_UART_IRQHandler+0x51e>
 8003ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f992 	bl	8003e1e <UART_EndTransmit_IT>
    return;
 8003afa:	e004      	b.n	8003b06 <HAL_UART_IRQHandler+0x51e>
    return;
 8003afc:	bf00      	nop
 8003afe:	e002      	b.n	8003b06 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b00:	bf00      	nop
 8003b02:	e000      	b.n	8003b06 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b04:	bf00      	nop
  }
}
 8003b06:	37e8      	adds	r7, #232	@ 0xe8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b090      	sub	sp, #64	@ 0x40
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	4613      	mov	r3, r2
 8003b54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b56:	e050      	b.n	8003bfa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5e:	d04c      	beq.n	8003bfa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d007      	beq.n	8003b76 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b66:	f7fd fac9 	bl	80010fc <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d241      	bcs.n	8003bfa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	330c      	adds	r3, #12
 8003b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	330c      	adds	r3, #12
 8003b94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b96:	637a      	str	r2, [r7, #52]	@ 0x34
 8003b98:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b9e:	e841 2300 	strex	r3, r2, [r1]
 8003ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e5      	bne.n	8003b76 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3314      	adds	r3, #20
 8003bb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3314      	adds	r3, #20
 8003bc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003bca:	623a      	str	r2, [r7, #32]
 8003bcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	69f9      	ldr	r1, [r7, #28]
 8003bd0:	6a3a      	ldr	r2, [r7, #32]
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e5      	bne.n	8003baa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e00f      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4013      	ands	r3, r2
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	bf0c      	ite	eq
 8003c0a:	2301      	moveq	r3, #1
 8003c0c:	2300      	movne	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d09f      	beq.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3740      	adds	r7, #64	@ 0x40
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b085      	sub	sp, #20
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	88fa      	ldrh	r2, [r7, #6]
 8003c3a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	88fa      	ldrh	r2, [r7, #6]
 8003c40:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2222      	movs	r2, #34	@ 0x22
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c66:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695a      	ldr	r2, [r3, #20]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0220 	orr.w	r2, r2, #32
 8003c86:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr

08003c94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b095      	sub	sp, #84	@ 0x54
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	330c      	adds	r3, #12
 8003ca2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	330c      	adds	r3, #12
 8003cba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cbc:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e5      	bne.n	8003c9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3314      	adds	r3, #20
 8003cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3314      	adds	r3, #20
 8003cee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e5      	bne.n	8003cd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d119      	bne.n	8003d40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	e853 3f00 	ldrex	r3, [r3]
 8003d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f023 0310 	bic.w	r3, r3, #16
 8003d22:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d2c:	61ba      	str	r2, [r7, #24]
 8003d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	6979      	ldr	r1, [r7, #20]
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	613b      	str	r3, [r7, #16]
   return(result);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e5      	bne.n	8003d0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d4e:	bf00      	nop
 8003d50:	3754      	adds	r7, #84	@ 0x54
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f7ff fed3 	bl	8003b1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d78:	bf00      	nop
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b21      	cmp	r3, #33	@ 0x21
 8003d92:	d13e      	bne.n	8003e12 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d9c:	d114      	bne.n	8003dc8 <UART_Transmit_IT+0x48>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d110      	bne.n	8003dc8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	1c9a      	adds	r2, r3, #2
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	621a      	str	r2, [r3, #32]
 8003dc6:	e008      	b.n	8003dda <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	1c59      	adds	r1, r3, #1
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6211      	str	r1, [r2, #32]
 8003dd2:	781a      	ldrb	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	4619      	mov	r1, r3
 8003de8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10f      	bne.n	8003e0e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dfc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff fe64 	bl	8003b0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b08c      	sub	sp, #48	@ 0x30
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b22      	cmp	r3, #34	@ 0x22
 8003e60:	f040 80ae 	bne.w	8003fc0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6c:	d117      	bne.n	8003e9e <UART_Receive_IT+0x50>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d113      	bne.n	8003e9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e96:	1c9a      	adds	r2, r3, #2
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e9c:	e026      	b.n	8003eec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb0:	d007      	beq.n	8003ec2 <UART_Receive_IT+0x74>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <UART_Receive_IT+0x82>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	e008      	b.n	8003ee2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d15d      	bne.n	8003fbc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0220 	bic.w	r2, r2, #32
 8003f0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d135      	bne.n	8003fb2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	330c      	adds	r3, #12
 8003f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	e853 3f00 	ldrex	r3, [r3]
 8003f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f023 0310 	bic.w	r3, r3, #16
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f6c:	623a      	str	r2, [r7, #32]
 8003f6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	69f9      	ldr	r1, [r7, #28]
 8003f72:	6a3a      	ldr	r2, [r7, #32]
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e5      	bne.n	8003f4c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d10a      	bne.n	8003fa4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff fdc0 	bl	8003b30 <HAL_UARTEx_RxEventCallback>
 8003fb0:	e002      	b.n	8003fb8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fc f9ca 	bl	800034c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e002      	b.n	8003fc2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e000      	b.n	8003fc2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003fc0:	2302      	movs	r3, #2
  }
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3730      	adds	r7, #48	@ 0x30
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004006:	f023 030c 	bic.w	r3, r3, #12
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	430b      	orrs	r3, r1
 8004012:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a2c      	ldr	r2, [pc, #176]	@ (80040e0 <UART_SetConfig+0x114>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d103      	bne.n	800403c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004034:	f7fe fc5a 	bl	80028ec <HAL_RCC_GetPCLK2Freq>
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	e002      	b.n	8004042 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800403c:	f7fe fc42 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8004040:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	009a      	lsls	r2, r3, #2
 800404c:	441a      	add	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
 8004058:	4a22      	ldr	r2, [pc, #136]	@ (80040e4 <UART_SetConfig+0x118>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	0119      	lsls	r1, r3, #4
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	009a      	lsls	r2, r3, #2
 800406c:	441a      	add	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	fbb2 f2f3 	udiv	r2, r2, r3
 8004078:	4b1a      	ldr	r3, [pc, #104]	@ (80040e4 <UART_SetConfig+0x118>)
 800407a:	fba3 0302 	umull	r0, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2064      	movs	r0, #100	@ 0x64
 8004082:	fb00 f303 	mul.w	r3, r0, r3
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	3332      	adds	r3, #50	@ 0x32
 800408c:	4a15      	ldr	r2, [pc, #84]	@ (80040e4 <UART_SetConfig+0x118>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004098:	4419      	add	r1, r3
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	009a      	lsls	r2, r3, #2
 80040a4:	441a      	add	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b0:	4b0c      	ldr	r3, [pc, #48]	@ (80040e4 <UART_SetConfig+0x118>)
 80040b2:	fba3 0302 	umull	r0, r3, r3, r2
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	2064      	movs	r0, #100	@ 0x64
 80040ba:	fb00 f303 	mul.w	r3, r0, r3
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	3332      	adds	r3, #50	@ 0x32
 80040c4:	4a07      	ldr	r2, [pc, #28]	@ (80040e4 <UART_SetConfig+0x118>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	f003 020f 	and.w	r2, r3, #15
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	440a      	add	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40013800 	.word	0x40013800
 80040e4:	51eb851f 	.word	0x51eb851f

080040e8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ee:	f3ef 8305 	mrs	r3, IPSR
 80040f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80040f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10f      	bne.n	800411a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040fa:	f3ef 8310 	mrs	r3, PRIMASK
 80040fe:	607b      	str	r3, [r7, #4]
  return(result);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <osKernelInitialize+0x32>
 8004106:	4b10      	ldr	r3, [pc, #64]	@ (8004148 <osKernelInitialize+0x60>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d109      	bne.n	8004122 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800410e:	f3ef 8311 	mrs	r3, BASEPRI
 8004112:	603b      	str	r3, [r7, #0]
  return(result);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800411a:	f06f 0305 	mvn.w	r3, #5
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	e00c      	b.n	800413c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004122:	4b09      	ldr	r3, [pc, #36]	@ (8004148 <osKernelInitialize+0x60>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d105      	bne.n	8004136 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800412a:	4b07      	ldr	r3, [pc, #28]	@ (8004148 <osKernelInitialize+0x60>)
 800412c:	2201      	movs	r2, #1
 800412e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	e002      	b.n	800413c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004136:	f04f 33ff 	mov.w	r3, #4294967295
 800413a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800413c:	68fb      	ldr	r3, [r7, #12]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr
 8004148:	20000270 	.word	0x20000270

0800414c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004152:	f3ef 8305 	mrs	r3, IPSR
 8004156:	60bb      	str	r3, [r7, #8]
  return(result);
 8004158:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10f      	bne.n	800417e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800415e:	f3ef 8310 	mrs	r3, PRIMASK
 8004162:	607b      	str	r3, [r7, #4]
  return(result);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <osKernelStart+0x32>
 800416a:	4b11      	ldr	r3, [pc, #68]	@ (80041b0 <osKernelStart+0x64>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d109      	bne.n	8004186 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004172:	f3ef 8311 	mrs	r3, BASEPRI
 8004176:	603b      	str	r3, [r7, #0]
  return(result);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <osKernelStart+0x3a>
    stat = osErrorISR;
 800417e:	f06f 0305 	mvn.w	r3, #5
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e00e      	b.n	80041a4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004186:	4b0a      	ldr	r3, [pc, #40]	@ (80041b0 <osKernelStart+0x64>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d107      	bne.n	800419e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800418e:	4b08      	ldr	r3, [pc, #32]	@ (80041b0 <osKernelStart+0x64>)
 8004190:	2202      	movs	r2, #2
 8004192:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004194:	f001 fabc 	bl	8005710 <vTaskStartScheduler>
      stat = osOK;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e002      	b.n	80041a4 <osKernelStart+0x58>
    } else {
      stat = osError;
 800419e:	f04f 33ff 	mov.w	r3, #4294967295
 80041a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80041a4:	68fb      	ldr	r3, [r7, #12]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000270 	.word	0x20000270

080041b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b092      	sub	sp, #72	@ 0x48
 80041b8:	af04      	add	r7, sp, #16
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041c4:	f3ef 8305 	mrs	r3, IPSR
 80041c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f040 8094 	bne.w	80042fa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041d2:	f3ef 8310 	mrs	r3, PRIMASK
 80041d6:	623b      	str	r3, [r7, #32]
  return(result);
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f040 808d 	bne.w	80042fa <osThreadNew+0x146>
 80041e0:	4b48      	ldr	r3, [pc, #288]	@ (8004304 <osThreadNew+0x150>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d106      	bne.n	80041f6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041e8:	f3ef 8311 	mrs	r3, BASEPRI
 80041ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f040 8082 	bne.w	80042fa <osThreadNew+0x146>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d07e      	beq.n	80042fa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80041fc:	2380      	movs	r3, #128	@ 0x80
 80041fe:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004200:	2318      	movs	r3, #24
 8004202:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004204:	2300      	movs	r3, #0
 8004206:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004208:	f107 031b 	add.w	r3, r7, #27
 800420c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800420e:	f04f 33ff 	mov.w	r3, #4294967295
 8004212:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d045      	beq.n	80042a6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <osThreadNew+0x74>
        name = attr->name;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <osThreadNew+0x9a>
 800423c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800423e:	2b38      	cmp	r3, #56	@ 0x38
 8004240:	d805      	bhi.n	800424e <osThreadNew+0x9a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <osThreadNew+0x9e>
        return (NULL);
 800424e:	2300      	movs	r3, #0
 8004250:	e054      	b.n	80042fc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00e      	beq.n	8004288 <osThreadNew+0xd4>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	2b5b      	cmp	r3, #91	@ 0x5b
 8004270:	d90a      	bls.n	8004288 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004276:	2b00      	cmp	r3, #0
 8004278:	d006      	beq.n	8004288 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <osThreadNew+0xd4>
        mem = 1;
 8004282:	2301      	movs	r3, #1
 8004284:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004286:	e010      	b.n	80042aa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10c      	bne.n	80042aa <osThreadNew+0xf6>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d108      	bne.n	80042aa <osThreadNew+0xf6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d104      	bne.n	80042aa <osThreadNew+0xf6>
          mem = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042a4:	e001      	b.n	80042aa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80042aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d110      	bne.n	80042d2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042b8:	9202      	str	r2, [sp, #8]
 80042ba:	9301      	str	r3, [sp, #4]
 80042bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042c4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f001 f850 	bl	800536c <xTaskCreateStatic>
 80042cc:	4603      	mov	r3, r0
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e013      	b.n	80042fa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80042d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d110      	bne.n	80042fa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042da:	b29a      	uxth	r2, r3
 80042dc:	f107 0314 	add.w	r3, r7, #20
 80042e0:	9301      	str	r3, [sp, #4]
 80042e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f001 f89d 	bl	800542a <xTaskCreate>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d001      	beq.n	80042fa <osThreadNew+0x146>
          hTask = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042fa:	697b      	ldr	r3, [r7, #20]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3738      	adds	r7, #56	@ 0x38
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20000270 	.word	0x20000270

08004308 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004310:	f3ef 8305 	mrs	r3, IPSR
 8004314:	613b      	str	r3, [r7, #16]
  return(result);
 8004316:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10f      	bne.n	800433c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800431c:	f3ef 8310 	mrs	r3, PRIMASK
 8004320:	60fb      	str	r3, [r7, #12]
  return(result);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d109      	bne.n	800433c <osDelay+0x34>
 8004328:	4b0d      	ldr	r3, [pc, #52]	@ (8004360 <osDelay+0x58>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d109      	bne.n	8004344 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004330:	f3ef 8311 	mrs	r3, BASEPRI
 8004334:	60bb      	str	r3, [r7, #8]
  return(result);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <osDelay+0x3c>
    stat = osErrorISR;
 800433c:	f06f 0305 	mvn.w	r3, #5
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	e007      	b.n	8004354 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <osDelay+0x4c>
      vTaskDelay(ticks);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f001 f9a8 	bl	80056a4 <vTaskDelay>
    }
  }

  return (stat);
 8004354:	697b      	ldr	r3, [r7, #20]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000270 	.word	0x20000270

08004364 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004364:	b580      	push	{r7, lr}
 8004366:	b08c      	sub	sp, #48	@ 0x30
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004374:	f3ef 8305 	mrs	r3, IPSR
 8004378:	61bb      	str	r3, [r7, #24]
  return(result);
 800437a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800437c:	2b00      	cmp	r3, #0
 800437e:	d16f      	bne.n	8004460 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004380:	f3ef 8310 	mrs	r3, PRIMASK
 8004384:	617b      	str	r3, [r7, #20]
  return(result);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d169      	bne.n	8004460 <osMessageQueueNew+0xfc>
 800438c:	4b37      	ldr	r3, [pc, #220]	@ (800446c <osMessageQueueNew+0x108>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d105      	bne.n	80043a0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004394:	f3ef 8311 	mrs	r3, BASEPRI
 8004398:	613b      	str	r3, [r7, #16]
  return(result);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d15f      	bne.n	8004460 <osMessageQueueNew+0xfc>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d05c      	beq.n	8004460 <osMessageQueueNew+0xfc>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d059      	beq.n	8004460 <osMessageQueueNew+0xfc>
    mem = -1;
 80043ac:	f04f 33ff 	mov.w	r3, #4294967295
 80043b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d029      	beq.n	800440c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d012      	beq.n	80043e6 <osMessageQueueNew+0x82>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	2b4f      	cmp	r3, #79	@ 0x4f
 80043c6:	d90e      	bls.n	80043e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	695a      	ldr	r2, [r3, #20]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	429a      	cmp	r2, r3
 80043de:	d302      	bcc.n	80043e6 <osMessageQueueNew+0x82>
        mem = 1;
 80043e0:	2301      	movs	r3, #1
 80043e2:	623b      	str	r3, [r7, #32]
 80043e4:	e014      	b.n	8004410 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d110      	bne.n	8004410 <osMessageQueueNew+0xac>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10c      	bne.n	8004410 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d108      	bne.n	8004410 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d104      	bne.n	8004410 <osMessageQueueNew+0xac>
          mem = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	623b      	str	r3, [r7, #32]
 800440a:	e001      	b.n	8004410 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d10b      	bne.n	800442e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2100      	movs	r1, #0
 8004420:	9100      	str	r1, [sp, #0]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 fa55 	bl	80048d4 <xQueueGenericCreateStatic>
 800442a:	6278      	str	r0, [r7, #36]	@ 0x24
 800442c:	e008      	b.n	8004440 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d105      	bne.n	8004440 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004434:	2200      	movs	r2, #0
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 fac7 	bl	80049cc <xQueueGenericCreate>
 800443e:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00c      	beq.n	8004460 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <osMessageQueueNew+0xf0>
        name = attr->name;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	e001      	b.n	8004458 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004454:	2300      	movs	r3, #0
 8004456:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004458:	69f9      	ldr	r1, [r7, #28]
 800445a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800445c:	f000 ff2a 	bl	80052b4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004462:	4618      	mov	r0, r3
 8004464:	3728      	adds	r7, #40	@ 0x28
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000270 	.word	0x20000270

08004470 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	@ 0x28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	4613      	mov	r3, r2
 800447e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004484:	2300      	movs	r3, #0
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004488:	f3ef 8305 	mrs	r3, IPSR
 800448c:	61fb      	str	r3, [r7, #28]
  return(result);
 800448e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10f      	bne.n	80044b4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004494:	f3ef 8310 	mrs	r3, PRIMASK
 8004498:	61bb      	str	r3, [r7, #24]
  return(result);
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <osMessageQueuePut+0x44>
 80044a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004550 <osMessageQueuePut+0xe0>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d12e      	bne.n	8004506 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044a8:	f3ef 8311 	mrs	r3, BASEPRI
 80044ac:	617b      	str	r3, [r7, #20]
  return(result);
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d028      	beq.n	8004506 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <osMessageQueuePut+0x56>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <osMessageQueuePut+0x56>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80044c6:	f06f 0303 	mvn.w	r3, #3
 80044ca:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80044cc:	e039      	b.n	8004542 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80044d2:	f107 0210 	add.w	r2, r7, #16
 80044d6:	2300      	movs	r3, #0
 80044d8:	68b9      	ldr	r1, [r7, #8]
 80044da:	6a38      	ldr	r0, [r7, #32]
 80044dc:	f000 fbda 	bl	8004c94 <xQueueGenericSendFromISR>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d003      	beq.n	80044ee <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80044e6:	f06f 0302 	mvn.w	r3, #2
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80044ec:	e029      	b.n	8004542 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d026      	beq.n	8004542 <osMessageQueuePut+0xd2>
 80044f4:	4b17      	ldr	r3, [pc, #92]	@ (8004554 <osMessageQueuePut+0xe4>)
 80044f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004504:	e01d      	b.n	8004542 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <osMessageQueuePut+0xa2>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d103      	bne.n	800451a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004512:	f06f 0303 	mvn.w	r3, #3
 8004516:	627b      	str	r3, [r7, #36]	@ 0x24
 8004518:	e014      	b.n	8004544 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800451a:	2300      	movs	r3, #0
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	68b9      	ldr	r1, [r7, #8]
 8004520:	6a38      	ldr	r0, [r7, #32]
 8004522:	f000 fab5 	bl	8004a90 <xQueueGenericSend>
 8004526:	4603      	mov	r3, r0
 8004528:	2b01      	cmp	r3, #1
 800452a:	d00b      	beq.n	8004544 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004532:	f06f 0301 	mvn.w	r3, #1
 8004536:	627b      	str	r3, [r7, #36]	@ 0x24
 8004538:	e004      	b.n	8004544 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800453a:	f06f 0302 	mvn.w	r3, #2
 800453e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004540:	e000      	b.n	8004544 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004542:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004546:	4618      	mov	r0, r3
 8004548:	3728      	adds	r7, #40	@ 0x28
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000270 	.word	0x20000270
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	@ 0x28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800456a:	2300      	movs	r3, #0
 800456c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800456e:	f3ef 8305 	mrs	r3, IPSR
 8004572:	61fb      	str	r3, [r7, #28]
  return(result);
 8004574:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10f      	bne.n	800459a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800457a:	f3ef 8310 	mrs	r3, PRIMASK
 800457e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <osMessageQueueGet+0x42>
 8004586:	4b2b      	ldr	r3, [pc, #172]	@ (8004634 <osMessageQueueGet+0xdc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d12e      	bne.n	80045ec <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800458e:	f3ef 8311 	mrs	r3, BASEPRI
 8004592:	617b      	str	r3, [r7, #20]
  return(result);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d028      	beq.n	80045ec <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <osMessageQueueGet+0x54>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <osMessageQueueGet+0x54>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80045ac:	f06f 0303 	mvn.w	r3, #3
 80045b0:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80045b2:	e038      	b.n	8004626 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80045b4:	2300      	movs	r3, #0
 80045b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80045b8:	f107 0310 	add.w	r3, r7, #16
 80045bc:	461a      	mov	r2, r3
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	6a38      	ldr	r0, [r7, #32]
 80045c2:	f000 fce5 	bl	8004f90 <xQueueReceiveFromISR>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d003      	beq.n	80045d4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80045cc:	f06f 0302 	mvn.w	r3, #2
 80045d0:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80045d2:	e028      	b.n	8004626 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d025      	beq.n	8004626 <osMessageQueueGet+0xce>
 80045da:	4b17      	ldr	r3, [pc, #92]	@ (8004638 <osMessageQueueGet+0xe0>)
 80045dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80045ea:	e01c      	b.n	8004626 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <osMessageQueueGet+0xa0>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d103      	bne.n	8004600 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80045f8:	f06f 0303 	mvn.w	r3, #3
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80045fe:	e013      	b.n	8004628 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	6a38      	ldr	r0, [r7, #32]
 8004606:	f000 fbe1 	bl	8004dcc <xQueueReceive>
 800460a:	4603      	mov	r3, r0
 800460c:	2b01      	cmp	r3, #1
 800460e:	d00b      	beq.n	8004628 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004616:	f06f 0301 	mvn.w	r3, #1
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24
 800461c:	e004      	b.n	8004628 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800461e:	f06f 0302 	mvn.w	r3, #2
 8004622:	627b      	str	r3, [r7, #36]	@ 0x24
 8004624:	e000      	b.n	8004628 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004626:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800462a:	4618      	mov	r0, r3
 800462c:	3728      	adds	r7, #40	@ 0x28
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000270 	.word	0x20000270
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4a06      	ldr	r2, [pc, #24]	@ (8004664 <vApplicationGetIdleTaskMemory+0x28>)
 800464c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	4a05      	ldr	r2, [pc, #20]	@ (8004668 <vApplicationGetIdleTaskMemory+0x2c>)
 8004652:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2280      	movs	r2, #128	@ 0x80
 8004658:	601a      	str	r2, [r3, #0]
}
 800465a:	bf00      	nop
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr
 8004664:	20000274 	.word	0x20000274
 8004668:	200002d0 	.word	0x200002d0

0800466c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4a07      	ldr	r2, [pc, #28]	@ (8004698 <vApplicationGetTimerTaskMemory+0x2c>)
 800467c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	4a06      	ldr	r2, [pc, #24]	@ (800469c <vApplicationGetTimerTaskMemory+0x30>)
 8004682:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800468a:	601a      	str	r2, [r3, #0]
}
 800468c:	bf00      	nop
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	200004d0 	.word	0x200004d0
 800469c:	2000052c 	.word	0x2000052c

080046a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f103 0208 	add.w	r2, r3, #8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f04f 32ff 	mov.w	r2, #4294967295
 80046b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f103 0208 	add.w	r2, r3, #8
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f103 0208 	add.w	r2, r3, #8
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr

080046de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046f6:	b480      	push	{r7}
 80046f8:	b085      	sub	sp, #20
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	601a      	str	r2, [r3, #0]
}
 8004732:	bf00      	nop
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr

0800473c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004752:	d103      	bne.n	800475c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	e00c      	b.n	8004776 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3308      	adds	r3, #8
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	e002      	b.n	800476a <vListInsert+0x2e>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	429a      	cmp	r2, r3
 8004774:	d2f6      	bcs.n	8004764 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	601a      	str	r2, [r3, #0]
}
 80047a2:	bf00      	nop
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6892      	ldr	r2, [r2, #8]
 80047c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6852      	ldr	r2, [r2, #4]
 80047cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d103      	bne.n	80047e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	1e5a      	subs	r2, r3, #1
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr
	...

08004800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10b      	bne.n	800482c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004826:	bf00      	nop
 8004828:	bf00      	nop
 800482a:	e7fd      	b.n	8004828 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800482c:	f002 f8b6 	bl	800699c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004838:	68f9      	ldr	r1, [r7, #12]
 800483a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800483c:	fb01 f303 	mul.w	r3, r1, r3
 8004840:	441a      	add	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485c:	3b01      	subs	r3, #1
 800485e:	68f9      	ldr	r1, [r7, #12]
 8004860:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004862:	fb01 f303 	mul.w	r3, r1, r3
 8004866:	441a      	add	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	22ff      	movs	r2, #255	@ 0xff
 8004870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	22ff      	movs	r2, #255	@ 0xff
 8004878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d114      	bne.n	80048ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d01a      	beq.n	80048c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3310      	adds	r3, #16
 800488e:	4618      	mov	r0, r3
 8004890:	f001 f9d0 	bl	8005c34 <xTaskRemoveFromEventList>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d012      	beq.n	80048c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800489a:	4b0d      	ldr	r3, [pc, #52]	@ (80048d0 <xQueueGenericReset+0xd0>)
 800489c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	e009      	b.n	80048c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3310      	adds	r3, #16
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fef5 	bl	80046a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3324      	adds	r3, #36	@ 0x24
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff fef0 	bl	80046a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048c0:	f002 f89c 	bl	80069fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048c4:	2301      	movs	r3, #1
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	e000ed04 	.word	0xe000ed04

080048d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08e      	sub	sp, #56	@ 0x38
 80048d8:	af02      	add	r7, sp, #8
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10b      	bne.n	8004900 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	e7fd      	b.n	80048fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10b      	bne.n	800491e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	e7fd      	b.n	800491a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <xQueueGenericCreateStatic+0x56>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <xQueueGenericCreateStatic+0x5a>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <xQueueGenericCreateStatic+0x5c>
 800492e:	2300      	movs	r3, #0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10b      	bne.n	800494c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	623b      	str	r3, [r7, #32]
}
 8004946:	bf00      	nop
 8004948:	bf00      	nop
 800494a:	e7fd      	b.n	8004948 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <xQueueGenericCreateStatic+0x84>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <xQueueGenericCreateStatic+0x88>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <xQueueGenericCreateStatic+0x8a>
 800495c:	2300      	movs	r3, #0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10b      	bne.n	800497a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	61fb      	str	r3, [r7, #28]
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	e7fd      	b.n	8004976 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800497a:	2350      	movs	r3, #80	@ 0x50
 800497c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b50      	cmp	r3, #80	@ 0x50
 8004982:	d00b      	beq.n	800499c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	61bb      	str	r3, [r7, #24]
}
 8004996:	bf00      	nop
 8004998:	bf00      	nop
 800499a:	e7fd      	b.n	8004998 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80049a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049ae:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80049b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	4613      	mov	r3, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	68b9      	ldr	r1, [r7, #8]
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f844 	bl	8004a4a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80049c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3730      	adds	r7, #48	@ 0x30
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	@ 0x28
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	4613      	mov	r3, r2
 80049d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10b      	bne.n	80049f8 <xQueueGenericCreate+0x2c>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	613b      	str	r3, [r7, #16]
}
 80049f2:	bf00      	nop
 80049f4:	bf00      	nop
 80049f6:	e7fd      	b.n	80049f4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d102      	bne.n	8004a04 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	e004      	b.n	8004a0e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	3350      	adds	r3, #80	@ 0x50
 8004a12:	4618      	mov	r0, r3
 8004a14:	f002 f8c4 	bl	8006ba0 <pvPortMalloc>
 8004a18:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00f      	beq.n	8004a40 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	3350      	adds	r3, #80	@ 0x50
 8004a24:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a2e:	79fa      	ldrb	r2, [r7, #7]
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	4613      	mov	r3, r2
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f805 	bl	8004a4a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a40:	69bb      	ldr	r3, [r7, #24]
	}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3720      	adds	r7, #32
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	607a      	str	r2, [r7, #4]
 8004a56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d103      	bne.n	8004a66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	e002      	b.n	8004a6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a78:	2101      	movs	r1, #1
 8004a7a:	69b8      	ldr	r0, [r7, #24]
 8004a7c:	f7ff fec0 	bl	8004800 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	78fa      	ldrb	r2, [r7, #3]
 8004a84:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08e      	sub	sp, #56	@ 0x38
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10b      	bne.n	8004ac4 <xQueueGenericSend+0x34>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004abe:	bf00      	nop
 8004ac0:	bf00      	nop
 8004ac2:	e7fd      	b.n	8004ac0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <xQueueGenericSend+0x42>
 8004aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <xQueueGenericSend+0x46>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <xQueueGenericSend+0x48>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10b      	bne.n	8004af4 <xQueueGenericSend+0x64>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	e7fd      	b.n	8004af0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d103      	bne.n	8004b02 <xQueueGenericSend+0x72>
 8004afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <xQueueGenericSend+0x76>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <xQueueGenericSend+0x78>
 8004b06:	2300      	movs	r3, #0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10b      	bne.n	8004b24 <xQueueGenericSend+0x94>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	623b      	str	r3, [r7, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b24:	f001 fa4a 	bl	8005fbc <xTaskGetSchedulerState>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d102      	bne.n	8004b34 <xQueueGenericSend+0xa4>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <xQueueGenericSend+0xa8>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <xQueueGenericSend+0xaa>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10b      	bne.n	8004b56 <xQueueGenericSend+0xc6>
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	61fb      	str	r3, [r7, #28]
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	e7fd      	b.n	8004b52 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b56:	f001 ff21 	bl	800699c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d302      	bcc.n	8004b6c <xQueueGenericSend+0xdc>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d129      	bne.n	8004bc0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b72:	f000 fa8f 	bl	8005094 <prvCopyDataToQueue>
 8004b76:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d010      	beq.n	8004ba2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b82:	3324      	adds	r3, #36	@ 0x24
 8004b84:	4618      	mov	r0, r3
 8004b86:	f001 f855 	bl	8005c34 <xTaskRemoveFromEventList>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d013      	beq.n	8004bb8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b90:	4b3f      	ldr	r3, [pc, #252]	@ (8004c90 <xQueueGenericSend+0x200>)
 8004b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	e00a      	b.n	8004bb8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ba8:	4b39      	ldr	r3, [pc, #228]	@ (8004c90 <xQueueGenericSend+0x200>)
 8004baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bb8:	f001 ff20 	bl	80069fc <vPortExitCritical>
				return pdPASS;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e063      	b.n	8004c88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d103      	bne.n	8004bce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bc6:	f001 ff19 	bl	80069fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e05c      	b.n	8004c88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d106      	bne.n	8004be2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bd4:	f107 0314 	add.w	r3, r7, #20
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f001 f88f 	bl	8005cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bde:	2301      	movs	r3, #1
 8004be0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004be2:	f001 ff0b 	bl	80069fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004be6:	f000 fdfb 	bl	80057e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bea:	f001 fed7 	bl	800699c <vPortEnterCritical>
 8004bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bf4:	b25b      	sxtb	r3, r3
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfa:	d103      	bne.n	8004c04 <xQueueGenericSend+0x174>
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c0a:	b25b      	sxtb	r3, r3
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d103      	bne.n	8004c1a <xQueueGenericSend+0x18a>
 8004c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c1a:	f001 feef 	bl	80069fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c1e:	1d3a      	adds	r2, r7, #4
 8004c20:	f107 0314 	add.w	r3, r7, #20
 8004c24:	4611      	mov	r1, r2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 f87e 	bl	8005d28 <xTaskCheckForTimeOut>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d124      	bne.n	8004c7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c34:	f000 fb26 	bl	8005284 <prvIsQueueFull>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d018      	beq.n	8004c70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	3310      	adds	r3, #16
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	4611      	mov	r1, r2
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 ffa2 	bl	8005b90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c4e:	f000 fab1 	bl	80051b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c52:	f000 fdd3 	bl	80057fc <xTaskResumeAll>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f47f af7c 	bne.w	8004b56 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c90 <xQueueGenericSend+0x200>)
 8004c60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	e772      	b.n	8004b56 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c72:	f000 fa9f 	bl	80051b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c76:	f000 fdc1 	bl	80057fc <xTaskResumeAll>
 8004c7a:	e76c      	b.n	8004b56 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c7e:	f000 fa99 	bl	80051b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c82:	f000 fdbb 	bl	80057fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c86:	2300      	movs	r3, #0
		}
	}
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3738      	adds	r7, #56	@ 0x38
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	e000ed04 	.word	0xe000ed04

08004c94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08e      	sub	sp, #56	@ 0x38
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10b      	bne.n	8004cc4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cbe:	bf00      	nop
 8004cc0:	bf00      	nop
 8004cc2:	e7fd      	b.n	8004cc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d103      	bne.n	8004cd2 <xQueueGenericSendFromISR+0x3e>
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <xQueueGenericSendFromISR+0x42>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <xQueueGenericSendFromISR+0x44>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	623b      	str	r3, [r7, #32]
}
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
 8004cf2:	e7fd      	b.n	8004cf0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d103      	bne.n	8004d02 <xQueueGenericSendFromISR+0x6e>
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <xQueueGenericSendFromISR+0x72>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <xQueueGenericSendFromISR+0x74>
 8004d06:	2300      	movs	r3, #0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10b      	bne.n	8004d24 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	61fb      	str	r3, [r7, #28]
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	e7fd      	b.n	8004d20 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d24:	f001 fefc 	bl	8006b20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d28:	f3ef 8211 	mrs	r2, BASEPRI
 8004d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	61ba      	str	r2, [r7, #24]
 8004d3e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d302      	bcc.n	8004d56 <xQueueGenericSendFromISR+0xc2>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d12c      	bne.n	8004db0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d66:	f000 f995 	bl	8005094 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d72:	d112      	bne.n	8004d9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d016      	beq.n	8004daa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7e:	3324      	adds	r3, #36	@ 0x24
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 ff57 	bl	8005c34 <xTaskRemoveFromEventList>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00e      	beq.n	8004daa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00b      	beq.n	8004daa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	e007      	b.n	8004daa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d9e:	3301      	adds	r3, #1
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	b25a      	sxtb	r2, r3
 8004da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004daa:	2301      	movs	r3, #1
 8004dac:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004dae:	e001      	b.n	8004db4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3738      	adds	r7, #56	@ 0x38
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08c      	sub	sp, #48	@ 0x30
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10b      	bne.n	8004dfe <xQueueReceive+0x32>
	__asm volatile
 8004de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	623b      	str	r3, [r7, #32]
}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
 8004dfc:	e7fd      	b.n	8004dfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d103      	bne.n	8004e0c <xQueueReceive+0x40>
 8004e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <xQueueReceive+0x44>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e000      	b.n	8004e12 <xQueueReceive+0x46>
 8004e10:	2300      	movs	r3, #0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <xQueueReceive+0x62>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	61fb      	str	r3, [r7, #28]
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	e7fd      	b.n	8004e2a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e2e:	f001 f8c5 	bl	8005fbc <xTaskGetSchedulerState>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d102      	bne.n	8004e3e <xQueueReceive+0x72>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <xQueueReceive+0x76>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <xQueueReceive+0x78>
 8004e42:	2300      	movs	r3, #0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10b      	bne.n	8004e60 <xQueueReceive+0x94>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	61bb      	str	r3, [r7, #24]
}
 8004e5a:	bf00      	nop
 8004e5c:	bf00      	nop
 8004e5e:	e7fd      	b.n	8004e5c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e60:	f001 fd9c 	bl	800699c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01f      	beq.n	8004eb0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e74:	f000 f978 	bl	8005168 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7a:	1e5a      	subs	r2, r3, #1
 8004e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00f      	beq.n	8004ea8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8a:	3310      	adds	r3, #16
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fed1 	bl	8005c34 <xTaskRemoveFromEventList>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e98:	4b3c      	ldr	r3, [pc, #240]	@ (8004f8c <xQueueReceive+0x1c0>)
 8004e9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ea8:	f001 fda8 	bl	80069fc <vPortExitCritical>
				return pdPASS;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e069      	b.n	8004f84 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004eb6:	f001 fda1 	bl	80069fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e062      	b.n	8004f84 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d106      	bne.n	8004ed2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ec4:	f107 0310 	add.w	r3, r7, #16
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 ff17 	bl	8005cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ed2:	f001 fd93 	bl	80069fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ed6:	f000 fc83 	bl	80057e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004eda:	f001 fd5f 	bl	800699c <vPortEnterCritical>
 8004ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ee4:	b25b      	sxtb	r3, r3
 8004ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eea:	d103      	bne.n	8004ef4 <xQueueReceive+0x128>
 8004eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004efa:	b25b      	sxtb	r3, r3
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d103      	bne.n	8004f0a <xQueueReceive+0x13e>
 8004f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f0a:	f001 fd77 	bl	80069fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f0e:	1d3a      	adds	r2, r7, #4
 8004f10:	f107 0310 	add.w	r3, r7, #16
 8004f14:	4611      	mov	r1, r2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 ff06 	bl	8005d28 <xTaskCheckForTimeOut>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d123      	bne.n	8004f6a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f24:	f000 f998 	bl	8005258 <prvIsQueueEmpty>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d017      	beq.n	8004f5e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f30:	3324      	adds	r3, #36	@ 0x24
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	4611      	mov	r1, r2
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fe2a 	bl	8005b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f3e:	f000 f939 	bl	80051b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f42:	f000 fc5b 	bl	80057fc <xTaskResumeAll>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d189      	bne.n	8004e60 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f8c <xQueueReceive+0x1c0>)
 8004f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	e780      	b.n	8004e60 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f60:	f000 f928 	bl	80051b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f64:	f000 fc4a 	bl	80057fc <xTaskResumeAll>
 8004f68:	e77a      	b.n	8004e60 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f6c:	f000 f922 	bl	80051b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f70:	f000 fc44 	bl	80057fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f76:	f000 f96f 	bl	8005258 <prvIsQueueEmpty>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f43f af6f 	beq.w	8004e60 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3730      	adds	r7, #48	@ 0x30
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	e000ed04 	.word	0xe000ed04

08004f90 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08e      	sub	sp, #56	@ 0x38
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10b      	bne.n	8004fbe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	623b      	str	r3, [r7, #32]
}
 8004fb8:	bf00      	nop
 8004fba:	bf00      	nop
 8004fbc:	e7fd      	b.n	8004fba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d103      	bne.n	8004fcc <xQueueReceiveFromISR+0x3c>
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <xQueueReceiveFromISR+0x40>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e000      	b.n	8004fd2 <xQueueReceiveFromISR+0x42>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10b      	bne.n	8004fee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	61fb      	str	r3, [r7, #28]
}
 8004fe8:	bf00      	nop
 8004fea:	bf00      	nop
 8004fec:	e7fd      	b.n	8004fea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fee:	f001 fd97 	bl	8006b20 <vPortValidateInterruptPriority>
	__asm volatile
 8004ff2:	f3ef 8211 	mrs	r2, BASEPRI
 8004ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	61ba      	str	r2, [r7, #24]
 8005008:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800500a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800500c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800500e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005012:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005016:	2b00      	cmp	r3, #0
 8005018:	d02f      	beq.n	800507a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005020:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005028:	f000 f89e 	bl	8005168 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800502c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502e:	1e5a      	subs	r2, r3, #1
 8005030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005032:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005034:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d112      	bne.n	8005064 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800503e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d016      	beq.n	8005074 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005048:	3310      	adds	r3, #16
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fdf2 	bl	8005c34 <xTaskRemoveFromEventList>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00e      	beq.n	8005074 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00b      	beq.n	8005074 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	e007      	b.n	8005074 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005064:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005068:	3301      	adds	r3, #1
 800506a:	b2db      	uxtb	r3, r3
 800506c:	b25a      	sxtb	r2, r3
 800506e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005074:	2301      	movs	r3, #1
 8005076:	637b      	str	r3, [r7, #52]	@ 0x34
 8005078:	e001      	b.n	800507e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800507a:	2300      	movs	r3, #0
 800507c:	637b      	str	r3, [r7, #52]	@ 0x34
 800507e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005080:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f383 8811 	msr	BASEPRI, r3
}
 8005088:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800508a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800508c:	4618      	mov	r0, r3
 800508e:	3738      	adds	r7, #56	@ 0x38
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10d      	bne.n	80050ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d14d      	bne.n	8005156 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 ff9a 	bl	8005ff8 <xTaskPriorityDisinherit>
 80050c4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	605a      	str	r2, [r3, #4]
 80050cc:	e043      	b.n	8005156 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d119      	bne.n	8005108 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6898      	ldr	r0, [r3, #8]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050dc:	461a      	mov	r2, r3
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	f001 ff68 	bl	8006fb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ec:	441a      	add	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d32b      	bcc.n	8005156 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	609a      	str	r2, [r3, #8]
 8005106:	e026      	b.n	8005156 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	68d8      	ldr	r0, [r3, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005110:	461a      	mov	r2, r3
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	f001 ff4e 	bl	8006fb4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005120:	425b      	negs	r3, r3
 8005122:	441a      	add	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d207      	bcs.n	8005144 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513c:	425b      	negs	r3, r3
 800513e:	441a      	add	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d105      	bne.n	8005156 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	3b01      	subs	r3, #1
 8005154:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800515e:	697b      	ldr	r3, [r7, #20]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d018      	beq.n	80051ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	441a      	add	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	429a      	cmp	r2, r3
 8005192:	d303      	bcc.n	800519c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68d9      	ldr	r1, [r3, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a4:	461a      	mov	r2, r3
 80051a6:	6838      	ldr	r0, [r7, #0]
 80051a8:	f001 ff04 	bl	8006fb4 <memcpy>
	}
}
 80051ac:	bf00      	nop
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051bc:	f001 fbee 	bl	800699c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051c8:	e011      	b.n	80051ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d012      	beq.n	80051f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3324      	adds	r3, #36	@ 0x24
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fd2c 	bl	8005c34 <xTaskRemoveFromEventList>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051e2:	f000 fe05 	bl	8005df0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	dce9      	bgt.n	80051ca <prvUnlockQueue+0x16>
 80051f6:	e000      	b.n	80051fa <prvUnlockQueue+0x46>
					break;
 80051f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	22ff      	movs	r2, #255	@ 0xff
 80051fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005202:	f001 fbfb 	bl	80069fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005206:	f001 fbc9 	bl	800699c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005210:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005212:	e011      	b.n	8005238 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d012      	beq.n	8005242 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3310      	adds	r3, #16
 8005220:	4618      	mov	r0, r3
 8005222:	f000 fd07 	bl	8005c34 <xTaskRemoveFromEventList>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800522c:	f000 fde0 	bl	8005df0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005230:	7bbb      	ldrb	r3, [r7, #14]
 8005232:	3b01      	subs	r3, #1
 8005234:	b2db      	uxtb	r3, r3
 8005236:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005238:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800523c:	2b00      	cmp	r3, #0
 800523e:	dce9      	bgt.n	8005214 <prvUnlockQueue+0x60>
 8005240:	e000      	b.n	8005244 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005242:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	22ff      	movs	r2, #255	@ 0xff
 8005248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800524c:	f001 fbd6 	bl	80069fc <vPortExitCritical>
}
 8005250:	bf00      	nop
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005260:	f001 fb9c 	bl	800699c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005268:	2b00      	cmp	r3, #0
 800526a:	d102      	bne.n	8005272 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800526c:	2301      	movs	r3, #1
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e001      	b.n	8005276 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005276:	f001 fbc1 	bl	80069fc <vPortExitCritical>

	return xReturn;
 800527a:	68fb      	ldr	r3, [r7, #12]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800528c:	f001 fb86 	bl	800699c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005298:	429a      	cmp	r2, r3
 800529a:	d102      	bne.n	80052a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800529c:	2301      	movs	r3, #1
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	e001      	b.n	80052a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052a6:	f001 fba9 	bl	80069fc <vPortExitCritical>

	return xReturn;
 80052aa:	68fb      	ldr	r3, [r7, #12]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	e014      	b.n	80052ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052c4:	4a0e      	ldr	r2, [pc, #56]	@ (8005300 <vQueueAddToRegistry+0x4c>)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10b      	bne.n	80052e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052d0:	490b      	ldr	r1, [pc, #44]	@ (8005300 <vQueueAddToRegistry+0x4c>)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052da:	4a09      	ldr	r2, [pc, #36]	@ (8005300 <vQueueAddToRegistry+0x4c>)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	4413      	add	r3, r2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052e6:	e006      	b.n	80052f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3301      	adds	r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b07      	cmp	r3, #7
 80052f2:	d9e7      	bls.n	80052c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr
 8005300:	2000092c 	.word	0x2000092c

08005304 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005314:	f001 fb42 	bl	800699c <vPortEnterCritical>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800531e:	b25b      	sxtb	r3, r3
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d103      	bne.n	800532e <vQueueWaitForMessageRestricted+0x2a>
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005334:	b25b      	sxtb	r3, r3
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	d103      	bne.n	8005344 <vQueueWaitForMessageRestricted+0x40>
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005344:	f001 fb5a 	bl	80069fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534c:	2b00      	cmp	r3, #0
 800534e:	d106      	bne.n	800535e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	3324      	adds	r3, #36	@ 0x24
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fc3f 	bl	8005bdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800535e:	6978      	ldr	r0, [r7, #20]
 8005360:	f7ff ff28 	bl	80051b4 <prvUnlockQueue>
	}
 8005364:	bf00      	nop
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08e      	sub	sp, #56	@ 0x38
 8005370:	af04      	add	r7, sp, #16
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800537a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10b      	bne.n	8005398 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	623b      	str	r3, [r7, #32]
}
 8005392:	bf00      	nop
 8005394:	bf00      	nop
 8005396:	e7fd      	b.n	8005394 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10b      	bne.n	80053b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	61fb      	str	r3, [r7, #28]
}
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	e7fd      	b.n	80053b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053b6:	235c      	movs	r3, #92	@ 0x5c
 80053b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80053be:	d00b      	beq.n	80053d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	61bb      	str	r3, [r7, #24]
}
 80053d2:	bf00      	nop
 80053d4:	bf00      	nop
 80053d6:	e7fd      	b.n	80053d4 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d01e      	beq.n	800541c <xTaskCreateStatic+0xb0>
 80053de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01b      	beq.n	800541c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053ec:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053f6:	2300      	movs	r3, #0
 80053f8:	9303      	str	r3, [sp, #12]
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	9302      	str	r3, [sp, #8]
 80053fe:	f107 0314 	add.w	r3, r7, #20
 8005402:	9301      	str	r3, [sp, #4]
 8005404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 f850 	bl	80054b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005414:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005416:	f000 f8d5 	bl	80055c4 <prvAddNewTaskToReadyList>
 800541a:	e001      	b.n	8005420 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005420:	697b      	ldr	r3, [r7, #20]
	}
 8005422:	4618      	mov	r0, r3
 8005424:	3728      	adds	r7, #40	@ 0x28
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800542a:	b580      	push	{r7, lr}
 800542c:	b08c      	sub	sp, #48	@ 0x30
 800542e:	af04      	add	r7, sp, #16
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	603b      	str	r3, [r7, #0]
 8005436:	4613      	mov	r3, r2
 8005438:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4618      	mov	r0, r3
 8005440:	f001 fbae 	bl	8006ba0 <pvPortMalloc>
 8005444:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00e      	beq.n	800546a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800544c:	205c      	movs	r0, #92	@ 0x5c
 800544e:	f001 fba7 	bl	8006ba0 <pvPortMalloc>
 8005452:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005460:	e005      	b.n	800546e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005462:	6978      	ldr	r0, [r7, #20]
 8005464:	f001 fc64 	bl	8006d30 <vPortFree>
 8005468:	e001      	b.n	800546e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d017      	beq.n	80054a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800547c:	88fa      	ldrh	r2, [r7, #6]
 800547e:	2300      	movs	r3, #0
 8005480:	9303      	str	r3, [sp, #12]
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	9302      	str	r3, [sp, #8]
 8005486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68b9      	ldr	r1, [r7, #8]
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 f80e 	bl	80054b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005498:	69f8      	ldr	r0, [r7, #28]
 800549a:	f000 f893 	bl	80055c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800549e:	2301      	movs	r3, #1
 80054a0:	61bb      	str	r3, [r7, #24]
 80054a2:	e002      	b.n	80054aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054a4:	f04f 33ff 	mov.w	r3, #4294967295
 80054a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054aa:	69bb      	ldr	r3, [r7, #24]
	}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3720      	adds	r7, #32
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	461a      	mov	r2, r3
 80054cc:	21a5      	movs	r1, #165	@ 0xa5
 80054ce:	f001 fd45 	bl	8006f5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80054d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054dc:	3b01      	subs	r3, #1
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f023 0307 	bic.w	r3, r3, #7
 80054ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00b      	beq.n	800550e <prvInitialiseNewTask+0x5a>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	617b      	str	r3, [r7, #20]
}
 8005508:	bf00      	nop
 800550a:	bf00      	nop
 800550c:	e7fd      	b.n	800550a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
 8005512:	e012      	b.n	800553a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	4413      	add	r3, r2
 800551a:	7819      	ldrb	r1, [r3, #0]
 800551c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	3334      	adds	r3, #52	@ 0x34
 8005524:	460a      	mov	r2, r1
 8005526:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d006      	beq.n	8005542 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	3301      	adds	r3, #1
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2b0f      	cmp	r3, #15
 800553e:	d9e9      	bls.n	8005514 <prvInitialiseNewTask+0x60>
 8005540:	e000      	b.n	8005544 <prvInitialiseNewTask+0x90>
		{
			break;
 8005542:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800554c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554e:	2b37      	cmp	r3, #55	@ 0x37
 8005550:	d901      	bls.n	8005556 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005552:	2337      	movs	r3, #55	@ 0x37
 8005554:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005558:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800555a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800555c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005560:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005564:	2200      	movs	r2, #0
 8005566:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556a:	3304      	adds	r3, #4
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff f8b6 	bl	80046de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005574:	3318      	adds	r3, #24
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff f8b1 	bl	80046de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800557c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005580:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005584:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800558c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005590:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	2200      	movs	r2, #0
 8005596:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	69b8      	ldr	r0, [r7, #24]
 80055a6:	f001 f90b 	bl	80067c0 <pxPortInitialiseStack>
 80055aa:	4602      	mov	r2, r0
 80055ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80055b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055bc:	bf00      	nop
 80055be:	3720      	adds	r7, #32
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055cc:	f001 f9e6 	bl	800699c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005688 <prvAddNewTaskToReadyList+0xc4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3301      	adds	r3, #1
 80055d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005688 <prvAddNewTaskToReadyList+0xc4>)
 80055d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055da:	4b2c      	ldr	r3, [pc, #176]	@ (800568c <prvAddNewTaskToReadyList+0xc8>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d109      	bne.n	80055f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055e2:	4a2a      	ldr	r2, [pc, #168]	@ (800568c <prvAddNewTaskToReadyList+0xc8>)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055e8:	4b27      	ldr	r3, [pc, #156]	@ (8005688 <prvAddNewTaskToReadyList+0xc4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d110      	bne.n	8005612 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055f0:	f000 fc22 	bl	8005e38 <prvInitialiseTaskLists>
 80055f4:	e00d      	b.n	8005612 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055f6:	4b26      	ldr	r3, [pc, #152]	@ (8005690 <prvAddNewTaskToReadyList+0xcc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055fe:	4b23      	ldr	r3, [pc, #140]	@ (800568c <prvAddNewTaskToReadyList+0xc8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005608:	429a      	cmp	r2, r3
 800560a:	d802      	bhi.n	8005612 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800560c:	4a1f      	ldr	r2, [pc, #124]	@ (800568c <prvAddNewTaskToReadyList+0xc8>)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005612:	4b20      	ldr	r3, [pc, #128]	@ (8005694 <prvAddNewTaskToReadyList+0xd0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3301      	adds	r3, #1
 8005618:	4a1e      	ldr	r2, [pc, #120]	@ (8005694 <prvAddNewTaskToReadyList+0xd0>)
 800561a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800561c:	4b1d      	ldr	r3, [pc, #116]	@ (8005694 <prvAddNewTaskToReadyList+0xd0>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005628:	4b1b      	ldr	r3, [pc, #108]	@ (8005698 <prvAddNewTaskToReadyList+0xd4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d903      	bls.n	8005638 <prvAddNewTaskToReadyList+0x74>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005634:	4a18      	ldr	r2, [pc, #96]	@ (8005698 <prvAddNewTaskToReadyList+0xd4>)
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4a15      	ldr	r2, [pc, #84]	@ (800569c <prvAddNewTaskToReadyList+0xd8>)
 8005646:	441a      	add	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	4619      	mov	r1, r3
 800564e:	4610      	mov	r0, r2
 8005650:	f7ff f851 	bl	80046f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005654:	f001 f9d2 	bl	80069fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005658:	4b0d      	ldr	r3, [pc, #52]	@ (8005690 <prvAddNewTaskToReadyList+0xcc>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00e      	beq.n	800567e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005660:	4b0a      	ldr	r3, [pc, #40]	@ (800568c <prvAddNewTaskToReadyList+0xc8>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566a:	429a      	cmp	r2, r3
 800566c:	d207      	bcs.n	800567e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800566e:	4b0c      	ldr	r3, [pc, #48]	@ (80056a0 <prvAddNewTaskToReadyList+0xdc>)
 8005670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000e40 	.word	0x20000e40
 800568c:	2000096c 	.word	0x2000096c
 8005690:	20000e4c 	.word	0x20000e4c
 8005694:	20000e5c 	.word	0x20000e5c
 8005698:	20000e48 	.word	0x20000e48
 800569c:	20000970 	.word	0x20000970
 80056a0:	e000ed04 	.word	0xe000ed04

080056a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d018      	beq.n	80056e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056b6:	4b14      	ldr	r3, [pc, #80]	@ (8005708 <vTaskDelay+0x64>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00b      	beq.n	80056d6 <vTaskDelay+0x32>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	60bb      	str	r3, [r7, #8]
}
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
 80056d4:	e7fd      	b.n	80056d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056d6:	f000 f883 	bl	80057e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056da:	2100      	movs	r1, #0
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fcfb 	bl	80060d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056e2:	f000 f88b 	bl	80057fc <xTaskResumeAll>
 80056e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d107      	bne.n	80056fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80056ee:	4b07      	ldr	r3, [pc, #28]	@ (800570c <vTaskDelay+0x68>)
 80056f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056fe:	bf00      	nop
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000e68 	.word	0x20000e68
 800570c:	e000ed04 	.word	0xe000ed04

08005710 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	@ 0x28
 8005714:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005716:	2300      	movs	r3, #0
 8005718:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800571a:	2300      	movs	r3, #0
 800571c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800571e:	463a      	mov	r2, r7
 8005720:	1d39      	adds	r1, r7, #4
 8005722:	f107 0308 	add.w	r3, r7, #8
 8005726:	4618      	mov	r0, r3
 8005728:	f7fe ff88 	bl	800463c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	9202      	str	r2, [sp, #8]
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	2300      	movs	r3, #0
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	2300      	movs	r3, #0
 800573c:	460a      	mov	r2, r1
 800573e:	4922      	ldr	r1, [pc, #136]	@ (80057c8 <vTaskStartScheduler+0xb8>)
 8005740:	4822      	ldr	r0, [pc, #136]	@ (80057cc <vTaskStartScheduler+0xbc>)
 8005742:	f7ff fe13 	bl	800536c <xTaskCreateStatic>
 8005746:	4603      	mov	r3, r0
 8005748:	4a21      	ldr	r2, [pc, #132]	@ (80057d0 <vTaskStartScheduler+0xc0>)
 800574a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800574c:	4b20      	ldr	r3, [pc, #128]	@ (80057d0 <vTaskStartScheduler+0xc0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005754:	2301      	movs	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	e001      	b.n	800575e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d102      	bne.n	800576a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005764:	f000 fd0c 	bl	8006180 <xTimerCreateTimerTask>
 8005768:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d116      	bne.n	800579e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	613b      	str	r3, [r7, #16]
}
 8005782:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005784:	4b13      	ldr	r3, [pc, #76]	@ (80057d4 <vTaskStartScheduler+0xc4>)
 8005786:	f04f 32ff 	mov.w	r2, #4294967295
 800578a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800578c:	4b12      	ldr	r3, [pc, #72]	@ (80057d8 <vTaskStartScheduler+0xc8>)
 800578e:	2201      	movs	r2, #1
 8005790:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005792:	4b12      	ldr	r3, [pc, #72]	@ (80057dc <vTaskStartScheduler+0xcc>)
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005798:	f001 f88e 	bl	80068b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800579c:	e00f      	b.n	80057be <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a4:	d10b      	bne.n	80057be <vTaskStartScheduler+0xae>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	60fb      	str	r3, [r7, #12]
}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	e7fd      	b.n	80057ba <vTaskStartScheduler+0xaa>
}
 80057be:	bf00      	nop
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	0800701c 	.word	0x0800701c
 80057cc:	08005e09 	.word	0x08005e09
 80057d0:	20000e64 	.word	0x20000e64
 80057d4:	20000e60 	.word	0x20000e60
 80057d8:	20000e4c 	.word	0x20000e4c
 80057dc:	20000e44 	.word	0x20000e44

080057e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80057e4:	4b04      	ldr	r3, [pc, #16]	@ (80057f8 <vTaskSuspendAll+0x18>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3301      	adds	r3, #1
 80057ea:	4a03      	ldr	r2, [pc, #12]	@ (80057f8 <vTaskSuspendAll+0x18>)
 80057ec:	6013      	str	r3, [r2, #0]
}
 80057ee:	bf00      	nop
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	20000e68 	.word	0x20000e68

080057fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005806:	2300      	movs	r3, #0
 8005808:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800580a:	4b42      	ldr	r3, [pc, #264]	@ (8005914 <xTaskResumeAll+0x118>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10b      	bne.n	800582a <xTaskResumeAll+0x2e>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	603b      	str	r3, [r7, #0]
}
 8005824:	bf00      	nop
 8005826:	bf00      	nop
 8005828:	e7fd      	b.n	8005826 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800582a:	f001 f8b7 	bl	800699c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800582e:	4b39      	ldr	r3, [pc, #228]	@ (8005914 <xTaskResumeAll+0x118>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3b01      	subs	r3, #1
 8005834:	4a37      	ldr	r2, [pc, #220]	@ (8005914 <xTaskResumeAll+0x118>)
 8005836:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005838:	4b36      	ldr	r3, [pc, #216]	@ (8005914 <xTaskResumeAll+0x118>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d162      	bne.n	8005906 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005840:	4b35      	ldr	r3, [pc, #212]	@ (8005918 <xTaskResumeAll+0x11c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d05e      	beq.n	8005906 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005848:	e02f      	b.n	80058aa <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800584a:	4b34      	ldr	r3, [pc, #208]	@ (800591c <xTaskResumeAll+0x120>)
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3318      	adds	r3, #24
 8005856:	4618      	mov	r0, r3
 8005858:	f7fe ffa8 	bl	80047ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3304      	adds	r3, #4
 8005860:	4618      	mov	r0, r3
 8005862:	f7fe ffa3 	bl	80047ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800586a:	4b2d      	ldr	r3, [pc, #180]	@ (8005920 <xTaskResumeAll+0x124>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d903      	bls.n	800587a <xTaskResumeAll+0x7e>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005876:	4a2a      	ldr	r2, [pc, #168]	@ (8005920 <xTaskResumeAll+0x124>)
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800587e:	4613      	mov	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4a27      	ldr	r2, [pc, #156]	@ (8005924 <xTaskResumeAll+0x128>)
 8005888:	441a      	add	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3304      	adds	r3, #4
 800588e:	4619      	mov	r1, r3
 8005890:	4610      	mov	r0, r2
 8005892:	f7fe ff30 	bl	80046f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800589a:	4b23      	ldr	r3, [pc, #140]	@ (8005928 <xTaskResumeAll+0x12c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d302      	bcc.n	80058aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80058a4:	4b21      	ldr	r3, [pc, #132]	@ (800592c <xTaskResumeAll+0x130>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058aa:	4b1c      	ldr	r3, [pc, #112]	@ (800591c <xTaskResumeAll+0x120>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1cb      	bne.n	800584a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058b8:	f000 fb5c 	bl	8005f74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80058bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005930 <xTaskResumeAll+0x134>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d010      	beq.n	80058ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058c8:	f000 f844 	bl	8005954 <xTaskIncrementTick>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80058d2:	4b16      	ldr	r3, [pc, #88]	@ (800592c <xTaskResumeAll+0x130>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3b01      	subs	r3, #1
 80058dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1f1      	bne.n	80058c8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80058e4:	4b12      	ldr	r3, [pc, #72]	@ (8005930 <xTaskResumeAll+0x134>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058ea:	4b10      	ldr	r3, [pc, #64]	@ (800592c <xTaskResumeAll+0x130>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d009      	beq.n	8005906 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058f2:	2301      	movs	r3, #1
 80058f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005934 <xTaskResumeAll+0x138>)
 80058f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005906:	f001 f879 	bl	80069fc <vPortExitCritical>

	return xAlreadyYielded;
 800590a:	68bb      	ldr	r3, [r7, #8]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20000e68 	.word	0x20000e68
 8005918:	20000e40 	.word	0x20000e40
 800591c:	20000e00 	.word	0x20000e00
 8005920:	20000e48 	.word	0x20000e48
 8005924:	20000970 	.word	0x20000970
 8005928:	2000096c 	.word	0x2000096c
 800592c:	20000e54 	.word	0x20000e54
 8005930:	20000e50 	.word	0x20000e50
 8005934:	e000ed04 	.word	0xe000ed04

08005938 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800593e:	4b04      	ldr	r3, [pc, #16]	@ (8005950 <xTaskGetTickCount+0x18>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005944:	687b      	ldr	r3, [r7, #4]
}
 8005946:	4618      	mov	r0, r3
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	bc80      	pop	{r7}
 800594e:	4770      	bx	lr
 8005950:	20000e44 	.word	0x20000e44

08005954 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800595e:	4b52      	ldr	r3, [pc, #328]	@ (8005aa8 <xTaskIncrementTick+0x154>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	f040 808f 	bne.w	8005a86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005968:	4b50      	ldr	r3, [pc, #320]	@ (8005aac <xTaskIncrementTick+0x158>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3301      	adds	r3, #1
 800596e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005970:	4a4e      	ldr	r2, [pc, #312]	@ (8005aac <xTaskIncrementTick+0x158>)
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d121      	bne.n	80059c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800597c:	4b4c      	ldr	r3, [pc, #304]	@ (8005ab0 <xTaskIncrementTick+0x15c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00b      	beq.n	800599e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	603b      	str	r3, [r7, #0]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <xTaskIncrementTick+0x46>
 800599e:	4b44      	ldr	r3, [pc, #272]	@ (8005ab0 <xTaskIncrementTick+0x15c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	4b43      	ldr	r3, [pc, #268]	@ (8005ab4 <xTaskIncrementTick+0x160>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a41      	ldr	r2, [pc, #260]	@ (8005ab0 <xTaskIncrementTick+0x15c>)
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	4a41      	ldr	r2, [pc, #260]	@ (8005ab4 <xTaskIncrementTick+0x160>)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	4b41      	ldr	r3, [pc, #260]	@ (8005ab8 <xTaskIncrementTick+0x164>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3301      	adds	r3, #1
 80059b8:	4a3f      	ldr	r2, [pc, #252]	@ (8005ab8 <xTaskIncrementTick+0x164>)
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	f000 fada 	bl	8005f74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059c0:	4b3e      	ldr	r3, [pc, #248]	@ (8005abc <xTaskIncrementTick+0x168>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d34e      	bcc.n	8005a68 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ca:	4b39      	ldr	r3, [pc, #228]	@ (8005ab0 <xTaskIncrementTick+0x15c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <xTaskIncrementTick+0x84>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <xTaskIncrementTick+0x86>
 80059d8:	2300      	movs	r3, #0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d004      	beq.n	80059e8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059de:	4b37      	ldr	r3, [pc, #220]	@ (8005abc <xTaskIncrementTick+0x168>)
 80059e0:	f04f 32ff 	mov.w	r2, #4294967295
 80059e4:	601a      	str	r2, [r3, #0]
					break;
 80059e6:	e03f      	b.n	8005a68 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059e8:	4b31      	ldr	r3, [pc, #196]	@ (8005ab0 <xTaskIncrementTick+0x15c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d203      	bcs.n	8005a08 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a00:	4a2e      	ldr	r2, [pc, #184]	@ (8005abc <xTaskIncrementTick+0x168>)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6013      	str	r3, [r2, #0]
						break;
 8005a06:	e02f      	b.n	8005a68 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fe fecd 	bl	80047ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d004      	beq.n	8005a24 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	3318      	adds	r3, #24
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe fec4 	bl	80047ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a28:	4b25      	ldr	r3, [pc, #148]	@ (8005ac0 <xTaskIncrementTick+0x16c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d903      	bls.n	8005a38 <xTaskIncrementTick+0xe4>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a34:	4a22      	ldr	r2, [pc, #136]	@ (8005ac0 <xTaskIncrementTick+0x16c>)
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4a1f      	ldr	r2, [pc, #124]	@ (8005ac4 <xTaskIncrementTick+0x170>)
 8005a46:	441a      	add	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4610      	mov	r0, r2
 8005a50:	f7fe fe51 	bl	80046f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a58:	4b1b      	ldr	r3, [pc, #108]	@ (8005ac8 <xTaskIncrementTick+0x174>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d3b3      	bcc.n	80059ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005a62:	2301      	movs	r3, #1
 8005a64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a66:	e7b0      	b.n	80059ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a68:	4b17      	ldr	r3, [pc, #92]	@ (8005ac8 <xTaskIncrementTick+0x174>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a6e:	4915      	ldr	r1, [pc, #84]	@ (8005ac4 <xTaskIncrementTick+0x170>)
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d907      	bls.n	8005a90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	e004      	b.n	8005a90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a86:	4b11      	ldr	r3, [pc, #68]	@ (8005acc <xTaskIncrementTick+0x178>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	4a0f      	ldr	r2, [pc, #60]	@ (8005acc <xTaskIncrementTick+0x178>)
 8005a8e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a90:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad0 <xTaskIncrementTick+0x17c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a9c:	697b      	ldr	r3, [r7, #20]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000e68 	.word	0x20000e68
 8005aac:	20000e44 	.word	0x20000e44
 8005ab0:	20000df8 	.word	0x20000df8
 8005ab4:	20000dfc 	.word	0x20000dfc
 8005ab8:	20000e58 	.word	0x20000e58
 8005abc:	20000e60 	.word	0x20000e60
 8005ac0:	20000e48 	.word	0x20000e48
 8005ac4:	20000970 	.word	0x20000970
 8005ac8:	2000096c 	.word	0x2000096c
 8005acc:	20000e50 	.word	0x20000e50
 8005ad0:	20000e54 	.word	0x20000e54

08005ad4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ada:	4b28      	ldr	r3, [pc, #160]	@ (8005b7c <vTaskSwitchContext+0xa8>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ae2:	4b27      	ldr	r3, [pc, #156]	@ (8005b80 <vTaskSwitchContext+0xac>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ae8:	e042      	b.n	8005b70 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005aea:	4b25      	ldr	r3, [pc, #148]	@ (8005b80 <vTaskSwitchContext+0xac>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005af0:	4b24      	ldr	r3, [pc, #144]	@ (8005b84 <vTaskSwitchContext+0xb0>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	e011      	b.n	8005b1c <vTaskSwitchContext+0x48>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10b      	bne.n	8005b16 <vTaskSwitchContext+0x42>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	607b      	str	r3, [r7, #4]
}
 8005b10:	bf00      	nop
 8005b12:	bf00      	nop
 8005b14:	e7fd      	b.n	8005b12 <vTaskSwitchContext+0x3e>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	491a      	ldr	r1, [pc, #104]	@ (8005b88 <vTaskSwitchContext+0xb4>)
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0e3      	beq.n	8005af8 <vTaskSwitchContext+0x24>
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4613      	mov	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4a13      	ldr	r2, [pc, #76]	@ (8005b88 <vTaskSwitchContext+0xb4>)
 8005b3c:	4413      	add	r3, r2
 8005b3e:	60bb      	str	r3, [r7, #8]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	605a      	str	r2, [r3, #4]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	3308      	adds	r3, #8
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d104      	bne.n	8005b60 <vTaskSwitchContext+0x8c>
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	605a      	str	r2, [r3, #4]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	4a09      	ldr	r2, [pc, #36]	@ (8005b8c <vTaskSwitchContext+0xb8>)
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	4a06      	ldr	r2, [pc, #24]	@ (8005b84 <vTaskSwitchContext+0xb0>)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6013      	str	r3, [r2, #0]
}
 8005b70:	bf00      	nop
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	20000e68 	.word	0x20000e68
 8005b80:	20000e54 	.word	0x20000e54
 8005b84:	20000e48 	.word	0x20000e48
 8005b88:	20000970 	.word	0x20000970
 8005b8c:	2000096c 	.word	0x2000096c

08005b90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10b      	bne.n	8005bb8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	60fb      	str	r3, [r7, #12]
}
 8005bb2:	bf00      	nop
 8005bb4:	bf00      	nop
 8005bb6:	e7fd      	b.n	8005bb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bb8:	4b07      	ldr	r3, [pc, #28]	@ (8005bd8 <vTaskPlaceOnEventList+0x48>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3318      	adds	r3, #24
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7fe fdbb 	bl	800473c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	6838      	ldr	r0, [r7, #0]
 8005bca:	f000 fa85 	bl	80060d8 <prvAddCurrentTaskToDelayedList>
}
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	2000096c 	.word	0x2000096c

08005bdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10b      	bne.n	8005c06 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	617b      	str	r3, [r7, #20]
}
 8005c00:	bf00      	nop
 8005c02:	bf00      	nop
 8005c04:	e7fd      	b.n	8005c02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c06:	4b0a      	ldr	r3, [pc, #40]	@ (8005c30 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3318      	adds	r3, #24
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f7fe fd71 	bl	80046f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	68b8      	ldr	r0, [r7, #8]
 8005c24:	f000 fa58 	bl	80060d8 <prvAddCurrentTaskToDelayedList>
	}
 8005c28:	bf00      	nop
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	2000096c 	.word	0x2000096c

08005c34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10b      	bne.n	8005c62 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	60fb      	str	r3, [r7, #12]
}
 8005c5c:	bf00      	nop
 8005c5e:	bf00      	nop
 8005c60:	e7fd      	b.n	8005c5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	3318      	adds	r3, #24
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fe fda0 	bl	80047ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce4 <xTaskRemoveFromEventList+0xb0>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d11d      	bne.n	8005cb0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	3304      	adds	r3, #4
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fe fd97 	bl	80047ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c82:	4b19      	ldr	r3, [pc, #100]	@ (8005ce8 <xTaskRemoveFromEventList+0xb4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d903      	bls.n	8005c92 <xTaskRemoveFromEventList+0x5e>
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8e:	4a16      	ldr	r2, [pc, #88]	@ (8005ce8 <xTaskRemoveFromEventList+0xb4>)
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4a13      	ldr	r2, [pc, #76]	@ (8005cec <xTaskRemoveFromEventList+0xb8>)
 8005ca0:	441a      	add	r2, r3
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4610      	mov	r0, r2
 8005caa:	f7fe fd24 	bl	80046f6 <vListInsertEnd>
 8005cae:	e005      	b.n	8005cbc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	3318      	adds	r3, #24
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	480e      	ldr	r0, [pc, #56]	@ (8005cf0 <xTaskRemoveFromEventList+0xbc>)
 8005cb8:	f7fe fd1d 	bl	80046f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf4 <xTaskRemoveFromEventList+0xc0>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d905      	bls.n	8005cd6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cce:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf8 <xTaskRemoveFromEventList+0xc4>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	e001      	b.n	8005cda <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005cda:	697b      	ldr	r3, [r7, #20]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20000e68 	.word	0x20000e68
 8005ce8:	20000e48 	.word	0x20000e48
 8005cec:	20000970 	.word	0x20000970
 8005cf0:	20000e00 	.word	0x20000e00
 8005cf4:	2000096c 	.word	0x2000096c
 8005cf8:	20000e54 	.word	0x20000e54

08005cfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d04:	4b06      	ldr	r3, [pc, #24]	@ (8005d20 <vTaskInternalSetTimeOutState+0x24>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d0c:	4b05      	ldr	r3, [pc, #20]	@ (8005d24 <vTaskInternalSetTimeOutState+0x28>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	605a      	str	r2, [r3, #4]
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bc80      	pop	{r7}
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	20000e58 	.word	0x20000e58
 8005d24:	20000e44 	.word	0x20000e44

08005d28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10b      	bne.n	8005d50 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	613b      	str	r3, [r7, #16]
}
 8005d4a:	bf00      	nop
 8005d4c:	bf00      	nop
 8005d4e:	e7fd      	b.n	8005d4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10b      	bne.n	8005d6e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	60fb      	str	r3, [r7, #12]
}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	e7fd      	b.n	8005d6a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005d6e:	f000 fe15 	bl	800699c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d72:	4b1d      	ldr	r3, [pc, #116]	@ (8005de8 <xTaskCheckForTimeOut+0xc0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8a:	d102      	bne.n	8005d92 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	61fb      	str	r3, [r7, #28]
 8005d90:	e023      	b.n	8005dda <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4b15      	ldr	r3, [pc, #84]	@ (8005dec <xTaskCheckForTimeOut+0xc4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d007      	beq.n	8005dae <xTaskCheckForTimeOut+0x86>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d302      	bcc.n	8005dae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005da8:	2301      	movs	r3, #1
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	e015      	b.n	8005dda <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d20b      	bcs.n	8005dd0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	1ad2      	subs	r2, r2, r3
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff ff99 	bl	8005cfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61fb      	str	r3, [r7, #28]
 8005dce:	e004      	b.n	8005dda <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dda:	f000 fe0f 	bl	80069fc <vPortExitCritical>

	return xReturn;
 8005dde:	69fb      	ldr	r3, [r7, #28]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3720      	adds	r7, #32
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	20000e44 	.word	0x20000e44
 8005dec:	20000e58 	.word	0x20000e58

08005df0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005df0:	b480      	push	{r7}
 8005df2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005df4:	4b03      	ldr	r3, [pc, #12]	@ (8005e04 <vTaskMissedYield+0x14>)
 8005df6:	2201      	movs	r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
}
 8005dfa:	bf00      	nop
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bc80      	pop	{r7}
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20000e54 	.word	0x20000e54

08005e08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e10:	f000 f852 	bl	8005eb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e14:	4b06      	ldr	r3, [pc, #24]	@ (8005e30 <prvIdleTask+0x28>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d9f9      	bls.n	8005e10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e1c:	4b05      	ldr	r3, [pc, #20]	@ (8005e34 <prvIdleTask+0x2c>)
 8005e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e2c:	e7f0      	b.n	8005e10 <prvIdleTask+0x8>
 8005e2e:	bf00      	nop
 8005e30:	20000970 	.word	0x20000970
 8005e34:	e000ed04 	.word	0xe000ed04

08005e38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e3e:	2300      	movs	r3, #0
 8005e40:	607b      	str	r3, [r7, #4]
 8005e42:	e00c      	b.n	8005e5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4a12      	ldr	r2, [pc, #72]	@ (8005e98 <prvInitialiseTaskLists+0x60>)
 8005e50:	4413      	add	r3, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe fc24 	bl	80046a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b37      	cmp	r3, #55	@ 0x37
 8005e62:	d9ef      	bls.n	8005e44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e64:	480d      	ldr	r0, [pc, #52]	@ (8005e9c <prvInitialiseTaskLists+0x64>)
 8005e66:	f7fe fc1b 	bl	80046a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e6a:	480d      	ldr	r0, [pc, #52]	@ (8005ea0 <prvInitialiseTaskLists+0x68>)
 8005e6c:	f7fe fc18 	bl	80046a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e70:	480c      	ldr	r0, [pc, #48]	@ (8005ea4 <prvInitialiseTaskLists+0x6c>)
 8005e72:	f7fe fc15 	bl	80046a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e76:	480c      	ldr	r0, [pc, #48]	@ (8005ea8 <prvInitialiseTaskLists+0x70>)
 8005e78:	f7fe fc12 	bl	80046a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e7c:	480b      	ldr	r0, [pc, #44]	@ (8005eac <prvInitialiseTaskLists+0x74>)
 8005e7e:	f7fe fc0f 	bl	80046a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e82:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb0 <prvInitialiseTaskLists+0x78>)
 8005e84:	4a05      	ldr	r2, [pc, #20]	@ (8005e9c <prvInitialiseTaskLists+0x64>)
 8005e86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e88:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb4 <prvInitialiseTaskLists+0x7c>)
 8005e8a:	4a05      	ldr	r2, [pc, #20]	@ (8005ea0 <prvInitialiseTaskLists+0x68>)
 8005e8c:	601a      	str	r2, [r3, #0]
}
 8005e8e:	bf00      	nop
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000970 	.word	0x20000970
 8005e9c:	20000dd0 	.word	0x20000dd0
 8005ea0:	20000de4 	.word	0x20000de4
 8005ea4:	20000e00 	.word	0x20000e00
 8005ea8:	20000e14 	.word	0x20000e14
 8005eac:	20000e2c 	.word	0x20000e2c
 8005eb0:	20000df8 	.word	0x20000df8
 8005eb4:	20000dfc 	.word	0x20000dfc

08005eb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ebe:	e019      	b.n	8005ef4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ec0:	f000 fd6c 	bl	800699c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005ec4:	4b10      	ldr	r3, [pc, #64]	@ (8005f08 <prvCheckTasksWaitingTermination+0x50>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fe fc6b 	bl	80047ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f0c <prvCheckTasksWaitingTermination+0x54>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	4a0b      	ldr	r2, [pc, #44]	@ (8005f0c <prvCheckTasksWaitingTermination+0x54>)
 8005ede:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f10 <prvCheckTasksWaitingTermination+0x58>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8005f10 <prvCheckTasksWaitingTermination+0x58>)
 8005ee8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005eea:	f000 fd87 	bl	80069fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f810 	bl	8005f14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ef4:	4b06      	ldr	r3, [pc, #24]	@ (8005f10 <prvCheckTasksWaitingTermination+0x58>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e1      	bne.n	8005ec0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000e14 	.word	0x20000e14
 8005f0c:	20000e40 	.word	0x20000e40
 8005f10:	20000e28 	.word	0x20000e28

08005f14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d108      	bne.n	8005f38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 ff00 	bl	8006d30 <vPortFree>
				vPortFree( pxTCB );
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fefd 	bl	8006d30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f36:	e019      	b.n	8005f6c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d103      	bne.n	8005f4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fef4 	bl	8006d30 <vPortFree>
	}
 8005f48:	e010      	b.n	8005f6c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d00b      	beq.n	8005f6c <prvDeleteTCB+0x58>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	60fb      	str	r3, [r7, #12]
}
 8005f66:	bf00      	nop
 8005f68:	bf00      	nop
 8005f6a:	e7fd      	b.n	8005f68 <prvDeleteTCB+0x54>
	}
 8005f6c:	bf00      	nop
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8005fb4 <prvResetNextTaskUnblockTime+0x40>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <prvResetNextTaskUnblockTime+0x14>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <prvResetNextTaskUnblockTime+0x16>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d004      	beq.n	8005f98 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb8 <prvResetNextTaskUnblockTime+0x44>)
 8005f90:	f04f 32ff 	mov.w	r2, #4294967295
 8005f94:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f96:	e008      	b.n	8005faa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f98:	4b06      	ldr	r3, [pc, #24]	@ (8005fb4 <prvResetNextTaskUnblockTime+0x40>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4a04      	ldr	r2, [pc, #16]	@ (8005fb8 <prvResetNextTaskUnblockTime+0x44>)
 8005fa8:	6013      	str	r3, [r2, #0]
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr
 8005fb4:	20000df8 	.word	0x20000df8
 8005fb8:	20000e60 	.word	0x20000e60

08005fbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff0 <xTaskGetSchedulerState+0x34>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d102      	bne.n	8005fd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	607b      	str	r3, [r7, #4]
 8005fce:	e008      	b.n	8005fe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fd0:	4b08      	ldr	r3, [pc, #32]	@ (8005ff4 <xTaskGetSchedulerState+0x38>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d102      	bne.n	8005fde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fd8:	2302      	movs	r3, #2
 8005fda:	607b      	str	r3, [r7, #4]
 8005fdc:	e001      	b.n	8005fe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fe2:	687b      	ldr	r3, [r7, #4]
	}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bc80      	pop	{r7}
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20000e4c 	.word	0x20000e4c
 8005ff4:	20000e68 	.word	0x20000e68

08005ff8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006004:	2300      	movs	r3, #0
 8006006:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d058      	beq.n	80060c0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800600e:	4b2f      	ldr	r3, [pc, #188]	@ (80060cc <xTaskPriorityDisinherit+0xd4>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	429a      	cmp	r2, r3
 8006016:	d00b      	beq.n	8006030 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	60fb      	str	r3, [r7, #12]
}
 800602a:	bf00      	nop
 800602c:	bf00      	nop
 800602e:	e7fd      	b.n	800602c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10b      	bne.n	8006050 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	60bb      	str	r3, [r7, #8]
}
 800604a:	bf00      	nop
 800604c:	bf00      	nop
 800604e:	e7fd      	b.n	800604c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006054:	1e5a      	subs	r2, r3, #1
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006062:	429a      	cmp	r2, r3
 8006064:	d02c      	beq.n	80060c0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800606a:	2b00      	cmp	r3, #0
 800606c:	d128      	bne.n	80060c0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	3304      	adds	r3, #4
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe fb9a 	bl	80047ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006084:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006090:	4b0f      	ldr	r3, [pc, #60]	@ (80060d0 <xTaskPriorityDisinherit+0xd8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d903      	bls.n	80060a0 <xTaskPriorityDisinherit+0xa8>
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609c:	4a0c      	ldr	r2, [pc, #48]	@ (80060d0 <xTaskPriorityDisinherit+0xd8>)
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4a09      	ldr	r2, [pc, #36]	@ (80060d4 <xTaskPriorityDisinherit+0xdc>)
 80060ae:	441a      	add	r2, r3
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	3304      	adds	r3, #4
 80060b4:	4619      	mov	r1, r3
 80060b6:	4610      	mov	r0, r2
 80060b8:	f7fe fb1d 	bl	80046f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060bc:	2301      	movs	r3, #1
 80060be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060c0:	697b      	ldr	r3, [r7, #20]
	}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	2000096c 	.word	0x2000096c
 80060d0:	20000e48 	.word	0x20000e48
 80060d4:	20000970 	.word	0x20000970

080060d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060e2:	4b21      	ldr	r3, [pc, #132]	@ (8006168 <prvAddCurrentTaskToDelayedList+0x90>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060e8:	4b20      	ldr	r3, [pc, #128]	@ (800616c <prvAddCurrentTaskToDelayedList+0x94>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3304      	adds	r3, #4
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe fb5c 	bl	80047ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fa:	d10a      	bne.n	8006112 <prvAddCurrentTaskToDelayedList+0x3a>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006102:	4b1a      	ldr	r3, [pc, #104]	@ (800616c <prvAddCurrentTaskToDelayedList+0x94>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3304      	adds	r3, #4
 8006108:	4619      	mov	r1, r3
 800610a:	4819      	ldr	r0, [pc, #100]	@ (8006170 <prvAddCurrentTaskToDelayedList+0x98>)
 800610c:	f7fe faf3 	bl	80046f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006110:	e026      	b.n	8006160 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4413      	add	r3, r2
 8006118:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800611a:	4b14      	ldr	r3, [pc, #80]	@ (800616c <prvAddCurrentTaskToDelayedList+0x94>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	429a      	cmp	r2, r3
 8006128:	d209      	bcs.n	800613e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800612a:	4b12      	ldr	r3, [pc, #72]	@ (8006174 <prvAddCurrentTaskToDelayedList+0x9c>)
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	4b0f      	ldr	r3, [pc, #60]	@ (800616c <prvAddCurrentTaskToDelayedList+0x94>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3304      	adds	r3, #4
 8006134:	4619      	mov	r1, r3
 8006136:	4610      	mov	r0, r2
 8006138:	f7fe fb00 	bl	800473c <vListInsert>
}
 800613c:	e010      	b.n	8006160 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800613e:	4b0e      	ldr	r3, [pc, #56]	@ (8006178 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4b0a      	ldr	r3, [pc, #40]	@ (800616c <prvAddCurrentTaskToDelayedList+0x94>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3304      	adds	r3, #4
 8006148:	4619      	mov	r1, r3
 800614a:	4610      	mov	r0, r2
 800614c:	f7fe faf6 	bl	800473c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006150:	4b0a      	ldr	r3, [pc, #40]	@ (800617c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	429a      	cmp	r2, r3
 8006158:	d202      	bcs.n	8006160 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800615a:	4a08      	ldr	r2, [pc, #32]	@ (800617c <prvAddCurrentTaskToDelayedList+0xa4>)
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	6013      	str	r3, [r2, #0]
}
 8006160:	bf00      	nop
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000e44 	.word	0x20000e44
 800616c:	2000096c 	.word	0x2000096c
 8006170:	20000e2c 	.word	0x20000e2c
 8006174:	20000dfc 	.word	0x20000dfc
 8006178:	20000df8 	.word	0x20000df8
 800617c:	20000e60 	.word	0x20000e60

08006180 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08a      	sub	sp, #40	@ 0x28
 8006184:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006186:	2300      	movs	r3, #0
 8006188:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800618a:	f000 fad9 	bl	8006740 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800618e:	4b1d      	ldr	r3, [pc, #116]	@ (8006204 <xTimerCreateTimerTask+0x84>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d021      	beq.n	80061da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800619a:	2300      	movs	r3, #0
 800619c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800619e:	1d3a      	adds	r2, r7, #4
 80061a0:	f107 0108 	add.w	r1, r7, #8
 80061a4:	f107 030c 	add.w	r3, r7, #12
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fe fa5f 	bl	800466c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	9202      	str	r2, [sp, #8]
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	2302      	movs	r3, #2
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	2300      	movs	r3, #0
 80061be:	460a      	mov	r2, r1
 80061c0:	4911      	ldr	r1, [pc, #68]	@ (8006208 <xTimerCreateTimerTask+0x88>)
 80061c2:	4812      	ldr	r0, [pc, #72]	@ (800620c <xTimerCreateTimerTask+0x8c>)
 80061c4:	f7ff f8d2 	bl	800536c <xTaskCreateStatic>
 80061c8:	4603      	mov	r3, r0
 80061ca:	4a11      	ldr	r2, [pc, #68]	@ (8006210 <xTimerCreateTimerTask+0x90>)
 80061cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80061ce:	4b10      	ldr	r3, [pc, #64]	@ (8006210 <xTimerCreateTimerTask+0x90>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061d6:	2301      	movs	r3, #1
 80061d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10b      	bne.n	80061f8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	613b      	str	r3, [r7, #16]
}
 80061f2:	bf00      	nop
 80061f4:	bf00      	nop
 80061f6:	e7fd      	b.n	80061f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80061f8:	697b      	ldr	r3, [r7, #20]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20000e9c 	.word	0x20000e9c
 8006208:	08007024 	.word	0x08007024
 800620c:	08006335 	.word	0x08006335
 8006210:	20000ea0 	.word	0x20000ea0

08006214 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08a      	sub	sp, #40	@ 0x28
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006222:	2300      	movs	r3, #0
 8006224:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10b      	bne.n	8006244 <xTimerGenericCommand+0x30>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	623b      	str	r3, [r7, #32]
}
 800623e:	bf00      	nop
 8006240:	bf00      	nop
 8006242:	e7fd      	b.n	8006240 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006244:	4b19      	ldr	r3, [pc, #100]	@ (80062ac <xTimerGenericCommand+0x98>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d02a      	beq.n	80062a2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b05      	cmp	r3, #5
 800625c:	dc18      	bgt.n	8006290 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800625e:	f7ff fead 	bl	8005fbc <xTaskGetSchedulerState>
 8006262:	4603      	mov	r3, r0
 8006264:	2b02      	cmp	r3, #2
 8006266:	d109      	bne.n	800627c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006268:	4b10      	ldr	r3, [pc, #64]	@ (80062ac <xTimerGenericCommand+0x98>)
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	f107 0110 	add.w	r1, r7, #16
 8006270:	2300      	movs	r3, #0
 8006272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006274:	f7fe fc0c 	bl	8004a90 <xQueueGenericSend>
 8006278:	6278      	str	r0, [r7, #36]	@ 0x24
 800627a:	e012      	b.n	80062a2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800627c:	4b0b      	ldr	r3, [pc, #44]	@ (80062ac <xTimerGenericCommand+0x98>)
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	f107 0110 	add.w	r1, r7, #16
 8006284:	2300      	movs	r3, #0
 8006286:	2200      	movs	r2, #0
 8006288:	f7fe fc02 	bl	8004a90 <xQueueGenericSend>
 800628c:	6278      	str	r0, [r7, #36]	@ 0x24
 800628e:	e008      	b.n	80062a2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006290:	4b06      	ldr	r3, [pc, #24]	@ (80062ac <xTimerGenericCommand+0x98>)
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	f107 0110 	add.w	r1, r7, #16
 8006298:	2300      	movs	r3, #0
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	f7fe fcfa 	bl	8004c94 <xQueueGenericSendFromISR>
 80062a0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3728      	adds	r7, #40	@ 0x28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000e9c 	.word	0x20000e9c

080062b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b088      	sub	sp, #32
 80062b4:	af02      	add	r7, sp, #8
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062ba:	4b1d      	ldr	r3, [pc, #116]	@ (8006330 <prvProcessExpiredTimer+0x80>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	3304      	adds	r3, #4
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fe fa6f 	bl	80047ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d123      	bne.n	800631e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	18d1      	adds	r1, r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	6978      	ldr	r0, [r7, #20]
 80062e4:	f000 f8cc 	bl	8006480 <prvInsertTimerInActiveList>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d017      	beq.n	800631e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062ee:	2300      	movs	r3, #0
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	2300      	movs	r3, #0
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	2100      	movs	r1, #0
 80062f8:	6978      	ldr	r0, [r7, #20]
 80062fa:	f7ff ff8b 	bl	8006214 <xTimerGenericCommand>
 80062fe:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10b      	bne.n	800631e <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	60fb      	str	r3, [r7, #12]
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	e7fd      	b.n	800631a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006322:	6978      	ldr	r0, [r7, #20]
 8006324:	4798      	blx	r3
}
 8006326:	bf00      	nop
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	20000e94 	.word	0x20000e94

08006334 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800633c:	f107 0308 	add.w	r3, r7, #8
 8006340:	4618      	mov	r0, r3
 8006342:	f000 f859 	bl	80063f8 <prvGetNextExpireTime>
 8006346:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4619      	mov	r1, r3
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 f805 	bl	800635c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006352:	f000 f8d7 	bl	8006504 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006356:	bf00      	nop
 8006358:	e7f0      	b.n	800633c <prvTimerTask+0x8>
	...

0800635c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006366:	f7ff fa3b 	bl	80057e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800636a:	f107 0308 	add.w	r3, r7, #8
 800636e:	4618      	mov	r0, r3
 8006370:	f000 f866 	bl	8006440 <prvSampleTimeNow>
 8006374:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d130      	bne.n	80063de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <prvProcessTimerOrBlockTask+0x3c>
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	429a      	cmp	r2, r3
 8006388:	d806      	bhi.n	8006398 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800638a:	f7ff fa37 	bl	80057fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800638e:	68f9      	ldr	r1, [r7, #12]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff ff8d 	bl	80062b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006396:	e024      	b.n	80063e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d008      	beq.n	80063b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800639e:	4b13      	ldr	r3, [pc, #76]	@ (80063ec <prvProcessTimerOrBlockTask+0x90>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	bf0c      	ite	eq
 80063a8:	2301      	moveq	r3, #1
 80063aa:	2300      	movne	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063b0:	4b0f      	ldr	r3, [pc, #60]	@ (80063f0 <prvProcessTimerOrBlockTask+0x94>)
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	4619      	mov	r1, r3
 80063be:	f7fe ffa1 	bl	8005304 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063c2:	f7ff fa1b 	bl	80057fc <xTaskResumeAll>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063cc:	4b09      	ldr	r3, [pc, #36]	@ (80063f4 <prvProcessTimerOrBlockTask+0x98>)
 80063ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	f3bf 8f6f 	isb	sy
}
 80063dc:	e001      	b.n	80063e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80063de:	f7ff fa0d 	bl	80057fc <xTaskResumeAll>
}
 80063e2:	bf00      	nop
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000e98 	.word	0x20000e98
 80063f0:	20000e9c 	.word	0x20000e9c
 80063f4:	e000ed04 	.word	0xe000ed04

080063f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006400:	4b0e      	ldr	r3, [pc, #56]	@ (800643c <prvGetNextExpireTime+0x44>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	bf0c      	ite	eq
 800640a:	2301      	moveq	r3, #1
 800640c:	2300      	movne	r3, #0
 800640e:	b2db      	uxtb	r3, r3
 8006410:	461a      	mov	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d105      	bne.n	800642a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800641e:	4b07      	ldr	r3, [pc, #28]	@ (800643c <prvGetNextExpireTime+0x44>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	e001      	b.n	800642e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800642e:	68fb      	ldr	r3, [r7, #12]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	bc80      	pop	{r7}
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	20000e94 	.word	0x20000e94

08006440 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006448:	f7ff fa76 	bl	8005938 <xTaskGetTickCount>
 800644c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800644e:	4b0b      	ldr	r3, [pc, #44]	@ (800647c <prvSampleTimeNow+0x3c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	429a      	cmp	r2, r3
 8006456:	d205      	bcs.n	8006464 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006458:	f000 f910 	bl	800667c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	e002      	b.n	800646a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800646a:	4a04      	ldr	r2, [pc, #16]	@ (800647c <prvSampleTimeNow+0x3c>)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006470:	68fb      	ldr	r3, [r7, #12]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20000ea4 	.word	0x20000ea4

08006480 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800648e:	2300      	movs	r3, #0
 8006490:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d812      	bhi.n	80064cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	1ad2      	subs	r2, r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d302      	bcc.n	80064ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80064b4:	2301      	movs	r3, #1
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	e01b      	b.n	80064f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064ba:	4b10      	ldr	r3, [pc, #64]	@ (80064fc <prvInsertTimerInActiveList+0x7c>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3304      	adds	r3, #4
 80064c2:	4619      	mov	r1, r3
 80064c4:	4610      	mov	r0, r2
 80064c6:	f7fe f939 	bl	800473c <vListInsert>
 80064ca:	e012      	b.n	80064f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d206      	bcs.n	80064e2 <prvInsertTimerInActiveList+0x62>
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d302      	bcc.n	80064e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80064dc:	2301      	movs	r3, #1
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	e007      	b.n	80064f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064e2:	4b07      	ldr	r3, [pc, #28]	@ (8006500 <prvInsertTimerInActiveList+0x80>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4619      	mov	r1, r3
 80064ec:	4610      	mov	r0, r2
 80064ee:	f7fe f925 	bl	800473c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80064f2:	697b      	ldr	r3, [r7, #20]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20000e98 	.word	0x20000e98
 8006500:	20000e94 	.word	0x20000e94

08006504 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08e      	sub	sp, #56	@ 0x38
 8006508:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800650a:	e0a5      	b.n	8006658 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	da19      	bge.n	8006546 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006512:	1d3b      	adds	r3, r7, #4
 8006514:	3304      	adds	r3, #4
 8006516:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10b      	bne.n	8006536 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	61fb      	str	r3, [r7, #28]
}
 8006530:	bf00      	nop
 8006532:	bf00      	nop
 8006534:	e7fd      	b.n	8006532 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800653c:	6850      	ldr	r0, [r2, #4]
 800653e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006540:	6892      	ldr	r2, [r2, #8]
 8006542:	4611      	mov	r1, r2
 8006544:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	f2c0 8085 	blt.w	8006658 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d004      	beq.n	8006564 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800655a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655c:	3304      	adds	r3, #4
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe f924 	bl	80047ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006564:	463b      	mov	r3, r7
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff ff6a 	bl	8006440 <prvSampleTimeNow>
 800656c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b09      	cmp	r3, #9
 8006572:	d86c      	bhi.n	800664e <prvProcessReceivedCommands+0x14a>
 8006574:	a201      	add	r2, pc, #4	@ (adr r2, 800657c <prvProcessReceivedCommands+0x78>)
 8006576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657a:	bf00      	nop
 800657c:	080065a5 	.word	0x080065a5
 8006580:	080065a5 	.word	0x080065a5
 8006584:	080065a5 	.word	0x080065a5
 8006588:	0800664f 	.word	0x0800664f
 800658c:	08006603 	.word	0x08006603
 8006590:	0800663d 	.word	0x0800663d
 8006594:	080065a5 	.word	0x080065a5
 8006598:	080065a5 	.word	0x080065a5
 800659c:	0800664f 	.word	0x0800664f
 80065a0:	08006603 	.word	0x08006603
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	18d1      	adds	r1, r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065b2:	f7ff ff65 	bl	8006480 <prvInsertTimerInActiveList>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d04a      	beq.n	8006652 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065c2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80065c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d142      	bne.n	8006652 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	441a      	add	r2, r3
 80065d4:	2300      	movs	r3, #0
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	2300      	movs	r3, #0
 80065da:	2100      	movs	r1, #0
 80065dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065de:	f7ff fe19 	bl	8006214 <xTimerGenericCommand>
 80065e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d133      	bne.n	8006652 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	61bb      	str	r3, [r7, #24]
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	e7fd      	b.n	80065fe <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10b      	bne.n	8006628 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	617b      	str	r3, [r7, #20]
}
 8006622:	bf00      	nop
 8006624:	bf00      	nop
 8006626:	e7fd      	b.n	8006624 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662a:	699a      	ldr	r2, [r3, #24]
 800662c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662e:	18d1      	adds	r1, r2, r3
 8006630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006634:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006636:	f7ff ff23 	bl	8006480 <prvInsertTimerInActiveList>
					break;
 800663a:	e00d      	b.n	8006658 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800663c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d107      	bne.n	8006656 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8006646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006648:	f000 fb72 	bl	8006d30 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800664c:	e003      	b.n	8006656 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800664e:	bf00      	nop
 8006650:	e002      	b.n	8006658 <prvProcessReceivedCommands+0x154>
					break;
 8006652:	bf00      	nop
 8006654:	e000      	b.n	8006658 <prvProcessReceivedCommands+0x154>
					break;
 8006656:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006658:	4b07      	ldr	r3, [pc, #28]	@ (8006678 <prvProcessReceivedCommands+0x174>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	1d39      	adds	r1, r7, #4
 800665e:	2200      	movs	r2, #0
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe fbb3 	bl	8004dcc <xQueueReceive>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	f47f af4f 	bne.w	800650c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800666e:	bf00      	nop
 8006670:	bf00      	nop
 8006672:	3730      	adds	r7, #48	@ 0x30
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	20000e9c 	.word	0x20000e9c

0800667c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006682:	e046      	b.n	8006712 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006684:	4b2c      	ldr	r3, [pc, #176]	@ (8006738 <prvSwitchTimerLists+0xbc>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800668e:	4b2a      	ldr	r3, [pc, #168]	@ (8006738 <prvSwitchTimerLists+0xbc>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3304      	adds	r3, #4
 800669c:	4618      	mov	r0, r3
 800669e:	f7fe f885 	bl	80047ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d12f      	bne.n	8006712 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4413      	add	r3, r2
 80066ba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d90e      	bls.n	80066e2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066d0:	4b19      	ldr	r3, [pc, #100]	@ (8006738 <prvSwitchTimerLists+0xbc>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	3304      	adds	r3, #4
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f7fe f82e 	bl	800473c <vListInsert>
 80066e0:	e017      	b.n	8006712 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066e2:	2300      	movs	r3, #0
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	2300      	movs	r3, #0
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	2100      	movs	r1, #0
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff fd91 	bl	8006214 <xTimerGenericCommand>
 80066f2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10b      	bne.n	8006712 <prvSwitchTimerLists+0x96>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	603b      	str	r3, [r7, #0]
}
 800670c:	bf00      	nop
 800670e:	bf00      	nop
 8006710:	e7fd      	b.n	800670e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006712:	4b09      	ldr	r3, [pc, #36]	@ (8006738 <prvSwitchTimerLists+0xbc>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1b3      	bne.n	8006684 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800671c:	4b06      	ldr	r3, [pc, #24]	@ (8006738 <prvSwitchTimerLists+0xbc>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006722:	4b06      	ldr	r3, [pc, #24]	@ (800673c <prvSwitchTimerLists+0xc0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a04      	ldr	r2, [pc, #16]	@ (8006738 <prvSwitchTimerLists+0xbc>)
 8006728:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800672a:	4a04      	ldr	r2, [pc, #16]	@ (800673c <prvSwitchTimerLists+0xc0>)
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	6013      	str	r3, [r2, #0]
}
 8006730:	bf00      	nop
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	20000e94 	.word	0x20000e94
 800673c:	20000e98 	.word	0x20000e98

08006740 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006746:	f000 f929 	bl	800699c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800674a:	4b15      	ldr	r3, [pc, #84]	@ (80067a0 <prvCheckForValidListAndQueue+0x60>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d120      	bne.n	8006794 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006752:	4814      	ldr	r0, [pc, #80]	@ (80067a4 <prvCheckForValidListAndQueue+0x64>)
 8006754:	f7fd ffa4 	bl	80046a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006758:	4813      	ldr	r0, [pc, #76]	@ (80067a8 <prvCheckForValidListAndQueue+0x68>)
 800675a:	f7fd ffa1 	bl	80046a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800675e:	4b13      	ldr	r3, [pc, #76]	@ (80067ac <prvCheckForValidListAndQueue+0x6c>)
 8006760:	4a10      	ldr	r2, [pc, #64]	@ (80067a4 <prvCheckForValidListAndQueue+0x64>)
 8006762:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006764:	4b12      	ldr	r3, [pc, #72]	@ (80067b0 <prvCheckForValidListAndQueue+0x70>)
 8006766:	4a10      	ldr	r2, [pc, #64]	@ (80067a8 <prvCheckForValidListAndQueue+0x68>)
 8006768:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800676a:	2300      	movs	r3, #0
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	4b11      	ldr	r3, [pc, #68]	@ (80067b4 <prvCheckForValidListAndQueue+0x74>)
 8006770:	4a11      	ldr	r2, [pc, #68]	@ (80067b8 <prvCheckForValidListAndQueue+0x78>)
 8006772:	2110      	movs	r1, #16
 8006774:	200a      	movs	r0, #10
 8006776:	f7fe f8ad 	bl	80048d4 <xQueueGenericCreateStatic>
 800677a:	4603      	mov	r3, r0
 800677c:	4a08      	ldr	r2, [pc, #32]	@ (80067a0 <prvCheckForValidListAndQueue+0x60>)
 800677e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006780:	4b07      	ldr	r3, [pc, #28]	@ (80067a0 <prvCheckForValidListAndQueue+0x60>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006788:	4b05      	ldr	r3, [pc, #20]	@ (80067a0 <prvCheckForValidListAndQueue+0x60>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	490b      	ldr	r1, [pc, #44]	@ (80067bc <prvCheckForValidListAndQueue+0x7c>)
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe fd90 	bl	80052b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006794:	f000 f932 	bl	80069fc <vPortExitCritical>
}
 8006798:	bf00      	nop
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	20000e9c 	.word	0x20000e9c
 80067a4:	20000e6c 	.word	0x20000e6c
 80067a8:	20000e80 	.word	0x20000e80
 80067ac:	20000e94 	.word	0x20000e94
 80067b0:	20000e98 	.word	0x20000e98
 80067b4:	20000f48 	.word	0x20000f48
 80067b8:	20000ea8 	.word	0x20000ea8
 80067bc:	0800702c 	.word	0x0800702c

080067c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3b04      	subs	r3, #4
 80067d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3b04      	subs	r3, #4
 80067de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f023 0201 	bic.w	r2, r3, #1
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3b04      	subs	r3, #4
 80067ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067f0:	4a08      	ldr	r2, [pc, #32]	@ (8006814 <pxPortInitialiseStack+0x54>)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3b14      	subs	r3, #20
 80067fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3b20      	subs	r3, #32
 8006806:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006808:	68fb      	ldr	r3, [r7, #12]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr
 8006814:	08006819 	.word	0x08006819

08006818 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800681e:	2300      	movs	r3, #0
 8006820:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006822:	4b12      	ldr	r3, [pc, #72]	@ (800686c <prvTaskExitError+0x54>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682a:	d00b      	beq.n	8006844 <prvTaskExitError+0x2c>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	60fb      	str	r3, [r7, #12]
}
 800683e:	bf00      	nop
 8006840:	bf00      	nop
 8006842:	e7fd      	b.n	8006840 <prvTaskExitError+0x28>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	60bb      	str	r3, [r7, #8]
}
 8006856:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006858:	bf00      	nop
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0fc      	beq.n	800685a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006860:	bf00      	nop
 8006862:	bf00      	nop
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	bc80      	pop	{r7}
 800686a:	4770      	bx	lr
 800686c:	20000010 	.word	0x20000010

08006870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006870:	4b07      	ldr	r3, [pc, #28]	@ (8006890 <pxCurrentTCBConst2>)
 8006872:	6819      	ldr	r1, [r3, #0]
 8006874:	6808      	ldr	r0, [r1, #0]
 8006876:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800687a:	f380 8809 	msr	PSP, r0
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f04f 0000 	mov.w	r0, #0
 8006886:	f380 8811 	msr	BASEPRI, r0
 800688a:	f04e 0e0d 	orr.w	lr, lr, #13
 800688e:	4770      	bx	lr

08006890 <pxCurrentTCBConst2>:
 8006890:	2000096c 	.word	0x2000096c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop

08006898 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006898:	4806      	ldr	r0, [pc, #24]	@ (80068b4 <prvPortStartFirstTask+0x1c>)
 800689a:	6800      	ldr	r0, [r0, #0]
 800689c:	6800      	ldr	r0, [r0, #0]
 800689e:	f380 8808 	msr	MSP, r0
 80068a2:	b662      	cpsie	i
 80068a4:	b661      	cpsie	f
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	df00      	svc	0
 80068b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068b2:	bf00      	nop
 80068b4:	e000ed08 	.word	0xe000ed08

080068b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068be:	4b32      	ldr	r3, [pc, #200]	@ (8006988 <xPortStartScheduler+0xd0>)
 80068c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	22ff      	movs	r2, #255	@ 0xff
 80068ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	4b2a      	ldr	r3, [pc, #168]	@ (800698c <xPortStartScheduler+0xd4>)
 80068e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006990 <xPortStartScheduler+0xd8>)
 80068e8:	2207      	movs	r2, #7
 80068ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068ec:	e009      	b.n	8006902 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80068ee:	4b28      	ldr	r3, [pc, #160]	@ (8006990 <xPortStartScheduler+0xd8>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	4a26      	ldr	r2, [pc, #152]	@ (8006990 <xPortStartScheduler+0xd8>)
 80068f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006902:	78fb      	ldrb	r3, [r7, #3]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800690a:	2b80      	cmp	r3, #128	@ 0x80
 800690c:	d0ef      	beq.n	80068ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800690e:	4b20      	ldr	r3, [pc, #128]	@ (8006990 <xPortStartScheduler+0xd8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f1c3 0307 	rsb	r3, r3, #7
 8006916:	2b04      	cmp	r3, #4
 8006918:	d00b      	beq.n	8006932 <xPortStartScheduler+0x7a>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	60bb      	str	r3, [r7, #8]
}
 800692c:	bf00      	nop
 800692e:	bf00      	nop
 8006930:	e7fd      	b.n	800692e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006932:	4b17      	ldr	r3, [pc, #92]	@ (8006990 <xPortStartScheduler+0xd8>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	4a15      	ldr	r2, [pc, #84]	@ (8006990 <xPortStartScheduler+0xd8>)
 800693a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800693c:	4b14      	ldr	r3, [pc, #80]	@ (8006990 <xPortStartScheduler+0xd8>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006944:	4a12      	ldr	r2, [pc, #72]	@ (8006990 <xPortStartScheduler+0xd8>)
 8006946:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	b2da      	uxtb	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006950:	4b10      	ldr	r3, [pc, #64]	@ (8006994 <xPortStartScheduler+0xdc>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a0f      	ldr	r2, [pc, #60]	@ (8006994 <xPortStartScheduler+0xdc>)
 8006956:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800695a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800695c:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <xPortStartScheduler+0xdc>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a0c      	ldr	r2, [pc, #48]	@ (8006994 <xPortStartScheduler+0xdc>)
 8006962:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006966:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006968:	f000 f8b8 	bl	8006adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800696c:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <xPortStartScheduler+0xe0>)
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006972:	f7ff ff91 	bl	8006898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006976:	f7ff f8ad 	bl	8005ad4 <vTaskSwitchContext>
	prvTaskExitError();
 800697a:	f7ff ff4d 	bl	8006818 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	e000e400 	.word	0xe000e400
 800698c:	20000f98 	.word	0x20000f98
 8006990:	20000f9c 	.word	0x20000f9c
 8006994:	e000ed20 	.word	0xe000ed20
 8006998:	20000010 	.word	0x20000010

0800699c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	607b      	str	r3, [r7, #4]
}
 80069b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069b6:	4b0f      	ldr	r3, [pc, #60]	@ (80069f4 <vPortEnterCritical+0x58>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3301      	adds	r3, #1
 80069bc:	4a0d      	ldr	r2, [pc, #52]	@ (80069f4 <vPortEnterCritical+0x58>)
 80069be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069c0:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <vPortEnterCritical+0x58>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d110      	bne.n	80069ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069c8:	4b0b      	ldr	r3, [pc, #44]	@ (80069f8 <vPortEnterCritical+0x5c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00b      	beq.n	80069ea <vPortEnterCritical+0x4e>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	603b      	str	r3, [r7, #0]
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	e7fd      	b.n	80069e6 <vPortEnterCritical+0x4a>
	}
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bc80      	pop	{r7}
 80069f2:	4770      	bx	lr
 80069f4:	20000010 	.word	0x20000010
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a02:	4b12      	ldr	r3, [pc, #72]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <vPortExitCritical+0x26>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	607b      	str	r3, [r7, #4]
}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	e7fd      	b.n	8006a1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a22:	4b0a      	ldr	r3, [pc, #40]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	4a08      	ldr	r2, [pc, #32]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a2c:	4b07      	ldr	r3, [pc, #28]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d105      	bne.n	8006a40 <vPortExitCritical+0x44>
 8006a34:	2300      	movs	r3, #0
 8006a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f383 8811 	msr	BASEPRI, r3
}
 8006a3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bc80      	pop	{r7}
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	20000010 	.word	0x20000010

08006a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a50:	f3ef 8009 	mrs	r0, PSP
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <pxCurrentTCBConst>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a60:	6010      	str	r0, [r2, #0]
 8006a62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006a66:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a6a:	f380 8811 	msr	BASEPRI, r0
 8006a6e:	f7ff f831 	bl	8005ad4 <vTaskSwitchContext>
 8006a72:	f04f 0000 	mov.w	r0, #0
 8006a76:	f380 8811 	msr	BASEPRI, r0
 8006a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006a7e:	6819      	ldr	r1, [r3, #0]
 8006a80:	6808      	ldr	r0, [r1, #0]
 8006a82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a86:	f380 8809 	msr	PSP, r0
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	4770      	bx	lr

08006a90 <pxCurrentTCBConst>:
 8006a90:	2000096c 	.word	0x2000096c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop

08006a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	607b      	str	r3, [r7, #4]
}
 8006ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ab2:	f7fe ff4f 	bl	8005954 <xTaskIncrementTick>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006abc:	4b06      	ldr	r3, [pc, #24]	@ (8006ad8 <SysTick_Handler+0x40>)
 8006abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	f383 8811 	msr	BASEPRI, r3
}
 8006ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ad0:	bf00      	nop
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	e000ed04 	.word	0xe000ed04

08006adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8006b0c <vPortSetupTimerInterrupt+0x30>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b10 <vPortSetupTimerInterrupt+0x34>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006aec:	4b09      	ldr	r3, [pc, #36]	@ (8006b14 <vPortSetupTimerInterrupt+0x38>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a09      	ldr	r2, [pc, #36]	@ (8006b18 <vPortSetupTimerInterrupt+0x3c>)
 8006af2:	fba2 2303 	umull	r2, r3, r2, r3
 8006af6:	099b      	lsrs	r3, r3, #6
 8006af8:	4a08      	ldr	r2, [pc, #32]	@ (8006b1c <vPortSetupTimerInterrupt+0x40>)
 8006afa:	3b01      	subs	r3, #1
 8006afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006afe:	4b03      	ldr	r3, [pc, #12]	@ (8006b0c <vPortSetupTimerInterrupt+0x30>)
 8006b00:	2207      	movs	r2, #7
 8006b02:	601a      	str	r2, [r3, #0]
}
 8006b04:	bf00      	nop
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bc80      	pop	{r7}
 8006b0a:	4770      	bx	lr
 8006b0c:	e000e010 	.word	0xe000e010
 8006b10:	e000e018 	.word	0xe000e018
 8006b14:	20000004 	.word	0x20000004
 8006b18:	10624dd3 	.word	0x10624dd3
 8006b1c:	e000e014 	.word	0xe000e014

08006b20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b26:	f3ef 8305 	mrs	r3, IPSR
 8006b2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b0f      	cmp	r3, #15
 8006b30:	d915      	bls.n	8006b5e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b32:	4a17      	ldr	r2, [pc, #92]	@ (8006b90 <vPortValidateInterruptPriority+0x70>)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b3c:	4b15      	ldr	r3, [pc, #84]	@ (8006b94 <vPortValidateInterruptPriority+0x74>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	7afa      	ldrb	r2, [r7, #11]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d20b      	bcs.n	8006b5e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	607b      	str	r3, [r7, #4]
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	e7fd      	b.n	8006b5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b98 <vPortValidateInterruptPriority+0x78>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b66:	4b0d      	ldr	r3, [pc, #52]	@ (8006b9c <vPortValidateInterruptPriority+0x7c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d90b      	bls.n	8006b86 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	603b      	str	r3, [r7, #0]
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	e7fd      	b.n	8006b82 <vPortValidateInterruptPriority+0x62>
	}
 8006b86:	bf00      	nop
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bc80      	pop	{r7}
 8006b8e:	4770      	bx	lr
 8006b90:	e000e3f0 	.word	0xe000e3f0
 8006b94:	20000f98 	.word	0x20000f98
 8006b98:	e000ed0c 	.word	0xe000ed0c
 8006b9c:	20000f9c 	.word	0x20000f9c

08006ba0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08a      	sub	sp, #40	@ 0x28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bac:	f7fe fe18 	bl	80057e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bb0:	4b5a      	ldr	r3, [pc, #360]	@ (8006d1c <pvPortMalloc+0x17c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bb8:	f000 f916 	bl	8006de8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bbc:	4b58      	ldr	r3, [pc, #352]	@ (8006d20 <pvPortMalloc+0x180>)
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f040 8090 	bne.w	8006cea <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01e      	beq.n	8006c0e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006bd0:	2208      	movs	r2, #8
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f003 0307 	and.w	r3, r3, #7
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d015      	beq.n	8006c0e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f023 0307 	bic.w	r3, r3, #7
 8006be8:	3308      	adds	r3, #8
 8006bea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00b      	beq.n	8006c0e <pvPortMalloc+0x6e>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	617b      	str	r3, [r7, #20]
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	e7fd      	b.n	8006c0a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d06a      	beq.n	8006cea <pvPortMalloc+0x14a>
 8006c14:	4b43      	ldr	r3, [pc, #268]	@ (8006d24 <pvPortMalloc+0x184>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d865      	bhi.n	8006cea <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c1e:	4b42      	ldr	r3, [pc, #264]	@ (8006d28 <pvPortMalloc+0x188>)
 8006c20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c22:	4b41      	ldr	r3, [pc, #260]	@ (8006d28 <pvPortMalloc+0x188>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c28:	e004      	b.n	8006c34 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d903      	bls.n	8006c46 <pvPortMalloc+0xa6>
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1f1      	bne.n	8006c2a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c46:	4b35      	ldr	r3, [pc, #212]	@ (8006d1c <pvPortMalloc+0x17c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d04c      	beq.n	8006cea <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2208      	movs	r2, #8
 8006c56:	4413      	add	r3, r2
 8006c58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	1ad2      	subs	r2, r2, r3
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d920      	bls.n	8006cb4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4413      	add	r3, r2
 8006c78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00b      	beq.n	8006c9c <pvPortMalloc+0xfc>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	613b      	str	r3, [r7, #16]
}
 8006c96:	bf00      	nop
 8006c98:	bf00      	nop
 8006c9a:	e7fd      	b.n	8006c98 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	1ad2      	subs	r2, r2, r3
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cae:	69b8      	ldr	r0, [r7, #24]
 8006cb0:	f000 f8fc 	bl	8006eac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8006d24 <pvPortMalloc+0x184>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	4a19      	ldr	r2, [pc, #100]	@ (8006d24 <pvPortMalloc+0x184>)
 8006cc0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cc2:	4b18      	ldr	r3, [pc, #96]	@ (8006d24 <pvPortMalloc+0x184>)
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	4b19      	ldr	r3, [pc, #100]	@ (8006d2c <pvPortMalloc+0x18c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d203      	bcs.n	8006cd6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cce:	4b15      	ldr	r3, [pc, #84]	@ (8006d24 <pvPortMalloc+0x184>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a16      	ldr	r2, [pc, #88]	@ (8006d2c <pvPortMalloc+0x18c>)
 8006cd4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	4b11      	ldr	r3, [pc, #68]	@ (8006d20 <pvPortMalloc+0x180>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006cea:	f7fe fd87 	bl	80057fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00b      	beq.n	8006d10 <pvPortMalloc+0x170>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	60fb      	str	r3, [r7, #12]
}
 8006d0a:	bf00      	nop
 8006d0c:	bf00      	nop
 8006d0e:	e7fd      	b.n	8006d0c <pvPortMalloc+0x16c>
	return pvReturn;
 8006d10:	69fb      	ldr	r3, [r7, #28]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3728      	adds	r7, #40	@ 0x28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20001ba8 	.word	0x20001ba8
 8006d20:	20001bb4 	.word	0x20001bb4
 8006d24:	20001bac 	.word	0x20001bac
 8006d28:	20001ba0 	.word	0x20001ba0
 8006d2c:	20001bb0 	.word	0x20001bb0

08006d30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d04a      	beq.n	8006dd8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d42:	2308      	movs	r3, #8
 8006d44:	425b      	negs	r3, r3
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	4413      	add	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	4b22      	ldr	r3, [pc, #136]	@ (8006de0 <vPortFree+0xb0>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4013      	ands	r3, r2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10b      	bne.n	8006d76 <vPortFree+0x46>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	60fb      	str	r3, [r7, #12]
}
 8006d70:	bf00      	nop
 8006d72:	bf00      	nop
 8006d74:	e7fd      	b.n	8006d72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00b      	beq.n	8006d96 <vPortFree+0x66>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	60bb      	str	r3, [r7, #8]
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop
 8006d94:	e7fd      	b.n	8006d92 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	4b11      	ldr	r3, [pc, #68]	@ (8006de0 <vPortFree+0xb0>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d019      	beq.n	8006dd8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d115      	bne.n	8006dd8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	4b0b      	ldr	r3, [pc, #44]	@ (8006de0 <vPortFree+0xb0>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	43db      	mvns	r3, r3
 8006db6:	401a      	ands	r2, r3
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006dbc:	f7fe fd10 	bl	80057e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	4b07      	ldr	r3, [pc, #28]	@ (8006de4 <vPortFree+0xb4>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4413      	add	r3, r2
 8006dca:	4a06      	ldr	r2, [pc, #24]	@ (8006de4 <vPortFree+0xb4>)
 8006dcc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dce:	6938      	ldr	r0, [r7, #16]
 8006dd0:	f000 f86c 	bl	8006eac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006dd4:	f7fe fd12 	bl	80057fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dd8:	bf00      	nop
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	20001bb4 	.word	0x20001bb4
 8006de4:	20001bac 	.word	0x20001bac

08006de8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006dee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006df2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006df4:	4b27      	ldr	r3, [pc, #156]	@ (8006e94 <prvHeapInit+0xac>)
 8006df6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00c      	beq.n	8006e1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3307      	adds	r3, #7
 8006e06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 0307 	bic.w	r3, r3, #7
 8006e0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	4a1f      	ldr	r2, [pc, #124]	@ (8006e94 <prvHeapInit+0xac>)
 8006e18:	4413      	add	r3, r2
 8006e1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e20:	4a1d      	ldr	r2, [pc, #116]	@ (8006e98 <prvHeapInit+0xb0>)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e26:	4b1c      	ldr	r3, [pc, #112]	@ (8006e98 <prvHeapInit+0xb0>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	4413      	add	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e34:	2208      	movs	r2, #8
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	1a9b      	subs	r3, r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0307 	bic.w	r3, r3, #7
 8006e42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4a15      	ldr	r2, [pc, #84]	@ (8006e9c <prvHeapInit+0xb4>)
 8006e48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e4a:	4b14      	ldr	r3, [pc, #80]	@ (8006e9c <prvHeapInit+0xb4>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e52:	4b12      	ldr	r3, [pc, #72]	@ (8006e9c <prvHeapInit+0xb4>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	1ad2      	subs	r2, r2, r3
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e68:	4b0c      	ldr	r3, [pc, #48]	@ (8006e9c <prvHeapInit+0xb4>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	4a0a      	ldr	r2, [pc, #40]	@ (8006ea0 <prvHeapInit+0xb8>)
 8006e76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	4a09      	ldr	r2, [pc, #36]	@ (8006ea4 <prvHeapInit+0xbc>)
 8006e7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e80:	4b09      	ldr	r3, [pc, #36]	@ (8006ea8 <prvHeapInit+0xc0>)
 8006e82:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006e86:	601a      	str	r2, [r3, #0]
}
 8006e88:	bf00      	nop
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bc80      	pop	{r7}
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	20000fa0 	.word	0x20000fa0
 8006e98:	20001ba0 	.word	0x20001ba0
 8006e9c:	20001ba8 	.word	0x20001ba8
 8006ea0:	20001bb0 	.word	0x20001bb0
 8006ea4:	20001bac 	.word	0x20001bac
 8006ea8:	20001bb4 	.word	0x20001bb4

08006eac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006eb4:	4b27      	ldr	r3, [pc, #156]	@ (8006f54 <prvInsertBlockIntoFreeList+0xa8>)
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	e002      	b.n	8006ec0 <prvInsertBlockIntoFreeList+0x14>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d8f7      	bhi.n	8006eba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d108      	bne.n	8006eee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	441a      	add	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	441a      	add	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d118      	bne.n	8006f34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	4b14      	ldr	r3, [pc, #80]	@ (8006f58 <prvInsertBlockIntoFreeList+0xac>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d00d      	beq.n	8006f2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	441a      	add	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	e008      	b.n	8006f3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f58 <prvInsertBlockIntoFreeList+0xac>)
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	e003      	b.n	8006f3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d002      	beq.n	8006f4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bc80      	pop	{r7}
 8006f52:	4770      	bx	lr
 8006f54:	20001ba0 	.word	0x20001ba0
 8006f58:	20001ba8 	.word	0x20001ba8

08006f5c <memset>:
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	4402      	add	r2, r0
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d100      	bne.n	8006f66 <memset+0xa>
 8006f64:	4770      	bx	lr
 8006f66:	f803 1b01 	strb.w	r1, [r3], #1
 8006f6a:	e7f9      	b.n	8006f60 <memset+0x4>

08006f6c <__libc_init_array>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	2600      	movs	r6, #0
 8006f70:	4d0c      	ldr	r5, [pc, #48]	@ (8006fa4 <__libc_init_array+0x38>)
 8006f72:	4c0d      	ldr	r4, [pc, #52]	@ (8006fa8 <__libc_init_array+0x3c>)
 8006f74:	1b64      	subs	r4, r4, r5
 8006f76:	10a4      	asrs	r4, r4, #2
 8006f78:	42a6      	cmp	r6, r4
 8006f7a:	d109      	bne.n	8006f90 <__libc_init_array+0x24>
 8006f7c:	f000 f828 	bl	8006fd0 <_init>
 8006f80:	2600      	movs	r6, #0
 8006f82:	4d0a      	ldr	r5, [pc, #40]	@ (8006fac <__libc_init_array+0x40>)
 8006f84:	4c0a      	ldr	r4, [pc, #40]	@ (8006fb0 <__libc_init_array+0x44>)
 8006f86:	1b64      	subs	r4, r4, r5
 8006f88:	10a4      	asrs	r4, r4, #2
 8006f8a:	42a6      	cmp	r6, r4
 8006f8c:	d105      	bne.n	8006f9a <__libc_init_array+0x2e>
 8006f8e:	bd70      	pop	{r4, r5, r6, pc}
 8006f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f94:	4798      	blx	r3
 8006f96:	3601      	adds	r6, #1
 8006f98:	e7ee      	b.n	8006f78 <__libc_init_array+0xc>
 8006f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f9e:	4798      	blx	r3
 8006fa0:	3601      	adds	r6, #1
 8006fa2:	e7f2      	b.n	8006f8a <__libc_init_array+0x1e>
 8006fa4:	080070ec 	.word	0x080070ec
 8006fa8:	080070ec 	.word	0x080070ec
 8006fac:	080070ec 	.word	0x080070ec
 8006fb0:	080070f0 	.word	0x080070f0

08006fb4 <memcpy>:
 8006fb4:	440a      	add	r2, r1
 8006fb6:	4291      	cmp	r1, r2
 8006fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fbc:	d100      	bne.n	8006fc0 <memcpy+0xc>
 8006fbe:	4770      	bx	lr
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc6:	4291      	cmp	r1, r2
 8006fc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fcc:	d1f9      	bne.n	8006fc2 <memcpy+0xe>
 8006fce:	bd10      	pop	{r4, pc}

08006fd0 <_init>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	bf00      	nop
 8006fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd6:	bc08      	pop	{r3}
 8006fd8:	469e      	mov	lr, r3
 8006fda:	4770      	bx	lr

08006fdc <_fini>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	bf00      	nop
 8006fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe2:	bc08      	pop	{r3}
 8006fe4:	469e      	mov	lr, r3
 8006fe6:	4770      	bx	lr
