
0_main_prj_tmrSW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006cf8  08006cf8  00007cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006da4  08006da4  00008014  2**0
                  CONTENTS
  4 .ARM          00000008  08006da4  08006da4  00007da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dac  08006dac  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dac  08006dac  00007dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006db0  08006db0  00007db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006db4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000178c  20000014  08006dc8  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017a0  08006dc8  000087a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f79  00000000  00000000  0000803d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000398f  00000000  00000000  00020fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001800  00000000  00000000  00024948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012d9  00000000  00000000  00026148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a492  00000000  00000000  00027421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d055  00000000  00000000  000418b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097bb6  00000000  00000000  0005e908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f64be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006594  00000000  00000000  000f6504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a4  00000000  00000000  000fca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ce0 	.word	0x08006ce0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08006ce0 	.word	0x08006ce0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <CLCD_Delay>:
//************************** Low Level Function ****************************************************************//
uint8_t currentline;
uint8_t Xcursor,Ycursor,countWriteChar,CurrentWriteChar;
CLCD_I2C_Name LCD1;
static void CLCD_Delay(uint16_t Time)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	4618      	mov	r0, r3
 800016e:	f000 ffe9 	bl	8001144 <HAL_Delay>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}

0800017a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b086      	sub	sp, #24
 800017e:	af02      	add	r7, sp, #8
 8000180:	6078      	str	r0, [r7, #4]
 8000182:	460b      	mov	r3, r1
 8000184:	70fb      	strb	r3, [r7, #3]
 8000186:	4613      	mov	r3, r2
 8000188:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800018a:	78fb      	ldrb	r3, [r7, #3]
 800018c:	f023 030f 	bic.w	r3, r3, #15
 8000190:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000192:	78fb      	ldrb	r3, [r7, #3]
 8000194:	011b      	lsls	r3, r3, #4
 8000196:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	7adb      	ldrb	r3, [r3, #11]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d007      	beq.n	80001b0 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	f043 0308 	orr.w	r3, r3, #8
 80001a6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 80001a8:	7bbb      	ldrb	r3, [r7, #14]
 80001aa:	f043 0308 	orr.w	r3, r3, #8
 80001ae:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80001b0:	78bb      	ldrb	r3, [r7, #2]
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	d108      	bne.n	80001c8 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
 80001b8:	f043 0301 	orr.w	r3, r3, #1
 80001bc:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	73bb      	strb	r3, [r7, #14]
 80001c6:	e00a      	b.n	80001de <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001c8:	78bb      	ldrb	r3, [r7, #2]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d107      	bne.n	80001de <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f023 0301 	bic.w	r3, r3, #1
 80001d4:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001d6:	7bbb      	ldrb	r3, [r7, #14]
 80001d8:	f023 0301 	bic.w	r3, r3, #1
 80001dc:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffb9 	bl	8000160 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001f2:	7bbb      	ldrb	r3, [r7, #14]
 80001f4:	f043 0304 	orr.w	r3, r3, #4
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f7ff ffaf 	bl	8000160 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6818      	ldr	r0, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	791b      	ldrb	r3, [r3, #4]
 800020e:	4619      	mov	r1, r3
 8000210:	f107 0208 	add.w	r2, r7, #8
 8000214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2304      	movs	r3, #4
 800021c:	f001 fc4a 	bl	8001ab4 <HAL_I2C_Master_Transmit>

}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <CLCD_I2C_Init>:
//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	4611      	mov	r1, r2
 8000234:	461a      	mov	r2, r3
 8000236:	460b      	mov	r3, r1
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	4613      	mov	r3, r2
 800023c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	79fa      	ldrb	r2, [r7, #7]
 8000248:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	7e3a      	ldrb	r2, [r7, #24]
 8000254:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2228      	movs	r2, #40	@ 0x28
 800025a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2206      	movs	r2, #6
 8000260:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	220c      	movs	r2, #12
 8000266:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	2214      	movs	r2, #20
 800026c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2208      	movs	r2, #8
 8000272:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000274:	2032      	movs	r0, #50	@ 0x32
 8000276:	f7ff ff73 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800027a:	2200      	movs	r2, #0
 800027c:	2133      	movs	r1, #51	@ 0x33
 800027e:	68f8      	ldr	r0, [r7, #12]
 8000280:	f7ff ff7b 	bl	800017a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000284:	2200      	movs	r2, #0
 8000286:	2133      	movs	r1, #51	@ 0x33
 8000288:	68f8      	ldr	r0, [r7, #12]
 800028a:	f7ff ff76 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028e:	2005      	movs	r0, #5
 8000290:	f7ff ff66 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000294:	2200      	movs	r2, #0
 8000296:	2132      	movs	r1, #50	@ 0x32
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f7ff ff6e 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029e:	2005      	movs	r0, #5
 80002a0:	f7ff ff5e 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2120      	movs	r1, #32
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff66 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80002ae:	2005      	movs	r0, #5
 80002b0:	f7ff ff56 	bl	8000160 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	79db      	ldrb	r3, [r3, #7]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f7ff ff5c 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	7a1b      	ldrb	r3, [r3, #8]
 80002c6:	2200      	movs	r2, #0
 80002c8:	4619      	mov	r1, r3
 80002ca:	68f8      	ldr	r0, [r7, #12]
 80002cc:	f7ff ff55 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	7a5b      	ldrb	r3, [r3, #9]
 80002d4:	2200      	movs	r2, #0
 80002d6:	4619      	mov	r1, r3
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	f7ff ff4e 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	7a9b      	ldrb	r3, [r3, #10]
 80002e2:	2200      	movs	r2, #0
 80002e4:	4619      	mov	r1, r3
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff47 	bl	800017a <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2101      	movs	r1, #1
 80002f0:	68f8      	ldr	r0, [r7, #12]
 80002f2:	f7ff ff42 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2102      	movs	r1, #2
 80002fa:	68f8      	ldr	r0, [r7, #12]
 80002fc:	f7ff ff3d 	bl	800017a <CLCD_WriteI2C>
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	4a06      	ldr	r2, [pc, #24]	@ (8000330 <vApplicationGetIdleTaskMemory+0x28>)
 8000318:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	4a05      	ldr	r2, [pc, #20]	@ (8000334 <vApplicationGetIdleTaskMemory+0x2c>)
 800031e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2280      	movs	r2, #128	@ 0x80
 8000324:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000326:	bf00      	nop
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	20000030 	.word	0x20000030
 8000334:	20000084 	.word	0x20000084

08000338 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	4a07      	ldr	r2, [pc, #28]	@ (8000364 <vApplicationGetTimerTaskMemory+0x2c>)
 8000348:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	4a06      	ldr	r2, [pc, #24]	@ (8000368 <vApplicationGetTimerTaskMemory+0x30>)
 800034e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000356:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000358:	bf00      	nop
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20000284 	.word	0x20000284
 8000368:	200002d8 	.word	0x200002d8

0800036c <Init_Sys>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void Init_Sys (void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L_ERR_GPIO_Port, L_ERR_Pin, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000376:	480b      	ldr	r0, [pc, #44]	@ (80003a4 <Init_Sys+0x38>)
 8000378:	f001 fa1e 	bl	80017b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_USR_GPIO_Port, L_USR_Pin, GPIO_PIN_SET);
 800037c:	2201      	movs	r2, #1
 800037e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000382:	4808      	ldr	r0, [pc, #32]	@ (80003a4 <Init_Sys+0x38>)
 8000384:	f001 fa18 	bl	80017b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_DBG_GPIO_Port, L_DBG_Pin, GPIO_PIN_SET);
 8000388:	2201      	movs	r2, #1
 800038a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800038e:	4806      	ldr	r0, [pc, #24]	@ (80003a8 <Init_Sys+0x3c>)
 8000390:	f001 fa12 	bl	80017b8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_CTR_GPIO_Port, LCD_CTR_Pin, GPIO_PIN_SET);
 8000394:	2201      	movs	r2, #1
 8000396:	2180      	movs	r1, #128	@ 0x80
 8000398:	4804      	ldr	r0, [pc, #16]	@ (80003ac <Init_Sys+0x40>)
 800039a:	f001 fa0d 	bl	80017b8 <HAL_GPIO_WritePin>
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40010800 	.word	0x40010800
 80003a8:	40011000 	.word	0x40011000
 80003ac:	40010c00 	.word	0x40010c00

080003b0 <HAL_UART_RxCpltCallback>:
uint8_t rxData = 0;;
uint8_t rxArray[20] = {};
uint8_t rxCounter = 1;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	if(&huart1 == huart)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a3e      	ldr	r2, [pc, #248]	@ (80004b4 <HAL_UART_RxCpltCallback+0x104>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d138      	bne.n	8000432 <HAL_UART_RxCpltCallback+0x82>
	{

		if(rxData == '\r')
 80003c0:	4b3d      	ldr	r3, [pc, #244]	@ (80004b8 <HAL_UART_RxCpltCallback+0x108>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b0d      	cmp	r3, #13
 80003c6:	d11a      	bne.n	80003fe <HAL_UART_RxCpltCallback+0x4e>
		{
			HAL_UART_Transmit(&huart1, rxArray, strlen((const char *)rxArray), 100);
 80003c8:	483c      	ldr	r0, [pc, #240]	@ (80004bc <HAL_UART_RxCpltCallback+0x10c>)
 80003ca:	f7ff fec1 	bl	8000150 <strlen>
 80003ce:	4603      	mov	r3, r0
 80003d0:	b29a      	uxth	r2, r3
 80003d2:	2364      	movs	r3, #100	@ 0x64
 80003d4:	4939      	ldr	r1, [pc, #228]	@ (80004bc <HAL_UART_RxCpltCallback+0x10c>)
 80003d6:	4837      	ldr	r0, [pc, #220]	@ (80004b4 <HAL_UART_RxCpltCallback+0x104>)
 80003d8:	f003 f878 	bl	80034cc <HAL_UART_Transmit>
			for(uint8_t i = 0; i < 20; i++)
 80003dc:	2300      	movs	r3, #0
 80003de:	73fb      	strb	r3, [r7, #15]
 80003e0:	e009      	b.n	80003f6 <HAL_UART_RxCpltCallback+0x46>
			{
				rxArray[i] = 0;
 80003e2:	7bfb      	ldrb	r3, [r7, #15]
 80003e4:	4a35      	ldr	r2, [pc, #212]	@ (80004bc <HAL_UART_RxCpltCallback+0x10c>)
 80003e6:	2100      	movs	r1, #0
 80003e8:	54d1      	strb	r1, [r2, r3]
				rxCounter = 0;
 80003ea:	4b35      	ldr	r3, [pc, #212]	@ (80004c0 <HAL_UART_RxCpltCallback+0x110>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 20; i++)
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	3301      	adds	r3, #1
 80003f4:	73fb      	strb	r3, [r7, #15]
 80003f6:	7bfb      	ldrb	r3, [r7, #15]
 80003f8:	2b13      	cmp	r3, #19
 80003fa:	d9f2      	bls.n	80003e2 <HAL_UART_RxCpltCallback+0x32>
 80003fc:	e00c      	b.n	8000418 <HAL_UART_RxCpltCallback+0x68>
			}
		}
		else
		{
			rxArray[rxCounter] = rxData;
 80003fe:	4b30      	ldr	r3, [pc, #192]	@ (80004c0 <HAL_UART_RxCpltCallback+0x110>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	461a      	mov	r2, r3
 8000404:	4b2c      	ldr	r3, [pc, #176]	@ (80004b8 <HAL_UART_RxCpltCallback+0x108>)
 8000406:	7819      	ldrb	r1, [r3, #0]
 8000408:	4b2c      	ldr	r3, [pc, #176]	@ (80004bc <HAL_UART_RxCpltCallback+0x10c>)
 800040a:	5499      	strb	r1, [r3, r2]
			rxCounter++;
 800040c:	4b2c      	ldr	r3, [pc, #176]	@ (80004c0 <HAL_UART_RxCpltCallback+0x110>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	3301      	adds	r3, #1
 8000412:	b2da      	uxtb	r2, r3
 8000414:	4b2a      	ldr	r3, [pc, #168]	@ (80004c0 <HAL_UART_RxCpltCallback+0x110>)
 8000416:	701a      	strb	r2, [r3, #0]
		}
		if(rxCounter >= 20)
 8000418:	4b29      	ldr	r3, [pc, #164]	@ (80004c0 <HAL_UART_RxCpltCallback+0x110>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b13      	cmp	r3, #19
 800041e:	d902      	bls.n	8000426 <HAL_UART_RxCpltCallback+0x76>
		{
			rxCounter = 0;
 8000420:	4b27      	ldr	r3, [pc, #156]	@ (80004c0 <HAL_UART_RxCpltCallback+0x110>)
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8000426:	2201      	movs	r2, #1
 8000428:	4923      	ldr	r1, [pc, #140]	@ (80004b8 <HAL_UART_RxCpltCallback+0x108>)
 800042a:	4822      	ldr	r0, [pc, #136]	@ (80004b4 <HAL_UART_RxCpltCallback+0x104>)
 800042c:	f003 f8d1 	bl	80035d2 <HAL_UART_Receive_IT>
			rxCounter = 0;
		}
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
	}

}
 8000430:	e03b      	b.n	80004aa <HAL_UART_RxCpltCallback+0xfa>
	else if(&huart2 == huart)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a23      	ldr	r2, [pc, #140]	@ (80004c4 <HAL_UART_RxCpltCallback+0x114>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d137      	bne.n	80004aa <HAL_UART_RxCpltCallback+0xfa>
		if(rxData == '\r')
 800043a:	4b1f      	ldr	r3, [pc, #124]	@ (80004b8 <HAL_UART_RxCpltCallback+0x108>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b0d      	cmp	r3, #13
 8000440:	d11a      	bne.n	8000478 <HAL_UART_RxCpltCallback+0xc8>
			HAL_UART_Transmit(&huart2, rxArray, strlen((const char *)rxArray), 100);
 8000442:	481e      	ldr	r0, [pc, #120]	@ (80004bc <HAL_UART_RxCpltCallback+0x10c>)
 8000444:	f7ff fe84 	bl	8000150 <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	2364      	movs	r3, #100	@ 0x64
 800044e:	491b      	ldr	r1, [pc, #108]	@ (80004bc <HAL_UART_RxCpltCallback+0x10c>)
 8000450:	481c      	ldr	r0, [pc, #112]	@ (80004c4 <HAL_UART_RxCpltCallback+0x114>)
 8000452:	f003 f83b 	bl	80034cc <HAL_UART_Transmit>
			for(uint8_t i = 0; i < 20; i++)
 8000456:	2300      	movs	r3, #0
 8000458:	73bb      	strb	r3, [r7, #14]
 800045a:	e009      	b.n	8000470 <HAL_UART_RxCpltCallback+0xc0>
				rxArray[i] = 0;
 800045c:	7bbb      	ldrb	r3, [r7, #14]
 800045e:	4a17      	ldr	r2, [pc, #92]	@ (80004bc <HAL_UART_RxCpltCallback+0x10c>)
 8000460:	2100      	movs	r1, #0
 8000462:	54d1      	strb	r1, [r2, r3]
				rxCounter = 0;
 8000464:	4b16      	ldr	r3, [pc, #88]	@ (80004c0 <HAL_UART_RxCpltCallback+0x110>)
 8000466:	2200      	movs	r2, #0
 8000468:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 20; i++)
 800046a:	7bbb      	ldrb	r3, [r7, #14]
 800046c:	3301      	adds	r3, #1
 800046e:	73bb      	strb	r3, [r7, #14]
 8000470:	7bbb      	ldrb	r3, [r7, #14]
 8000472:	2b13      	cmp	r3, #19
 8000474:	d9f2      	bls.n	800045c <HAL_UART_RxCpltCallback+0xac>
 8000476:	e00c      	b.n	8000492 <HAL_UART_RxCpltCallback+0xe2>
			rxArray[rxCounter] = rxData;
 8000478:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <HAL_UART_RxCpltCallback+0x110>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	461a      	mov	r2, r3
 800047e:	4b0e      	ldr	r3, [pc, #56]	@ (80004b8 <HAL_UART_RxCpltCallback+0x108>)
 8000480:	7819      	ldrb	r1, [r3, #0]
 8000482:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <HAL_UART_RxCpltCallback+0x10c>)
 8000484:	5499      	strb	r1, [r3, r2]
			rxCounter++;
 8000486:	4b0e      	ldr	r3, [pc, #56]	@ (80004c0 <HAL_UART_RxCpltCallback+0x110>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	3301      	adds	r3, #1
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <HAL_UART_RxCpltCallback+0x110>)
 8000490:	701a      	strb	r2, [r3, #0]
		if(rxCounter >= 20)
 8000492:	4b0b      	ldr	r3, [pc, #44]	@ (80004c0 <HAL_UART_RxCpltCallback+0x110>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b13      	cmp	r3, #19
 8000498:	d902      	bls.n	80004a0 <HAL_UART_RxCpltCallback+0xf0>
			rxCounter = 0;
 800049a:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <HAL_UART_RxCpltCallback+0x110>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 80004a0:	2201      	movs	r2, #1
 80004a2:	4905      	ldr	r1, [pc, #20]	@ (80004b8 <HAL_UART_RxCpltCallback+0x108>)
 80004a4:	4807      	ldr	r0, [pc, #28]	@ (80004c4 <HAL_UART_RxCpltCallback+0x114>)
 80004a6:	f003 f894 	bl	80035d2 <HAL_UART_Receive_IT>
}
 80004aa:	bf00      	nop
 80004ac:	3710      	adds	r7, #16
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000814 	.word	0x20000814
 80004b8:	200008b4 	.word	0x200008b4
 80004bc:	200008b8 	.word	0x200008b8
 80004c0:	20000000 	.word	0x20000000
 80004c4:	2000085c 	.word	0x2000085c

080004c8 <Task_action>:

void Task_action(char* sms)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, sms, strlen(sms), 100);
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f7ff fe3d 	bl	8000150 <strlen>
 80004d6:	4603      	mov	r3, r0
 80004d8:	b29a      	uxth	r2, r3
 80004da:	2364      	movs	r3, #100	@ 0x64
 80004dc:	6879      	ldr	r1, [r7, #4]
 80004de:	4806      	ldr	r0, [pc, #24]	@ (80004f8 <Task_action+0x30>)
 80004e0:	f002 fff4 	bl	80034cc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "\n", 1, 100);
 80004e4:	2364      	movs	r3, #100	@ 0x64
 80004e6:	2201      	movs	r2, #1
 80004e8:	4904      	ldr	r1, [pc, #16]	@ (80004fc <Task_action+0x34>)
 80004ea:	4803      	ldr	r0, [pc, #12]	@ (80004f8 <Task_action+0x30>)
 80004ec:	f002 ffee 	bl	80034cc <HAL_UART_Transmit>
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000814 	.word	0x20000814
 80004fc:	08006cf8 	.word	0x08006cf8

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b098      	sub	sp, #96	@ 0x60
 8000504:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fdeb 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f883 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fa23 	bl	8000958 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000512:	f000 f8f3 	bl	80006fc <MX_SPI1_Init>
  MX_TIM2_Init();
 8000516:	f000 f977 	bl	8000808 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800051a:	f000 f9c9 	bl	80008b0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800051e:	f000 f923 	bl	8000768 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000522:	f000 f8bd 	bl	80006a0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000526:	f000 f9ed 	bl	8000904 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Init_Sys();
 800052a:	f7ff ff1f 	bl	800036c <Init_Sys>

  HAL_GPIO_WritePin(LCD_CTR_GPIO_Port, LCD_CTR_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2180      	movs	r1, #128	@ 0x80
 8000532:	482c      	ldr	r0, [pc, #176]	@ (80005e4 <main+0xe4>)
 8000534:	f001 f940 	bl	80017b8 <HAL_GPIO_WritePin>

  CLCD_I2C_Init(&LCD1,&hi2c1,ADDR_PCF8574,20,4);
 8000538:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800053c:	2304      	movs	r3, #4
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	2314      	movs	r3, #20
 8000542:	227e      	movs	r2, #126	@ 0x7e
 8000544:	4928      	ldr	r1, [pc, #160]	@ (80005e8 <main+0xe8>)
 8000546:	f7ff fe6f 	bl	8000228 <CLCD_I2C_Init>
//  LCD_I2C_Init();

#if (TEST_UART)
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800054a:	2201      	movs	r2, #1
 800054c:	4927      	ldr	r1, [pc, #156]	@ (80005ec <main+0xec>)
 800054e:	4828      	ldr	r0, [pc, #160]	@ (80005f0 <main+0xf0>)
 8000550:	f003 f83f 	bl	80035d2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000554:	2201      	movs	r2, #1
 8000556:	4925      	ldr	r1, [pc, #148]	@ (80005ec <main+0xec>)
 8000558:	4826      	ldr	r0, [pc, #152]	@ (80005f4 <main+0xf4>)
 800055a:	f003 f83a 	bl	80035d2 <HAL_UART_Receive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 800055e:	2300      	movs	r3, #0
 8000560:	647b      	str	r3, [r7, #68]	@ 0x44
 8000562:	2300      	movs	r3, #0
 8000564:	64bb      	str	r3, [r7, #72]	@ 0x48
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000566:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800056a:	2101      	movs	r1, #1
 800056c:	4618      	mov	r0, r3
 800056e:	f003 fedd 	bl	800432c <osSemaphoreCreate>
 8000572:	4603      	mov	r3, r0
 8000574:	4a20      	ldr	r2, [pc, #128]	@ (80005f8 <main+0xf8>)
 8000576:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 8000578:	4b20      	ldr	r3, [pc, #128]	@ (80005fc <main+0xfc>)
 800057a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800057c:	2300      	movs	r3, #0
 800057e:	643b      	str	r3, [r7, #64]	@ 0x40
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8000580:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000584:	2200      	movs	r2, #0
 8000586:	2101      	movs	r1, #1
 8000588:	4618      	mov	r0, r3
 800058a:	f003 fe57 	bl	800423c <osTimerCreate>
 800058e:	4603      	mov	r3, r0
 8000590:	4a1b      	ldr	r2, [pc, #108]	@ (8000600 <main+0x100>)
 8000592:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of GiveSem */
  osThreadDef(GiveSem, StartGiveSem_Hand, osPriorityNormal, 0, 128);
 8000594:	4b1b      	ldr	r3, [pc, #108]	@ (8000604 <main+0x104>)
 8000596:	f107 0420 	add.w	r4, r7, #32
 800059a:	461d      	mov	r5, r3
 800059c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GiveSemHandle = osThreadCreate(osThread(GiveSem), NULL);
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fde3 	bl	800417a <osThreadCreate>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a14      	ldr	r2, [pc, #80]	@ (8000608 <main+0x108>)
 80005b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of TakeSem */
  osThreadDef(TakeSem, StartTakeSem_Hand, osPriorityLow, 0, 128);
 80005ba:	4b14      	ldr	r3, [pc, #80]	@ (800060c <main+0x10c>)
 80005bc:	1d3c      	adds	r4, r7, #4
 80005be:	461d      	mov	r5, r3
 80005c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TakeSemHandle = osThreadCreate(osThread(TakeSem), NULL);
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 fdd2 	bl	800417a <osThreadCreate>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000610 <main+0x110>)
 80005da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005dc:	f003 fdc6 	bl	800416c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0xe0>
 80005e4:	40010c00 	.word	0x40010c00
 80005e8:	200006d8 	.word	0x200006d8
 80005ec:	200008b4 	.word	0x200008b4
 80005f0:	20000814 	.word	0x20000814
 80005f4:	2000085c 	.word	0x2000085c
 80005f8:	200008b0 	.word	0x200008b0
 80005fc:	08000b19 	.word	0x08000b19
 8000600:	200008ac 	.word	0x200008ac
 8000604:	08006d04 	.word	0x08006d04
 8000608:	200008a4 	.word	0x200008a4
 800060c:	08006d28 	.word	0x08006d28
 8000610:	200008a8 	.word	0x200008a8

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b090      	sub	sp, #64	@ 0x40
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	2228      	movs	r2, #40	@ 0x28
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f006 fb22 	bl	8006c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000636:	2301      	movs	r3, #1
 8000638:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000650:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000652:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0318 	add.w	r3, r7, #24
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fd81 	bl	8002164 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000668:	f000 fa76 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2102      	movs	r1, #2
 8000686:	4618      	mov	r0, r3
 8000688:	f001 ffee 	bl	8002668 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000692:	f000 fa61 	bl	8000b58 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3740      	adds	r7, #64	@ 0x40
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006a6:	4a13      	ldr	r2, [pc, #76]	@ (80006f4 <MX_I2C1_Init+0x54>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006ac:	4a12      	ldr	r2, [pc, #72]	@ (80006f8 <MX_I2C1_Init+0x58>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006de:	f001 f8a5 	bl	800182c <HAL_I2C_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 fa36 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200006d8 	.word	0x200006d8
 80006f4:	40005400 	.word	0x40005400
 80006f8:	000186a0 	.word	0x000186a0

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	@ (8000764 <MX_SPI1_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000730:	2228      	movs	r2, #40	@ 0x28
 8000732:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	@ (8000760 <MX_SPI1_Init+0x64>)
 800074e:	f002 f949 	bl	80029e4 <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f9fe 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000072c 	.word	0x2000072c
 8000764:	40013000 	.word	0x40013000

08000768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	463b      	mov	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000784:	4b1e      	ldr	r3, [pc, #120]	@ (8000800 <MX_TIM1_Init+0x98>)
 8000786:	4a1f      	ldr	r2, [pc, #124]	@ (8000804 <MX_TIM1_Init+0x9c>)
 8000788:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_TIM1_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <MX_TIM1_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000796:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_TIM1_Init+0x98>)
 8000798:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800079c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079e:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <MX_TIM1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007a4:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_TIM1_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <MX_TIM1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007b0:	4813      	ldr	r0, [pc, #76]	@ (8000800 <MX_TIM1_Init+0x98>)
 80007b2:	f002 f99b 	bl	8002aec <HAL_TIM_Base_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007bc:	f000 f9cc 	bl	8000b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	4619      	mov	r1, r3
 80007cc:	480c      	ldr	r0, [pc, #48]	@ (8000800 <MX_TIM1_Init+0x98>)
 80007ce:	f002 fbd9 	bl	8002f84 <HAL_TIM_ConfigClockSource>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80007d8:	f000 f9be 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_TIM1_Init+0x98>)
 80007ea:	f002 fdaf 	bl	800334c <HAL_TIMEx_MasterConfigSynchronization>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007f4:	f000 f9b0 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000784 	.word	0x20000784
 8000804:	40012c00 	.word	0x40012c00

08000808 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	@ 0x30
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2224      	movs	r2, #36	@ 0x24
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f006 fa28 	bl	8006c6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000824:	4b21      	ldr	r3, [pc, #132]	@ (80008ac <MX_TIM2_Init+0xa4>)
 8000826:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800082a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <MX_TIM2_Init+0xa4>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <MX_TIM2_Init+0xa4>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000838:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <MX_TIM2_Init+0xa4>)
 800083a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800083e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <MX_TIM2_Init+0xa4>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000846:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <MX_TIM2_Init+0xa4>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800084c:	2301      	movs	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000864:	2301      	movs	r3, #1
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4619      	mov	r1, r3
 8000876:	480d      	ldr	r0, [pc, #52]	@ (80008ac <MX_TIM2_Init+0xa4>)
 8000878:	f002 f9da 	bl	8002c30 <HAL_TIM_Encoder_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000882:	f000 f969 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	@ (80008ac <MX_TIM2_Init+0xa4>)
 8000894:	f002 fd5a 	bl	800334c <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800089e:	f000 f95b 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	3730      	adds	r7, #48	@ 0x30
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200007cc 	.word	0x200007cc

080008b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <MX_USART1_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008e8:	f002 fda0 	bl	800342c <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008f2:	f000 f931 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000814 	.word	0x20000814
 8000900:	40013800 	.word	0x40013800

08000904 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 800090a:	4a12      	ldr	r2, [pc, #72]	@ (8000954 <MX_USART2_UART_Init+0x50>)
 800090c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 800093c:	f002 fd76 	bl	800342c <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000946:	f000 f907 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000085c 	.word	0x2000085c
 8000954:	40004400 	.word	0x40004400

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096c:	4b54      	ldr	r3, [pc, #336]	@ (8000ac0 <MX_GPIO_Init+0x168>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a53      	ldr	r2, [pc, #332]	@ (8000ac0 <MX_GPIO_Init+0x168>)
 8000972:	f043 0310 	orr.w	r3, r3, #16
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b51      	ldr	r3, [pc, #324]	@ (8000ac0 <MX_GPIO_Init+0x168>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0310 	and.w	r3, r3, #16
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000984:	4b4e      	ldr	r3, [pc, #312]	@ (8000ac0 <MX_GPIO_Init+0x168>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a4d      	ldr	r2, [pc, #308]	@ (8000ac0 <MX_GPIO_Init+0x168>)
 800098a:	f043 0320 	orr.w	r3, r3, #32
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b4b      	ldr	r3, [pc, #300]	@ (8000ac0 <MX_GPIO_Init+0x168>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0320 	and.w	r3, r3, #32
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b48      	ldr	r3, [pc, #288]	@ (8000ac0 <MX_GPIO_Init+0x168>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a47      	ldr	r2, [pc, #284]	@ (8000ac0 <MX_GPIO_Init+0x168>)
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b45      	ldr	r3, [pc, #276]	@ (8000ac0 <MX_GPIO_Init+0x168>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b4:	4b42      	ldr	r3, [pc, #264]	@ (8000ac0 <MX_GPIO_Init+0x168>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a41      	ldr	r2, [pc, #260]	@ (8000ac0 <MX_GPIO_Init+0x168>)
 80009ba:	f043 0308 	orr.w	r3, r3, #8
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ac0 <MX_GPIO_Init+0x168>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0308 	and.w	r3, r3, #8
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_DBG_GPIO_Port, L_DBG_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d2:	483c      	ldr	r0, [pc, #240]	@ (8000ac4 <MX_GPIO_Init+0x16c>)
 80009d4:	f000 fef0 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LCD_CTR_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2181      	movs	r1, #129	@ 0x81
 80009dc:	483a      	ldr	r0, [pc, #232]	@ (8000ac8 <MX_GPIO_Init+0x170>)
 80009de:	f000 feeb 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_ERR_Pin|L_USR_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80009e8:	4838      	ldr	r0, [pc, #224]	@ (8000acc <MX_GPIO_Init+0x174>)
 80009ea:	f000 fee5 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : L_DBG_Pin */
  GPIO_InitStruct.Pin = L_DBG_Pin;
 80009ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_DBG_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4619      	mov	r1, r3
 8000a06:	482f      	ldr	r0, [pc, #188]	@ (8000ac4 <MX_GPIO_Init+0x16c>)
 8000a08:	f000 fd52 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	4619      	mov	r1, r3
 8000a22:	4829      	ldr	r0, [pc, #164]	@ (8000ac8 <MX_GPIO_Init+0x170>)
 8000a24:	f000 fd44 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_IT12_Pin BTN2_IT13_Pin BTN3_IT14_Pin BTN4_IT15_Pin */
  GPIO_InitStruct.Pin = BTN1_IT12_Pin|BTN2_IT13_Pin|BTN3_IT14_Pin|BTN4_IT15_Pin;
 8000a28:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000a2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a2e:	4b28      	ldr	r3, [pc, #160]	@ (8000ad0 <MX_GPIO_Init+0x178>)
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4822      	ldr	r0, [pc, #136]	@ (8000ac8 <MX_GPIO_Init+0x170>)
 8000a3e:	f000 fd37 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN5_IT8_Pin */
  GPIO_InitStruct.Pin = BTN5_IT8_Pin;
 8000a42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a48:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <MX_GPIO_Init+0x178>)
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN5_IT8_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	481d      	ldr	r0, [pc, #116]	@ (8000acc <MX_GPIO_Init+0x174>)
 8000a58:	f000 fd2a 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_ERR_Pin L_USR_Pin */
  GPIO_InitStruct.Pin = L_ERR_Pin|L_USR_Pin;
 8000a5c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4619      	mov	r1, r3
 8000a74:	4815      	ldr	r0, [pc, #84]	@ (8000acc <MX_GPIO_Init+0x174>)
 8000a76:	f000 fd1b 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CTR_Pin */
  GPIO_InitStruct.Pin = LCD_CTR_Pin;
 8000a7a:	2380      	movs	r3, #128	@ 0x80
 8000a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CTR_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480d      	ldr	r0, [pc, #52]	@ (8000ac8 <MX_GPIO_Init+0x170>)
 8000a92:	f000 fd0d 	bl	80014b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2105      	movs	r1, #5
 8000a9a:	2017      	movs	r0, #23
 8000a9c:	f000 fc2b 	bl	80012f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000aa0:	2017      	movs	r0, #23
 8000aa2:	f000 fc44 	bl	800132e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2105      	movs	r1, #5
 8000aaa:	2028      	movs	r0, #40	@ 0x28
 8000aac:	f000 fc23 	bl	80012f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ab0:	2028      	movs	r0, #40	@ 0x28
 8000ab2:	f000 fc3c 	bl	800132e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3720      	adds	r7, #32
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40011000 	.word	0x40011000
 8000ac8:	40010c00 	.word	0x40010c00
 8000acc:	40010800 	.word	0x40010800
 8000ad0:	10210000 	.word	0x10210000

08000ad4 <StartGiveSem_Hand>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGiveSem_Hand */
void StartGiveSem_Hand(void const * argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
//	uint8_t x = 1;
	osTimerStart(myTimer01Handle, 1000);
 8000adc:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <StartGiveSem_Hand+0x28>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 fbdd 	bl	80042a4 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(2000);
 8000aea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000aee:	f003 fb90 	bl	8004212 <osDelay>
	  Task_action("task print");
 8000af2:	4803      	ldr	r0, [pc, #12]	@ (8000b00 <StartGiveSem_Hand+0x2c>)
 8000af4:	f7ff fce8 	bl	80004c8 <Task_action>
	  osDelay(2000);
 8000af8:	bf00      	nop
 8000afa:	e7f6      	b.n	8000aea <StartGiveSem_Hand+0x16>
 8000afc:	200008ac 	.word	0x200008ac
 8000b00:	08006d44 	.word	0x08006d44

08000b04 <StartTakeSem_Hand>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTakeSem_Hand */
void StartTakeSem_Hand(void const * argument)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTakeSem_Hand */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(2000);
 8000b0c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b10:	f003 fb7f 	bl	8004212 <osDelay>
 8000b14:	e7fa      	b.n	8000b0c <StartTakeSem_Hand+0x8>
	...

08000b18 <Callback01>:
  /* USER CODE END StartTakeSem_Hand */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	Task_action("tmr print");
 8000b20:	4803      	ldr	r0, [pc, #12]	@ (8000b30 <Callback01+0x18>)
 8000b22:	f7ff fcd1 	bl	80004c8 <Task_action>
  /* USER CODE END Callback01 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	08006d50 	.word	0x08006d50

08000b34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a04      	ldr	r2, [pc, #16]	@ (8000b54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d101      	bne.n	8000b4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b46:	f000 fae1 	bl	800110c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40000400 	.word	0x40000400

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <Error_Handler+0x8>

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <HAL_MspInit+0x68>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	4a17      	ldr	r2, [pc, #92]	@ (8000bcc <HAL_MspInit+0x68>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6193      	str	r3, [r2, #24]
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <HAL_MspInit+0x68>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <HAL_MspInit+0x68>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	4a11      	ldr	r2, [pc, #68]	@ (8000bcc <HAL_MspInit+0x68>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b8c:	61d3      	str	r3, [r2, #28]
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <HAL_MspInit+0x68>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	f06f 0001 	mvn.w	r0, #1
 8000ba2:	f000 fba8 	bl	80012f6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <HAL_MspInit+0x6c>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <HAL_MspInit+0x6c>)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010000 	.word	0x40010000

08000bd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	@ 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a1d      	ldr	r2, [pc, #116]	@ (8000c64 <HAL_I2C_MspInit+0x90>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d132      	bne.n	8000c5a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <HAL_I2C_MspInit+0x94>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c68 <HAL_I2C_MspInit+0x94>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <HAL_I2C_MspInit+0x94>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c0c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c12:	2312      	movs	r3, #18
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4812      	ldr	r0, [pc, #72]	@ (8000c6c <HAL_I2C_MspInit+0x98>)
 8000c22:	f000 fc45 	bl	80014b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000c26:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_I2C_MspInit+0x9c>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c36:	f043 0302 	orr.w	r3, r3, #2
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c70 <HAL_I2C_MspInit+0x9c>)
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c40:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <HAL_I2C_MspInit+0x94>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	4a08      	ldr	r2, [pc, #32]	@ (8000c68 <HAL_I2C_MspInit+0x94>)
 8000c48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c4c:	61d3      	str	r3, [r2, #28]
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_I2C_MspInit+0x94>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	@ 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40005400 	.word	0x40005400
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010c00 	.word	0x40010c00
 8000c70:	40010000 	.word	0x40010000

08000c74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <HAL_SPI_MspInit+0x88>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d12f      	bne.n	8000cf4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c94:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <HAL_SPI_MspInit+0x8c>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a19      	ldr	r2, [pc, #100]	@ (8000d00 <HAL_SPI_MspInit+0x8c>)
 8000c9a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <HAL_SPI_MspInit+0x8c>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <HAL_SPI_MspInit+0x8c>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a13      	ldr	r2, [pc, #76]	@ (8000d00 <HAL_SPI_MspInit+0x8c>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <HAL_SPI_MspInit+0x8c>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000cc4:	23a0      	movs	r3, #160	@ 0xa0
 8000cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480b      	ldr	r0, [pc, #44]	@ (8000d04 <HAL_SPI_MspInit+0x90>)
 8000cd8:	f000 fbea 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cdc:	2340      	movs	r3, #64	@ 0x40
 8000cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	4619      	mov	r1, r3
 8000cee:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <HAL_SPI_MspInit+0x90>)
 8000cf0:	f000 fbde 	bl	80014b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40013000 	.word	0x40013000
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010800 	.word	0x40010800

08000d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a09      	ldr	r2, [pc, #36]	@ (8000d3c <HAL_TIM_Base_MspInit+0x34>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d10b      	bne.n	8000d32 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d1a:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <HAL_TIM_Base_MspInit+0x38>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	4a08      	ldr	r2, [pc, #32]	@ (8000d40 <HAL_TIM_Base_MspInit+0x38>)
 8000d20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d24:	6193      	str	r3, [r2, #24]
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_TIM_Base_MspInit+0x38>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	40012c00 	.word	0x40012c00
 8000d40:	40021000 	.word	0x40021000

08000d44 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d62:	d123      	bne.n	8000dac <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	61d3      	str	r3, [r2, #28]
 8000d70:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a0c      	ldr	r2, [pc, #48]	@ (8000db4 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCB_T2C1_Pin|ENCA_T2C2_Pin;
 8000d94:	2303      	movs	r3, #3
 8000d96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	4619      	mov	r1, r3
 8000da6:	4804      	ldr	r0, [pc, #16]	@ (8000db8 <HAL_TIM_Encoder_MspInit+0x74>)
 8000da8:	f000 fb82 	bl	80014b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dac:	bf00      	nop
 8000dae:	3720      	adds	r7, #32
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010800 	.word	0x40010800

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	@ 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0318 	add.w	r3, r7, #24
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ed4 <HAL_UART_MspInit+0x118>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d13a      	bne.n	8000e52 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ddc:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed8 <HAL_UART_MspInit+0x11c>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a3d      	ldr	r2, [pc, #244]	@ (8000ed8 <HAL_UART_MspInit+0x11c>)
 8000de2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed8 <HAL_UART_MspInit+0x11c>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b38      	ldr	r3, [pc, #224]	@ (8000ed8 <HAL_UART_MspInit+0x11c>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a37      	ldr	r2, [pc, #220]	@ (8000ed8 <HAL_UART_MspInit+0x11c>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b35      	ldr	r3, [pc, #212]	@ (8000ed8 <HAL_UART_MspInit+0x11c>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0318 	add.w	r3, r7, #24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	482e      	ldr	r0, [pc, #184]	@ (8000edc <HAL_UART_MspInit+0x120>)
 8000e22:	f000 fb45 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0318 	add.w	r3, r7, #24
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4828      	ldr	r0, [pc, #160]	@ (8000edc <HAL_UART_MspInit+0x120>)
 8000e3c:	f000 fb38 	bl	80014b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2105      	movs	r1, #5
 8000e44:	2025      	movs	r0, #37	@ 0x25
 8000e46:	f000 fa56 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e4a:	2025      	movs	r0, #37	@ 0x25
 8000e4c:	f000 fa6f 	bl	800132e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e50:	e03c      	b.n	8000ecc <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a22      	ldr	r2, [pc, #136]	@ (8000ee0 <HAL_UART_MspInit+0x124>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d137      	bne.n	8000ecc <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed8 <HAL_UART_MspInit+0x11c>)
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed8 <HAL_UART_MspInit+0x11c>)
 8000e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e66:	61d3      	str	r3, [r2, #28]
 8000e68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <HAL_UART_MspInit+0x11c>)
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <HAL_UART_MspInit+0x11c>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a17      	ldr	r2, [pc, #92]	@ (8000ed8 <HAL_UART_MspInit+0x11c>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <HAL_UART_MspInit+0x11c>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART2_TX_Pin;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UART2_TX_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480f      	ldr	r0, [pc, #60]	@ (8000edc <HAL_UART_MspInit+0x120>)
 8000ea0:	f000 fb06 	bl	80014b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART2_RX_Pin;
 8000ea4:	2308      	movs	r3, #8
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 0318 	add.w	r3, r7, #24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4809      	ldr	r0, [pc, #36]	@ (8000edc <HAL_UART_MspInit+0x120>)
 8000eb8:	f000 fafa 	bl	80014b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2105      	movs	r1, #5
 8000ec0:	2026      	movs	r0, #38	@ 0x26
 8000ec2:	f000 fa18 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ec6:	2026      	movs	r0, #38	@ 0x26
 8000ec8:	f000 fa31 	bl	800132e <HAL_NVIC_EnableIRQ>
}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	@ 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40013800 	.word	0x40013800
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010800 	.word	0x40010800
 8000ee0:	40004400 	.word	0x40004400

08000ee4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08e      	sub	sp, #56	@ 0x38
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000efa:	4b34      	ldr	r3, [pc, #208]	@ (8000fcc <HAL_InitTick+0xe8>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4a33      	ldr	r2, [pc, #204]	@ (8000fcc <HAL_InitTick+0xe8>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	61d3      	str	r3, [r2, #28]
 8000f06:	4b31      	ldr	r3, [pc, #196]	@ (8000fcc <HAL_InitTick+0xe8>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f12:	f107 0210 	add.w	r2, r7, #16
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 fd13 	bl	8002948 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d103      	bne.n	8000f34 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f2c:	f001 fce4 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 8000f30:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f32:	e004      	b.n	8000f3e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f34:	f001 fce0 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f40:	4a23      	ldr	r2, [pc, #140]	@ (8000fd0 <HAL_InitTick+0xec>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	0c9b      	lsrs	r3, r3, #18
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000f4c:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <HAL_InitTick+0xf0>)
 8000f4e:	4a22      	ldr	r2, [pc, #136]	@ (8000fd8 <HAL_InitTick+0xf4>)
 8000f50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000f52:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <HAL_InitTick+0xf0>)
 8000f54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f58:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd4 <HAL_InitTick+0xf0>)
 8000f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f5e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <HAL_InitTick+0xf0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <HAL_InitTick+0xf0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <HAL_InitTick+0xf0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000f72:	4818      	ldr	r0, [pc, #96]	@ (8000fd4 <HAL_InitTick+0xf0>)
 8000f74:	f001 fdba 	bl	8002aec <HAL_TIM_Base_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d11b      	bne.n	8000fbe <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000f86:	4813      	ldr	r0, [pc, #76]	@ (8000fd4 <HAL_InitTick+0xf0>)
 8000f88:	f001 fe00 	bl	8002b8c <HAL_TIM_Base_Start_IT>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f92:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d111      	bne.n	8000fbe <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f9a:	201d      	movs	r0, #29
 8000f9c:	f000 f9c7 	bl	800132e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b0f      	cmp	r3, #15
 8000fa4:	d808      	bhi.n	8000fb8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	201d      	movs	r0, #29
 8000fac:	f000 f9a3 	bl	80012f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <HAL_InitTick+0xf8>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e002      	b.n	8000fbe <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3738      	adds	r7, #56	@ 0x38
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	431bde83 	.word	0x431bde83
 8000fd4:	200008cc 	.word	0x200008cc
 8000fd8:	40000400 	.word	0x40000400
 8000fdc:	20000008 	.word	0x20000008

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <UsageFault_Handler+0x4>

08001008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN5_IT8_Pin);
 8001018:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800101c:	f000 fbe4 	bl	80017e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <TIM3_IRQHandler+0x10>)
 800102a:	f001 fea3 	bl	8002d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200008cc 	.word	0x200008cc

08001038 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800103c:	4802      	ldr	r0, [pc, #8]	@ (8001048 <USART1_IRQHandler+0x10>)
 800103e:	f002 faed 	bl	800361c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000814 	.word	0x20000814

0800104c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <USART2_IRQHandler+0x10>)
 8001052:	f002 fae3 	bl	800361c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000085c 	.word	0x2000085c

08001060 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_IT12_Pin);
 8001064:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001068:	f000 fbbe 	bl	80017e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_IT13_Pin);
 800106c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001070:	f000 fbba 	bl	80017e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_IT14_Pin);
 8001074:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001078:	f000 fbb6 	bl	80017e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN4_IT15_Pin);
 800107c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001080:	f000 fbb2 	bl	80017e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001094:	f7ff fff8 	bl	8001088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480b      	ldr	r0, [pc, #44]	@ (80010c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800109a:	490c      	ldr	r1, [pc, #48]	@ (80010cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800109c:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a09      	ldr	r2, [pc, #36]	@ (80010d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010b0:	4c09      	ldr	r4, [pc, #36]	@ (80010d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010be:	f005 fddd 	bl	8006c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010c2:	f7ff fa1d 	bl	8000500 <main>
  bx lr
 80010c6:	4770      	bx	lr
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80010d0:	08006db4 	.word	0x08006db4
  ldr r2, =_sbss
 80010d4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80010d8:	200017a0 	.word	0x200017a0

080010dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC1_2_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <HAL_Init+0x28>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	@ (8001108 <HAL_Init+0x28>)
 80010ea:	f043 0310 	orr.w	r3, r3, #16
 80010ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f8f5 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	200f      	movs	r0, #15
 80010f8:	f7ff fef4 	bl	8000ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fd32 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40022000 	.word	0x40022000

0800110c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <HAL_IncTick+0x1c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b05      	ldr	r3, [pc, #20]	@ (800112c <HAL_IncTick+0x20>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a03      	ldr	r2, [pc, #12]	@ (800112c <HAL_IncTick+0x20>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	2000000c 	.word	0x2000000c
 800112c:	20000914 	.word	0x20000914

08001130 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b02      	ldr	r3, [pc, #8]	@ (8001140 <HAL_GetTick+0x10>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	20000914 	.word	0x20000914

08001144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff fff0 	bl	8001130 <HAL_GetTick>
 8001150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115c:	d005      	beq.n	800116a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <HAL_Delay+0x44>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116a:	bf00      	nop
 800116c:	f7ff ffe0 	bl	8001130 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	429a      	cmp	r2, r3
 800117a:	d8f7      	bhi.n	800116c <HAL_Delay+0x28>
  {
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000000c 	.word	0x2000000c

0800118c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d8:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <__NVIC_GetPriorityGrouping+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f003 0307 	and.w	r3, r3, #7
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4906      	ldr	r1, [pc, #24]	@ (8001224 <__NVIC_EnableIRQ+0x34>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	@ (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	@ (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	@ 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
         );
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	@ 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff4f 	bl	800118c <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff64 	bl	80011d4 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ffb2 	bl	800127c <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff81 	bl	8001228 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff57 	bl	80011f0 <__NVIC_EnableIRQ>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800134a:	b480      	push	{r7}
 800134c:	b085      	sub	sp, #20
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d008      	beq.n	8001374 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2204      	movs	r2, #4
 8001366:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e020      	b.n	80013b6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 020e 	bic.w	r2, r2, #14
 8001382:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0201 	bic.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800139c:	2101      	movs	r1, #1
 800139e:	fa01 f202 	lsl.w	r2, r1, r2
 80013a2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d005      	beq.n	80013e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2204      	movs	r2, #4
 80013dc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	e051      	b.n	8001488 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 020e 	bic.w	r2, r2, #14
 80013f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0201 	bic.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a22      	ldr	r2, [pc, #136]	@ (8001494 <HAL_DMA_Abort_IT+0xd4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d029      	beq.n	8001462 <HAL_DMA_Abort_IT+0xa2>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a21      	ldr	r2, [pc, #132]	@ (8001498 <HAL_DMA_Abort_IT+0xd8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d022      	beq.n	800145e <HAL_DMA_Abort_IT+0x9e>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a1f      	ldr	r2, [pc, #124]	@ (800149c <HAL_DMA_Abort_IT+0xdc>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d01a      	beq.n	8001458 <HAL_DMA_Abort_IT+0x98>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a1e      	ldr	r2, [pc, #120]	@ (80014a0 <HAL_DMA_Abort_IT+0xe0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d012      	beq.n	8001452 <HAL_DMA_Abort_IT+0x92>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a1c      	ldr	r2, [pc, #112]	@ (80014a4 <HAL_DMA_Abort_IT+0xe4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d00a      	beq.n	800144c <HAL_DMA_Abort_IT+0x8c>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a1b      	ldr	r2, [pc, #108]	@ (80014a8 <HAL_DMA_Abort_IT+0xe8>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d102      	bne.n	8001446 <HAL_DMA_Abort_IT+0x86>
 8001440:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001444:	e00e      	b.n	8001464 <HAL_DMA_Abort_IT+0xa4>
 8001446:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800144a:	e00b      	b.n	8001464 <HAL_DMA_Abort_IT+0xa4>
 800144c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001450:	e008      	b.n	8001464 <HAL_DMA_Abort_IT+0xa4>
 8001452:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001456:	e005      	b.n	8001464 <HAL_DMA_Abort_IT+0xa4>
 8001458:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800145c:	e002      	b.n	8001464 <HAL_DMA_Abort_IT+0xa4>
 800145e:	2310      	movs	r3, #16
 8001460:	e000      	b.n	8001464 <HAL_DMA_Abort_IT+0xa4>
 8001462:	2301      	movs	r3, #1
 8001464:	4a11      	ldr	r2, [pc, #68]	@ (80014ac <HAL_DMA_Abort_IT+0xec>)
 8001466:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	4798      	blx	r3
    } 
  }
  return status;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40020008 	.word	0x40020008
 8001498:	4002001c 	.word	0x4002001c
 800149c:	40020030 	.word	0x40020030
 80014a0:	40020044 	.word	0x40020044
 80014a4:	40020058 	.word	0x40020058
 80014a8:	4002006c 	.word	0x4002006c
 80014ac:	40020000 	.word	0x40020000

080014b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b08b      	sub	sp, #44	@ 0x2c
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c2:	e169      	b.n	8001798 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014c4:	2201      	movs	r2, #1
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	69fa      	ldr	r2, [r7, #28]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	429a      	cmp	r2, r3
 80014de:	f040 8158 	bne.w	8001792 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4a9a      	ldr	r2, [pc, #616]	@ (8001750 <HAL_GPIO_Init+0x2a0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d05e      	beq.n	80015aa <HAL_GPIO_Init+0xfa>
 80014ec:	4a98      	ldr	r2, [pc, #608]	@ (8001750 <HAL_GPIO_Init+0x2a0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d875      	bhi.n	80015de <HAL_GPIO_Init+0x12e>
 80014f2:	4a98      	ldr	r2, [pc, #608]	@ (8001754 <HAL_GPIO_Init+0x2a4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d058      	beq.n	80015aa <HAL_GPIO_Init+0xfa>
 80014f8:	4a96      	ldr	r2, [pc, #600]	@ (8001754 <HAL_GPIO_Init+0x2a4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d86f      	bhi.n	80015de <HAL_GPIO_Init+0x12e>
 80014fe:	4a96      	ldr	r2, [pc, #600]	@ (8001758 <HAL_GPIO_Init+0x2a8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d052      	beq.n	80015aa <HAL_GPIO_Init+0xfa>
 8001504:	4a94      	ldr	r2, [pc, #592]	@ (8001758 <HAL_GPIO_Init+0x2a8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d869      	bhi.n	80015de <HAL_GPIO_Init+0x12e>
 800150a:	4a94      	ldr	r2, [pc, #592]	@ (800175c <HAL_GPIO_Init+0x2ac>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d04c      	beq.n	80015aa <HAL_GPIO_Init+0xfa>
 8001510:	4a92      	ldr	r2, [pc, #584]	@ (800175c <HAL_GPIO_Init+0x2ac>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d863      	bhi.n	80015de <HAL_GPIO_Init+0x12e>
 8001516:	4a92      	ldr	r2, [pc, #584]	@ (8001760 <HAL_GPIO_Init+0x2b0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d046      	beq.n	80015aa <HAL_GPIO_Init+0xfa>
 800151c:	4a90      	ldr	r2, [pc, #576]	@ (8001760 <HAL_GPIO_Init+0x2b0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d85d      	bhi.n	80015de <HAL_GPIO_Init+0x12e>
 8001522:	2b12      	cmp	r3, #18
 8001524:	d82a      	bhi.n	800157c <HAL_GPIO_Init+0xcc>
 8001526:	2b12      	cmp	r3, #18
 8001528:	d859      	bhi.n	80015de <HAL_GPIO_Init+0x12e>
 800152a:	a201      	add	r2, pc, #4	@ (adr r2, 8001530 <HAL_GPIO_Init+0x80>)
 800152c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001530:	080015ab 	.word	0x080015ab
 8001534:	08001585 	.word	0x08001585
 8001538:	08001597 	.word	0x08001597
 800153c:	080015d9 	.word	0x080015d9
 8001540:	080015df 	.word	0x080015df
 8001544:	080015df 	.word	0x080015df
 8001548:	080015df 	.word	0x080015df
 800154c:	080015df 	.word	0x080015df
 8001550:	080015df 	.word	0x080015df
 8001554:	080015df 	.word	0x080015df
 8001558:	080015df 	.word	0x080015df
 800155c:	080015df 	.word	0x080015df
 8001560:	080015df 	.word	0x080015df
 8001564:	080015df 	.word	0x080015df
 8001568:	080015df 	.word	0x080015df
 800156c:	080015df 	.word	0x080015df
 8001570:	080015df 	.word	0x080015df
 8001574:	0800158d 	.word	0x0800158d
 8001578:	080015a1 	.word	0x080015a1
 800157c:	4a79      	ldr	r2, [pc, #484]	@ (8001764 <HAL_GPIO_Init+0x2b4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d013      	beq.n	80015aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001582:	e02c      	b.n	80015de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	623b      	str	r3, [r7, #32]
          break;
 800158a:	e029      	b.n	80015e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	3304      	adds	r3, #4
 8001592:	623b      	str	r3, [r7, #32]
          break;
 8001594:	e024      	b.n	80015e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	3308      	adds	r3, #8
 800159c:	623b      	str	r3, [r7, #32]
          break;
 800159e:	e01f      	b.n	80015e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	330c      	adds	r3, #12
 80015a6:	623b      	str	r3, [r7, #32]
          break;
 80015a8:	e01a      	b.n	80015e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015b2:	2304      	movs	r3, #4
 80015b4:	623b      	str	r3, [r7, #32]
          break;
 80015b6:	e013      	b.n	80015e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c0:	2308      	movs	r3, #8
 80015c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	611a      	str	r2, [r3, #16]
          break;
 80015ca:	e009      	b.n	80015e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015cc:	2308      	movs	r3, #8
 80015ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	615a      	str	r2, [r3, #20]
          break;
 80015d6:	e003      	b.n	80015e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
          break;
 80015dc:	e000      	b.n	80015e0 <HAL_GPIO_Init+0x130>
          break;
 80015de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2bff      	cmp	r3, #255	@ 0xff
 80015e4:	d801      	bhi.n	80015ea <HAL_GPIO_Init+0x13a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	e001      	b.n	80015ee <HAL_GPIO_Init+0x13e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3304      	adds	r3, #4
 80015ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2bff      	cmp	r3, #255	@ 0xff
 80015f4:	d802      	bhi.n	80015fc <HAL_GPIO_Init+0x14c>
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	e002      	b.n	8001602 <HAL_GPIO_Init+0x152>
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	3b08      	subs	r3, #8
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	210f      	movs	r1, #15
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	401a      	ands	r2, r3
 8001614:	6a39      	ldr	r1, [r7, #32]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	431a      	orrs	r2, r3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 80b1 	beq.w	8001792 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001630:	4b4d      	ldr	r3, [pc, #308]	@ (8001768 <HAL_GPIO_Init+0x2b8>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a4c      	ldr	r2, [pc, #304]	@ (8001768 <HAL_GPIO_Init+0x2b8>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b4a      	ldr	r3, [pc, #296]	@ (8001768 <HAL_GPIO_Init+0x2b8>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001648:	4a48      	ldr	r2, [pc, #288]	@ (800176c <HAL_GPIO_Init+0x2bc>)
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	4013      	ands	r3, r2
 800166a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a40      	ldr	r2, [pc, #256]	@ (8001770 <HAL_GPIO_Init+0x2c0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d013      	beq.n	800169c <HAL_GPIO_Init+0x1ec>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a3f      	ldr	r2, [pc, #252]	@ (8001774 <HAL_GPIO_Init+0x2c4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d00d      	beq.n	8001698 <HAL_GPIO_Init+0x1e8>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a3e      	ldr	r2, [pc, #248]	@ (8001778 <HAL_GPIO_Init+0x2c8>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d007      	beq.n	8001694 <HAL_GPIO_Init+0x1e4>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a3d      	ldr	r2, [pc, #244]	@ (800177c <HAL_GPIO_Init+0x2cc>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d101      	bne.n	8001690 <HAL_GPIO_Init+0x1e0>
 800168c:	2303      	movs	r3, #3
 800168e:	e006      	b.n	800169e <HAL_GPIO_Init+0x1ee>
 8001690:	2304      	movs	r3, #4
 8001692:	e004      	b.n	800169e <HAL_GPIO_Init+0x1ee>
 8001694:	2302      	movs	r3, #2
 8001696:	e002      	b.n	800169e <HAL_GPIO_Init+0x1ee>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <HAL_GPIO_Init+0x1ee>
 800169c:	2300      	movs	r3, #0
 800169e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016a0:	f002 0203 	and.w	r2, r2, #3
 80016a4:	0092      	lsls	r2, r2, #2
 80016a6:	4093      	lsls	r3, r2
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ae:	492f      	ldr	r1, [pc, #188]	@ (800176c <HAL_GPIO_Init+0x2bc>)
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	3302      	adds	r3, #2
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d006      	beq.n	80016d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	492c      	ldr	r1, [pc, #176]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	43db      	mvns	r3, r3
 80016de:	4928      	ldr	r1, [pc, #160]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016f0:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	4922      	ldr	r1, [pc, #136]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	60cb      	str	r3, [r1, #12]
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016fe:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	43db      	mvns	r3, r3
 8001706:	491e      	ldr	r1, [pc, #120]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 8001708:	4013      	ands	r3, r2
 800170a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d006      	beq.n	8001726 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001718:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4918      	ldr	r1, [pc, #96]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001726:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	43db      	mvns	r3, r3
 800172e:	4914      	ldr	r1, [pc, #80]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 8001730:	4013      	ands	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d021      	beq.n	8001784 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001740:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	490e      	ldr	r1, [pc, #56]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
 800174c:	e021      	b.n	8001792 <HAL_GPIO_Init+0x2e2>
 800174e:	bf00      	nop
 8001750:	10320000 	.word	0x10320000
 8001754:	10310000 	.word	0x10310000
 8001758:	10220000 	.word	0x10220000
 800175c:	10210000 	.word	0x10210000
 8001760:	10120000 	.word	0x10120000
 8001764:	10110000 	.word	0x10110000
 8001768:	40021000 	.word	0x40021000
 800176c:	40010000 	.word	0x40010000
 8001770:	40010800 	.word	0x40010800
 8001774:	40010c00 	.word	0x40010c00
 8001778:	40011000 	.word	0x40011000
 800177c:	40011400 	.word	0x40011400
 8001780:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001784:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <HAL_GPIO_Init+0x304>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	43db      	mvns	r3, r3
 800178c:	4909      	ldr	r1, [pc, #36]	@ (80017b4 <HAL_GPIO_Init+0x304>)
 800178e:	4013      	ands	r3, r2
 8001790:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	3301      	adds	r3, #1
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	fa22 f303 	lsr.w	r3, r2, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f47f ae8e 	bne.w	80014c4 <HAL_GPIO_Init+0x14>
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	372c      	adds	r7, #44	@ 0x2c
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40010400 	.word	0x40010400

080017b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]
 80017c4:	4613      	mov	r3, r2
 80017c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c8:	787b      	ldrb	r3, [r7, #1]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017d4:	e003      	b.n	80017de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	041a      	lsls	r2, r3, #16
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	611a      	str	r2, [r3, #16]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017f2:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017fe:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f806 	bl	8001818 <HAL_GPIO_EXTI_Callback>
  }
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40010400 	.word	0x40010400

08001818 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e12b      	b.n	8001a96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d106      	bne.n	8001858 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff f9be 	bl	8000bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2224      	movs	r2, #36	@ 0x24
 800185c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0201 	bic.w	r2, r2, #1
 800186e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800187e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800188e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001890:	f001 f832 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 8001894:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4a81      	ldr	r2, [pc, #516]	@ (8001aa0 <HAL_I2C_Init+0x274>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d807      	bhi.n	80018b0 <HAL_I2C_Init+0x84>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4a80      	ldr	r2, [pc, #512]	@ (8001aa4 <HAL_I2C_Init+0x278>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	bf94      	ite	ls
 80018a8:	2301      	movls	r3, #1
 80018aa:	2300      	movhi	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	e006      	b.n	80018be <HAL_I2C_Init+0x92>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4a7d      	ldr	r2, [pc, #500]	@ (8001aa8 <HAL_I2C_Init+0x27c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	bf94      	ite	ls
 80018b8:	2301      	movls	r3, #1
 80018ba:	2300      	movhi	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0e7      	b.n	8001a96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4a78      	ldr	r2, [pc, #480]	@ (8001aac <HAL_I2C_Init+0x280>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	0c9b      	lsrs	r3, r3, #18
 80018d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4a6a      	ldr	r2, [pc, #424]	@ (8001aa0 <HAL_I2C_Init+0x274>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d802      	bhi.n	8001900 <HAL_I2C_Init+0xd4>
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	3301      	adds	r3, #1
 80018fe:	e009      	b.n	8001914 <HAL_I2C_Init+0xe8>
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001906:	fb02 f303 	mul.w	r3, r2, r3
 800190a:	4a69      	ldr	r2, [pc, #420]	@ (8001ab0 <HAL_I2C_Init+0x284>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	099b      	lsrs	r3, r3, #6
 8001912:	3301      	adds	r3, #1
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	430b      	orrs	r3, r1
 800191a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001926:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	495c      	ldr	r1, [pc, #368]	@ (8001aa0 <HAL_I2C_Init+0x274>)
 8001930:	428b      	cmp	r3, r1
 8001932:	d819      	bhi.n	8001968 <HAL_I2C_Init+0x13c>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	1e59      	subs	r1, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001942:	1c59      	adds	r1, r3, #1
 8001944:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001948:	400b      	ands	r3, r1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00a      	beq.n	8001964 <HAL_I2C_Init+0x138>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1e59      	subs	r1, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fbb1 f3f3 	udiv	r3, r1, r3
 800195c:	3301      	adds	r3, #1
 800195e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001962:	e051      	b.n	8001a08 <HAL_I2C_Init+0x1dc>
 8001964:	2304      	movs	r3, #4
 8001966:	e04f      	b.n	8001a08 <HAL_I2C_Init+0x1dc>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d111      	bne.n	8001994 <HAL_I2C_Init+0x168>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1e58      	subs	r0, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6859      	ldr	r1, [r3, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	440b      	add	r3, r1
 800197e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001982:	3301      	adds	r3, #1
 8001984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	e012      	b.n	80019ba <HAL_I2C_Init+0x18e>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1e58      	subs	r0, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6859      	ldr	r1, [r3, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	0099      	lsls	r1, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019aa:	3301      	adds	r3, #1
 80019ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf0c      	ite	eq
 80019b4:	2301      	moveq	r3, #1
 80019b6:	2300      	movne	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_I2C_Init+0x196>
 80019be:	2301      	movs	r3, #1
 80019c0:	e022      	b.n	8001a08 <HAL_I2C_Init+0x1dc>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10e      	bne.n	80019e8 <HAL_I2C_Init+0x1bc>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1e58      	subs	r0, r3, #1
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6859      	ldr	r1, [r3, #4]
 80019d2:	460b      	mov	r3, r1
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	440b      	add	r3, r1
 80019d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019dc:	3301      	adds	r3, #1
 80019de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019e6:	e00f      	b.n	8001a08 <HAL_I2C_Init+0x1dc>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1e58      	subs	r0, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	0099      	lsls	r1, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80019fe:	3301      	adds	r3, #1
 8001a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	6809      	ldr	r1, [r1, #0]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69da      	ldr	r2, [r3, #28]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6911      	ldr	r1, [r2, #16]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68d2      	ldr	r2, [r2, #12]
 8001a42:	4311      	orrs	r1, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2220      	movs	r2, #32
 8001a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	000186a0 	.word	0x000186a0
 8001aa4:	001e847f 	.word	0x001e847f
 8001aa8:	003d08ff 	.word	0x003d08ff
 8001aac:	431bde83 	.word	0x431bde83
 8001ab0:	10624dd3 	.word	0x10624dd3

08001ab4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	817b      	strh	r3, [r7, #10]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ac8:	f7ff fb32 	bl	8001130 <HAL_GetTick>
 8001acc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b20      	cmp	r3, #32
 8001ad8:	f040 80e0 	bne.w	8001c9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2319      	movs	r3, #25
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4970      	ldr	r1, [pc, #448]	@ (8001ca8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f964 	bl	8001db4 <I2C_WaitOnFlagUntilTimeout>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001af2:	2302      	movs	r3, #2
 8001af4:	e0d3      	b.n	8001c9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_I2C_Master_Transmit+0x50>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e0cc      	b.n	8001c9e <HAL_I2C_Master_Transmit+0x1ea>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d007      	beq.n	8001b2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0201 	orr.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2221      	movs	r2, #33	@ 0x21
 8001b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2210      	movs	r2, #16
 8001b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	893a      	ldrh	r2, [r7, #8]
 8001b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4a50      	ldr	r2, [pc, #320]	@ (8001cac <HAL_I2C_Master_Transmit+0x1f8>)
 8001b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b6c:	8979      	ldrh	r1, [r7, #10]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	6a3a      	ldr	r2, [r7, #32]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f89c 	bl	8001cb0 <I2C_MasterRequestWrite>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e08d      	b.n	8001c9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b98:	e066      	b.n	8001c68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	6a39      	ldr	r1, [r7, #32]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fa22 	bl	8001fe8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d107      	bne.n	8001bc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e06b      	b.n	8001c9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d11b      	bne.n	8001c3c <HAL_I2C_Master_Transmit+0x188>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d017      	beq.n	8001c3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	781a      	ldrb	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	6a39      	ldr	r1, [r7, #32]
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 fa19 	bl	8002078 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00d      	beq.n	8001c68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d107      	bne.n	8001c64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e01a      	b.n	8001c9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d194      	bne.n	8001b9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2220      	movs	r2, #32
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e000      	b.n	8001c9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c9c:	2302      	movs	r3, #2
  }
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	00100002 	.word	0x00100002
 8001cac:	ffff0000 	.word	0xffff0000

08001cb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d006      	beq.n	8001cda <I2C_MasterRequestWrite+0x2a>
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d003      	beq.n	8001cda <I2C_MasterRequestWrite+0x2a>
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001cd8:	d108      	bne.n	8001cec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	e00b      	b.n	8001d04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf0:	2b12      	cmp	r3, #18
 8001cf2:	d107      	bne.n	8001d04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f000 f84f 	bl	8001db4 <I2C_WaitOnFlagUntilTimeout>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00d      	beq.n	8001d38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d2a:	d103      	bne.n	8001d34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e035      	b.n	8001da4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d40:	d108      	bne.n	8001d54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d42:	897b      	ldrh	r3, [r7, #10]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d50:	611a      	str	r2, [r3, #16]
 8001d52:	e01b      	b.n	8001d8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d54:	897b      	ldrh	r3, [r7, #10]
 8001d56:	11db      	asrs	r3, r3, #7
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f003 0306 	and.w	r3, r3, #6
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f063 030f 	orn	r3, r3, #15
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	490e      	ldr	r1, [pc, #56]	@ (8001dac <I2C_MasterRequestWrite+0xfc>)
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f898 	bl	8001ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e010      	b.n	8001da4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d82:	897b      	ldrh	r3, [r7, #10]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	4907      	ldr	r1, [pc, #28]	@ (8001db0 <I2C_MasterRequestWrite+0x100>)
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 f888 	bl	8001ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	00010008 	.word	0x00010008
 8001db0:	00010002 	.word	0x00010002

08001db4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dc4:	e048      	b.n	8001e58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d044      	beq.n	8001e58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dce:	f7ff f9af 	bl	8001130 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d302      	bcc.n	8001de4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d139      	bne.n	8001e58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	0c1b      	lsrs	r3, r3, #16
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d10d      	bne.n	8001e0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	43da      	mvns	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf0c      	ite	eq
 8001e00:	2301      	moveq	r3, #1
 8001e02:	2300      	movne	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	e00c      	b.n	8001e24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	43da      	mvns	r2, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	4013      	ands	r3, r2
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d116      	bne.n	8001e58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	f043 0220 	orr.w	r2, r3, #32
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e023      	b.n	8001ea0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	0c1b      	lsrs	r3, r3, #16
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d10d      	bne.n	8001e7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	43da      	mvns	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	e00c      	b.n	8001e98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	43da      	mvns	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf0c      	ite	eq
 8001e90:	2301      	moveq	r3, #1
 8001e92:	2300      	movne	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d093      	beq.n	8001dc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eb6:	e071      	b.n	8001f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ec6:	d123      	bne.n	8001f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ed6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ee0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	f043 0204 	orr.w	r2, r3, #4
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e067      	b.n	8001fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f16:	d041      	beq.n	8001f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f18:	f7ff f90a 	bl	8001130 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d302      	bcc.n	8001f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d136      	bne.n	8001f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	0c1b      	lsrs	r3, r3, #16
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d10c      	bne.n	8001f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4013      	ands	r3, r2
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bf14      	ite	ne
 8001f4a:	2301      	movne	r3, #1
 8001f4c:	2300      	moveq	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	e00b      	b.n	8001f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf14      	ite	ne
 8001f64:	2301      	movne	r3, #1
 8001f66:	2300      	moveq	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d016      	beq.n	8001f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	f043 0220 	orr.w	r2, r3, #32
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e021      	b.n	8001fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	0c1b      	lsrs	r3, r3, #16
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d10c      	bne.n	8001fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	43da      	mvns	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf14      	ite	ne
 8001fb8:	2301      	movne	r3, #1
 8001fba:	2300      	moveq	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	e00b      	b.n	8001fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bf14      	ite	ne
 8001fd2:	2301      	movne	r3, #1
 8001fd4:	2300      	moveq	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f47f af6d 	bne.w	8001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ff4:	e034      	b.n	8002060 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f886 	bl	8002108 <I2C_IsAcknowledgeFailed>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e034      	b.n	8002070 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200c:	d028      	beq.n	8002060 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200e:	f7ff f88f 	bl	8001130 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	429a      	cmp	r2, r3
 800201c:	d302      	bcc.n	8002024 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d11d      	bne.n	8002060 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800202e:	2b80      	cmp	r3, #128	@ 0x80
 8002030:	d016      	beq.n	8002060 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	f043 0220 	orr.w	r2, r3, #32
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e007      	b.n	8002070 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206a:	2b80      	cmp	r3, #128	@ 0x80
 800206c:	d1c3      	bne.n	8001ff6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002084:	e034      	b.n	80020f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f83e 	bl	8002108 <I2C_IsAcknowledgeFailed>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e034      	b.n	8002100 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209c:	d028      	beq.n	80020f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800209e:	f7ff f847 	bl	8001130 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d302      	bcc.n	80020b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d11d      	bne.n	80020f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d016      	beq.n	80020f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	f043 0220 	orr.w	r2, r3, #32
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e007      	b.n	8002100 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d1c3      	bne.n	8002086 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800211a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800211e:	d11b      	bne.n	8002158 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002128:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	f043 0204 	orr.w	r2, r3, #4
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e272      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8087 	beq.w	8002292 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002184:	4b92      	ldr	r3, [pc, #584]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b04      	cmp	r3, #4
 800218e:	d00c      	beq.n	80021aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002190:	4b8f      	ldr	r3, [pc, #572]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b08      	cmp	r3, #8
 800219a:	d112      	bne.n	80021c2 <HAL_RCC_OscConfig+0x5e>
 800219c:	4b8c      	ldr	r3, [pc, #560]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a8:	d10b      	bne.n	80021c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021aa:	4b89      	ldr	r3, [pc, #548]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d06c      	beq.n	8002290 <HAL_RCC_OscConfig+0x12c>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d168      	bne.n	8002290 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e24c      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x76>
 80021cc:	4b80      	ldr	r3, [pc, #512]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a7f      	ldr	r2, [pc, #508]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	e02e      	b.n	8002238 <HAL_RCC_OscConfig+0xd4>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0x98>
 80021e2:	4b7b      	ldr	r3, [pc, #492]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a7a      	ldr	r2, [pc, #488]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b78      	ldr	r3, [pc, #480]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a77      	ldr	r2, [pc, #476]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e01d      	b.n	8002238 <HAL_RCC_OscConfig+0xd4>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0xbc>
 8002206:	4b72      	ldr	r3, [pc, #456]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a71      	ldr	r2, [pc, #452]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800220c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	4b6f      	ldr	r3, [pc, #444]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a6e      	ldr	r2, [pc, #440]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e00b      	b.n	8002238 <HAL_RCC_OscConfig+0xd4>
 8002220:	4b6b      	ldr	r3, [pc, #428]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a6a      	ldr	r2, [pc, #424]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b68      	ldr	r3, [pc, #416]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a67      	ldr	r2, [pc, #412]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002236:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d013      	beq.n	8002268 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe ff76 	bl	8001130 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7fe ff72 	bl	8001130 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	@ 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e200      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	4b5d      	ldr	r3, [pc, #372]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0xe4>
 8002266:	e014      	b.n	8002292 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe ff62 	bl	8001130 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002270:	f7fe ff5e 	bl	8001130 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	@ 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e1ec      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	4b53      	ldr	r3, [pc, #332]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x10c>
 800228e:	e000      	b.n	8002292 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d063      	beq.n	8002366 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800229e:	4b4c      	ldr	r3, [pc, #304]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022aa:	4b49      	ldr	r3, [pc, #292]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d11c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x18c>
 80022b6:	4b46      	ldr	r3, [pc, #280]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d116      	bne.n	80022f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c2:	4b43      	ldr	r3, [pc, #268]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_RCC_OscConfig+0x176>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e1c0      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022da:	4b3d      	ldr	r3, [pc, #244]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4939      	ldr	r1, [pc, #228]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	e03a      	b.n	8002366 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d020      	beq.n	800233a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f8:	4b36      	ldr	r3, [pc, #216]	@ (80023d4 <HAL_RCC_OscConfig+0x270>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7fe ff17 	bl	8001130 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002306:	f7fe ff13 	bl	8001130 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e1a1      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002318:	4b2d      	ldr	r3, [pc, #180]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002324:	4b2a      	ldr	r3, [pc, #168]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4927      	ldr	r1, [pc, #156]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]
 8002338:	e015      	b.n	8002366 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233a:	4b26      	ldr	r3, [pc, #152]	@ (80023d4 <HAL_RCC_OscConfig+0x270>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7fe fef6 	bl	8001130 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002348:	f7fe fef2 	bl	8001130 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e180      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	4b1d      	ldr	r3, [pc, #116]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d03a      	beq.n	80023e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d019      	beq.n	80023ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237a:	4b17      	ldr	r3, [pc, #92]	@ (80023d8 <HAL_RCC_OscConfig+0x274>)
 800237c:	2201      	movs	r2, #1
 800237e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7fe fed6 	bl	8001130 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002388:	f7fe fed2 	bl	8001130 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e160      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239a:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f000 fafe 	bl	80029a8 <RCC_Delay>
 80023ac:	e01c      	b.n	80023e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ae:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <HAL_RCC_OscConfig+0x274>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b4:	f7fe febc 	bl	8001130 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ba:	e00f      	b.n	80023dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023bc:	f7fe feb8 	bl	8001130 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d908      	bls.n	80023dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e146      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	42420000 	.word	0x42420000
 80023d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023dc:	4b92      	ldr	r3, [pc, #584]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1e9      	bne.n	80023bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80a6 	beq.w	8002542 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10d      	bne.n	8002422 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	4b88      	ldr	r3, [pc, #544]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	4a87      	ldr	r2, [pc, #540]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002410:	61d3      	str	r3, [r2, #28]
 8002412:	4b85      	ldr	r3, [pc, #532]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241e:	2301      	movs	r3, #1
 8002420:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002422:	4b82      	ldr	r3, [pc, #520]	@ (800262c <HAL_RCC_OscConfig+0x4c8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d118      	bne.n	8002460 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800242e:	4b7f      	ldr	r3, [pc, #508]	@ (800262c <HAL_RCC_OscConfig+0x4c8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a7e      	ldr	r2, [pc, #504]	@ (800262c <HAL_RCC_OscConfig+0x4c8>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243a:	f7fe fe79 	bl	8001130 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002442:	f7fe fe75 	bl	8001130 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b64      	cmp	r3, #100	@ 0x64
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e103      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	4b75      	ldr	r3, [pc, #468]	@ (800262c <HAL_RCC_OscConfig+0x4c8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x312>
 8002468:	4b6f      	ldr	r3, [pc, #444]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4a6e      	ldr	r2, [pc, #440]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6213      	str	r3, [r2, #32]
 8002474:	e02d      	b.n	80024d2 <HAL_RCC_OscConfig+0x36e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x334>
 800247e:	4b6a      	ldr	r3, [pc, #424]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a69      	ldr	r2, [pc, #420]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	6213      	str	r3, [r2, #32]
 800248a:	4b67      	ldr	r3, [pc, #412]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a66      	ldr	r2, [pc, #408]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	6213      	str	r3, [r2, #32]
 8002496:	e01c      	b.n	80024d2 <HAL_RCC_OscConfig+0x36e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b05      	cmp	r3, #5
 800249e:	d10c      	bne.n	80024ba <HAL_RCC_OscConfig+0x356>
 80024a0:	4b61      	ldr	r3, [pc, #388]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4a60      	ldr	r2, [pc, #384]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	6213      	str	r3, [r2, #32]
 80024ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6213      	str	r3, [r2, #32]
 80024b8:	e00b      	b.n	80024d2 <HAL_RCC_OscConfig+0x36e>
 80024ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4a5a      	ldr	r2, [pc, #360]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	6213      	str	r3, [r2, #32]
 80024c6:	4b58      	ldr	r3, [pc, #352]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a57      	ldr	r2, [pc, #348]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d015      	beq.n	8002506 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024da:	f7fe fe29 	bl	8001130 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7fe fe25 	bl	8001130 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e0b1      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0ee      	beq.n	80024e2 <HAL_RCC_OscConfig+0x37e>
 8002504:	e014      	b.n	8002530 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7fe fe13 	bl	8001130 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fe fe0f 	bl	8001130 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e09b      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	4b40      	ldr	r3, [pc, #256]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ee      	bne.n	800250e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002530:	7dfb      	ldrb	r3, [r7, #23]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d105      	bne.n	8002542 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002536:	4b3c      	ldr	r3, [pc, #240]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	4a3b      	ldr	r2, [pc, #236]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002540:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8087 	beq.w	800265a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800254c:	4b36      	ldr	r3, [pc, #216]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b08      	cmp	r3, #8
 8002556:	d061      	beq.n	800261c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d146      	bne.n	80025ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002560:	4b33      	ldr	r3, [pc, #204]	@ (8002630 <HAL_RCC_OscConfig+0x4cc>)
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7fe fde3 	bl	8001130 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256e:	f7fe fddf 	bl	8001130 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e06d      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002580:	4b29      	ldr	r3, [pc, #164]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f0      	bne.n	800256e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002594:	d108      	bne.n	80025a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002596:	4b24      	ldr	r3, [pc, #144]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4921      	ldr	r1, [pc, #132]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a19      	ldr	r1, [r3, #32]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	430b      	orrs	r3, r1
 80025ba:	491b      	ldr	r1, [pc, #108]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002630 <HAL_RCC_OscConfig+0x4cc>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c6:	f7fe fdb3 	bl	8001130 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ce:	f7fe fdaf 	bl	8001130 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e03d      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e0:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x46a>
 80025ec:	e035      	b.n	800265a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ee:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <HAL_RCC_OscConfig+0x4cc>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7fe fd9c 	bl	8001130 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe fd98 	bl	8001130 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e026      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260e:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x498>
 800261a:	e01e      	b.n	800265a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d107      	bne.n	8002634 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e019      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
 8002628:	40021000 	.word	0x40021000
 800262c:	40007000 	.word	0x40007000
 8002630:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002634:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <HAL_RCC_OscConfig+0x500>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	429a      	cmp	r2, r3
 8002646:	d106      	bne.n	8002656 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d001      	beq.n	800265a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000

08002668 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0d0      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b6a      	ldr	r3, [pc, #424]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d910      	bls.n	80026ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b67      	ldr	r3, [pc, #412]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 0207 	bic.w	r2, r3, #7
 8002692:	4965      	ldr	r1, [pc, #404]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b63      	ldr	r3, [pc, #396]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0b8      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d020      	beq.n	80026fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c4:	4b59      	ldr	r3, [pc, #356]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a58      	ldr	r2, [pc, #352]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026dc:	4b53      	ldr	r3, [pc, #332]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a52      	ldr	r2, [pc, #328]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e8:	4b50      	ldr	r3, [pc, #320]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	494d      	ldr	r1, [pc, #308]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d040      	beq.n	8002788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b47      	ldr	r3, [pc, #284]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d115      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e07f      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	4b41      	ldr	r3, [pc, #260]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e073      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	4b3d      	ldr	r3, [pc, #244]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e06b      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002746:	4b39      	ldr	r3, [pc, #228]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4936      	ldr	r1, [pc, #216]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002758:	f7fe fcea 	bl	8001130 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	e00a      	b.n	8002776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002760:	f7fe fce6 	bl	8001130 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e053      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	4b2d      	ldr	r3, [pc, #180]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 020c 	and.w	r2, r3, #12
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	429a      	cmp	r2, r3
 8002786:	d1eb      	bne.n	8002760 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002788:	4b27      	ldr	r3, [pc, #156]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d210      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b24      	ldr	r3, [pc, #144]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 0207 	bic.w	r2, r3, #7
 800279e:	4922      	ldr	r1, [pc, #136]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b20      	ldr	r3, [pc, #128]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e032      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c4:	4b19      	ldr	r3, [pc, #100]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4916      	ldr	r1, [pc, #88]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027e2:	4b12      	ldr	r3, [pc, #72]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	490e      	ldr	r1, [pc, #56]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027f6:	f000 f821 	bl	800283c <HAL_RCC_GetSysClockFreq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	490a      	ldr	r1, [pc, #40]	@ (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 8002808:	5ccb      	ldrb	r3, [r1, r3]
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	4a09      	ldr	r2, [pc, #36]	@ (8002834 <HAL_RCC_ClockConfig+0x1cc>)
 8002810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002812:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <HAL_RCC_ClockConfig+0x1d0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fb64 	bl	8000ee4 <HAL_InitTick>

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40022000 	.word	0x40022000
 800282c:	40021000 	.word	0x40021000
 8002830:	08006d78 	.word	0x08006d78
 8002834:	20000004 	.word	0x20000004
 8002838:	20000008 	.word	0x20000008

0800283c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002856:	4b1e      	ldr	r3, [pc, #120]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b04      	cmp	r3, #4
 8002864:	d002      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x30>
 8002866:	2b08      	cmp	r3, #8
 8002868:	d003      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x36>
 800286a:	e027      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800286c:	4b19      	ldr	r3, [pc, #100]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800286e:	613b      	str	r3, [r7, #16]
      break;
 8002870:	e027      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	0c9b      	lsrs	r3, r3, #18
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	4a17      	ldr	r2, [pc, #92]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800287c:	5cd3      	ldrb	r3, [r2, r3]
 800287e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d010      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800288a:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	0c5b      	lsrs	r3, r3, #17
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	4a11      	ldr	r2, [pc, #68]	@ (80028dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002896:	5cd3      	ldrb	r3, [r2, r3]
 8002898:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a0d      	ldr	r2, [pc, #52]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800289e:	fb03 f202 	mul.w	r2, r3, r2
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e004      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a0c      	ldr	r2, [pc, #48]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028b0:	fb02 f303 	mul.w	r3, r2, r3
 80028b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	613b      	str	r3, [r7, #16]
      break;
 80028ba:	e002      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028bc:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80028be:	613b      	str	r3, [r7, #16]
      break;
 80028c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c2:	693b      	ldr	r3, [r7, #16]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	007a1200 	.word	0x007a1200
 80028d8:	08006d90 	.word	0x08006d90
 80028dc:	08006da0 	.word	0x08006da0
 80028e0:	003d0900 	.word	0x003d0900

080028e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e8:	4b02      	ldr	r3, [pc, #8]	@ (80028f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	20000004 	.word	0x20000004

080028f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028fc:	f7ff fff2 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b05      	ldr	r3, [pc, #20]	@ (8002918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4903      	ldr	r1, [pc, #12]	@ (800291c <HAL_RCC_GetPCLK1Freq+0x24>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	08006d88 	.word	0x08006d88

08002920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002924:	f7ff ffde 	bl	80028e4 <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	0adb      	lsrs	r3, r3, #11
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4903      	ldr	r1, [pc, #12]	@ (8002944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	08006d88 	.word	0x08006d88

08002948 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	220f      	movs	r2, #15
 8002956:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002958:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <HAL_RCC_GetClockConfig+0x58>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0203 	and.w	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002964:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <HAL_RCC_GetClockConfig+0x58>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002970:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <HAL_RCC_GetClockConfig+0x58>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800297c:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <HAL_RCC_GetClockConfig+0x58>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	08db      	lsrs	r3, r3, #3
 8002982:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_RCC_GetClockConfig+0x5c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0207 	and.w	r2, r3, #7
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40022000 	.word	0x40022000

080029a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029b0:	4b0a      	ldr	r3, [pc, #40]	@ (80029dc <RCC_Delay+0x34>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0a      	ldr	r2, [pc, #40]	@ (80029e0 <RCC_Delay+0x38>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0a5b      	lsrs	r3, r3, #9
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029c4:	bf00      	nop
  }
  while (Delay --);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1e5a      	subs	r2, r3, #1
 80029ca:	60fa      	str	r2, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f9      	bne.n	80029c4 <RCC_Delay+0x1c>
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	20000004 	.word	0x20000004
 80029e0:	10624dd3 	.word	0x10624dd3

080029e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e076      	b.n	8002ae4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d108      	bne.n	8002a10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a06:	d009      	beq.n	8002a1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	61da      	str	r2, [r3, #28]
 8002a0e:	e005      	b.n	8002a1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe f91c 	bl	8000c74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa0:	ea42 0103 	orr.w	r1, r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	0c1a      	lsrs	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f002 0204 	and.w	r2, r2, #4
 8002ac2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ad2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e041      	b.n	8002b82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fe f8f8 	bl	8000d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3304      	adds	r3, #4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	f000 fb16 	bl	800315c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d001      	beq.n	8002ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e03a      	b.n	8002c1a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a18      	ldr	r2, [pc, #96]	@ (8002c24 <HAL_TIM_Base_Start_IT+0x98>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00e      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x58>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bce:	d009      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x58>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a14      	ldr	r2, [pc, #80]	@ (8002c28 <HAL_TIM_Base_Start_IT+0x9c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d004      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x58>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a13      	ldr	r2, [pc, #76]	@ (8002c2c <HAL_TIM_Base_Start_IT+0xa0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d111      	bne.n	8002c08 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d010      	beq.n	8002c18 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c06:	e007      	b.n	8002c18 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	40012c00 	.word	0x40012c00
 8002c28:	40000400 	.word	0x40000400
 8002c2c:	40000800 	.word	0x40000800

08002c30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e093      	b.n	8002d6c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d106      	bne.n	8002c5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fe f873 	bl	8000d44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2202      	movs	r2, #2
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c74:	f023 0307 	bic.w	r3, r3, #7
 8002c78:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3304      	adds	r3, #4
 8002c82:	4619      	mov	r1, r3
 8002c84:	4610      	mov	r0, r2
 8002c86:	f000 fa69 	bl	800315c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002cd0:	f023 030c 	bic.w	r3, r3, #12
 8002cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002cdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	4313      	orrs	r3, r2
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	011a      	lsls	r2, r3, #4
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	031b      	lsls	r3, r3, #12
 8002d00:	4313      	orrs	r3, r2
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002d0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d122      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d11b      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0202 	mvn.w	r2, #2
 8002da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f9b4 	bl	8003124 <HAL_TIM_IC_CaptureCallback>
 8002dbc:	e005      	b.n	8002dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f9a7 	bl	8003112 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f9b6 	bl	8003136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d122      	bne.n	8002e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d11b      	bne.n	8002e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0204 	mvn.w	r2, #4
 8002df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f98a 	bl	8003124 <HAL_TIM_IC_CaptureCallback>
 8002e10:	e005      	b.n	8002e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f97d 	bl	8003112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f98c 	bl	8003136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d122      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d11b      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0208 	mvn.w	r2, #8
 8002e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f960 	bl	8003124 <HAL_TIM_IC_CaptureCallback>
 8002e64:	e005      	b.n	8002e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f953 	bl	8003112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f962 	bl	8003136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d122      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d11b      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0210 	mvn.w	r2, #16
 8002e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f936 	bl	8003124 <HAL_TIM_IC_CaptureCallback>
 8002eb8:	e005      	b.n	8002ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f929 	bl	8003112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f938 	bl	8003136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d107      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0201 	mvn.w	r2, #1
 8002ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fd fe1e 	bl	8000b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f02:	2b80      	cmp	r3, #128	@ 0x80
 8002f04:	d10e      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f10:	2b80      	cmp	r3, #128	@ 0x80
 8002f12:	d107      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fa7b 	bl	800341a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2e:	2b40      	cmp	r3, #64	@ 0x40
 8002f30:	d10e      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3c:	2b40      	cmp	r3, #64	@ 0x40
 8002f3e:	d107      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f8fc 	bl	8003148 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	d10e      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d107      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0220 	mvn.w	r2, #32
 8002f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa46 	bl	8003408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_TIM_ConfigClockSource+0x1c>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e0b4      	b.n	800310a <HAL_TIM_ConfigClockSource+0x186>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fd8:	d03e      	beq.n	8003058 <HAL_TIM_ConfigClockSource+0xd4>
 8002fda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fde:	f200 8087 	bhi.w	80030f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fe6:	f000 8086 	beq.w	80030f6 <HAL_TIM_ConfigClockSource+0x172>
 8002fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fee:	d87f      	bhi.n	80030f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff0:	2b70      	cmp	r3, #112	@ 0x70
 8002ff2:	d01a      	beq.n	800302a <HAL_TIM_ConfigClockSource+0xa6>
 8002ff4:	2b70      	cmp	r3, #112	@ 0x70
 8002ff6:	d87b      	bhi.n	80030f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff8:	2b60      	cmp	r3, #96	@ 0x60
 8002ffa:	d050      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x11a>
 8002ffc:	2b60      	cmp	r3, #96	@ 0x60
 8002ffe:	d877      	bhi.n	80030f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b50      	cmp	r3, #80	@ 0x50
 8003002:	d03c      	beq.n	800307e <HAL_TIM_ConfigClockSource+0xfa>
 8003004:	2b50      	cmp	r3, #80	@ 0x50
 8003006:	d873      	bhi.n	80030f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003008:	2b40      	cmp	r3, #64	@ 0x40
 800300a:	d058      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x13a>
 800300c:	2b40      	cmp	r3, #64	@ 0x40
 800300e:	d86f      	bhi.n	80030f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b30      	cmp	r3, #48	@ 0x30
 8003012:	d064      	beq.n	80030de <HAL_TIM_ConfigClockSource+0x15a>
 8003014:	2b30      	cmp	r3, #48	@ 0x30
 8003016:	d86b      	bhi.n	80030f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b20      	cmp	r3, #32
 800301a:	d060      	beq.n	80030de <HAL_TIM_ConfigClockSource+0x15a>
 800301c:	2b20      	cmp	r3, #32
 800301e:	d867      	bhi.n	80030f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d05c      	beq.n	80030de <HAL_TIM_ConfigClockSource+0x15a>
 8003024:	2b10      	cmp	r3, #16
 8003026:	d05a      	beq.n	80030de <HAL_TIM_ConfigClockSource+0x15a>
 8003028:	e062      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800303a:	f000 f968 	bl	800330e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800304c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	609a      	str	r2, [r3, #8]
      break;
 8003056:	e04f      	b.n	80030f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003068:	f000 f951 	bl	800330e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800307a:	609a      	str	r2, [r3, #8]
      break;
 800307c:	e03c      	b.n	80030f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800308a:	461a      	mov	r2, r3
 800308c:	f000 f8c8 	bl	8003220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2150      	movs	r1, #80	@ 0x50
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f91f 	bl	80032da <TIM_ITRx_SetConfig>
      break;
 800309c:	e02c      	b.n	80030f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030aa:	461a      	mov	r2, r3
 80030ac:	f000 f8e6 	bl	800327c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2160      	movs	r1, #96	@ 0x60
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 f90f 	bl	80032da <TIM_ITRx_SetConfig>
      break;
 80030bc:	e01c      	b.n	80030f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ca:	461a      	mov	r2, r3
 80030cc:	f000 f8a8 	bl	8003220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2140      	movs	r1, #64	@ 0x40
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f8ff 	bl	80032da <TIM_ITRx_SetConfig>
      break;
 80030dc:	e00c      	b.n	80030f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4619      	mov	r1, r3
 80030e8:	4610      	mov	r0, r2
 80030ea:	f000 f8f6 	bl	80032da <TIM_ITRx_SetConfig>
      break;
 80030ee:	e003      	b.n	80030f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
      break;
 80030f4:	e000      	b.n	80030f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003108:	7bfb      	ldrb	r3, [r7, #15]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
	...

0800315c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a29      	ldr	r2, [pc, #164]	@ (8003214 <TIM_Base_SetConfig+0xb8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00b      	beq.n	800318c <TIM_Base_SetConfig+0x30>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800317a:	d007      	beq.n	800318c <TIM_Base_SetConfig+0x30>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a26      	ldr	r2, [pc, #152]	@ (8003218 <TIM_Base_SetConfig+0xbc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d003      	beq.n	800318c <TIM_Base_SetConfig+0x30>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a25      	ldr	r2, [pc, #148]	@ (800321c <TIM_Base_SetConfig+0xc0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d108      	bne.n	800319e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003214 <TIM_Base_SetConfig+0xb8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00b      	beq.n	80031be <TIM_Base_SetConfig+0x62>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ac:	d007      	beq.n	80031be <TIM_Base_SetConfig+0x62>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a19      	ldr	r2, [pc, #100]	@ (8003218 <TIM_Base_SetConfig+0xbc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d003      	beq.n	80031be <TIM_Base_SetConfig+0x62>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a18      	ldr	r2, [pc, #96]	@ (800321c <TIM_Base_SetConfig+0xc0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d108      	bne.n	80031d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a07      	ldr	r2, [pc, #28]	@ (8003214 <TIM_Base_SetConfig+0xb8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d103      	bne.n	8003204 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	615a      	str	r2, [r3, #20]
}
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	40012c00 	.word	0x40012c00
 8003218:	40000400 	.word	0x40000400
 800321c:	40000800 	.word	0x40000800

08003220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f023 0201 	bic.w	r2, r3, #1
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800324a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f023 030a 	bic.w	r3, r3, #10
 800325c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	621a      	str	r2, [r3, #32]
}
 8003272:	bf00      	nop
 8003274:	371c      	adds	r7, #28
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f023 0210 	bic.w	r2, r3, #16
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80032a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	031b      	lsls	r3, r3, #12
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	621a      	str	r2, [r3, #32]
}
 80032d0:	bf00      	nop
 80032d2:	371c      	adds	r7, #28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f043 0307 	orr.w	r3, r3, #7
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	609a      	str	r2, [r3, #8]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr

0800330e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800330e:	b480      	push	{r7}
 8003310:	b087      	sub	sp, #28
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
 800331a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003328:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	021a      	lsls	r2, r3, #8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	431a      	orrs	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4313      	orrs	r3, r2
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	609a      	str	r2, [r3, #8]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003360:	2302      	movs	r3, #2
 8003362:	e046      	b.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800338a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a16      	ldr	r2, [pc, #88]	@ (80033fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00e      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b0:	d009      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d004      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a10      	ldr	r2, [pc, #64]	@ (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10c      	bne.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	40012c00 	.word	0x40012c00
 8003400:	40000400 	.word	0x40000400
 8003404:	40000800 	.word	0x40000800

08003408 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr

0800342c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e042      	b.n	80034c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fd fcb2 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2224      	movs	r2, #36	@ 0x24
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800346e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fdc5 	bl	8004000 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003484:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003494:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	@ 0x28
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d16d      	bne.n	80035c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_UART_Transmit+0x2c>
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e066      	b.n	80035ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2221      	movs	r2, #33	@ 0x21
 8003506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800350a:	f7fd fe11 	bl	8001130 <HAL_GetTick>
 800350e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	88fa      	ldrh	r2, [r7, #6]
 8003514:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	88fa      	ldrh	r2, [r7, #6]
 800351a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003524:	d108      	bne.n	8003538 <HAL_UART_Transmit+0x6c>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d104      	bne.n	8003538 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	e003      	b.n	8003540 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800353c:	2300      	movs	r3, #0
 800353e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003540:	e02a      	b.n	8003598 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2200      	movs	r2, #0
 800354a:	2180      	movs	r1, #128	@ 0x80
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 fb14 	bl	8003b7a <UART_WaitOnFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e036      	b.n	80035ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10b      	bne.n	800357a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003570:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	3302      	adds	r3, #2
 8003576:	61bb      	str	r3, [r7, #24]
 8003578:	e007      	b.n	800358a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	781a      	ldrb	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	3301      	adds	r3, #1
 8003588:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1cf      	bne.n	8003542 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2200      	movs	r2, #0
 80035aa:	2140      	movs	r1, #64	@ 0x40
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fae4 	bl	8003b7a <UART_WaitOnFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e006      	b.n	80035ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	e000      	b.n	80035ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
  }
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	4613      	mov	r3, r2
 80035de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d112      	bne.n	8003612 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_UART_Receive_IT+0x26>
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e00b      	b.n	8003614 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	461a      	mov	r2, r3
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fb24 	bl	8003c56 <UART_Start_Receive_IT>
 800360e:	4603      	mov	r3, r0
 8003610:	e000      	b.n	8003614 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b0ba      	sub	sp, #232	@ 0xe8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003642:	2300      	movs	r3, #0
 8003644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800364e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800365a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10f      	bne.n	8003682 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_UART_IRQHandler+0x66>
 800366e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fc01 	bl	8003e82 <UART_Receive_IT>
      return;
 8003680:	e25b      	b.n	8003b3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80de 	beq.w	8003848 <HAL_UART_IRQHandler+0x22c>
 800368c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800369c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80d1 	beq.w	8003848 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_UART_IRQHandler+0xae>
 80036b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c2:	f043 0201 	orr.w	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <HAL_UART_IRQHandler+0xd2>
 80036d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e6:	f043 0202 	orr.w	r2, r3, #2
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <HAL_UART_IRQHandler+0xf6>
 80036fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d005      	beq.n	8003712 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370a:	f043 0204 	orr.w	r2, r3, #4
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d011      	beq.n	8003742 <HAL_UART_IRQHandler+0x126>
 800371e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800372a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373a:	f043 0208 	orr.w	r2, r3, #8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 81f2 	beq.w	8003b30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800374c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_UART_IRQHandler+0x14e>
 8003758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800375c:	f003 0320 	and.w	r3, r3, #32
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fb8c 	bl	8003e82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf14      	ite	ne
 8003778:	2301      	movne	r3, #1
 800377a:	2300      	moveq	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <HAL_UART_IRQHandler+0x17a>
 800378e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d04f      	beq.n	8003836 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fa96 	bl	8003cc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d041      	beq.n	800382e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3314      	adds	r3, #20
 80037b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3314      	adds	r3, #20
 80037d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037e6:	e841 2300 	strex	r3, r2, [r1]
 80037ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1d9      	bne.n	80037aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d013      	beq.n	8003826 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003802:	4a7e      	ldr	r2, [pc, #504]	@ (80039fc <HAL_UART_IRQHandler+0x3e0>)
 8003804:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd fdd8 	bl	80013c0 <HAL_DMA_Abort_IT>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d016      	beq.n	8003844 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003820:	4610      	mov	r0, r2
 8003822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003824:	e00e      	b.n	8003844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f993 	bl	8003b52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382c:	e00a      	b.n	8003844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f98f 	bl	8003b52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	e006      	b.n	8003844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f98b 	bl	8003b52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003842:	e175      	b.n	8003b30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003844:	bf00      	nop
    return;
 8003846:	e173      	b.n	8003b30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384c:	2b01      	cmp	r3, #1
 800384e:	f040 814f 	bne.w	8003af0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003856:	f003 0310 	and.w	r3, r3, #16
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 8148 	beq.w	8003af0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8141 	beq.w	8003af0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80b6 	beq.w	8003a00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8145 	beq.w	8003b34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038b2:	429a      	cmp	r2, r3
 80038b4:	f080 813e 	bcs.w	8003b34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	f000 8088 	beq.w	80039dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	330c      	adds	r3, #12
 80038d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	330c      	adds	r3, #12
 80038f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038f8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003904:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003908:	e841 2300 	strex	r3, r2, [r1]
 800390c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003910:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1d9      	bne.n	80038cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3314      	adds	r3, #20
 800391e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003928:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800392a:	f023 0301 	bic.w	r3, r3, #1
 800392e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3314      	adds	r3, #20
 8003938:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800393c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003940:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003944:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800394e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e1      	bne.n	8003918 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3314      	adds	r3, #20
 800395a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003964:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003966:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800396a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3314      	adds	r3, #20
 8003974:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003978:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800397a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800397e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003986:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e3      	bne.n	8003954 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	330c      	adds	r3, #12
 80039a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039ac:	f023 0310 	bic.w	r3, r3, #16
 80039b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	330c      	adds	r3, #12
 80039ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039be:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039c0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039c6:	e841 2300 	strex	r3, r2, [r1]
 80039ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1e3      	bne.n	800399a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd fcb7 	bl	800134a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	4619      	mov	r1, r3
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f8b6 	bl	8003b64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039f8:	e09c      	b.n	8003b34 <HAL_UART_IRQHandler+0x518>
 80039fa:	bf00      	nop
 80039fc:	08003d8d 	.word	0x08003d8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 808e 	beq.w	8003b38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 8089 	beq.w	8003b38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e3      	bne.n	8003a26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3314      	adds	r3, #20
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3314      	adds	r3, #20
 8003a7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a82:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e3      	bne.n	8003a5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	330c      	adds	r3, #12
 8003aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0310 	bic.w	r3, r3, #16
 8003aba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ac8:	61fa      	str	r2, [r7, #28]
 8003aca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003acc:	69b9      	ldr	r1, [r7, #24]
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e3      	bne.n	8003aa4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ae2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f83b 	bl	8003b64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aee:	e023      	b.n	8003b38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d009      	beq.n	8003b10 <HAL_UART_IRQHandler+0x4f4>
 8003afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f953 	bl	8003db4 <UART_Transmit_IT>
    return;
 8003b0e:	e014      	b.n	8003b3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <HAL_UART_IRQHandler+0x51e>
 8003b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f992 	bl	8003e52 <UART_EndTransmit_IT>
    return;
 8003b2e:	e004      	b.n	8003b3a <HAL_UART_IRQHandler+0x51e>
    return;
 8003b30:	bf00      	nop
 8003b32:	e002      	b.n	8003b3a <HAL_UART_IRQHandler+0x51e>
      return;
 8003b34:	bf00      	nop
 8003b36:	e000      	b.n	8003b3a <HAL_UART_IRQHandler+0x51e>
      return;
 8003b38:	bf00      	nop
  }
}
 8003b3a:	37e8      	adds	r7, #232	@ 0xe8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b090      	sub	sp, #64	@ 0x40
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	4613      	mov	r3, r2
 8003b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8a:	e050      	b.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b92:	d04c      	beq.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <UART_WaitOnFlagUntilTimeout+0x30>
 8003b9a:	f7fd fac9 	bl	8001130 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d241      	bcs.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	330c      	adds	r3, #12
 8003bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	330c      	adds	r3, #12
 8003bc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bca:	637a      	str	r2, [r7, #52]	@ 0x34
 8003bcc:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e5      	bne.n	8003baa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3314      	adds	r3, #20
 8003be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	e853 3f00 	ldrex	r3, [r3]
 8003bec:	613b      	str	r3, [r7, #16]
   return(result);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3314      	adds	r3, #20
 8003bfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003bfe:	623a      	str	r2, [r7, #32]
 8003c00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	69f9      	ldr	r1, [r7, #28]
 8003c04:	6a3a      	ldr	r2, [r7, #32]
 8003c06:	e841 2300 	strex	r3, r2, [r1]
 8003c0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1e5      	bne.n	8003bde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e00f      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4013      	ands	r3, r2
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	bf0c      	ite	eq
 8003c3e:	2301      	moveq	r3, #1
 8003c40:	2300      	movne	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d09f      	beq.n	8003b8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3740      	adds	r7, #64	@ 0x40
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	4613      	mov	r3, r2
 8003c62:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	88fa      	ldrh	r2, [r7, #6]
 8003c6e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	88fa      	ldrh	r2, [r7, #6]
 8003c74:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2222      	movs	r2, #34	@ 0x22
 8003c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c9a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0220 	orr.w	r2, r2, #32
 8003cba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b095      	sub	sp, #84	@ 0x54
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	330c      	adds	r3, #12
 8003cd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cf0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e5      	bne.n	8003cd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3314      	adds	r3, #20
 8003d0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	e853 3f00 	ldrex	r3, [r3]
 8003d12:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f023 0301 	bic.w	r3, r3, #1
 8003d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3314      	adds	r3, #20
 8003d22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d2c:	e841 2300 	strex	r3, r2, [r1]
 8003d30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e5      	bne.n	8003d04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d119      	bne.n	8003d74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	330c      	adds	r3, #12
 8003d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f023 0310 	bic.w	r3, r3, #16
 8003d56:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d60:	61ba      	str	r2, [r7, #24]
 8003d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	6979      	ldr	r1, [r7, #20]
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e5      	bne.n	8003d40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d82:	bf00      	nop
 8003d84:	3754      	adds	r7, #84	@ 0x54
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr

08003d8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f7ff fed3 	bl	8003b52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dac:	bf00      	nop
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b21      	cmp	r3, #33	@ 0x21
 8003dc6:	d13e      	bne.n	8003e46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd0:	d114      	bne.n	8003dfc <UART_Transmit_IT+0x48>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d110      	bne.n	8003dfc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	1c9a      	adds	r2, r3, #2
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	621a      	str	r2, [r3, #32]
 8003dfa:	e008      	b.n	8003e0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	1c59      	adds	r1, r3, #1
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6211      	str	r1, [r2, #32]
 8003e06:	781a      	ldrb	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10f      	bne.n	8003e42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	e000      	b.n	8003e48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e46:	2302      	movs	r3, #2
  }
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr

08003e52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff fe64 	bl	8003b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b08c      	sub	sp, #48	@ 0x30
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b22      	cmp	r3, #34	@ 0x22
 8003e94:	f040 80ae 	bne.w	8003ff4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea0:	d117      	bne.n	8003ed2 <UART_Receive_IT+0x50>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d113      	bne.n	8003ed2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eca:	1c9a      	adds	r2, r3, #2
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ed0:	e026      	b.n	8003f20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee4:	d007      	beq.n	8003ef6 <UART_Receive_IT+0x74>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <UART_Receive_IT+0x82>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e008      	b.n	8003f16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d15d      	bne.n	8003ff0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0220 	bic.w	r2, r2, #32
 8003f42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d135      	bne.n	8003fe6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f023 0310 	bic.w	r3, r3, #16
 8003f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa0:	623a      	str	r2, [r7, #32]
 8003fa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	69f9      	ldr	r1, [r7, #28]
 8003fa6:	6a3a      	ldr	r2, [r7, #32]
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e5      	bne.n	8003f80 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b10      	cmp	r3, #16
 8003fc0:	d10a      	bne.n	8003fd8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fdc:	4619      	mov	r1, r3
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff fdc0 	bl	8003b64 <HAL_UARTEx_RxEventCallback>
 8003fe4:	e002      	b.n	8003fec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fc f9e2 	bl	80003b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	e002      	b.n	8003ff6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3730      	adds	r7, #48	@ 0x30
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800403a:	f023 030c 	bic.w	r3, r3, #12
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6812      	ldr	r2, [r2, #0]
 8004042:	68b9      	ldr	r1, [r7, #8]
 8004044:	430b      	orrs	r3, r1
 8004046:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a2c      	ldr	r2, [pc, #176]	@ (8004114 <UART_SetConfig+0x114>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d103      	bne.n	8004070 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004068:	f7fe fc5a 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	e002      	b.n	8004076 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004070:	f7fe fc42 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 8004074:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	009a      	lsls	r2, r3, #2
 8004080:	441a      	add	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	4a22      	ldr	r2, [pc, #136]	@ (8004118 <UART_SetConfig+0x118>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	0119      	lsls	r1, r3, #4
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	009a      	lsls	r2, r3, #2
 80040a0:	441a      	add	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004118 <UART_SetConfig+0x118>)
 80040ae:	fba3 0302 	umull	r0, r3, r3, r2
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	2064      	movs	r0, #100	@ 0x64
 80040b6:	fb00 f303 	mul.w	r3, r0, r3
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	3332      	adds	r3, #50	@ 0x32
 80040c0:	4a15      	ldr	r2, [pc, #84]	@ (8004118 <UART_SetConfig+0x118>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040cc:	4419      	add	r1, r3
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009a      	lsls	r2, r3, #2
 80040d8:	441a      	add	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004118 <UART_SetConfig+0x118>)
 80040e6:	fba3 0302 	umull	r0, r3, r3, r2
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	2064      	movs	r0, #100	@ 0x64
 80040ee:	fb00 f303 	mul.w	r3, r0, r3
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	3332      	adds	r3, #50	@ 0x32
 80040f8:	4a07      	ldr	r2, [pc, #28]	@ (8004118 <UART_SetConfig+0x118>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	f003 020f 	and.w	r2, r3, #15
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	440a      	add	r2, r1
 800410a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40013800 	.word	0x40013800
 8004118:	51eb851f 	.word	0x51eb851f

0800411c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800412a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800412e:	2b84      	cmp	r3, #132	@ 0x84
 8004130:	d005      	beq.n	800413e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004132:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4413      	add	r3, r2
 800413a:	3303      	adds	r3, #3
 800413c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800413e:	68fb      	ldr	r3, [r7, #12]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr

0800414a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004150:	f3ef 8305 	mrs	r3, IPSR
 8004154:	607b      	str	r3, [r7, #4]
  return(result);
 8004156:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	b2db      	uxtb	r3, r3
}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004170:	f001 f8b2 	bl	80052d8 <vTaskStartScheduler>
  
  return osOK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	bd80      	pop	{r7, pc}

0800417a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800417a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800417c:	b089      	sub	sp, #36	@ 0x24
 800417e:	af04      	add	r7, sp, #16
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d020      	beq.n	80041ce <osThreadCreate+0x54>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01c      	beq.n	80041ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685c      	ldr	r4, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691e      	ldr	r6, [r3, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff ffb8 	bl	800411c <makeFreeRtosPriority>
 80041ac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041b6:	9202      	str	r2, [sp, #8]
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	9100      	str	r1, [sp, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	4632      	mov	r2, r6
 80041c0:	4629      	mov	r1, r5
 80041c2:	4620      	mov	r0, r4
 80041c4:	f000 fec4 	bl	8004f50 <xTaskCreateStatic>
 80041c8:	4603      	mov	r3, r0
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e01c      	b.n	8004208 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685c      	ldr	r4, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041da:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff ff9a 	bl	800411c <makeFreeRtosPriority>
 80041e8:	4602      	mov	r2, r0
 80041ea:	f107 030c 	add.w	r3, r7, #12
 80041ee:	9301      	str	r3, [sp, #4]
 80041f0:	9200      	str	r2, [sp, #0]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	4632      	mov	r2, r6
 80041f6:	4629      	mov	r1, r5
 80041f8:	4620      	mov	r0, r4
 80041fa:	f000 ff08 	bl	800500e <xTaskCreate>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b01      	cmp	r3, #1
 8004202:	d001      	beq.n	8004208 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004204:	2300      	movs	r3, #0
 8004206:	e000      	b.n	800420a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004208:	68fb      	ldr	r3, [r7, #12]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004212 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <osDelay+0x16>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	e000      	b.n	800422a <osDelay+0x18>
 8004228:	2301      	movs	r3, #1
 800422a:	4618      	mov	r0, r3
 800422c:	f001 f81e 	bl	800526c <vTaskDelay>
  
  return osOK;
 8004230:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	460b      	mov	r3, r1
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d013      	beq.n	800427a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8004252:	7afb      	ldrb	r3, [r7, #11]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <osTimerCreate+0x20>
 8004258:	2101      	movs	r1, #1
 800425a:	e000      	b.n	800425e <osTimerCreate+0x22>
 800425c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8004266:	9201      	str	r2, [sp, #4]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	460a      	mov	r2, r1
 800426e:	2101      	movs	r1, #1
 8004270:	480b      	ldr	r0, [pc, #44]	@ (80042a0 <osTimerCreate+0x64>)
 8004272:	f001 fdfa 	bl	8005e6a <xTimerCreateStatic>
 8004276:	4603      	mov	r3, r0
 8004278:	e00e      	b.n	8004298 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800427a:	7afb      	ldrb	r3, [r7, #11]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <osTimerCreate+0x48>
 8004280:	2201      	movs	r2, #1
 8004282:	e000      	b.n	8004286 <osTimerCreate+0x4a>
 8004284:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2101      	movs	r1, #1
 8004290:	4803      	ldr	r0, [pc, #12]	@ (80042a0 <osTimerCreate+0x64>)
 8004292:	f001 fdc9 	bl	8005e28 <xTimerCreate>
 8004296:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	08006d5c 	.word	0x08006d5c

080042a4 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <osTimerStart+0x20>
    ticks = 1;
 80042c0:	2301      	movs	r3, #1
 80042c2:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80042c4:	f7ff ff41 	bl	800414a <inHandlerMode>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d01a      	beq.n	8004304 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80042ce:	f107 030c 	add.w	r3, r7, #12
 80042d2:	2200      	movs	r2, #0
 80042d4:	9200      	str	r2, [sp, #0]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	2109      	movs	r1, #9
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f001 fe38 	bl	8005f50 <xTimerGenericCommand>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d002      	beq.n	80042ec <osTimerStart+0x48>
    {
      result = osErrorOS;
 80042e6:	23ff      	movs	r3, #255	@ 0xff
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	e018      	b.n	800431e <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d015      	beq.n	800431e <osTimerStart+0x7a>
 80042f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <osTimerStart+0x84>)
 80042f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	e00c      	b.n	800431e <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8004304:	2300      	movs	r3, #0
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	2300      	movs	r3, #0
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	2104      	movs	r1, #4
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f001 fe1e 	bl	8005f50 <xTimerGenericCommand>
 8004314:	4603      	mov	r3, r0
 8004316:	2b01      	cmp	r3, #1
 8004318:	d001      	beq.n	800431e <osTimerStart+0x7a>
      result = osErrorOS;
 800431a:	23ff      	movs	r3, #255	@ 0xff
 800431c:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800431e:	697b      	ldr	r3, [r7, #20]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af02      	add	r7, sp, #8
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00f      	beq.n	800435e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d10a      	bne.n	800435a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2203      	movs	r2, #3
 800434a:	9200      	str	r2, [sp, #0]
 800434c:	2200      	movs	r2, #0
 800434e:	2100      	movs	r1, #0
 8004350:	2001      	movs	r0, #1
 8004352:	f000 f937 	bl	80045c4 <xQueueGenericCreateStatic>
 8004356:	4603      	mov	r3, r0
 8004358:	e016      	b.n	8004388 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800435a:	2300      	movs	r3, #0
 800435c:	e014      	b.n	8004388 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d110      	bne.n	8004386 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004364:	2203      	movs	r2, #3
 8004366:	2100      	movs	r1, #0
 8004368:	2001      	movs	r0, #1
 800436a:	f000 f9a7 	bl	80046bc <xQueueGenericCreate>
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <osSemaphoreCreate+0x56>
 8004376:	2300      	movs	r3, #0
 8004378:	2200      	movs	r2, #0
 800437a:	2100      	movs	r1, #0
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f9fb 	bl	8004778 <xQueueGenericSend>
      return sema;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	e000      	b.n	8004388 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004386:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f103 0208 	add.w	r2, r3, #8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f04f 32ff 	mov.w	r2, #4294967295
 80043a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f103 0208 	add.w	r2, r3, #8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f103 0208 	add.w	r2, r3, #8
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr

080043ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr

080043e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043e6:	b480      	push	{r7}
 80043e8:	b085      	sub	sp, #20
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	601a      	str	r2, [r3, #0]
}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004442:	d103      	bne.n	800444c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	e00c      	b.n	8004466 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3308      	adds	r3, #8
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	e002      	b.n	800445a <vListInsert+0x2e>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	d2f6      	bcs.n	8004454 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	601a      	str	r2, [r3, #0]
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr

0800449c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6892      	ldr	r2, [r2, #8]
 80044b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6852      	ldr	r2, [r2, #4]
 80044bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d103      	bne.n	80044d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	1e5a      	subs	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr
	...

080044f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10b      	bne.n	800451c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004516:	bf00      	nop
 8004518:	bf00      	nop
 800451a:	e7fd      	b.n	8004518 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800451c:	f002 f8c6 	bl	80066ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004528:	68f9      	ldr	r1, [r7, #12]
 800452a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	441a      	add	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454c:	3b01      	subs	r3, #1
 800454e:	68f9      	ldr	r1, [r7, #12]
 8004550:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	441a      	add	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	22ff      	movs	r2, #255	@ 0xff
 8004560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	22ff      	movs	r2, #255	@ 0xff
 8004568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d114      	bne.n	800459c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01a      	beq.n	80045b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3310      	adds	r3, #16
 800457e:	4618      	mov	r0, r3
 8004580:	f001 f938 	bl	80057f4 <xTaskRemoveFromEventList>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d012      	beq.n	80045b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800458a:	4b0d      	ldr	r3, [pc, #52]	@ (80045c0 <xQueueGenericReset+0xd0>)
 800458c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	e009      	b.n	80045b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3310      	adds	r3, #16
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fef5 	bl	8004390 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3324      	adds	r3, #36	@ 0x24
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fef0 	bl	8004390 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045b0:	f002 f8ac 	bl	800670c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045b4:	2301      	movs	r3, #1
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	e000ed04 	.word	0xe000ed04

080045c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08e      	sub	sp, #56	@ 0x38
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10b      	bne.n	80045f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045ea:	bf00      	nop
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10b      	bne.n	800460e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	e7fd      	b.n	800460a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <xQueueGenericCreateStatic+0x56>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <xQueueGenericCreateStatic+0x5a>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <xQueueGenericCreateStatic+0x5c>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	623b      	str	r3, [r7, #32]
}
 8004636:	bf00      	nop
 8004638:	bf00      	nop
 800463a:	e7fd      	b.n	8004638 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <xQueueGenericCreateStatic+0x84>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <xQueueGenericCreateStatic+0x88>
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <xQueueGenericCreateStatic+0x8a>
 800464c:	2300      	movs	r3, #0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10b      	bne.n	800466a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	61fb      	str	r3, [r7, #28]
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	e7fd      	b.n	8004666 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800466a:	2348      	movs	r3, #72	@ 0x48
 800466c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2b48      	cmp	r3, #72	@ 0x48
 8004672:	d00b      	beq.n	800468c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	61bb      	str	r3, [r7, #24]
}
 8004686:	bf00      	nop
 8004688:	bf00      	nop
 800468a:	e7fd      	b.n	8004688 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00d      	beq.n	80046b2 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800469e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80046a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	4613      	mov	r3, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f844 	bl	800473a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80046b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3730      	adds	r7, #48	@ 0x30
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08a      	sub	sp, #40	@ 0x28
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	4613      	mov	r3, r2
 80046c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10b      	bne.n	80046e8 <xQueueGenericCreate+0x2c>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	613b      	str	r3, [r7, #16]
}
 80046e2:	bf00      	nop
 80046e4:	bf00      	nop
 80046e6:	e7fd      	b.n	80046e4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d102      	bne.n	80046f4 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	e004      	b.n	80046fe <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	fb02 f303 	mul.w	r3, r2, r3
 80046fc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	3348      	adds	r3, #72	@ 0x48
 8004702:	4618      	mov	r0, r3
 8004704:	f002 f8d4 	bl	80068b0 <pvPortMalloc>
 8004708:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00f      	beq.n	8004730 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	3348      	adds	r3, #72	@ 0x48
 8004714:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800471e:	79fa      	ldrb	r2, [r7, #7]
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	4613      	mov	r3, r2
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f805 	bl	800473a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004730:	69bb      	ldr	r3, [r7, #24]
	}
 8004732:	4618      	mov	r0, r3
 8004734:	3720      	adds	r7, #32
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d103      	bne.n	8004756 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e002      	b.n	800475c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004768:	2101      	movs	r1, #1
 800476a:	69b8      	ldr	r0, [r7, #24]
 800476c:	f7ff fec0 	bl	80044f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08e      	sub	sp, #56	@ 0x38
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004786:	2300      	movs	r3, #0
 8004788:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800478e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10b      	bne.n	80047ac <xQueueGenericSend+0x34>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047a6:	bf00      	nop
 80047a8:	bf00      	nop
 80047aa:	e7fd      	b.n	80047a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d103      	bne.n	80047ba <xQueueGenericSend+0x42>
 80047b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <xQueueGenericSend+0x46>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <xQueueGenericSend+0x48>
 80047be:	2300      	movs	r3, #0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10b      	bne.n	80047dc <xQueueGenericSend+0x64>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	e7fd      	b.n	80047d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d103      	bne.n	80047ea <xQueueGenericSend+0x72>
 80047e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <xQueueGenericSend+0x76>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <xQueueGenericSend+0x78>
 80047ee:	2300      	movs	r3, #0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10b      	bne.n	800480c <xQueueGenericSend+0x94>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	623b      	str	r3, [r7, #32]
}
 8004806:	bf00      	nop
 8004808:	bf00      	nop
 800480a:	e7fd      	b.n	8004808 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800480c:	f001 f9b6 	bl	8005b7c <xTaskGetSchedulerState>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d102      	bne.n	800481c <xQueueGenericSend+0xa4>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <xQueueGenericSend+0xa8>
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <xQueueGenericSend+0xaa>
 8004820:	2300      	movs	r3, #0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10b      	bne.n	800483e <xQueueGenericSend+0xc6>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	61fb      	str	r3, [r7, #28]
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	e7fd      	b.n	800483a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800483e:	f001 ff35 	bl	80066ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484a:	429a      	cmp	r2, r3
 800484c:	d302      	bcc.n	8004854 <xQueueGenericSend+0xdc>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d129      	bne.n	80048a8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	68b9      	ldr	r1, [r7, #8]
 8004858:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800485a:	f000 fa0d 	bl	8004c78 <prvCopyDataToQueue>
 800485e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	2b00      	cmp	r3, #0
 8004866:	d010      	beq.n	800488a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486a:	3324      	adds	r3, #36	@ 0x24
 800486c:	4618      	mov	r0, r3
 800486e:	f000 ffc1 	bl	80057f4 <xTaskRemoveFromEventList>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d013      	beq.n	80048a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004878:	4b3f      	ldr	r3, [pc, #252]	@ (8004978 <xQueueGenericSend+0x200>)
 800487a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	e00a      	b.n	80048a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800488a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004890:	4b39      	ldr	r3, [pc, #228]	@ (8004978 <xQueueGenericSend+0x200>)
 8004892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048a0:	f001 ff34 	bl	800670c <vPortExitCritical>
				return pdPASS;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e063      	b.n	8004970 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d103      	bne.n	80048b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048ae:	f001 ff2d 	bl	800670c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	e05c      	b.n	8004970 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048bc:	f107 0314 	add.w	r3, r7, #20
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fffb 	bl	80058bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048c6:	2301      	movs	r3, #1
 80048c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048ca:	f001 ff1f 	bl	800670c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048ce:	f000 fd6b 	bl	80053a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048d2:	f001 feeb 	bl	80066ac <vPortEnterCritical>
 80048d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048dc:	b25b      	sxtb	r3, r3
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d103      	bne.n	80048ec <xQueueGenericSend+0x174>
 80048e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048f2:	b25b      	sxtb	r3, r3
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f8:	d103      	bne.n	8004902 <xQueueGenericSend+0x18a>
 80048fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004902:	f001 ff03 	bl	800670c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004906:	1d3a      	adds	r2, r7, #4
 8004908:	f107 0314 	add.w	r3, r7, #20
 800490c:	4611      	mov	r1, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f000 ffea 	bl	80058e8 <xTaskCheckForTimeOut>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d124      	bne.n	8004964 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800491a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800491c:	f000 faa4 	bl	8004e68 <prvIsQueueFull>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d018      	beq.n	8004958 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004928:	3310      	adds	r3, #16
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	4611      	mov	r1, r2
 800492e:	4618      	mov	r0, r3
 8004930:	f000 ff0e 	bl	8005750 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004934:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004936:	f000 fa2f 	bl	8004d98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800493a:	f000 fd43 	bl	80053c4 <xTaskResumeAll>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	f47f af7c 	bne.w	800483e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004946:	4b0c      	ldr	r3, [pc, #48]	@ (8004978 <xQueueGenericSend+0x200>)
 8004948:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	e772      	b.n	800483e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004958:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800495a:	f000 fa1d 	bl	8004d98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800495e:	f000 fd31 	bl	80053c4 <xTaskResumeAll>
 8004962:	e76c      	b.n	800483e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004964:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004966:	f000 fa17 	bl	8004d98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800496a:	f000 fd2b 	bl	80053c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800496e:	2300      	movs	r3, #0
		}
	}
}
 8004970:	4618      	mov	r0, r3
 8004972:	3738      	adds	r7, #56	@ 0x38
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	e000ed04 	.word	0xe000ed04

0800497c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08e      	sub	sp, #56	@ 0x38
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10b      	bne.n	80049ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80049a6:	bf00      	nop
 80049a8:	bf00      	nop
 80049aa:	e7fd      	b.n	80049a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d103      	bne.n	80049ba <xQueueGenericSendFromISR+0x3e>
 80049b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <xQueueGenericSendFromISR+0x42>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <xQueueGenericSendFromISR+0x44>
 80049be:	2300      	movs	r3, #0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10b      	bne.n	80049dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	623b      	str	r3, [r7, #32]
}
 80049d6:	bf00      	nop
 80049d8:	bf00      	nop
 80049da:	e7fd      	b.n	80049d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d103      	bne.n	80049ea <xQueueGenericSendFromISR+0x6e>
 80049e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <xQueueGenericSendFromISR+0x72>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <xQueueGenericSendFromISR+0x74>
 80049ee:	2300      	movs	r3, #0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	61fb      	str	r3, [r7, #28]
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a0c:	f001 ff10 	bl	8006830 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a10:	f3ef 8211 	mrs	r2, BASEPRI
 8004a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	61ba      	str	r2, [r7, #24]
 8004a26:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a28:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d302      	bcc.n	8004a3e <xQueueGenericSendFromISR+0xc2>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d12c      	bne.n	8004a98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a4e:	f000 f913 	bl	8004c78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a52:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5a:	d112      	bne.n	8004a82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d016      	beq.n	8004a92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a66:	3324      	adds	r3, #36	@ 0x24
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fec3 	bl	80057f4 <xTaskRemoveFromEventList>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00e      	beq.n	8004a92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00b      	beq.n	8004a92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	e007      	b.n	8004a92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a86:	3301      	adds	r3, #1
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	b25a      	sxtb	r2, r3
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004a92:	2301      	movs	r3, #1
 8004a94:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004a96:	e001      	b.n	8004a9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004aa6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3738      	adds	r7, #56	@ 0x38
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08c      	sub	sp, #48	@ 0x30
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10b      	bne.n	8004ae6 <xQueueReceive+0x32>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	623b      	str	r3, [r7, #32]
}
 8004ae0:	bf00      	nop
 8004ae2:	bf00      	nop
 8004ae4:	e7fd      	b.n	8004ae2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d103      	bne.n	8004af4 <xQueueReceive+0x40>
 8004aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <xQueueReceive+0x44>
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <xQueueReceive+0x46>
 8004af8:	2300      	movs	r3, #0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10b      	bne.n	8004b16 <xQueueReceive+0x62>
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	61fb      	str	r3, [r7, #28]
}
 8004b10:	bf00      	nop
 8004b12:	bf00      	nop
 8004b14:	e7fd      	b.n	8004b12 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b16:	f001 f831 	bl	8005b7c <xTaskGetSchedulerState>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d102      	bne.n	8004b26 <xQueueReceive+0x72>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <xQueueReceive+0x76>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <xQueueReceive+0x78>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10b      	bne.n	8004b48 <xQueueReceive+0x94>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	61bb      	str	r3, [r7, #24]
}
 8004b42:	bf00      	nop
 8004b44:	bf00      	nop
 8004b46:	e7fd      	b.n	8004b44 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b48:	f001 fdb0 	bl	80066ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01f      	beq.n	8004b98 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b5c:	f000 f8f6 	bl	8004d4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	1e5a      	subs	r2, r3, #1
 8004b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00f      	beq.n	8004b90 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b72:	3310      	adds	r3, #16
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fe3d 	bl	80057f4 <xTaskRemoveFromEventList>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d007      	beq.n	8004b90 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b80:	4b3c      	ldr	r3, [pc, #240]	@ (8004c74 <xQueueReceive+0x1c0>)
 8004b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b90:	f001 fdbc 	bl	800670c <vPortExitCritical>
				return pdPASS;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e069      	b.n	8004c6c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d103      	bne.n	8004ba6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b9e:	f001 fdb5 	bl	800670c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e062      	b.n	8004c6c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d106      	bne.n	8004bba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bac:	f107 0310 	add.w	r3, r7, #16
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fe83 	bl	80058bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bba:	f001 fda7 	bl	800670c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bbe:	f000 fbf3 	bl	80053a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bc2:	f001 fd73 	bl	80066ac <vPortEnterCritical>
 8004bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bcc:	b25b      	sxtb	r3, r3
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd2:	d103      	bne.n	8004bdc <xQueueReceive+0x128>
 8004bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004be2:	b25b      	sxtb	r3, r3
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be8:	d103      	bne.n	8004bf2 <xQueueReceive+0x13e>
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bf2:	f001 fd8b 	bl	800670c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bf6:	1d3a      	adds	r2, r7, #4
 8004bf8:	f107 0310 	add.w	r3, r7, #16
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fe72 	bl	80058e8 <xTaskCheckForTimeOut>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d123      	bne.n	8004c52 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c0c:	f000 f916 	bl	8004e3c <prvIsQueueEmpty>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d017      	beq.n	8004c46 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c18:	3324      	adds	r3, #36	@ 0x24
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fd96 	bl	8005750 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c26:	f000 f8b7 	bl	8004d98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c2a:	f000 fbcb 	bl	80053c4 <xTaskResumeAll>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d189      	bne.n	8004b48 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004c34:	4b0f      	ldr	r3, [pc, #60]	@ (8004c74 <xQueueReceive+0x1c0>)
 8004c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	e780      	b.n	8004b48 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c48:	f000 f8a6 	bl	8004d98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c4c:	f000 fbba 	bl	80053c4 <xTaskResumeAll>
 8004c50:	e77a      	b.n	8004b48 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c54:	f000 f8a0 	bl	8004d98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c58:	f000 fbb4 	bl	80053c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c5e:	f000 f8ed 	bl	8004e3c <prvIsQueueEmpty>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f43f af6f 	beq.w	8004b48 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3730      	adds	r7, #48	@ 0x30
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	e000ed04 	.word	0xe000ed04

08004c78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10d      	bne.n	8004cb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d14d      	bne.n	8004d3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 ff88 	bl	8005bb8 <xTaskPriorityDisinherit>
 8004ca8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	605a      	str	r2, [r3, #4]
 8004cb0:	e043      	b.n	8004d3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d119      	bne.n	8004cec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6898      	ldr	r0, [r3, #8]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	f001 fffe 	bl	8006cc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd0:	441a      	add	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d32b      	bcc.n	8004d3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	609a      	str	r2, [r3, #8]
 8004cea:	e026      	b.n	8004d3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	68d8      	ldr	r0, [r3, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	f001 ffe4 	bl	8006cc4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d04:	425b      	negs	r3, r3
 8004d06:	441a      	add	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d207      	bcs.n	8004d28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d20:	425b      	negs	r3, r3
 8004d22:	441a      	add	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d105      	bne.n	8004d3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004d42:	697b      	ldr	r3, [r7, #20]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d018      	beq.n	8004d90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d66:	441a      	add	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d303      	bcc.n	8004d80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68d9      	ldr	r1, [r3, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d88:	461a      	mov	r2, r3
 8004d8a:	6838      	ldr	r0, [r7, #0]
 8004d8c:	f001 ff9a 	bl	8006cc4 <memcpy>
	}
}
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004da0:	f001 fc84 	bl	80066ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004daa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dac:	e011      	b.n	8004dd2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d012      	beq.n	8004ddc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3324      	adds	r3, #36	@ 0x24
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fd1a 	bl	80057f4 <xTaskRemoveFromEventList>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004dc6:	f000 fdf3 	bl	80059b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	dce9      	bgt.n	8004dae <prvUnlockQueue+0x16>
 8004dda:	e000      	b.n	8004dde <prvUnlockQueue+0x46>
					break;
 8004ddc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	22ff      	movs	r2, #255	@ 0xff
 8004de2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004de6:	f001 fc91 	bl	800670c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004dea:	f001 fc5f 	bl	80066ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004df4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004df6:	e011      	b.n	8004e1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d012      	beq.n	8004e26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3310      	adds	r3, #16
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fcf5 	bl	80057f4 <xTaskRemoveFromEventList>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e10:	f000 fdce 	bl	80059b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e14:	7bbb      	ldrb	r3, [r7, #14]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	dce9      	bgt.n	8004df8 <prvUnlockQueue+0x60>
 8004e24:	e000      	b.n	8004e28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	22ff      	movs	r2, #255	@ 0xff
 8004e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004e30:	f001 fc6c 	bl	800670c <vPortExitCritical>
}
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e44:	f001 fc32 	bl	80066ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e50:	2301      	movs	r3, #1
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	e001      	b.n	8004e5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e5a:	f001 fc57 	bl	800670c <vPortExitCritical>

	return xReturn;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e70:	f001 fc1c 	bl	80066ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d102      	bne.n	8004e86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e80:	2301      	movs	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	e001      	b.n	8004e8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e8a:	f001 fc3f 	bl	800670c <vPortExitCritical>

	return xReturn;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e014      	b.n	8004ed2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ea8:	4a0e      	ldr	r2, [pc, #56]	@ (8004ee4 <vQueueAddToRegistry+0x4c>)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10b      	bne.n	8004ecc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004eb4:	490b      	ldr	r1, [pc, #44]	@ (8004ee4 <vQueueAddToRegistry+0x4c>)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004ebe:	4a09      	ldr	r2, [pc, #36]	@ (8004ee4 <vQueueAddToRegistry+0x4c>)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004eca:	e006      	b.n	8004eda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b07      	cmp	r3, #7
 8004ed6:	d9e7      	bls.n	8004ea8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr
 8004ee4:	20000918 	.word	0x20000918

08004ee8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ef8:	f001 fbd8 	bl	80066ac <vPortEnterCritical>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f02:	b25b      	sxtb	r3, r3
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f08:	d103      	bne.n	8004f12 <vQueueWaitForMessageRestricted+0x2a>
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f18:	b25b      	sxtb	r3, r3
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1e:	d103      	bne.n	8004f28 <vQueueWaitForMessageRestricted+0x40>
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f28:	f001 fbf0 	bl	800670c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	3324      	adds	r3, #36	@ 0x24
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fc2d 	bl	800579c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f42:	6978      	ldr	r0, [r7, #20]
 8004f44:	f7ff ff28 	bl	8004d98 <prvUnlockQueue>
	}
 8004f48:	bf00      	nop
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08e      	sub	sp, #56	@ 0x38
 8004f54:	af04      	add	r7, sp, #16
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10b      	bne.n	8004f7c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	623b      	str	r3, [r7, #32]
}
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	e7fd      	b.n	8004f78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10b      	bne.n	8004f9a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	61fb      	str	r3, [r7, #28]
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	e7fd      	b.n	8004f96 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f9a:	2354      	movs	r3, #84	@ 0x54
 8004f9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b54      	cmp	r3, #84	@ 0x54
 8004fa2:	d00b      	beq.n	8004fbc <xTaskCreateStatic+0x6c>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	61bb      	str	r3, [r7, #24]
}
 8004fb6:	bf00      	nop
 8004fb8:	bf00      	nop
 8004fba:	e7fd      	b.n	8004fb8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d01e      	beq.n	8005000 <xTaskCreateStatic+0xb0>
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01b      	beq.n	8005000 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fca:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004fd0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004fda:	2300      	movs	r3, #0
 8004fdc:	9303      	str	r3, [sp, #12]
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	9302      	str	r3, [sp, #8]
 8004fe2:	f107 0314 	add.w	r3, r7, #20
 8004fe6:	9301      	str	r3, [sp, #4]
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f850 	bl	8005098 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ff8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ffa:	f000 f8cd 	bl	8005198 <prvAddNewTaskToReadyList>
 8004ffe:	e001      	b.n	8005004 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005004:	697b      	ldr	r3, [r7, #20]
	}
 8005006:	4618      	mov	r0, r3
 8005008:	3728      	adds	r7, #40	@ 0x28
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800500e:	b580      	push	{r7, lr}
 8005010:	b08c      	sub	sp, #48	@ 0x30
 8005012:	af04      	add	r7, sp, #16
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	603b      	str	r3, [r7, #0]
 800501a:	4613      	mov	r3, r2
 800501c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4618      	mov	r0, r3
 8005024:	f001 fc44 	bl	80068b0 <pvPortMalloc>
 8005028:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00e      	beq.n	800504e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005030:	2054      	movs	r0, #84	@ 0x54
 8005032:	f001 fc3d 	bl	80068b0 <pvPortMalloc>
 8005036:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	631a      	str	r2, [r3, #48]	@ 0x30
 8005044:	e005      	b.n	8005052 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005046:	6978      	ldr	r0, [r7, #20]
 8005048:	f001 fcfa 	bl	8006a40 <vPortFree>
 800504c:	e001      	b.n	8005052 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d017      	beq.n	8005088 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005060:	88fa      	ldrh	r2, [r7, #6]
 8005062:	2300      	movs	r3, #0
 8005064:	9303      	str	r3, [sp, #12]
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	9302      	str	r3, [sp, #8]
 800506a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f80e 	bl	8005098 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800507c:	69f8      	ldr	r0, [r7, #28]
 800507e:	f000 f88b 	bl	8005198 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005082:	2301      	movs	r3, #1
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	e002      	b.n	800508e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005088:	f04f 33ff 	mov.w	r3, #4294967295
 800508c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800508e:	69bb      	ldr	r3, [r7, #24]
	}
 8005090:	4618      	mov	r0, r3
 8005092:	3720      	adds	r7, #32
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80050a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80050b0:	3b01      	subs	r3, #1
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	f023 0307 	bic.w	r3, r3, #7
 80050be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00b      	beq.n	80050e2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	617b      	str	r3, [r7, #20]
}
 80050dc:	bf00      	nop
 80050de:	bf00      	nop
 80050e0:	e7fd      	b.n	80050de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	e012      	b.n	800510e <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	4413      	add	r3, r2
 80050ee:	7819      	ldrb	r1, [r3, #0]
 80050f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	4413      	add	r3, r2
 80050f6:	3334      	adds	r3, #52	@ 0x34
 80050f8:	460a      	mov	r2, r1
 80050fa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d006      	beq.n	8005116 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	3301      	adds	r3, #1
 800510c:	61fb      	str	r3, [r7, #28]
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	2b0f      	cmp	r3, #15
 8005112:	d9e9      	bls.n	80050e8 <prvInitialiseNewTask+0x50>
 8005114:	e000      	b.n	8005118 <prvInitialiseNewTask+0x80>
		{
			break;
 8005116:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005122:	2b06      	cmp	r3, #6
 8005124:	d901      	bls.n	800512a <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005126:	2306      	movs	r3, #6
 8005128:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800512e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005134:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005138:	2200      	movs	r2, #0
 800513a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800513c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513e:	3304      	adds	r3, #4
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff f944 	bl	80043ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005148:	3318      	adds	r3, #24
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff f93f 	bl	80043ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005154:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005158:	f1c3 0207 	rsb	r2, r3, #7
 800515c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005164:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005168:	2200      	movs	r2, #0
 800516a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800516c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	68f9      	ldr	r1, [r7, #12]
 8005178:	69b8      	ldr	r0, [r7, #24]
 800517a:	f001 f9a3 	bl	80064c4 <pxPortInitialiseStack>
 800517e:	4602      	mov	r2, r0
 8005180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005182:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800518a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800518e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005190:	bf00      	nop
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051a0:	f001 fa84 	bl	80066ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005250 <prvAddNewTaskToReadyList+0xb8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3301      	adds	r3, #1
 80051aa:	4a29      	ldr	r2, [pc, #164]	@ (8005250 <prvAddNewTaskToReadyList+0xb8>)
 80051ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051ae:	4b29      	ldr	r3, [pc, #164]	@ (8005254 <prvAddNewTaskToReadyList+0xbc>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051b6:	4a27      	ldr	r2, [pc, #156]	@ (8005254 <prvAddNewTaskToReadyList+0xbc>)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051bc:	4b24      	ldr	r3, [pc, #144]	@ (8005250 <prvAddNewTaskToReadyList+0xb8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d110      	bne.n	80051e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051c4:	f000 fc18 	bl	80059f8 <prvInitialiseTaskLists>
 80051c8:	e00d      	b.n	80051e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051ca:	4b23      	ldr	r3, [pc, #140]	@ (8005258 <prvAddNewTaskToReadyList+0xc0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d109      	bne.n	80051e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051d2:	4b20      	ldr	r3, [pc, #128]	@ (8005254 <prvAddNewTaskToReadyList+0xbc>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051dc:	429a      	cmp	r2, r3
 80051de:	d802      	bhi.n	80051e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005254 <prvAddNewTaskToReadyList+0xbc>)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051e6:	4b1d      	ldr	r3, [pc, #116]	@ (800525c <prvAddNewTaskToReadyList+0xc4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3301      	adds	r3, #1
 80051ec:	4a1b      	ldr	r2, [pc, #108]	@ (800525c <prvAddNewTaskToReadyList+0xc4>)
 80051ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f4:	2201      	movs	r2, #1
 80051f6:	409a      	lsls	r2, r3
 80051f8:	4b19      	ldr	r3, [pc, #100]	@ (8005260 <prvAddNewTaskToReadyList+0xc8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	4a18      	ldr	r2, [pc, #96]	@ (8005260 <prvAddNewTaskToReadyList+0xc8>)
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005206:	4613      	mov	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4a15      	ldr	r2, [pc, #84]	@ (8005264 <prvAddNewTaskToReadyList+0xcc>)
 8005210:	441a      	add	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3304      	adds	r3, #4
 8005216:	4619      	mov	r1, r3
 8005218:	4610      	mov	r0, r2
 800521a:	f7ff f8e4 	bl	80043e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800521e:	f001 fa75 	bl	800670c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005222:	4b0d      	ldr	r3, [pc, #52]	@ (8005258 <prvAddNewTaskToReadyList+0xc0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00e      	beq.n	8005248 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800522a:	4b0a      	ldr	r3, [pc, #40]	@ (8005254 <prvAddNewTaskToReadyList+0xbc>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005234:	429a      	cmp	r2, r3
 8005236:	d207      	bcs.n	8005248 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005238:	4b0b      	ldr	r3, [pc, #44]	@ (8005268 <prvAddNewTaskToReadyList+0xd0>)
 800523a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005248:	bf00      	nop
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	20000a58 	.word	0x20000a58
 8005254:	20000958 	.word	0x20000958
 8005258:	20000a64 	.word	0x20000a64
 800525c:	20000a74 	.word	0x20000a74
 8005260:	20000a60 	.word	0x20000a60
 8005264:	2000095c 	.word	0x2000095c
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d018      	beq.n	80052b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800527e:	4b14      	ldr	r3, [pc, #80]	@ (80052d0 <vTaskDelay+0x64>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00b      	beq.n	800529e <vTaskDelay+0x32>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	60bb      	str	r3, [r7, #8]
}
 8005298:	bf00      	nop
 800529a:	bf00      	nop
 800529c:	e7fd      	b.n	800529a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800529e:	f000 f883 	bl	80053a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052a2:	2100      	movs	r1, #0
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fd0f 	bl	8005cc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052aa:	f000 f88b 	bl	80053c4 <xTaskResumeAll>
 80052ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d107      	bne.n	80052c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80052b6:	4b07      	ldr	r3, [pc, #28]	@ (80052d4 <vTaskDelay+0x68>)
 80052b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052c6:	bf00      	nop
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000a80 	.word	0x20000a80
 80052d4:	e000ed04 	.word	0xe000ed04

080052d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08a      	sub	sp, #40	@ 0x28
 80052dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052e6:	463a      	mov	r2, r7
 80052e8:	1d39      	adds	r1, r7, #4
 80052ea:	f107 0308 	add.w	r3, r7, #8
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fb f80a 	bl	8000308 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	9202      	str	r2, [sp, #8]
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	2300      	movs	r3, #0
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	2300      	movs	r3, #0
 8005304:	460a      	mov	r2, r1
 8005306:	4922      	ldr	r1, [pc, #136]	@ (8005390 <vTaskStartScheduler+0xb8>)
 8005308:	4822      	ldr	r0, [pc, #136]	@ (8005394 <vTaskStartScheduler+0xbc>)
 800530a:	f7ff fe21 	bl	8004f50 <xTaskCreateStatic>
 800530e:	4603      	mov	r3, r0
 8005310:	4a21      	ldr	r2, [pc, #132]	@ (8005398 <vTaskStartScheduler+0xc0>)
 8005312:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005314:	4b20      	ldr	r3, [pc, #128]	@ (8005398 <vTaskStartScheduler+0xc0>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800531c:	2301      	movs	r3, #1
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	e001      	b.n	8005326 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d102      	bne.n	8005332 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800532c:	f000 fd32 	bl	8005d94 <xTimerCreateTimerTask>
 8005330:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d116      	bne.n	8005366 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	613b      	str	r3, [r7, #16]
}
 800534a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800534c:	4b13      	ldr	r3, [pc, #76]	@ (800539c <vTaskStartScheduler+0xc4>)
 800534e:	f04f 32ff 	mov.w	r2, #4294967295
 8005352:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005354:	4b12      	ldr	r3, [pc, #72]	@ (80053a0 <vTaskStartScheduler+0xc8>)
 8005356:	2201      	movs	r2, #1
 8005358:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800535a:	4b12      	ldr	r3, [pc, #72]	@ (80053a4 <vTaskStartScheduler+0xcc>)
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005360:	f001 f932 	bl	80065c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005364:	e00f      	b.n	8005386 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536c:	d10b      	bne.n	8005386 <vTaskStartScheduler+0xae>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	60fb      	str	r3, [r7, #12]
}
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	e7fd      	b.n	8005382 <vTaskStartScheduler+0xaa>
}
 8005386:	bf00      	nop
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	08006d60 	.word	0x08006d60
 8005394:	080059c9 	.word	0x080059c9
 8005398:	20000a7c 	.word	0x20000a7c
 800539c:	20000a78 	.word	0x20000a78
 80053a0:	20000a64 	.word	0x20000a64
 80053a4:	20000a5c 	.word	0x20000a5c

080053a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80053ac:	4b04      	ldr	r3, [pc, #16]	@ (80053c0 <vTaskSuspendAll+0x18>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3301      	adds	r3, #1
 80053b2:	4a03      	ldr	r2, [pc, #12]	@ (80053c0 <vTaskSuspendAll+0x18>)
 80053b4:	6013      	str	r3, [r2, #0]
}
 80053b6:	bf00      	nop
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20000a80 	.word	0x20000a80

080053c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053d2:	4b42      	ldr	r3, [pc, #264]	@ (80054dc <xTaskResumeAll+0x118>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10b      	bne.n	80053f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	603b      	str	r3, [r7, #0]
}
 80053ec:	bf00      	nop
 80053ee:	bf00      	nop
 80053f0:	e7fd      	b.n	80053ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053f2:	f001 f95b 	bl	80066ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053f6:	4b39      	ldr	r3, [pc, #228]	@ (80054dc <xTaskResumeAll+0x118>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	4a37      	ldr	r2, [pc, #220]	@ (80054dc <xTaskResumeAll+0x118>)
 80053fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005400:	4b36      	ldr	r3, [pc, #216]	@ (80054dc <xTaskResumeAll+0x118>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d161      	bne.n	80054cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005408:	4b35      	ldr	r3, [pc, #212]	@ (80054e0 <xTaskResumeAll+0x11c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d05d      	beq.n	80054cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005410:	e02e      	b.n	8005470 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005412:	4b34      	ldr	r3, [pc, #208]	@ (80054e4 <xTaskResumeAll+0x120>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3318      	adds	r3, #24
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff f83c 	bl	800449c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3304      	adds	r3, #4
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff f837 	bl	800449c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005432:	2201      	movs	r2, #1
 8005434:	409a      	lsls	r2, r3
 8005436:	4b2c      	ldr	r3, [pc, #176]	@ (80054e8 <xTaskResumeAll+0x124>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4313      	orrs	r3, r2
 800543c:	4a2a      	ldr	r2, [pc, #168]	@ (80054e8 <xTaskResumeAll+0x124>)
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005444:	4613      	mov	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4a27      	ldr	r2, [pc, #156]	@ (80054ec <xTaskResumeAll+0x128>)
 800544e:	441a      	add	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3304      	adds	r3, #4
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f7fe ffc5 	bl	80043e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005460:	4b23      	ldr	r3, [pc, #140]	@ (80054f0 <xTaskResumeAll+0x12c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005466:	429a      	cmp	r2, r3
 8005468:	d302      	bcc.n	8005470 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800546a:	4b22      	ldr	r3, [pc, #136]	@ (80054f4 <xTaskResumeAll+0x130>)
 800546c:	2201      	movs	r2, #1
 800546e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005470:	4b1c      	ldr	r3, [pc, #112]	@ (80054e4 <xTaskResumeAll+0x120>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1cc      	bne.n	8005412 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800547e:	f000 fb59 	bl	8005b34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005482:	4b1d      	ldr	r3, [pc, #116]	@ (80054f8 <xTaskResumeAll+0x134>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d010      	beq.n	80054b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800548e:	f000 f845 	bl	800551c <xTaskIncrementTick>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005498:	4b16      	ldr	r3, [pc, #88]	@ (80054f4 <xTaskResumeAll+0x130>)
 800549a:	2201      	movs	r2, #1
 800549c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3b01      	subs	r3, #1
 80054a2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f1      	bne.n	800548e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80054aa:	4b13      	ldr	r3, [pc, #76]	@ (80054f8 <xTaskResumeAll+0x134>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054b0:	4b10      	ldr	r3, [pc, #64]	@ (80054f4 <xTaskResumeAll+0x130>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d009      	beq.n	80054cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054b8:	2301      	movs	r3, #1
 80054ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054bc:	4b0f      	ldr	r3, [pc, #60]	@ (80054fc <xTaskResumeAll+0x138>)
 80054be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054cc:	f001 f91e 	bl	800670c <vPortExitCritical>

	return xAlreadyYielded;
 80054d0:	68bb      	ldr	r3, [r7, #8]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000a80 	.word	0x20000a80
 80054e0:	20000a58 	.word	0x20000a58
 80054e4:	20000a18 	.word	0x20000a18
 80054e8:	20000a60 	.word	0x20000a60
 80054ec:	2000095c 	.word	0x2000095c
 80054f0:	20000958 	.word	0x20000958
 80054f4:	20000a6c 	.word	0x20000a6c
 80054f8:	20000a68 	.word	0x20000a68
 80054fc:	e000ed04 	.word	0xe000ed04

08005500 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005506:	4b04      	ldr	r3, [pc, #16]	@ (8005518 <xTaskGetTickCount+0x18>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800550c:	687b      	ldr	r3, [r7, #4]
}
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr
 8005518:	20000a5c 	.word	0x20000a5c

0800551c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005526:	4b51      	ldr	r3, [pc, #324]	@ (800566c <xTaskIncrementTick+0x150>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	f040 808e 	bne.w	800564c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005530:	4b4f      	ldr	r3, [pc, #316]	@ (8005670 <xTaskIncrementTick+0x154>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3301      	adds	r3, #1
 8005536:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005538:	4a4d      	ldr	r2, [pc, #308]	@ (8005670 <xTaskIncrementTick+0x154>)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d121      	bne.n	8005588 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005544:	4b4b      	ldr	r3, [pc, #300]	@ (8005674 <xTaskIncrementTick+0x158>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00b      	beq.n	8005566 <xTaskIncrementTick+0x4a>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	603b      	str	r3, [r7, #0]
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	e7fd      	b.n	8005562 <xTaskIncrementTick+0x46>
 8005566:	4b43      	ldr	r3, [pc, #268]	@ (8005674 <xTaskIncrementTick+0x158>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	4b42      	ldr	r3, [pc, #264]	@ (8005678 <xTaskIncrementTick+0x15c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a40      	ldr	r2, [pc, #256]	@ (8005674 <xTaskIncrementTick+0x158>)
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	4a40      	ldr	r2, [pc, #256]	@ (8005678 <xTaskIncrementTick+0x15c>)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	4b40      	ldr	r3, [pc, #256]	@ (800567c <xTaskIncrementTick+0x160>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3301      	adds	r3, #1
 8005580:	4a3e      	ldr	r2, [pc, #248]	@ (800567c <xTaskIncrementTick+0x160>)
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	f000 fad6 	bl	8005b34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005588:	4b3d      	ldr	r3, [pc, #244]	@ (8005680 <xTaskIncrementTick+0x164>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	429a      	cmp	r2, r3
 8005590:	d34d      	bcc.n	800562e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005592:	4b38      	ldr	r3, [pc, #224]	@ (8005674 <xTaskIncrementTick+0x158>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <xTaskIncrementTick+0x84>
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <xTaskIncrementTick+0x86>
 80055a0:	2300      	movs	r3, #0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d004      	beq.n	80055b0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055a6:	4b36      	ldr	r3, [pc, #216]	@ (8005680 <xTaskIncrementTick+0x164>)
 80055a8:	f04f 32ff 	mov.w	r2, #4294967295
 80055ac:	601a      	str	r2, [r3, #0]
					break;
 80055ae:	e03e      	b.n	800562e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055b0:	4b30      	ldr	r3, [pc, #192]	@ (8005674 <xTaskIncrementTick+0x158>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d203      	bcs.n	80055d0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055c8:	4a2d      	ldr	r2, [pc, #180]	@ (8005680 <xTaskIncrementTick+0x164>)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6013      	str	r3, [r2, #0]
						break;
 80055ce:	e02e      	b.n	800562e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fe ff61 	bl	800449c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d004      	beq.n	80055ec <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	3318      	adds	r3, #24
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fe ff58 	bl	800449c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	2201      	movs	r2, #1
 80055f2:	409a      	lsls	r2, r3
 80055f4:	4b23      	ldr	r3, [pc, #140]	@ (8005684 <xTaskIncrementTick+0x168>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	4a22      	ldr	r2, [pc, #136]	@ (8005684 <xTaskIncrementTick+0x168>)
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4a1f      	ldr	r2, [pc, #124]	@ (8005688 <xTaskIncrementTick+0x16c>)
 800560c:	441a      	add	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	3304      	adds	r3, #4
 8005612:	4619      	mov	r1, r3
 8005614:	4610      	mov	r0, r2
 8005616:	f7fe fee6 	bl	80043e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561e:	4b1b      	ldr	r3, [pc, #108]	@ (800568c <xTaskIncrementTick+0x170>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005624:	429a      	cmp	r2, r3
 8005626:	d3b4      	bcc.n	8005592 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005628:	2301      	movs	r3, #1
 800562a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800562c:	e7b1      	b.n	8005592 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800562e:	4b17      	ldr	r3, [pc, #92]	@ (800568c <xTaskIncrementTick+0x170>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005634:	4914      	ldr	r1, [pc, #80]	@ (8005688 <xTaskIncrementTick+0x16c>)
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	440b      	add	r3, r1
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d907      	bls.n	8005656 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005646:	2301      	movs	r3, #1
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	e004      	b.n	8005656 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800564c:	4b10      	ldr	r3, [pc, #64]	@ (8005690 <xTaskIncrementTick+0x174>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3301      	adds	r3, #1
 8005652:	4a0f      	ldr	r2, [pc, #60]	@ (8005690 <xTaskIncrementTick+0x174>)
 8005654:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005656:	4b0f      	ldr	r3, [pc, #60]	@ (8005694 <xTaskIncrementTick+0x178>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800565e:	2301      	movs	r3, #1
 8005660:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005662:	697b      	ldr	r3, [r7, #20]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20000a80 	.word	0x20000a80
 8005670:	20000a5c 	.word	0x20000a5c
 8005674:	20000a10 	.word	0x20000a10
 8005678:	20000a14 	.word	0x20000a14
 800567c:	20000a70 	.word	0x20000a70
 8005680:	20000a78 	.word	0x20000a78
 8005684:	20000a60 	.word	0x20000a60
 8005688:	2000095c 	.word	0x2000095c
 800568c:	20000958 	.word	0x20000958
 8005690:	20000a68 	.word	0x20000a68
 8005694:	20000a6c 	.word	0x20000a6c

08005698 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800569e:	4b27      	ldr	r3, [pc, #156]	@ (800573c <vTaskSwitchContext+0xa4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056a6:	4b26      	ldr	r3, [pc, #152]	@ (8005740 <vTaskSwitchContext+0xa8>)
 80056a8:	2201      	movs	r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056ac:	e040      	b.n	8005730 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80056ae:	4b24      	ldr	r3, [pc, #144]	@ (8005740 <vTaskSwitchContext+0xa8>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80056b4:	4b23      	ldr	r3, [pc, #140]	@ (8005744 <vTaskSwitchContext+0xac>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	fab3 f383 	clz	r3, r3
 80056c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80056c2:	7afb      	ldrb	r3, [r7, #11]
 80056c4:	f1c3 031f 	rsb	r3, r3, #31
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	491f      	ldr	r1, [pc, #124]	@ (8005748 <vTaskSwitchContext+0xb0>)
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	440b      	add	r3, r1
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10b      	bne.n	80056f6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	607b      	str	r3, [r7, #4]
}
 80056f0:	bf00      	nop
 80056f2:	bf00      	nop
 80056f4:	e7fd      	b.n	80056f2 <vTaskSwitchContext+0x5a>
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4a11      	ldr	r2, [pc, #68]	@ (8005748 <vTaskSwitchContext+0xb0>)
 8005702:	4413      	add	r3, r2
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	605a      	str	r2, [r3, #4]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	3308      	adds	r3, #8
 8005718:	429a      	cmp	r2, r3
 800571a:	d104      	bne.n	8005726 <vTaskSwitchContext+0x8e>
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	605a      	str	r2, [r3, #4]
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	4a07      	ldr	r2, [pc, #28]	@ (800574c <vTaskSwitchContext+0xb4>)
 800572e:	6013      	str	r3, [r2, #0]
}
 8005730:	bf00      	nop
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	20000a80 	.word	0x20000a80
 8005740:	20000a6c 	.word	0x20000a6c
 8005744:	20000a60 	.word	0x20000a60
 8005748:	2000095c 	.word	0x2000095c
 800574c:	20000958 	.word	0x20000958

08005750 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10b      	bne.n	8005778 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	60fb      	str	r3, [r7, #12]
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	e7fd      	b.n	8005774 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005778:	4b07      	ldr	r3, [pc, #28]	@ (8005798 <vTaskPlaceOnEventList+0x48>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3318      	adds	r3, #24
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7fe fe53 	bl	800442c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005786:	2101      	movs	r1, #1
 8005788:	6838      	ldr	r0, [r7, #0]
 800578a:	f000 fa9d 	bl	8005cc8 <prvAddCurrentTaskToDelayedList>
}
 800578e:	bf00      	nop
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000958 	.word	0x20000958

0800579c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10b      	bne.n	80057c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	617b      	str	r3, [r7, #20]
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	e7fd      	b.n	80057c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057c6:	4b0a      	ldr	r3, [pc, #40]	@ (80057f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3318      	adds	r3, #24
 80057cc:	4619      	mov	r1, r3
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f7fe fe09 	bl	80043e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80057da:	f04f 33ff 	mov.w	r3, #4294967295
 80057de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	68b8      	ldr	r0, [r7, #8]
 80057e4:	f000 fa70 	bl	8005cc8 <prvAddCurrentTaskToDelayedList>
	}
 80057e8:	bf00      	nop
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20000958 	.word	0x20000958

080057f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10b      	bne.n	8005822 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	60fb      	str	r3, [r7, #12]
}
 800581c:	bf00      	nop
 800581e:	bf00      	nop
 8005820:	e7fd      	b.n	800581e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	3318      	adds	r3, #24
 8005826:	4618      	mov	r0, r3
 8005828:	f7fe fe38 	bl	800449c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800582c:	4b1d      	ldr	r3, [pc, #116]	@ (80058a4 <xTaskRemoveFromEventList+0xb0>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d11c      	bne.n	800586e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	3304      	adds	r3, #4
 8005838:	4618      	mov	r0, r3
 800583a:	f7fe fe2f 	bl	800449c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005842:	2201      	movs	r2, #1
 8005844:	409a      	lsls	r2, r3
 8005846:	4b18      	ldr	r3, [pc, #96]	@ (80058a8 <xTaskRemoveFromEventList+0xb4>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4313      	orrs	r3, r2
 800584c:	4a16      	ldr	r2, [pc, #88]	@ (80058a8 <xTaskRemoveFromEventList+0xb4>)
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4a13      	ldr	r2, [pc, #76]	@ (80058ac <xTaskRemoveFromEventList+0xb8>)
 800585e:	441a      	add	r2, r3
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	3304      	adds	r3, #4
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f7fe fdbd 	bl	80043e6 <vListInsertEnd>
 800586c:	e005      	b.n	800587a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	3318      	adds	r3, #24
 8005872:	4619      	mov	r1, r3
 8005874:	480e      	ldr	r0, [pc, #56]	@ (80058b0 <xTaskRemoveFromEventList+0xbc>)
 8005876:	f7fe fdb6 	bl	80043e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800587e:	4b0d      	ldr	r3, [pc, #52]	@ (80058b4 <xTaskRemoveFromEventList+0xc0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005884:	429a      	cmp	r2, r3
 8005886:	d905      	bls.n	8005894 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005888:	2301      	movs	r3, #1
 800588a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800588c:	4b0a      	ldr	r3, [pc, #40]	@ (80058b8 <xTaskRemoveFromEventList+0xc4>)
 800588e:	2201      	movs	r2, #1
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	e001      	b.n	8005898 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005898:	697b      	ldr	r3, [r7, #20]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20000a80 	.word	0x20000a80
 80058a8:	20000a60 	.word	0x20000a60
 80058ac:	2000095c 	.word	0x2000095c
 80058b0:	20000a18 	.word	0x20000a18
 80058b4:	20000958 	.word	0x20000958
 80058b8:	20000a6c 	.word	0x20000a6c

080058bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058c4:	4b06      	ldr	r3, [pc, #24]	@ (80058e0 <vTaskInternalSetTimeOutState+0x24>)
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058cc:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <vTaskInternalSetTimeOutState+0x28>)
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	605a      	str	r2, [r3, #4]
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	20000a70 	.word	0x20000a70
 80058e4:	20000a5c 	.word	0x20000a5c

080058e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10b      	bne.n	8005910 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	613b      	str	r3, [r7, #16]
}
 800590a:	bf00      	nop
 800590c:	bf00      	nop
 800590e:	e7fd      	b.n	800590c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10b      	bne.n	800592e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	60fb      	str	r3, [r7, #12]
}
 8005928:	bf00      	nop
 800592a:	bf00      	nop
 800592c:	e7fd      	b.n	800592a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800592e:	f000 febd 	bl	80066ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005932:	4b1d      	ldr	r3, [pc, #116]	@ (80059a8 <xTaskCheckForTimeOut+0xc0>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594a:	d102      	bne.n	8005952 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800594c:	2300      	movs	r3, #0
 800594e:	61fb      	str	r3, [r7, #28]
 8005950:	e023      	b.n	800599a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	4b15      	ldr	r3, [pc, #84]	@ (80059ac <xTaskCheckForTimeOut+0xc4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d007      	beq.n	800596e <xTaskCheckForTimeOut+0x86>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	429a      	cmp	r2, r3
 8005966:	d302      	bcc.n	800596e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005968:	2301      	movs	r3, #1
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	e015      	b.n	800599a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	429a      	cmp	r2, r3
 8005976:	d20b      	bcs.n	8005990 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	1ad2      	subs	r2, r2, r3
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff ff99 	bl	80058bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
 800598e:	e004      	b.n	800599a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005996:	2301      	movs	r3, #1
 8005998:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800599a:	f000 feb7 	bl	800670c <vPortExitCritical>

	return xReturn;
 800599e:	69fb      	ldr	r3, [r7, #28]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3720      	adds	r7, #32
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	20000a5c 	.word	0x20000a5c
 80059ac:	20000a70 	.word	0x20000a70

080059b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059b4:	4b03      	ldr	r3, [pc, #12]	@ (80059c4 <vTaskMissedYield+0x14>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	601a      	str	r2, [r3, #0]
}
 80059ba:	bf00      	nop
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000a6c 	.word	0x20000a6c

080059c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059d0:	f000 f852 	bl	8005a78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059d4:	4b06      	ldr	r3, [pc, #24]	@ (80059f0 <prvIdleTask+0x28>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d9f9      	bls.n	80059d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059dc:	4b05      	ldr	r3, [pc, #20]	@ (80059f4 <prvIdleTask+0x2c>)
 80059de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059ec:	e7f0      	b.n	80059d0 <prvIdleTask+0x8>
 80059ee:	bf00      	nop
 80059f0:	2000095c 	.word	0x2000095c
 80059f4:	e000ed04 	.word	0xe000ed04

080059f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059fe:	2300      	movs	r3, #0
 8005a00:	607b      	str	r3, [r7, #4]
 8005a02:	e00c      	b.n	8005a1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4a12      	ldr	r2, [pc, #72]	@ (8005a58 <prvInitialiseTaskLists+0x60>)
 8005a10:	4413      	add	r3, r2
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe fcbc 	bl	8004390 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	607b      	str	r3, [r7, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b06      	cmp	r3, #6
 8005a22:	d9ef      	bls.n	8005a04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a24:	480d      	ldr	r0, [pc, #52]	@ (8005a5c <prvInitialiseTaskLists+0x64>)
 8005a26:	f7fe fcb3 	bl	8004390 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a2a:	480d      	ldr	r0, [pc, #52]	@ (8005a60 <prvInitialiseTaskLists+0x68>)
 8005a2c:	f7fe fcb0 	bl	8004390 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a30:	480c      	ldr	r0, [pc, #48]	@ (8005a64 <prvInitialiseTaskLists+0x6c>)
 8005a32:	f7fe fcad 	bl	8004390 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a36:	480c      	ldr	r0, [pc, #48]	@ (8005a68 <prvInitialiseTaskLists+0x70>)
 8005a38:	f7fe fcaa 	bl	8004390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a3c:	480b      	ldr	r0, [pc, #44]	@ (8005a6c <prvInitialiseTaskLists+0x74>)
 8005a3e:	f7fe fca7 	bl	8004390 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a42:	4b0b      	ldr	r3, [pc, #44]	@ (8005a70 <prvInitialiseTaskLists+0x78>)
 8005a44:	4a05      	ldr	r2, [pc, #20]	@ (8005a5c <prvInitialiseTaskLists+0x64>)
 8005a46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a48:	4b0a      	ldr	r3, [pc, #40]	@ (8005a74 <prvInitialiseTaskLists+0x7c>)
 8005a4a:	4a05      	ldr	r2, [pc, #20]	@ (8005a60 <prvInitialiseTaskLists+0x68>)
 8005a4c:	601a      	str	r2, [r3, #0]
}
 8005a4e:	bf00      	nop
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	2000095c 	.word	0x2000095c
 8005a5c:	200009e8 	.word	0x200009e8
 8005a60:	200009fc 	.word	0x200009fc
 8005a64:	20000a18 	.word	0x20000a18
 8005a68:	20000a2c 	.word	0x20000a2c
 8005a6c:	20000a44 	.word	0x20000a44
 8005a70:	20000a10 	.word	0x20000a10
 8005a74:	20000a14 	.word	0x20000a14

08005a78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a7e:	e019      	b.n	8005ab4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a80:	f000 fe14 	bl	80066ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a84:	4b10      	ldr	r3, [pc, #64]	@ (8005ac8 <prvCheckTasksWaitingTermination+0x50>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3304      	adds	r3, #4
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fe fd03 	bl	800449c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a96:	4b0d      	ldr	r3, [pc, #52]	@ (8005acc <prvCheckTasksWaitingTermination+0x54>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	4a0b      	ldr	r2, [pc, #44]	@ (8005acc <prvCheckTasksWaitingTermination+0x54>)
 8005a9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad0 <prvCheckTasksWaitingTermination+0x58>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ad0 <prvCheckTasksWaitingTermination+0x58>)
 8005aa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005aaa:	f000 fe2f 	bl	800670c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f810 	bl	8005ad4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ab4:	4b06      	ldr	r3, [pc, #24]	@ (8005ad0 <prvCheckTasksWaitingTermination+0x58>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e1      	bne.n	8005a80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005abc:	bf00      	nop
 8005abe:	bf00      	nop
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000a2c 	.word	0x20000a2c
 8005acc:	20000a58 	.word	0x20000a58
 8005ad0:	20000a40 	.word	0x20000a40

08005ad4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d108      	bne.n	8005af8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 ffa8 	bl	8006a40 <vPortFree>
				vPortFree( pxTCB );
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 ffa5 	bl	8006a40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005af6:	e019      	b.n	8005b2c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d103      	bne.n	8005b0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 ff9c 	bl	8006a40 <vPortFree>
	}
 8005b08:	e010      	b.n	8005b2c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d00b      	beq.n	8005b2c <prvDeleteTCB+0x58>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	60fb      	str	r3, [r7, #12]
}
 8005b26:	bf00      	nop
 8005b28:	bf00      	nop
 8005b2a:	e7fd      	b.n	8005b28 <prvDeleteTCB+0x54>
	}
 8005b2c:	bf00      	nop
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005b74 <prvResetNextTaskUnblockTime+0x40>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <prvResetNextTaskUnblockTime+0x14>
 8005b44:	2301      	movs	r3, #1
 8005b46:	e000      	b.n	8005b4a <prvResetNextTaskUnblockTime+0x16>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d004      	beq.n	8005b58 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b78 <prvResetNextTaskUnblockTime+0x44>)
 8005b50:	f04f 32ff 	mov.w	r2, #4294967295
 8005b54:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b56:	e008      	b.n	8005b6a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b58:	4b06      	ldr	r3, [pc, #24]	@ (8005b74 <prvResetNextTaskUnblockTime+0x40>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	4a04      	ldr	r2, [pc, #16]	@ (8005b78 <prvResetNextTaskUnblockTime+0x44>)
 8005b68:	6013      	str	r3, [r2, #0]
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bc80      	pop	{r7}
 8005b72:	4770      	bx	lr
 8005b74:	20000a10 	.word	0x20000a10
 8005b78:	20000a78 	.word	0x20000a78

08005b7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b82:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb0 <xTaskGetSchedulerState+0x34>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d102      	bne.n	8005b90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	607b      	str	r3, [r7, #4]
 8005b8e:	e008      	b.n	8005ba2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b90:	4b08      	ldr	r3, [pc, #32]	@ (8005bb4 <xTaskGetSchedulerState+0x38>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d102      	bne.n	8005b9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b98:	2302      	movs	r3, #2
 8005b9a:	607b      	str	r3, [r7, #4]
 8005b9c:	e001      	b.n	8005ba2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ba2:	687b      	ldr	r3, [r7, #4]
	}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	20000a64 	.word	0x20000a64
 8005bb4:	20000a80 	.word	0x20000a80

08005bb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d070      	beq.n	8005cb0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005bce:	4b3b      	ldr	r3, [pc, #236]	@ (8005cbc <xTaskPriorityDisinherit+0x104>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d00b      	beq.n	8005bf0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	60fb      	str	r3, [r7, #12]
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	e7fd      	b.n	8005bec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10b      	bne.n	8005c10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	60bb      	str	r3, [r7, #8]
}
 8005c0a:	bf00      	nop
 8005c0c:	bf00      	nop
 8005c0e:	e7fd      	b.n	8005c0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c14:	1e5a      	subs	r2, r3, #1
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d044      	beq.n	8005cb0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d140      	bne.n	8005cb0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	3304      	adds	r3, #4
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fe fc32 	bl	800449c <uxListRemove>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d115      	bne.n	8005c6a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c42:	491f      	ldr	r1, [pc, #124]	@ (8005cc0 <xTaskPriorityDisinherit+0x108>)
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <xTaskPriorityDisinherit+0xb2>
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c58:	2201      	movs	r2, #1
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	43da      	mvns	r2, r3
 8005c60:	4b18      	ldr	r3, [pc, #96]	@ (8005cc4 <xTaskPriorityDisinherit+0x10c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4013      	ands	r3, r2
 8005c66:	4a17      	ldr	r2, [pc, #92]	@ (8005cc4 <xTaskPriorityDisinherit+0x10c>)
 8005c68:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	f1c3 0207 	rsb	r2, r3, #7
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c82:	2201      	movs	r2, #1
 8005c84:	409a      	lsls	r2, r3
 8005c86:	4b0f      	ldr	r3, [pc, #60]	@ (8005cc4 <xTaskPriorityDisinherit+0x10c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8005cc4 <xTaskPriorityDisinherit+0x10c>)
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4a08      	ldr	r2, [pc, #32]	@ (8005cc0 <xTaskPriorityDisinherit+0x108>)
 8005c9e:	441a      	add	r2, r3
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	f7fe fb9d 	bl	80043e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005cac:	2301      	movs	r3, #1
 8005cae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cb0:	697b      	ldr	r3, [r7, #20]
	}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000958 	.word	0x20000958
 8005cc0:	2000095c 	.word	0x2000095c
 8005cc4:	20000a60 	.word	0x20000a60

08005cc8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005cd2:	4b29      	ldr	r3, [pc, #164]	@ (8005d78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cd8:	4b28      	ldr	r3, [pc, #160]	@ (8005d7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fe fbdc 	bl	800449c <uxListRemove>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10b      	bne.n	8005d02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005cea:	4b24      	ldr	r3, [pc, #144]	@ (8005d7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	43da      	mvns	r2, r3
 8005cf8:	4b21      	ldr	r3, [pc, #132]	@ (8005d80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	4a20      	ldr	r2, [pc, #128]	@ (8005d80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d08:	d10a      	bne.n	8005d20 <prvAddCurrentTaskToDelayedList+0x58>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d10:	4b1a      	ldr	r3, [pc, #104]	@ (8005d7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3304      	adds	r3, #4
 8005d16:	4619      	mov	r1, r3
 8005d18:	481a      	ldr	r0, [pc, #104]	@ (8005d84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d1a:	f7fe fb64 	bl	80043e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d1e:	e026      	b.n	8005d6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4413      	add	r3, r2
 8005d26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d28:	4b14      	ldr	r3, [pc, #80]	@ (8005d7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d209      	bcs.n	8005d4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d38:	4b13      	ldr	r3, [pc, #76]	@ (8005d88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3304      	adds	r3, #4
 8005d42:	4619      	mov	r1, r3
 8005d44:	4610      	mov	r0, r2
 8005d46:	f7fe fb71 	bl	800442c <vListInsert>
}
 8005d4a:	e010      	b.n	8005d6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	4b0a      	ldr	r3, [pc, #40]	@ (8005d7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3304      	adds	r3, #4
 8005d56:	4619      	mov	r1, r3
 8005d58:	4610      	mov	r0, r2
 8005d5a:	f7fe fb67 	bl	800442c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d202      	bcs.n	8005d6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d68:	4a09      	ldr	r2, [pc, #36]	@ (8005d90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6013      	str	r3, [r2, #0]
}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000a5c 	.word	0x20000a5c
 8005d7c:	20000958 	.word	0x20000958
 8005d80:	20000a60 	.word	0x20000a60
 8005d84:	20000a44 	.word	0x20000a44
 8005d88:	20000a14 	.word	0x20000a14
 8005d8c:	20000a10 	.word	0x20000a10
 8005d90:	20000a78 	.word	0x20000a78

08005d94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08a      	sub	sp, #40	@ 0x28
 8005d98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d9e:	f000 fb51 	bl	8006444 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005da2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e18 <xTimerCreateTimerTask+0x84>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d021      	beq.n	8005dee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005db2:	1d3a      	adds	r2, r7, #4
 8005db4:	f107 0108 	add.w	r1, r7, #8
 8005db8:	f107 030c 	add.w	r3, r7, #12
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fa fabb 	bl	8000338 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	9202      	str	r2, [sp, #8]
 8005dca:	9301      	str	r3, [sp, #4]
 8005dcc:	2302      	movs	r3, #2
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	460a      	mov	r2, r1
 8005dd4:	4911      	ldr	r1, [pc, #68]	@ (8005e1c <xTimerCreateTimerTask+0x88>)
 8005dd6:	4812      	ldr	r0, [pc, #72]	@ (8005e20 <xTimerCreateTimerTask+0x8c>)
 8005dd8:	f7ff f8ba 	bl	8004f50 <xTaskCreateStatic>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	4a11      	ldr	r2, [pc, #68]	@ (8005e24 <xTimerCreateTimerTask+0x90>)
 8005de0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005de2:	4b10      	ldr	r3, [pc, #64]	@ (8005e24 <xTimerCreateTimerTask+0x90>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005dea:	2301      	movs	r3, #1
 8005dec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10b      	bne.n	8005e0c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	613b      	str	r3, [r7, #16]
}
 8005e06:	bf00      	nop
 8005e08:	bf00      	nop
 8005e0a:	e7fd      	b.n	8005e08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e0c:	697b      	ldr	r3, [r7, #20]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20000ab4 	.word	0x20000ab4
 8005e1c:	08006d68 	.word	0x08006d68
 8005e20:	08006071 	.word	0x08006071
 8005e24:	20000ab8 	.word	0x20000ab8

08005e28 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8005e36:	202c      	movs	r0, #44	@ 0x2c
 8005e38:	f000 fd3a 	bl	80068b0 <pvPortMalloc>
 8005e3c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00d      	beq.n	8005e60 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 f848 	bl	8005ee8 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8005e60:	697b      	ldr	r3, [r7, #20]
	}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b08a      	sub	sp, #40	@ 0x28
 8005e6e:	af02      	add	r7, sp, #8
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	607a      	str	r2, [r7, #4]
 8005e76:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005e78:	232c      	movs	r3, #44	@ 0x2c
 8005e7a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	2b2c      	cmp	r3, #44	@ 0x2c
 8005e80:	d00b      	beq.n	8005e9a <xTimerCreateStatic+0x30>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	61bb      	str	r3, [r7, #24]
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	e7fd      	b.n	8005e96 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10b      	bne.n	8005eb8 <xTimerCreateStatic+0x4e>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	617b      	str	r3, [r7, #20]
}
 8005eb2:	bf00      	nop
 8005eb4:	bf00      	nop
 8005eb6:	e7fd      	b.n	8005eb4 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eba:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00d      	beq.n	8005ede <xTimerCreateStatic+0x74>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	68b9      	ldr	r1, [r7, #8]
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f809 	bl	8005ee8 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8005ede:	69fb      	ldr	r3, [r7, #28]
	}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3720      	adds	r7, #32
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10b      	bne.n	8005f14 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	617b      	str	r3, [r7, #20]
}
 8005f0e:	bf00      	nop
 8005f10:	bf00      	nop
 8005f12:	e7fd      	b.n	8005f10 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d015      	beq.n	8005f46 <prvInitialiseNewTimer+0x5e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005f1a:	f000 fa93 	bl	8006444 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f38:	6a3a      	ldr	r2, [r7, #32]
 8005f3a:	625a      	str	r2, [r3, #36]	@ 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3e:	3304      	adds	r3, #4
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fe fa44 	bl	80043ce <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005f46:	bf00      	nop
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08a      	sub	sp, #40	@ 0x28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10b      	bne.n	8005f80 <xTimerGenericCommand+0x30>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	623b      	str	r3, [r7, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	bf00      	nop
 8005f7e:	e7fd      	b.n	8005f7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f80:	4b19      	ldr	r3, [pc, #100]	@ (8005fe8 <xTimerGenericCommand+0x98>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d02a      	beq.n	8005fde <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	dc18      	bgt.n	8005fcc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f9a:	f7ff fdef 	bl	8005b7c <xTaskGetSchedulerState>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d109      	bne.n	8005fb8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005fa4:	4b10      	ldr	r3, [pc, #64]	@ (8005fe8 <xTimerGenericCommand+0x98>)
 8005fa6:	6818      	ldr	r0, [r3, #0]
 8005fa8:	f107 0114 	add.w	r1, r7, #20
 8005fac:	2300      	movs	r3, #0
 8005fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb0:	f7fe fbe2 	bl	8004778 <xQueueGenericSend>
 8005fb4:	6278      	str	r0, [r7, #36]	@ 0x24
 8005fb6:	e012      	b.n	8005fde <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe8 <xTimerGenericCommand+0x98>)
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	f107 0114 	add.w	r1, r7, #20
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f7fe fbd8 	bl	8004778 <xQueueGenericSend>
 8005fc8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005fca:	e008      	b.n	8005fde <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005fcc:	4b06      	ldr	r3, [pc, #24]	@ (8005fe8 <xTimerGenericCommand+0x98>)
 8005fce:	6818      	ldr	r0, [r3, #0]
 8005fd0:	f107 0114 	add.w	r1, r7, #20
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	f7fe fcd0 	bl	800497c <xQueueGenericSendFromISR>
 8005fdc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3728      	adds	r7, #40	@ 0x28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	20000ab4 	.word	0x20000ab4

08005fec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af02      	add	r7, sp, #8
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800606c <prvProcessExpiredTimer+0x80>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	3304      	adds	r3, #4
 8006004:	4618      	mov	r0, r3
 8006006:	f7fe fa49 	bl	800449c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d123      	bne.n	800605a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	18d1      	adds	r1, r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	6978      	ldr	r0, [r7, #20]
 8006020:	f000 f8cc 	bl	80061bc <prvInsertTimerInActiveList>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d017      	beq.n	800605a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800602a:	2300      	movs	r3, #0
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	2300      	movs	r3, #0
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	2100      	movs	r1, #0
 8006034:	6978      	ldr	r0, [r7, #20]
 8006036:	f7ff ff8b 	bl	8005f50 <xTimerGenericCommand>
 800603a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10b      	bne.n	800605a <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	60fb      	str	r3, [r7, #12]
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop
 8006058:	e7fd      	b.n	8006056 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605e:	6978      	ldr	r0, [r7, #20]
 8006060:	4798      	blx	r3
}
 8006062:	bf00      	nop
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20000aac 	.word	0x20000aac

08006070 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006078:	f107 0308 	add.w	r3, r7, #8
 800607c:	4618      	mov	r0, r3
 800607e:	f000 f859 	bl	8006134 <prvGetNextExpireTime>
 8006082:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4619      	mov	r1, r3
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f805 	bl	8006098 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800608e:	f000 f8d7 	bl	8006240 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006092:	bf00      	nop
 8006094:	e7f0      	b.n	8006078 <prvTimerTask+0x8>
	...

08006098 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060a2:	f7ff f981 	bl	80053a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060a6:	f107 0308 	add.w	r3, r7, #8
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 f866 	bl	800617c <prvSampleTimeNow>
 80060b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d130      	bne.n	800611a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10a      	bne.n	80060d4 <prvProcessTimerOrBlockTask+0x3c>
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d806      	bhi.n	80060d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80060c6:	f7ff f97d 	bl	80053c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060ca:	68f9      	ldr	r1, [r7, #12]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff ff8d 	bl	8005fec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80060d2:	e024      	b.n	800611e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d008      	beq.n	80060ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060da:	4b13      	ldr	r3, [pc, #76]	@ (8006128 <prvProcessTimerOrBlockTask+0x90>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	bf0c      	ite	eq
 80060e4:	2301      	moveq	r3, #1
 80060e6:	2300      	movne	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060ec:	4b0f      	ldr	r3, [pc, #60]	@ (800612c <prvProcessTimerOrBlockTask+0x94>)
 80060ee:	6818      	ldr	r0, [r3, #0]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	4619      	mov	r1, r3
 80060fa:	f7fe fef5 	bl	8004ee8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060fe:	f7ff f961 	bl	80053c4 <xTaskResumeAll>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006108:	4b09      	ldr	r3, [pc, #36]	@ (8006130 <prvProcessTimerOrBlockTask+0x98>)
 800610a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	f3bf 8f6f 	isb	sy
}
 8006118:	e001      	b.n	800611e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800611a:	f7ff f953 	bl	80053c4 <xTaskResumeAll>
}
 800611e:	bf00      	nop
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000ab0 	.word	0x20000ab0
 800612c:	20000ab4 	.word	0x20000ab4
 8006130:	e000ed04 	.word	0xe000ed04

08006134 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800613c:	4b0e      	ldr	r3, [pc, #56]	@ (8006178 <prvGetNextExpireTime+0x44>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	bf0c      	ite	eq
 8006146:	2301      	moveq	r3, #1
 8006148:	2300      	movne	r3, #0
 800614a:	b2db      	uxtb	r3, r3
 800614c:	461a      	mov	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d105      	bne.n	8006166 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800615a:	4b07      	ldr	r3, [pc, #28]	@ (8006178 <prvGetNextExpireTime+0x44>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	e001      	b.n	800616a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800616a:	68fb      	ldr	r3, [r7, #12]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	bc80      	pop	{r7}
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	20000aac 	.word	0x20000aac

0800617c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006184:	f7ff f9bc 	bl	8005500 <xTaskGetTickCount>
 8006188:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800618a:	4b0b      	ldr	r3, [pc, #44]	@ (80061b8 <prvSampleTimeNow+0x3c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	429a      	cmp	r2, r3
 8006192:	d205      	bcs.n	80061a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006194:	f000 f8f4 	bl	8006380 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e002      	b.n	80061a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80061a6:	4a04      	ldr	r2, [pc, #16]	@ (80061b8 <prvSampleTimeNow+0x3c>)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80061ac:	68fb      	ldr	r3, [r7, #12]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000abc 	.word	0x20000abc

080061bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80061ca:	2300      	movs	r3, #0
 80061cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d812      	bhi.n	8006208 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	1ad2      	subs	r2, r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d302      	bcc.n	80061f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80061f0:	2301      	movs	r3, #1
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	e01b      	b.n	800622e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061f6:	4b10      	ldr	r3, [pc, #64]	@ (8006238 <prvInsertTimerInActiveList+0x7c>)
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f7fe f913 	bl	800442c <vListInsert>
 8006206:	e012      	b.n	800622e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d206      	bcs.n	800621e <prvInsertTimerInActiveList+0x62>
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d302      	bcc.n	800621e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006218:	2301      	movs	r3, #1
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e007      	b.n	800622e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800621e:	4b07      	ldr	r3, [pc, #28]	@ (800623c <prvInsertTimerInActiveList+0x80>)
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3304      	adds	r3, #4
 8006226:	4619      	mov	r1, r3
 8006228:	4610      	mov	r0, r2
 800622a:	f7fe f8ff 	bl	800442c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800622e:	697b      	ldr	r3, [r7, #20]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	20000ab0 	.word	0x20000ab0
 800623c:	20000aac 	.word	0x20000aac

08006240 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08c      	sub	sp, #48	@ 0x30
 8006244:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006246:	e087      	b.n	8006358 <prvProcessReceivedCommands+0x118>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	f2c0 8084 	blt.w	8006358 <prvProcessReceivedCommands+0x118>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d004      	beq.n	8006266 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800625c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625e:	3304      	adds	r3, #4
 8006260:	4618      	mov	r0, r3
 8006262:	f7fe f91b 	bl	800449c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006266:	1d3b      	adds	r3, r7, #4
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff ff87 	bl	800617c <prvSampleTimeNow>
 800626e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b09      	cmp	r3, #9
 8006274:	d86b      	bhi.n	800634e <prvProcessReceivedCommands+0x10e>
 8006276:	a201      	add	r2, pc, #4	@ (adr r2, 800627c <prvProcessReceivedCommands+0x3c>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	080062a5 	.word	0x080062a5
 8006280:	080062a5 	.word	0x080062a5
 8006284:	080062a5 	.word	0x080062a5
 8006288:	0800634f 	.word	0x0800634f
 800628c:	08006303 	.word	0x08006303
 8006290:	0800633d 	.word	0x0800633d
 8006294:	080062a5 	.word	0x080062a5
 8006298:	080062a5 	.word	0x080062a5
 800629c:	0800634f 	.word	0x0800634f
 80062a0:	08006303 	.word	0x08006303
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	18d1      	adds	r1, r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a3a      	ldr	r2, [r7, #32]
 80062b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062b2:	f7ff ff83 	bl	80061bc <prvInsertTimerInActiveList>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d04a      	beq.n	8006352 <prvProcessReceivedCommands+0x112>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062c2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80062c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d142      	bne.n	8006352 <prvProcessReceivedCommands+0x112>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	441a      	add	r2, r3
 80062d4:	2300      	movs	r3, #0
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	2300      	movs	r3, #0
 80062da:	2100      	movs	r1, #0
 80062dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062de:	f7ff fe37 	bl	8005f50 <xTimerGenericCommand>
 80062e2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d133      	bne.n	8006352 <prvProcessReceivedCommands+0x112>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	61bb      	str	r3, [r7, #24]
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	e7fd      	b.n	80062fe <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10b      	bne.n	8006328 <prvProcessReceivedCommands+0xe8>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	617b      	str	r3, [r7, #20]
}
 8006322:	bf00      	nop
 8006324:	bf00      	nop
 8006326:	e7fd      	b.n	8006324 <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632a:	699a      	ldr	r2, [r3, #24]
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	18d1      	adds	r1, r2, r3
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	6a3a      	ldr	r2, [r7, #32]
 8006334:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006336:	f7ff ff41 	bl	80061bc <prvInsertTimerInActiveList>
					break;
 800633a:	e00d      	b.n	8006358 <prvProcessReceivedCommands+0x118>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006342:	2b00      	cmp	r3, #0
 8006344:	d107      	bne.n	8006356 <prvProcessReceivedCommands+0x116>
						{
							vPortFree( pxTimer );
 8006346:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006348:	f000 fb7a 	bl	8006a40 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800634c:	e003      	b.n	8006356 <prvProcessReceivedCommands+0x116>

				default	:
					/* Don't expect to get here. */
					break;
 800634e:	bf00      	nop
 8006350:	e002      	b.n	8006358 <prvProcessReceivedCommands+0x118>
					break;
 8006352:	bf00      	nop
 8006354:	e000      	b.n	8006358 <prvProcessReceivedCommands+0x118>
					break;
 8006356:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006358:	4b08      	ldr	r3, [pc, #32]	@ (800637c <prvProcessReceivedCommands+0x13c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f107 0108 	add.w	r1, r7, #8
 8006360:	2200      	movs	r2, #0
 8006362:	4618      	mov	r0, r3
 8006364:	f7fe fba6 	bl	8004ab4 <xQueueReceive>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	f47f af6c 	bne.w	8006248 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	3728      	adds	r7, #40	@ 0x28
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000ab4 	.word	0x20000ab4

08006380 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006386:	e046      	b.n	8006416 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006388:	4b2c      	ldr	r3, [pc, #176]	@ (800643c <prvSwitchTimerLists+0xbc>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006392:	4b2a      	ldr	r3, [pc, #168]	@ (800643c <prvSwitchTimerLists+0xbc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3304      	adds	r3, #4
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fe f87b 	bl	800449c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d12f      	bne.n	8006416 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4413      	add	r3, r2
 80063be:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d90e      	bls.n	80063e6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063d4:	4b19      	ldr	r3, [pc, #100]	@ (800643c <prvSwitchTimerLists+0xbc>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3304      	adds	r3, #4
 80063dc:	4619      	mov	r1, r3
 80063de:	4610      	mov	r0, r2
 80063e0:	f7fe f824 	bl	800442c <vListInsert>
 80063e4:	e017      	b.n	8006416 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063e6:	2300      	movs	r3, #0
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	2300      	movs	r3, #0
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	2100      	movs	r1, #0
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f7ff fdad 	bl	8005f50 <xTimerGenericCommand>
 80063f6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10b      	bne.n	8006416 <prvSwitchTimerLists+0x96>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	603b      	str	r3, [r7, #0]
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	e7fd      	b.n	8006412 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006416:	4b09      	ldr	r3, [pc, #36]	@ (800643c <prvSwitchTimerLists+0xbc>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1b3      	bne.n	8006388 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006420:	4b06      	ldr	r3, [pc, #24]	@ (800643c <prvSwitchTimerLists+0xbc>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006426:	4b06      	ldr	r3, [pc, #24]	@ (8006440 <prvSwitchTimerLists+0xc0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a04      	ldr	r2, [pc, #16]	@ (800643c <prvSwitchTimerLists+0xbc>)
 800642c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800642e:	4a04      	ldr	r2, [pc, #16]	@ (8006440 <prvSwitchTimerLists+0xc0>)
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	6013      	str	r3, [r2, #0]
}
 8006434:	bf00      	nop
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	20000aac 	.word	0x20000aac
 8006440:	20000ab0 	.word	0x20000ab0

08006444 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800644a:	f000 f92f 	bl	80066ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800644e:	4b15      	ldr	r3, [pc, #84]	@ (80064a4 <prvCheckForValidListAndQueue+0x60>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d120      	bne.n	8006498 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006456:	4814      	ldr	r0, [pc, #80]	@ (80064a8 <prvCheckForValidListAndQueue+0x64>)
 8006458:	f7fd ff9a 	bl	8004390 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800645c:	4813      	ldr	r0, [pc, #76]	@ (80064ac <prvCheckForValidListAndQueue+0x68>)
 800645e:	f7fd ff97 	bl	8004390 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006462:	4b13      	ldr	r3, [pc, #76]	@ (80064b0 <prvCheckForValidListAndQueue+0x6c>)
 8006464:	4a10      	ldr	r2, [pc, #64]	@ (80064a8 <prvCheckForValidListAndQueue+0x64>)
 8006466:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006468:	4b12      	ldr	r3, [pc, #72]	@ (80064b4 <prvCheckForValidListAndQueue+0x70>)
 800646a:	4a10      	ldr	r2, [pc, #64]	@ (80064ac <prvCheckForValidListAndQueue+0x68>)
 800646c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800646e:	2300      	movs	r3, #0
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	4b11      	ldr	r3, [pc, #68]	@ (80064b8 <prvCheckForValidListAndQueue+0x74>)
 8006474:	4a11      	ldr	r2, [pc, #68]	@ (80064bc <prvCheckForValidListAndQueue+0x78>)
 8006476:	210c      	movs	r1, #12
 8006478:	200a      	movs	r0, #10
 800647a:	f7fe f8a3 	bl	80045c4 <xQueueGenericCreateStatic>
 800647e:	4603      	mov	r3, r0
 8006480:	4a08      	ldr	r2, [pc, #32]	@ (80064a4 <prvCheckForValidListAndQueue+0x60>)
 8006482:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006484:	4b07      	ldr	r3, [pc, #28]	@ (80064a4 <prvCheckForValidListAndQueue+0x60>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d005      	beq.n	8006498 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800648c:	4b05      	ldr	r3, [pc, #20]	@ (80064a4 <prvCheckForValidListAndQueue+0x60>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	490b      	ldr	r1, [pc, #44]	@ (80064c0 <prvCheckForValidListAndQueue+0x7c>)
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fd00 	bl	8004e98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006498:	f000 f938 	bl	800670c <vPortExitCritical>
}
 800649c:	bf00      	nop
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20000ab4 	.word	0x20000ab4
 80064a8:	20000a84 	.word	0x20000a84
 80064ac:	20000a98 	.word	0x20000a98
 80064b0:	20000aac 	.word	0x20000aac
 80064b4:	20000ab0 	.word	0x20000ab0
 80064b8:	20000b38 	.word	0x20000b38
 80064bc:	20000ac0 	.word	0x20000ac0
 80064c0:	08006d70 	.word	0x08006d70

080064c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3b04      	subs	r3, #4
 80064d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3b04      	subs	r3, #4
 80064e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f023 0201 	bic.w	r2, r3, #1
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3b04      	subs	r3, #4
 80064f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064f4:	4a08      	ldr	r2, [pc, #32]	@ (8006518 <pxPortInitialiseStack+0x54>)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3b14      	subs	r3, #20
 80064fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3b20      	subs	r3, #32
 800650a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800650c:	68fb      	ldr	r3, [r7, #12]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr
 8006518:	0800651d 	.word	0x0800651d

0800651c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006522:	2300      	movs	r3, #0
 8006524:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006526:	4b12      	ldr	r3, [pc, #72]	@ (8006570 <prvTaskExitError+0x54>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652e:	d00b      	beq.n	8006548 <prvTaskExitError+0x2c>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	60fb      	str	r3, [r7, #12]
}
 8006542:	bf00      	nop
 8006544:	bf00      	nop
 8006546:	e7fd      	b.n	8006544 <prvTaskExitError+0x28>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	60bb      	str	r3, [r7, #8]
}
 800655a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800655c:	bf00      	nop
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0fc      	beq.n	800655e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr
 8006570:	20000010 	.word	0x20000010
	...

08006580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006580:	4b07      	ldr	r3, [pc, #28]	@ (80065a0 <pxCurrentTCBConst2>)
 8006582:	6819      	ldr	r1, [r3, #0]
 8006584:	6808      	ldr	r0, [r1, #0]
 8006586:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800658a:	f380 8809 	msr	PSP, r0
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f04f 0000 	mov.w	r0, #0
 8006596:	f380 8811 	msr	BASEPRI, r0
 800659a:	f04e 0e0d 	orr.w	lr, lr, #13
 800659e:	4770      	bx	lr

080065a0 <pxCurrentTCBConst2>:
 80065a0:	20000958 	.word	0x20000958
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop

080065a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80065a8:	4806      	ldr	r0, [pc, #24]	@ (80065c4 <prvPortStartFirstTask+0x1c>)
 80065aa:	6800      	ldr	r0, [r0, #0]
 80065ac:	6800      	ldr	r0, [r0, #0]
 80065ae:	f380 8808 	msr	MSP, r0
 80065b2:	b662      	cpsie	i
 80065b4:	b661      	cpsie	f
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	df00      	svc	0
 80065c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065c2:	bf00      	nop
 80065c4:	e000ed08 	.word	0xe000ed08

080065c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065ce:	4b32      	ldr	r3, [pc, #200]	@ (8006698 <xPortStartScheduler+0xd0>)
 80065d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	22ff      	movs	r2, #255	@ 0xff
 80065de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	4b2a      	ldr	r3, [pc, #168]	@ (800669c <xPortStartScheduler+0xd4>)
 80065f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065f6:	4b2a      	ldr	r3, [pc, #168]	@ (80066a0 <xPortStartScheduler+0xd8>)
 80065f8:	2207      	movs	r2, #7
 80065fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065fc:	e009      	b.n	8006612 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80065fe:	4b28      	ldr	r3, [pc, #160]	@ (80066a0 <xPortStartScheduler+0xd8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3b01      	subs	r3, #1
 8006604:	4a26      	ldr	r2, [pc, #152]	@ (80066a0 <xPortStartScheduler+0xd8>)
 8006606:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	b2db      	uxtb	r3, r3
 8006610:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006612:	78fb      	ldrb	r3, [r7, #3]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800661a:	2b80      	cmp	r3, #128	@ 0x80
 800661c:	d0ef      	beq.n	80065fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800661e:	4b20      	ldr	r3, [pc, #128]	@ (80066a0 <xPortStartScheduler+0xd8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f1c3 0307 	rsb	r3, r3, #7
 8006626:	2b04      	cmp	r3, #4
 8006628:	d00b      	beq.n	8006642 <xPortStartScheduler+0x7a>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	60bb      	str	r3, [r7, #8]
}
 800663c:	bf00      	nop
 800663e:	bf00      	nop
 8006640:	e7fd      	b.n	800663e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006642:	4b17      	ldr	r3, [pc, #92]	@ (80066a0 <xPortStartScheduler+0xd8>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	4a15      	ldr	r2, [pc, #84]	@ (80066a0 <xPortStartScheduler+0xd8>)
 800664a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800664c:	4b14      	ldr	r3, [pc, #80]	@ (80066a0 <xPortStartScheduler+0xd8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006654:	4a12      	ldr	r2, [pc, #72]	@ (80066a0 <xPortStartScheduler+0xd8>)
 8006656:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	b2da      	uxtb	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006660:	4b10      	ldr	r3, [pc, #64]	@ (80066a4 <xPortStartScheduler+0xdc>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a0f      	ldr	r2, [pc, #60]	@ (80066a4 <xPortStartScheduler+0xdc>)
 8006666:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800666a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800666c:	4b0d      	ldr	r3, [pc, #52]	@ (80066a4 <xPortStartScheduler+0xdc>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a0c      	ldr	r2, [pc, #48]	@ (80066a4 <xPortStartScheduler+0xdc>)
 8006672:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006676:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006678:	f000 f8b8 	bl	80067ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800667c:	4b0a      	ldr	r3, [pc, #40]	@ (80066a8 <xPortStartScheduler+0xe0>)
 800667e:	2200      	movs	r2, #0
 8006680:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006682:	f7ff ff91 	bl	80065a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006686:	f7ff f807 	bl	8005698 <vTaskSwitchContext>
	prvTaskExitError();
 800668a:	f7ff ff47 	bl	800651c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	e000e400 	.word	0xe000e400
 800669c:	20000b80 	.word	0x20000b80
 80066a0:	20000b84 	.word	0x20000b84
 80066a4:	e000ed20 	.word	0xe000ed20
 80066a8:	20000010 	.word	0x20000010

080066ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	607b      	str	r3, [r7, #4]
}
 80066c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006704 <vPortEnterCritical+0x58>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3301      	adds	r3, #1
 80066cc:	4a0d      	ldr	r2, [pc, #52]	@ (8006704 <vPortEnterCritical+0x58>)
 80066ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006704 <vPortEnterCritical+0x58>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d110      	bne.n	80066fa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006708 <vPortEnterCritical+0x5c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <vPortEnterCritical+0x4e>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	603b      	str	r3, [r7, #0]
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop
 80066f8:	e7fd      	b.n	80066f6 <vPortEnterCritical+0x4a>
	}
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr
 8006704:	20000010 	.word	0x20000010
 8006708:	e000ed04 	.word	0xe000ed04

0800670c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006712:	4b12      	ldr	r3, [pc, #72]	@ (800675c <vPortExitCritical+0x50>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10b      	bne.n	8006732 <vPortExitCritical+0x26>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	607b      	str	r3, [r7, #4]
}
 800672c:	bf00      	nop
 800672e:	bf00      	nop
 8006730:	e7fd      	b.n	800672e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006732:	4b0a      	ldr	r3, [pc, #40]	@ (800675c <vPortExitCritical+0x50>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3b01      	subs	r3, #1
 8006738:	4a08      	ldr	r2, [pc, #32]	@ (800675c <vPortExitCritical+0x50>)
 800673a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800673c:	4b07      	ldr	r3, [pc, #28]	@ (800675c <vPortExitCritical+0x50>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d105      	bne.n	8006750 <vPortExitCritical+0x44>
 8006744:	2300      	movs	r3, #0
 8006746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	f383 8811 	msr	BASEPRI, r3
}
 800674e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	bc80      	pop	{r7}
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20000010 	.word	0x20000010

08006760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006760:	f3ef 8009 	mrs	r0, PSP
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	4b0d      	ldr	r3, [pc, #52]	@ (80067a0 <pxCurrentTCBConst>)
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006770:	6010      	str	r0, [r2, #0]
 8006772:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006776:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800677a:	f380 8811 	msr	BASEPRI, r0
 800677e:	f7fe ff8b 	bl	8005698 <vTaskSwitchContext>
 8006782:	f04f 0000 	mov.w	r0, #0
 8006786:	f380 8811 	msr	BASEPRI, r0
 800678a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800678e:	6819      	ldr	r1, [r3, #0]
 8006790:	6808      	ldr	r0, [r1, #0]
 8006792:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006796:	f380 8809 	msr	PSP, r0
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	4770      	bx	lr

080067a0 <pxCurrentTCBConst>:
 80067a0:	20000958 	.word	0x20000958
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop

080067a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	607b      	str	r3, [r7, #4]
}
 80067c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067c2:	f7fe feab 	bl	800551c <xTaskIncrementTick>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067cc:	4b06      	ldr	r3, [pc, #24]	@ (80067e8 <SysTick_Handler+0x40>)
 80067ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	2300      	movs	r3, #0
 80067d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f383 8811 	msr	BASEPRI, r3
}
 80067de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067f0:	4b0a      	ldr	r3, [pc, #40]	@ (800681c <vPortSetupTimerInterrupt+0x30>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006820 <vPortSetupTimerInterrupt+0x34>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067fc:	4b09      	ldr	r3, [pc, #36]	@ (8006824 <vPortSetupTimerInterrupt+0x38>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a09      	ldr	r2, [pc, #36]	@ (8006828 <vPortSetupTimerInterrupt+0x3c>)
 8006802:	fba2 2303 	umull	r2, r3, r2, r3
 8006806:	099b      	lsrs	r3, r3, #6
 8006808:	4a08      	ldr	r2, [pc, #32]	@ (800682c <vPortSetupTimerInterrupt+0x40>)
 800680a:	3b01      	subs	r3, #1
 800680c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800680e:	4b03      	ldr	r3, [pc, #12]	@ (800681c <vPortSetupTimerInterrupt+0x30>)
 8006810:	2207      	movs	r2, #7
 8006812:	601a      	str	r2, [r3, #0]
}
 8006814:	bf00      	nop
 8006816:	46bd      	mov	sp, r7
 8006818:	bc80      	pop	{r7}
 800681a:	4770      	bx	lr
 800681c:	e000e010 	.word	0xe000e010
 8006820:	e000e018 	.word	0xe000e018
 8006824:	20000004 	.word	0x20000004
 8006828:	10624dd3 	.word	0x10624dd3
 800682c:	e000e014 	.word	0xe000e014

08006830 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006836:	f3ef 8305 	mrs	r3, IPSR
 800683a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b0f      	cmp	r3, #15
 8006840:	d915      	bls.n	800686e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006842:	4a17      	ldr	r2, [pc, #92]	@ (80068a0 <vPortValidateInterruptPriority+0x70>)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4413      	add	r3, r2
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800684c:	4b15      	ldr	r3, [pc, #84]	@ (80068a4 <vPortValidateInterruptPriority+0x74>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	7afa      	ldrb	r2, [r7, #11]
 8006852:	429a      	cmp	r2, r3
 8006854:	d20b      	bcs.n	800686e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	607b      	str	r3, [r7, #4]
}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	e7fd      	b.n	800686a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800686e:	4b0e      	ldr	r3, [pc, #56]	@ (80068a8 <vPortValidateInterruptPriority+0x78>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006876:	4b0d      	ldr	r3, [pc, #52]	@ (80068ac <vPortValidateInterruptPriority+0x7c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d90b      	bls.n	8006896 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	603b      	str	r3, [r7, #0]
}
 8006890:	bf00      	nop
 8006892:	bf00      	nop
 8006894:	e7fd      	b.n	8006892 <vPortValidateInterruptPriority+0x62>
	}
 8006896:	bf00      	nop
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	bc80      	pop	{r7}
 800689e:	4770      	bx	lr
 80068a0:	e000e3f0 	.word	0xe000e3f0
 80068a4:	20000b80 	.word	0x20000b80
 80068a8:	e000ed0c 	.word	0xe000ed0c
 80068ac:	20000b84 	.word	0x20000b84

080068b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08a      	sub	sp, #40	@ 0x28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068b8:	2300      	movs	r3, #0
 80068ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80068bc:	f7fe fd74 	bl	80053a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80068c0:	4b5a      	ldr	r3, [pc, #360]	@ (8006a2c <pvPortMalloc+0x17c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80068c8:	f000 f916 	bl	8006af8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068cc:	4b58      	ldr	r3, [pc, #352]	@ (8006a30 <pvPortMalloc+0x180>)
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4013      	ands	r3, r2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f040 8090 	bne.w	80069fa <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01e      	beq.n	800691e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80068e0:	2208      	movs	r2, #8
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4413      	add	r3, r2
 80068e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d015      	beq.n	800691e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f023 0307 	bic.w	r3, r3, #7
 80068f8:	3308      	adds	r3, #8
 80068fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f003 0307 	and.w	r3, r3, #7
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00b      	beq.n	800691e <pvPortMalloc+0x6e>
	__asm volatile
 8006906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	617b      	str	r3, [r7, #20]
}
 8006918:	bf00      	nop
 800691a:	bf00      	nop
 800691c:	e7fd      	b.n	800691a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d06a      	beq.n	80069fa <pvPortMalloc+0x14a>
 8006924:	4b43      	ldr	r3, [pc, #268]	@ (8006a34 <pvPortMalloc+0x184>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	429a      	cmp	r2, r3
 800692c:	d865      	bhi.n	80069fa <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800692e:	4b42      	ldr	r3, [pc, #264]	@ (8006a38 <pvPortMalloc+0x188>)
 8006930:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006932:	4b41      	ldr	r3, [pc, #260]	@ (8006a38 <pvPortMalloc+0x188>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006938:	e004      	b.n	8006944 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	429a      	cmp	r2, r3
 800694c:	d903      	bls.n	8006956 <pvPortMalloc+0xa6>
 800694e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1f1      	bne.n	800693a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006956:	4b35      	ldr	r3, [pc, #212]	@ (8006a2c <pvPortMalloc+0x17c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800695c:	429a      	cmp	r2, r3
 800695e:	d04c      	beq.n	80069fa <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2208      	movs	r2, #8
 8006966:	4413      	add	r3, r2
 8006968:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	1ad2      	subs	r2, r2, r3
 800697a:	2308      	movs	r3, #8
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	429a      	cmp	r2, r3
 8006980:	d920      	bls.n	80069c4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4413      	add	r3, r2
 8006988:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00b      	beq.n	80069ac <pvPortMalloc+0xfc>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	613b      	str	r3, [r7, #16]
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	e7fd      	b.n	80069a8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	1ad2      	subs	r2, r2, r3
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069be:	69b8      	ldr	r0, [r7, #24]
 80069c0:	f000 f8fc 	bl	8006bbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006a34 <pvPortMalloc+0x184>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	4a19      	ldr	r2, [pc, #100]	@ (8006a34 <pvPortMalloc+0x184>)
 80069d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069d2:	4b18      	ldr	r3, [pc, #96]	@ (8006a34 <pvPortMalloc+0x184>)
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	4b19      	ldr	r3, [pc, #100]	@ (8006a3c <pvPortMalloc+0x18c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d203      	bcs.n	80069e6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069de:	4b15      	ldr	r3, [pc, #84]	@ (8006a34 <pvPortMalloc+0x184>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a16      	ldr	r2, [pc, #88]	@ (8006a3c <pvPortMalloc+0x18c>)
 80069e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	4b11      	ldr	r3, [pc, #68]	@ (8006a30 <pvPortMalloc+0x180>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	431a      	orrs	r2, r3
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80069f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80069fa:	f7fe fce3 	bl	80053c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	f003 0307 	and.w	r3, r3, #7
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00b      	beq.n	8006a20 <pvPortMalloc+0x170>
	__asm volatile
 8006a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	60fb      	str	r3, [r7, #12]
}
 8006a1a:	bf00      	nop
 8006a1c:	bf00      	nop
 8006a1e:	e7fd      	b.n	8006a1c <pvPortMalloc+0x16c>
	return pvReturn;
 8006a20:	69fb      	ldr	r3, [r7, #28]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3728      	adds	r7, #40	@ 0x28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20001790 	.word	0x20001790
 8006a30:	2000179c 	.word	0x2000179c
 8006a34:	20001794 	.word	0x20001794
 8006a38:	20001788 	.word	0x20001788
 8006a3c:	20001798 	.word	0x20001798

08006a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d04a      	beq.n	8006ae8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a52:	2308      	movs	r3, #8
 8006a54:	425b      	negs	r3, r3
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	4413      	add	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	4b22      	ldr	r3, [pc, #136]	@ (8006af0 <vPortFree+0xb0>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10b      	bne.n	8006a86 <vPortFree+0x46>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	60fb      	str	r3, [r7, #12]
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	e7fd      	b.n	8006a82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00b      	beq.n	8006aa6 <vPortFree+0x66>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	60bb      	str	r3, [r7, #8]
}
 8006aa0:	bf00      	nop
 8006aa2:	bf00      	nop
 8006aa4:	e7fd      	b.n	8006aa2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	4b11      	ldr	r3, [pc, #68]	@ (8006af0 <vPortFree+0xb0>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4013      	ands	r3, r2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d019      	beq.n	8006ae8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d115      	bne.n	8006ae8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8006af0 <vPortFree+0xb0>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	43db      	mvns	r3, r3
 8006ac6:	401a      	ands	r2, r3
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006acc:	f7fe fc6c 	bl	80053a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	4b07      	ldr	r3, [pc, #28]	@ (8006af4 <vPortFree+0xb4>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4413      	add	r3, r2
 8006ada:	4a06      	ldr	r2, [pc, #24]	@ (8006af4 <vPortFree+0xb4>)
 8006adc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ade:	6938      	ldr	r0, [r7, #16]
 8006ae0:	f000 f86c 	bl	8006bbc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ae4:	f7fe fc6e 	bl	80053c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ae8:	bf00      	nop
 8006aea:	3718      	adds	r7, #24
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	2000179c 	.word	0x2000179c
 8006af4:	20001794 	.word	0x20001794

08006af8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006afe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006b02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b04:	4b27      	ldr	r3, [pc, #156]	@ (8006ba4 <prvHeapInit+0xac>)
 8006b06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00c      	beq.n	8006b2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	3307      	adds	r3, #7
 8006b16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0307 	bic.w	r3, r3, #7
 8006b1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	4a1f      	ldr	r2, [pc, #124]	@ (8006ba4 <prvHeapInit+0xac>)
 8006b28:	4413      	add	r3, r2
 8006b2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b30:	4a1d      	ldr	r2, [pc, #116]	@ (8006ba8 <prvHeapInit+0xb0>)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b36:	4b1c      	ldr	r3, [pc, #112]	@ (8006ba8 <prvHeapInit+0xb0>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	4413      	add	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b44:	2208      	movs	r2, #8
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	1a9b      	subs	r3, r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0307 	bic.w	r3, r3, #7
 8006b52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4a15      	ldr	r2, [pc, #84]	@ (8006bac <prvHeapInit+0xb4>)
 8006b58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b5a:	4b14      	ldr	r3, [pc, #80]	@ (8006bac <prvHeapInit+0xb4>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b62:	4b12      	ldr	r3, [pc, #72]	@ (8006bac <prvHeapInit+0xb4>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	1ad2      	subs	r2, r2, r3
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b78:	4b0c      	ldr	r3, [pc, #48]	@ (8006bac <prvHeapInit+0xb4>)
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	4a0a      	ldr	r2, [pc, #40]	@ (8006bb0 <prvHeapInit+0xb8>)
 8006b86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	4a09      	ldr	r2, [pc, #36]	@ (8006bb4 <prvHeapInit+0xbc>)
 8006b8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b90:	4b09      	ldr	r3, [pc, #36]	@ (8006bb8 <prvHeapInit+0xc0>)
 8006b92:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006b96:	601a      	str	r2, [r3, #0]
}
 8006b98:	bf00      	nop
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	20000b88 	.word	0x20000b88
 8006ba8:	20001788 	.word	0x20001788
 8006bac:	20001790 	.word	0x20001790
 8006bb0:	20001798 	.word	0x20001798
 8006bb4:	20001794 	.word	0x20001794
 8006bb8:	2000179c 	.word	0x2000179c

08006bbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006bc4:	4b27      	ldr	r3, [pc, #156]	@ (8006c64 <prvInsertBlockIntoFreeList+0xa8>)
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	e002      	b.n	8006bd0 <prvInsertBlockIntoFreeList+0x14>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d8f7      	bhi.n	8006bca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	4413      	add	r3, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d108      	bne.n	8006bfe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	441a      	add	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	441a      	add	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d118      	bne.n	8006c44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	4b14      	ldr	r3, [pc, #80]	@ (8006c68 <prvInsertBlockIntoFreeList+0xac>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d00d      	beq.n	8006c3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	441a      	add	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	e008      	b.n	8006c4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c68 <prvInsertBlockIntoFreeList+0xac>)
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	e003      	b.n	8006c4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d002      	beq.n	8006c5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c5a:	bf00      	nop
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bc80      	pop	{r7}
 8006c62:	4770      	bx	lr
 8006c64:	20001788 	.word	0x20001788
 8006c68:	20001790 	.word	0x20001790

08006c6c <memset>:
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	4402      	add	r2, r0
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d100      	bne.n	8006c76 <memset+0xa>
 8006c74:	4770      	bx	lr
 8006c76:	f803 1b01 	strb.w	r1, [r3], #1
 8006c7a:	e7f9      	b.n	8006c70 <memset+0x4>

08006c7c <__libc_init_array>:
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	2600      	movs	r6, #0
 8006c80:	4d0c      	ldr	r5, [pc, #48]	@ (8006cb4 <__libc_init_array+0x38>)
 8006c82:	4c0d      	ldr	r4, [pc, #52]	@ (8006cb8 <__libc_init_array+0x3c>)
 8006c84:	1b64      	subs	r4, r4, r5
 8006c86:	10a4      	asrs	r4, r4, #2
 8006c88:	42a6      	cmp	r6, r4
 8006c8a:	d109      	bne.n	8006ca0 <__libc_init_array+0x24>
 8006c8c:	f000 f828 	bl	8006ce0 <_init>
 8006c90:	2600      	movs	r6, #0
 8006c92:	4d0a      	ldr	r5, [pc, #40]	@ (8006cbc <__libc_init_array+0x40>)
 8006c94:	4c0a      	ldr	r4, [pc, #40]	@ (8006cc0 <__libc_init_array+0x44>)
 8006c96:	1b64      	subs	r4, r4, r5
 8006c98:	10a4      	asrs	r4, r4, #2
 8006c9a:	42a6      	cmp	r6, r4
 8006c9c:	d105      	bne.n	8006caa <__libc_init_array+0x2e>
 8006c9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca4:	4798      	blx	r3
 8006ca6:	3601      	adds	r6, #1
 8006ca8:	e7ee      	b.n	8006c88 <__libc_init_array+0xc>
 8006caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cae:	4798      	blx	r3
 8006cb0:	3601      	adds	r6, #1
 8006cb2:	e7f2      	b.n	8006c9a <__libc_init_array+0x1e>
 8006cb4:	08006dac 	.word	0x08006dac
 8006cb8:	08006dac 	.word	0x08006dac
 8006cbc:	08006dac 	.word	0x08006dac
 8006cc0:	08006db0 	.word	0x08006db0

08006cc4 <memcpy>:
 8006cc4:	440a      	add	r2, r1
 8006cc6:	4291      	cmp	r1, r2
 8006cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ccc:	d100      	bne.n	8006cd0 <memcpy+0xc>
 8006cce:	4770      	bx	lr
 8006cd0:	b510      	push	{r4, lr}
 8006cd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cd6:	4291      	cmp	r1, r2
 8006cd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cdc:	d1f9      	bne.n	8006cd2 <memcpy+0xe>
 8006cde:	bd10      	pop	{r4, pc}

08006ce0 <_init>:
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	bf00      	nop
 8006ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce6:	bc08      	pop	{r3}
 8006ce8:	469e      	mov	lr, r3
 8006cea:	4770      	bx	lr

08006cec <_fini>:
 8006cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cee:	bf00      	nop
 8006cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cf2:	bc08      	pop	{r3}
 8006cf4:	469e      	mov	lr, r3
 8006cf6:	4770      	bx	lr
