
0_main_prj_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006998  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006aa8  08006aa8  00007aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b58  08006b58  00008014  2**0
                  CONTENTS
  4 .ARM          00000008  08006b58  08006b58  00007b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b60  08006b60  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b60  08006b60  00007b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b64  08006b64  00007b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006b68  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011fc  20000014  08006b7c  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001210  08006b7c  00008210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b06  00000000  00000000  0000803d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003645  00000000  00000000  0001fb43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  00023188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001233  00000000  00000000  000248b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a29d  00000000  00000000  00025ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c102  00000000  00000000  0003fd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000975fa  00000000  00000000  0005be82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f347c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006214  00000000  00000000  000f34c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a4  00000000  00000000  000f96d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a90 	.word	0x08006a90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08006a90 	.word	0x08006a90

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <CLCD_Delay>:
//************************** Low Level Function ****************************************************************//
uint8_t currentline;
uint8_t Xcursor,Ycursor,countWriteChar,CurrentWriteChar;
CLCD_I2C_Name LCD1;
static void CLCD_Delay(uint16_t Time)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	4618      	mov	r0, r3
 800016e:	f000 ffff 	bl	8001170 <HAL_Delay>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}

0800017a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b086      	sub	sp, #24
 800017e:	af02      	add	r7, sp, #8
 8000180:	6078      	str	r0, [r7, #4]
 8000182:	460b      	mov	r3, r1
 8000184:	70fb      	strb	r3, [r7, #3]
 8000186:	4613      	mov	r3, r2
 8000188:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800018a:	78fb      	ldrb	r3, [r7, #3]
 800018c:	f023 030f 	bic.w	r3, r3, #15
 8000190:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000192:	78fb      	ldrb	r3, [r7, #3]
 8000194:	011b      	lsls	r3, r3, #4
 8000196:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	7adb      	ldrb	r3, [r3, #11]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d007      	beq.n	80001b0 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	f043 0308 	orr.w	r3, r3, #8
 80001a6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 80001a8:	7bbb      	ldrb	r3, [r7, #14]
 80001aa:	f043 0308 	orr.w	r3, r3, #8
 80001ae:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80001b0:	78bb      	ldrb	r3, [r7, #2]
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	d108      	bne.n	80001c8 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
 80001b8:	f043 0301 	orr.w	r3, r3, #1
 80001bc:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	73bb      	strb	r3, [r7, #14]
 80001c6:	e00a      	b.n	80001de <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001c8:	78bb      	ldrb	r3, [r7, #2]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d107      	bne.n	80001de <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f023 0301 	bic.w	r3, r3, #1
 80001d4:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001d6:	7bbb      	ldrb	r3, [r7, #14]
 80001d8:	f023 0301 	bic.w	r3, r3, #1
 80001dc:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffb9 	bl	8000160 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001f2:	7bbb      	ldrb	r3, [r7, #14]
 80001f4:	f043 0304 	orr.w	r3, r3, #4
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f7ff ffaf 	bl	8000160 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6818      	ldr	r0, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	791b      	ldrb	r3, [r3, #4]
 800020e:	4619      	mov	r1, r3
 8000210:	f107 0208 	add.w	r2, r7, #8
 8000214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2304      	movs	r3, #4
 800021c:	f001 fc60 	bl	8001ae0 <HAL_I2C_Master_Transmit>

}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <CLCD_I2C_Init>:
//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	4611      	mov	r1, r2
 8000234:	461a      	mov	r2, r3
 8000236:	460b      	mov	r3, r1
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	4613      	mov	r3, r2
 800023c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	79fa      	ldrb	r2, [r7, #7]
 8000248:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	7e3a      	ldrb	r2, [r7, #24]
 8000254:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2228      	movs	r2, #40	@ 0x28
 800025a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2206      	movs	r2, #6
 8000260:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	220c      	movs	r2, #12
 8000266:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	2214      	movs	r2, #20
 800026c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2208      	movs	r2, #8
 8000272:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000274:	2032      	movs	r0, #50	@ 0x32
 8000276:	f7ff ff73 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800027a:	2200      	movs	r2, #0
 800027c:	2133      	movs	r1, #51	@ 0x33
 800027e:	68f8      	ldr	r0, [r7, #12]
 8000280:	f7ff ff7b 	bl	800017a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000284:	2200      	movs	r2, #0
 8000286:	2133      	movs	r1, #51	@ 0x33
 8000288:	68f8      	ldr	r0, [r7, #12]
 800028a:	f7ff ff76 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028e:	2005      	movs	r0, #5
 8000290:	f7ff ff66 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000294:	2200      	movs	r2, #0
 8000296:	2132      	movs	r1, #50	@ 0x32
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f7ff ff6e 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029e:	2005      	movs	r0, #5
 80002a0:	f7ff ff5e 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2120      	movs	r1, #32
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff66 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80002ae:	2005      	movs	r0, #5
 80002b0:	f7ff ff56 	bl	8000160 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	79db      	ldrb	r3, [r3, #7]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f7ff ff5c 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	7a1b      	ldrb	r3, [r3, #8]
 80002c6:	2200      	movs	r2, #0
 80002c8:	4619      	mov	r1, r3
 80002ca:	68f8      	ldr	r0, [r7, #12]
 80002cc:	f7ff ff55 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	7a5b      	ldrb	r3, [r3, #9]
 80002d4:	2200      	movs	r2, #0
 80002d6:	4619      	mov	r1, r3
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	f7ff ff4e 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	7a9b      	ldrb	r3, [r3, #10]
 80002e2:	2200      	movs	r2, #0
 80002e4:	4619      	mov	r1, r3
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff47 	bl	800017a <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2101      	movs	r1, #1
 80002f0:	68f8      	ldr	r0, [r7, #12]
 80002f2:	f7ff ff42 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2102      	movs	r1, #2
 80002fa:	68f8      	ldr	r0, [r7, #12]
 80002fc:	f7ff ff3d 	bl	800017a <CLCD_WriteI2C>
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	4a06      	ldr	r2, [pc, #24]	@ (8000330 <vApplicationGetIdleTaskMemory+0x28>)
 8000318:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	4a05      	ldr	r2, [pc, #20]	@ (8000334 <vApplicationGetIdleTaskMemory+0x2c>)
 800031e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2280      	movs	r2, #128	@ 0x80
 8000324:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000326:	bf00      	nop
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	20000030 	.word	0x20000030
 8000334:	20000084 	.word	0x20000084

08000338 <Init_Sys>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void Init_Sys (void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L_ERR_GPIO_Port, L_ERR_Pin, GPIO_PIN_SET);
 800033c:	2201      	movs	r2, #1
 800033e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000342:	480b      	ldr	r0, [pc, #44]	@ (8000370 <Init_Sys+0x38>)
 8000344:	f001 fa4e 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_USR_GPIO_Port, L_USR_Pin, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800034e:	4808      	ldr	r0, [pc, #32]	@ (8000370 <Init_Sys+0x38>)
 8000350:	f001 fa48 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_DBG_GPIO_Port, L_DBG_Pin, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800035a:	4806      	ldr	r0, [pc, #24]	@ (8000374 <Init_Sys+0x3c>)
 800035c:	f001 fa42 	bl	80017e4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_CTR_GPIO_Port, LCD_CTR_Pin, GPIO_PIN_SET);
 8000360:	2201      	movs	r2, #1
 8000362:	2180      	movs	r1, #128	@ 0x80
 8000364:	4804      	ldr	r0, [pc, #16]	@ (8000378 <Init_Sys+0x40>)
 8000366:	f001 fa3d 	bl	80017e4 <HAL_GPIO_WritePin>
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40010800 	.word	0x40010800
 8000374:	40011000 	.word	0x40011000
 8000378:	40010c00 	.word	0x40010c00

0800037c <HAL_UART_RxCpltCallback>:
uint8_t rxData = 0;;
uint8_t rxArray[20] = {};
uint8_t rxCounter = 1;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	if(&huart1 == huart)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a3e      	ldr	r2, [pc, #248]	@ (8000480 <HAL_UART_RxCpltCallback+0x104>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d138      	bne.n	80003fe <HAL_UART_RxCpltCallback+0x82>
	{

		if(rxData == '\r')
 800038c:	4b3d      	ldr	r3, [pc, #244]	@ (8000484 <HAL_UART_RxCpltCallback+0x108>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b0d      	cmp	r3, #13
 8000392:	d11a      	bne.n	80003ca <HAL_UART_RxCpltCallback+0x4e>
		{
			HAL_UART_Transmit(&huart1, rxArray, strlen((const char *)rxArray), 100);
 8000394:	483c      	ldr	r0, [pc, #240]	@ (8000488 <HAL_UART_RxCpltCallback+0x10c>)
 8000396:	f7ff fedb 	bl	8000150 <strlen>
 800039a:	4603      	mov	r3, r0
 800039c:	b29a      	uxth	r2, r3
 800039e:	2364      	movs	r3, #100	@ 0x64
 80003a0:	4939      	ldr	r1, [pc, #228]	@ (8000488 <HAL_UART_RxCpltCallback+0x10c>)
 80003a2:	4837      	ldr	r0, [pc, #220]	@ (8000480 <HAL_UART_RxCpltCallback+0x104>)
 80003a4:	f003 f8a8 	bl	80034f8 <HAL_UART_Transmit>
			for(uint8_t i = 0; i < 20; i++)
 80003a8:	2300      	movs	r3, #0
 80003aa:	73fb      	strb	r3, [r7, #15]
 80003ac:	e009      	b.n	80003c2 <HAL_UART_RxCpltCallback+0x46>
			{
				rxArray[i] = 0;
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
 80003b0:	4a35      	ldr	r2, [pc, #212]	@ (8000488 <HAL_UART_RxCpltCallback+0x10c>)
 80003b2:	2100      	movs	r1, #0
 80003b4:	54d1      	strb	r1, [r2, r3]
				rxCounter = 0;
 80003b6:	4b35      	ldr	r3, [pc, #212]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 20; i++)
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	3301      	adds	r3, #1
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	2b13      	cmp	r3, #19
 80003c6:	d9f2      	bls.n	80003ae <HAL_UART_RxCpltCallback+0x32>
 80003c8:	e00c      	b.n	80003e4 <HAL_UART_RxCpltCallback+0x68>
			}
		}
		else
		{
			rxArray[rxCounter] = rxData;
 80003ca:	4b30      	ldr	r3, [pc, #192]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	461a      	mov	r2, r3
 80003d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000484 <HAL_UART_RxCpltCallback+0x108>)
 80003d2:	7819      	ldrb	r1, [r3, #0]
 80003d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000488 <HAL_UART_RxCpltCallback+0x10c>)
 80003d6:	5499      	strb	r1, [r3, r2]
			rxCounter++;
 80003d8:	4b2c      	ldr	r3, [pc, #176]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	3301      	adds	r3, #1
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4b2a      	ldr	r3, [pc, #168]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 80003e2:	701a      	strb	r2, [r3, #0]
		}
		if(rxCounter >= 20)
 80003e4:	4b29      	ldr	r3, [pc, #164]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b13      	cmp	r3, #19
 80003ea:	d902      	bls.n	80003f2 <HAL_UART_RxCpltCallback+0x76>
		{
			rxCounter = 0;
 80003ec:	4b27      	ldr	r3, [pc, #156]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80003f2:	2201      	movs	r2, #1
 80003f4:	4923      	ldr	r1, [pc, #140]	@ (8000484 <HAL_UART_RxCpltCallback+0x108>)
 80003f6:	4822      	ldr	r0, [pc, #136]	@ (8000480 <HAL_UART_RxCpltCallback+0x104>)
 80003f8:	f003 f901 	bl	80035fe <HAL_UART_Receive_IT>
			rxCounter = 0;
		}
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
	}

}
 80003fc:	e03b      	b.n	8000476 <HAL_UART_RxCpltCallback+0xfa>
	else if(&huart2 == huart)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a23      	ldr	r2, [pc, #140]	@ (8000490 <HAL_UART_RxCpltCallback+0x114>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d137      	bne.n	8000476 <HAL_UART_RxCpltCallback+0xfa>
		if(rxData == '\r')
 8000406:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <HAL_UART_RxCpltCallback+0x108>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b0d      	cmp	r3, #13
 800040c:	d11a      	bne.n	8000444 <HAL_UART_RxCpltCallback+0xc8>
			HAL_UART_Transmit(&huart2, rxArray, strlen((const char *)rxArray), 100);
 800040e:	481e      	ldr	r0, [pc, #120]	@ (8000488 <HAL_UART_RxCpltCallback+0x10c>)
 8000410:	f7ff fe9e 	bl	8000150 <strlen>
 8000414:	4603      	mov	r3, r0
 8000416:	b29a      	uxth	r2, r3
 8000418:	2364      	movs	r3, #100	@ 0x64
 800041a:	491b      	ldr	r1, [pc, #108]	@ (8000488 <HAL_UART_RxCpltCallback+0x10c>)
 800041c:	481c      	ldr	r0, [pc, #112]	@ (8000490 <HAL_UART_RxCpltCallback+0x114>)
 800041e:	f003 f86b 	bl	80034f8 <HAL_UART_Transmit>
			for(uint8_t i = 0; i < 20; i++)
 8000422:	2300      	movs	r3, #0
 8000424:	73bb      	strb	r3, [r7, #14]
 8000426:	e009      	b.n	800043c <HAL_UART_RxCpltCallback+0xc0>
				rxArray[i] = 0;
 8000428:	7bbb      	ldrb	r3, [r7, #14]
 800042a:	4a17      	ldr	r2, [pc, #92]	@ (8000488 <HAL_UART_RxCpltCallback+0x10c>)
 800042c:	2100      	movs	r1, #0
 800042e:	54d1      	strb	r1, [r2, r3]
				rxCounter = 0;
 8000430:	4b16      	ldr	r3, [pc, #88]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 20; i++)
 8000436:	7bbb      	ldrb	r3, [r7, #14]
 8000438:	3301      	adds	r3, #1
 800043a:	73bb      	strb	r3, [r7, #14]
 800043c:	7bbb      	ldrb	r3, [r7, #14]
 800043e:	2b13      	cmp	r3, #19
 8000440:	d9f2      	bls.n	8000428 <HAL_UART_RxCpltCallback+0xac>
 8000442:	e00c      	b.n	800045e <HAL_UART_RxCpltCallback+0xe2>
			rxArray[rxCounter] = rxData;
 8000444:	4b11      	ldr	r3, [pc, #68]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	461a      	mov	r2, r3
 800044a:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <HAL_UART_RxCpltCallback+0x108>)
 800044c:	7819      	ldrb	r1, [r3, #0]
 800044e:	4b0e      	ldr	r3, [pc, #56]	@ (8000488 <HAL_UART_RxCpltCallback+0x10c>)
 8000450:	5499      	strb	r1, [r3, r2]
			rxCounter++;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	b2da      	uxtb	r2, r3
 800045a:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 800045c:	701a      	strb	r2, [r3, #0]
		if(rxCounter >= 20)
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b13      	cmp	r3, #19
 8000464:	d902      	bls.n	800046c <HAL_UART_RxCpltCallback+0xf0>
			rxCounter = 0;
 8000466:	4b09      	ldr	r3, [pc, #36]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 800046c:	2201      	movs	r2, #1
 800046e:	4905      	ldr	r1, [pc, #20]	@ (8000484 <HAL_UART_RxCpltCallback+0x108>)
 8000470:	4807      	ldr	r0, [pc, #28]	@ (8000490 <HAL_UART_RxCpltCallback+0x114>)
 8000472:	f003 f8c4 	bl	80035fe <HAL_UART_Receive_IT>
}
 8000476:	bf00      	nop
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200003c0 	.word	0x200003c0
 8000484:	20000460 	.word	0x20000460
 8000488:	20000464 	.word	0x20000464
 800048c:	20000000 	.word	0x20000000
 8000490:	20000408 	.word	0x20000408

08000494 <Task_action>:

void Task_action(char* sms)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, sms, strlen(sms), 100);
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f7ff fe57 	bl	8000150 <strlen>
 80004a2:	4603      	mov	r3, r0
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	2364      	movs	r3, #100	@ 0x64
 80004a8:	6879      	ldr	r1, [r7, #4]
 80004aa:	4806      	ldr	r0, [pc, #24]	@ (80004c4 <Task_action+0x30>)
 80004ac:	f003 f824 	bl	80034f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "\n", 1, 100);
 80004b0:	2364      	movs	r3, #100	@ 0x64
 80004b2:	2201      	movs	r2, #1
 80004b4:	4904      	ldr	r1, [pc, #16]	@ (80004c8 <Task_action+0x34>)
 80004b6:	4803      	ldr	r0, [pc, #12]	@ (80004c4 <Task_action+0x30>)
 80004b8:	f003 f81e 	bl	80034f8 <HAL_UART_Transmit>
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	200003c0 	.word	0x200003c0
 80004c8:	08006aa8 	.word	0x08006aa8

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b5b0      	push	{r4, r5, r7, lr}
 80004ce:	b09c      	sub	sp, #112	@ 0x70
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fe1b 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f887 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 fa27 	bl	800092c <MX_GPIO_Init>
  MX_SPI1_Init();
 80004de:	f000 f8f7 	bl	80006d0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80004e2:	f000 f97b 	bl	80007dc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004e6:	f000 f9cd 	bl	8000884 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80004ea:	f000 f927 	bl	800073c <MX_TIM1_Init>
  MX_I2C1_Init();
 80004ee:	f000 f8c1 	bl	8000674 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 f9f1 	bl	80008d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Init_Sys();
 80004f6:	f7ff ff1f 	bl	8000338 <Init_Sys>

  HAL_GPIO_WritePin(LCD_CTR_GPIO_Port, LCD_CTR_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2180      	movs	r1, #128	@ 0x80
 80004fe:	482e      	ldr	r0, [pc, #184]	@ (80005b8 <main+0xec>)
 8000500:	f001 f970 	bl	80017e4 <HAL_GPIO_WritePin>

  CLCD_I2C_Init(&LCD1,&hi2c1,ADDR_PCF8574,20,4);
 8000504:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8000508:	2304      	movs	r3, #4
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2314      	movs	r3, #20
 800050e:	227e      	movs	r2, #126	@ 0x7e
 8000510:	492a      	ldr	r1, [pc, #168]	@ (80005bc <main+0xf0>)
 8000512:	f7ff fe89 	bl	8000228 <CLCD_I2C_Init>
//  LCD_I2C_Init();

#if (TEST_UART)
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8000516:	2201      	movs	r2, #1
 8000518:	4929      	ldr	r1, [pc, #164]	@ (80005c0 <main+0xf4>)
 800051a:	482a      	ldr	r0, [pc, #168]	@ (80005c4 <main+0xf8>)
 800051c:	f003 f86f 	bl	80035fe <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000520:	2201      	movs	r2, #1
 8000522:	4927      	ldr	r1, [pc, #156]	@ (80005c0 <main+0xf4>)
 8000524:	4828      	ldr	r0, [pc, #160]	@ (80005c8 <main+0xfc>)
 8000526:	f003 f86a 	bl	80035fe <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 800052a:	2300      	movs	r3, #0
 800052c:	657b      	str	r3, [r7, #84]	@ 0x54
 800052e:	2300      	movs	r3, #0
 8000530:	65bb      	str	r3, [r7, #88]	@ 0x58
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000532:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000536:	4618      	mov	r0, r3
 8000538:	f003 feaa 	bl	8004290 <osMutexCreate>
 800053c:	4603      	mov	r3, r0
 800053e:	4a23      	ldr	r2, [pc, #140]	@ (80005cc <main+0x100>)
 8000540:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask1_Hand, osPriorityNormal, 0, 128);
 8000542:	4b23      	ldr	r3, [pc, #140]	@ (80005d0 <main+0x104>)
 8000544:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000548:	461d      	mov	r5, r3
 800054a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000556:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f003 fe22 	bl	80041a6 <osThreadCreate>
 8000562:	4603      	mov	r3, r0
 8000564:	4a1b      	ldr	r2, [pc, #108]	@ (80005d4 <main+0x108>)
 8000566:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, StartTask2_Hand, osPriorityNormal, 0, 128);
 8000568:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <main+0x10c>)
 800056a:	f107 041c 	add.w	r4, r7, #28
 800056e:	461d      	mov	r5, r3
 8000570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000578:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 800057c:	f107 031c 	add.w	r3, r7, #28
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 fe0f 	bl	80041a6 <osThreadCreate>
 8000588:	4603      	mov	r3, r0
 800058a:	4a14      	ldr	r2, [pc, #80]	@ (80005dc <main+0x110>)
 800058c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task03 */
  osThreadDef(Task03, StartTask03, osPriorityNormal, 0, 128);
 800058e:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <main+0x114>)
 8000590:	463c      	mov	r4, r7
 8000592:	461d      	mov	r5, r3
 8000594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000598:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task03Handle = osThreadCreate(osThread(Task03), NULL);
 80005a0:	463b      	mov	r3, r7
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f003 fdfe 	bl	80041a6 <osThreadCreate>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a0d      	ldr	r2, [pc, #52]	@ (80005e4 <main+0x118>)
 80005ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b0:	f003 fdf2 	bl	8004198 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <main+0xe8>
 80005b8:	40010c00 	.word	0x40010c00
 80005bc:	20000284 	.word	0x20000284
 80005c0:	20000460 	.word	0x20000460
 80005c4:	200003c0 	.word	0x200003c0
 80005c8:	20000408 	.word	0x20000408
 80005cc:	2000045c 	.word	0x2000045c
 80005d0:	08006ab4 	.word	0x08006ab4
 80005d4:	20000450 	.word	0x20000450
 80005d8:	08006ad8 	.word	0x08006ad8
 80005dc:	20000454 	.word	0x20000454
 80005e0:	08006afc 	.word	0x08006afc
 80005e4:	20000458 	.word	0x20000458

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b090      	sub	sp, #64	@ 0x40
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0318 	add.w	r3, r7, #24
 80005f2:	2228      	movs	r2, #40	@ 0x28
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f006 fa10 	bl	8006a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060a:	2301      	movs	r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000612:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000620:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000624:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000626:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0318 	add.w	r3, r7, #24
 8000630:	4618      	mov	r0, r3
 8000632:	f001 fdad 	bl	8002190 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800063c:	f000 faa2 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2102      	movs	r1, #2
 800065a:	4618      	mov	r0, r3
 800065c:	f002 f81a 	bl	8002694 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000666:	f000 fa8d 	bl	8000b84 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3740      	adds	r7, #64	@ 0x40
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_I2C1_Init+0x50>)
 800067a:	4a13      	ldr	r2, [pc, #76]	@ (80006c8 <MX_I2C1_Init+0x54>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_I2C1_Init+0x50>)
 8000680:	4a12      	ldr	r2, [pc, #72]	@ (80006cc <MX_I2C1_Init+0x58>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_I2C1_Init+0x50>)
 8000692:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000696:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <MX_I2C1_Init+0x50>)
 80006b2:	f001 f8d1 	bl	8001858 <HAL_I2C_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006bc:	f000 fa62 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000284 	.word	0x20000284
 80006c8:	40005400 	.word	0x40005400
 80006cc:	000186a0 	.word	0x000186a0

080006d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d4:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006d6:	4a18      	ldr	r2, [pc, #96]	@ (8000738 <MX_SPI1_Init+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <MX_SPI1_Init+0x64>)
 80006fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000700:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <MX_SPI1_Init+0x64>)
 8000704:	2228      	movs	r2, #40	@ 0x28
 8000706:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000708:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_SPI1_Init+0x64>)
 800071c:	220a      	movs	r2, #10
 800071e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <MX_SPI1_Init+0x64>)
 8000722:	f002 f975 	bl	8002a10 <HAL_SPI_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800072c:	f000 fa2a 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200002d8 	.word	0x200002d8
 8000738:	40013000 	.word	0x40013000

0800073c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	463b      	mov	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000758:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <MX_TIM1_Init+0x98>)
 800075a:	4a1f      	ldr	r2, [pc, #124]	@ (80007d8 <MX_TIM1_Init+0x9c>)
 800075c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800075e:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <MX_TIM1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <MX_TIM1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800076a:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_TIM1_Init+0x98>)
 800076c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000770:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000772:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <MX_TIM1_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000778:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_TIM1_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <MX_TIM1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000784:	4813      	ldr	r0, [pc, #76]	@ (80007d4 <MX_TIM1_Init+0x98>)
 8000786:	f002 f9c7 	bl	8002b18 <HAL_TIM_Base_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000790:	f000 f9f8 	bl	8000b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000794:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000798:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	4619      	mov	r1, r3
 80007a0:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <MX_TIM1_Init+0x98>)
 80007a2:	f002 fc05 	bl	8002fb0 <HAL_TIM_ConfigClockSource>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80007ac:	f000 f9ea 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_TIM1_Init+0x98>)
 80007be:	f002 fddb 	bl	8003378 <HAL_TIMEx_MasterConfigSynchronization>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007c8:	f000 f9dc 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000330 	.word	0x20000330
 80007d8:	40012c00 	.word	0x40012c00

080007dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08c      	sub	sp, #48	@ 0x30
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2224      	movs	r2, #36	@ 0x24
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 f916 	bl	8006a1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f8:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_TIM2_Init+0xa4>)
 80007fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000800:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_TIM2_Init+0xa4>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_TIM2_Init+0xa4>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_TIM2_Init+0xa4>)
 800080e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000812:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_TIM2_Init+0xa4>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_TIM2_Init+0xa4>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000820:	2301      	movs	r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000828:	2301      	movs	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000838:	2301      	movs	r3, #1
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4619      	mov	r1, r3
 800084a:	480d      	ldr	r0, [pc, #52]	@ (8000880 <MX_TIM2_Init+0xa4>)
 800084c:	f002 fa06 	bl	8002c5c <HAL_TIM_Encoder_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000856:	f000 f995 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	@ (8000880 <MX_TIM2_Init+0xa4>)
 8000868:	f002 fd86 	bl	8003378 <HAL_TIMEx_MasterConfigSynchronization>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000872:	f000 f987 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3730      	adds	r7, #48	@ 0x30
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000378 	.word	0x20000378

08000884 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_USART1_UART_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	@ (80008d4 <MX_USART1_UART_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <MX_USART1_UART_Init+0x4c>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <MX_USART1_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <MX_USART1_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <MX_USART1_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_USART1_UART_Init+0x4c>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <MX_USART1_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_USART1_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <MX_USART1_UART_Init+0x4c>)
 80008bc:	f002 fdcc 	bl	8003458 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008c6:	f000 f95d 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200003c0 	.word	0x200003c0
 80008d4:	40013800 	.word	0x40013800

080008d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <MX_USART2_UART_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	@ (8000928 <MX_USART2_UART_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <MX_USART2_UART_Init+0x4c>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <MX_USART2_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <MX_USART2_UART_Init+0x4c>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_USART2_UART_Init+0x4c>)
 8000910:	f002 fda2 	bl	8003458 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800091a:	f000 f933 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000408 	.word	0x20000408
 8000928:	40004400 	.word	0x40004400

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000940:	4b54      	ldr	r3, [pc, #336]	@ (8000a94 <MX_GPIO_Init+0x168>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a53      	ldr	r2, [pc, #332]	@ (8000a94 <MX_GPIO_Init+0x168>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b51      	ldr	r3, [pc, #324]	@ (8000a94 <MX_GPIO_Init+0x168>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000958:	4b4e      	ldr	r3, [pc, #312]	@ (8000a94 <MX_GPIO_Init+0x168>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a4d      	ldr	r2, [pc, #308]	@ (8000a94 <MX_GPIO_Init+0x168>)
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b4b      	ldr	r3, [pc, #300]	@ (8000a94 <MX_GPIO_Init+0x168>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b48      	ldr	r3, [pc, #288]	@ (8000a94 <MX_GPIO_Init+0x168>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a47      	ldr	r2, [pc, #284]	@ (8000a94 <MX_GPIO_Init+0x168>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b45      	ldr	r3, [pc, #276]	@ (8000a94 <MX_GPIO_Init+0x168>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b42      	ldr	r3, [pc, #264]	@ (8000a94 <MX_GPIO_Init+0x168>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a41      	ldr	r2, [pc, #260]	@ (8000a94 <MX_GPIO_Init+0x168>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b3f      	ldr	r3, [pc, #252]	@ (8000a94 <MX_GPIO_Init+0x168>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_DBG_GPIO_Port, L_DBG_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a6:	483c      	ldr	r0, [pc, #240]	@ (8000a98 <MX_GPIO_Init+0x16c>)
 80009a8:	f000 ff1c 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LCD_CTR_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2181      	movs	r1, #129	@ 0x81
 80009b0:	483a      	ldr	r0, [pc, #232]	@ (8000a9c <MX_GPIO_Init+0x170>)
 80009b2:	f000 ff17 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_ERR_Pin|L_USR_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80009bc:	4838      	ldr	r0, [pc, #224]	@ (8000aa0 <MX_GPIO_Init+0x174>)
 80009be:	f000 ff11 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : L_DBG_Pin */
  GPIO_InitStruct.Pin = L_DBG_Pin;
 80009c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_DBG_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4619      	mov	r1, r3
 80009da:	482f      	ldr	r0, [pc, #188]	@ (8000a98 <MX_GPIO_Init+0x16c>)
 80009dc:	f000 fd7e 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80009e0:	2301      	movs	r3, #1
 80009e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	4829      	ldr	r0, [pc, #164]	@ (8000a9c <MX_GPIO_Init+0x170>)
 80009f8:	f000 fd70 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_IT12_Pin BTN2_IT13_Pin BTN3_IT14_Pin BTN4_IT15_Pin */
  GPIO_InitStruct.Pin = BTN1_IT12_Pin|BTN2_IT13_Pin|BTN3_IT14_Pin|BTN4_IT15_Pin;
 80009fc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a02:	4b28      	ldr	r3, [pc, #160]	@ (8000aa4 <MX_GPIO_Init+0x178>)
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4822      	ldr	r0, [pc, #136]	@ (8000a9c <MX_GPIO_Init+0x170>)
 8000a12:	f000 fd63 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN5_IT8_Pin */
  GPIO_InitStruct.Pin = BTN5_IT8_Pin;
 8000a16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1c:	4b21      	ldr	r3, [pc, #132]	@ (8000aa4 <MX_GPIO_Init+0x178>)
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN5_IT8_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	4619      	mov	r1, r3
 8000a2a:	481d      	ldr	r0, [pc, #116]	@ (8000aa0 <MX_GPIO_Init+0x174>)
 8000a2c:	f000 fd56 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : L_ERR_Pin L_USR_Pin */
  GPIO_InitStruct.Pin = L_ERR_Pin|L_USR_Pin;
 8000a30:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	4619      	mov	r1, r3
 8000a48:	4815      	ldr	r0, [pc, #84]	@ (8000aa0 <MX_GPIO_Init+0x174>)
 8000a4a:	f000 fd47 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CTR_Pin */
  GPIO_InitStruct.Pin = LCD_CTR_Pin;
 8000a4e:	2380      	movs	r3, #128	@ 0x80
 8000a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CTR_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	4619      	mov	r1, r3
 8000a64:	480d      	ldr	r0, [pc, #52]	@ (8000a9c <MX_GPIO_Init+0x170>)
 8000a66:	f000 fd39 	bl	80014dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2105      	movs	r1, #5
 8000a6e:	2017      	movs	r0, #23
 8000a70:	f000 fc57 	bl	8001322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a74:	2017      	movs	r0, #23
 8000a76:	f000 fc70 	bl	800135a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	2028      	movs	r0, #40	@ 0x28
 8000a80:	f000 fc4f 	bl	8001322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a84:	2028      	movs	r0, #40	@ 0x28
 8000a86:	f000 fc68 	bl	800135a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3720      	adds	r7, #32
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40011000 	.word	0x40011000
 8000a9c:	40010c00 	.word	0x40010c00
 8000aa0:	40010800 	.word	0x40010800
 8000aa4:	10210000 	.word	0x10210000

08000aa8 <StartTask1_Hand>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1_Hand */
void StartTask1_Hand(void const * argument)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t idx = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(myMutex01Handle, osWaitForever);
 8000ab4:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <StartTask1_Hand+0x50>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8000abc:	4618      	mov	r0, r3
 8000abe:	f003 fbff 	bl	80042c0 <osMutexWait>
	  Task_action("1");
 8000ac2:	480e      	ldr	r0, [pc, #56]	@ (8000afc <StartTask1_Hand+0x54>)
 8000ac4:	f7ff fce6 	bl	8000494 <Task_action>
	  if(3 == idx)
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d106      	bne.n	8000adc <StartTask1_Hand+0x34>
	  {
		  osThreadSetPriority(Task1Handle, osPriorityLow);
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <StartTask1_Hand+0x58>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f06f 0101 	mvn.w	r1, #1
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f003 fbb1 	bl	800423e <osThreadSetPriority>
	  }
	  idx++;
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	73fb      	strb	r3, [r7, #15]
	  osMutexRelease(myMutex01Handle);
 8000ae2:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <StartTask1_Hand+0x50>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 fc38 	bl	800435c <osMutexRelease>

	  HAL_Delay(500);
 8000aec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000af0:	f000 fb3e 	bl	8001170 <HAL_Delay>
	  osMutexWait(myMutex01Handle, osWaitForever);
 8000af4:	e7de      	b.n	8000ab4 <StartTask1_Hand+0xc>
 8000af6:	bf00      	nop
 8000af8:	2000045c 	.word	0x2000045c
 8000afc:	08006b18 	.word	0x08006b18
 8000b00:	20000450 	.word	0x20000450

08000b04 <StartTask2_Hand>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2_Hand */
void StartTask2_Hand(void const * argument)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2_Hand */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(2000);
 8000b0c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b10:	f003 fbaa 	bl	8004268 <osDelay>
	  osMutexWait(myMutex01Handle, 1000);
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <StartTask2_Hand+0x34>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f003 fbcf 	bl	80042c0 <osMutexWait>
	  Task_action("2");
 8000b22:	4806      	ldr	r0, [pc, #24]	@ (8000b3c <StartTask2_Hand+0x38>)
 8000b24:	f7ff fcb6 	bl	8000494 <Task_action>
	  osMutexRelease(myMutex01Handle);
 8000b28:	4b03      	ldr	r3, [pc, #12]	@ (8000b38 <StartTask2_Hand+0x34>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f003 fc15 	bl	800435c <osMutexRelease>
	  osDelay(2000);
 8000b32:	bf00      	nop
 8000b34:	e7ea      	b.n	8000b0c <StartTask2_Hand+0x8>
 8000b36:	bf00      	nop
 8000b38:	2000045c 	.word	0x2000045c
 8000b3c:	08006b1c 	.word	0x08006b1c

08000b40 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  Task_action("3");
 8000b48:	4804      	ldr	r0, [pc, #16]	@ (8000b5c <StartTask03+0x1c>)
 8000b4a:	f7ff fca3 	bl	8000494 <Task_action>
	  HAL_Delay(500);
 8000b4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b52:	f000 fb0d 	bl	8001170 <HAL_Delay>
	  Task_action("3");
 8000b56:	bf00      	nop
 8000b58:	e7f6      	b.n	8000b48 <StartTask03+0x8>
 8000b5a:	bf00      	nop
 8000b5c:	08006b20 	.word	0x08006b20

08000b60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	@ (8000b80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d101      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b72:	f000 fae1 	bl	8001138 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40000400 	.word	0x40000400

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <Error_Handler+0x8>

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b96:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <HAL_MspInit+0x68>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	4a17      	ldr	r2, [pc, #92]	@ (8000bf8 <HAL_MspInit+0x68>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6193      	str	r3, [r2, #24]
 8000ba2:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <HAL_MspInit+0x68>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <HAL_MspInit+0x68>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	4a11      	ldr	r2, [pc, #68]	@ (8000bf8 <HAL_MspInit+0x68>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb8:	61d3      	str	r3, [r2, #28]
 8000bba:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <HAL_MspInit+0x68>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	210f      	movs	r1, #15
 8000bca:	f06f 0001 	mvn.w	r0, #1
 8000bce:	f000 fba8 	bl	8001322 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <HAL_MspInit+0x6c>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <HAL_MspInit+0x6c>)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40010000 	.word	0x40010000

08000c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	@ 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8000c90 <HAL_I2C_MspInit+0x90>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d132      	bne.n	8000c86 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c20:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <HAL_I2C_MspInit+0x94>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a1b      	ldr	r2, [pc, #108]	@ (8000c94 <HAL_I2C_MspInit+0x94>)
 8000c26:	f043 0308 	orr.w	r3, r3, #8
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <HAL_I2C_MspInit+0x94>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0308 	and.w	r3, r3, #8
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c38:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c3e:	2312      	movs	r3, #18
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4812      	ldr	r0, [pc, #72]	@ (8000c98 <HAL_I2C_MspInit+0x98>)
 8000c4e:	f000 fc45 	bl	80014dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000c52:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <HAL_I2C_MspInit+0x9c>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c68:	4a0c      	ldr	r2, [pc, #48]	@ (8000c9c <HAL_I2C_MspInit+0x9c>)
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <HAL_I2C_MspInit+0x94>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	4a08      	ldr	r2, [pc, #32]	@ (8000c94 <HAL_I2C_MspInit+0x94>)
 8000c74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c78:	61d3      	str	r3, [r2, #28]
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_I2C_MspInit+0x94>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	@ 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40005400 	.word	0x40005400
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010c00 	.word	0x40010c00
 8000c9c:	40010000 	.word	0x40010000

08000ca0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1b      	ldr	r2, [pc, #108]	@ (8000d28 <HAL_SPI_MspInit+0x88>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d12f      	bne.n	8000d20 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <HAL_SPI_MspInit+0x8c>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a19      	ldr	r2, [pc, #100]	@ (8000d2c <HAL_SPI_MspInit+0x8c>)
 8000cc6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <HAL_SPI_MspInit+0x8c>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <HAL_SPI_MspInit+0x8c>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a13      	ldr	r2, [pc, #76]	@ (8000d2c <HAL_SPI_MspInit+0x8c>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <HAL_SPI_MspInit+0x8c>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000cf0:	23a0      	movs	r3, #160	@ 0xa0
 8000cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	480b      	ldr	r0, [pc, #44]	@ (8000d30 <HAL_SPI_MspInit+0x90>)
 8000d04:	f000 fbea 	bl	80014dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d08:	2340      	movs	r3, #64	@ 0x40
 8000d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <HAL_SPI_MspInit+0x90>)
 8000d1c:	f000 fbde 	bl	80014dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40013000 	.word	0x40013000
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010800 	.word	0x40010800

08000d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a09      	ldr	r2, [pc, #36]	@ (8000d68 <HAL_TIM_Base_MspInit+0x34>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d10b      	bne.n	8000d5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <HAL_TIM_Base_MspInit+0x38>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4a08      	ldr	r2, [pc, #32]	@ (8000d6c <HAL_TIM_Base_MspInit+0x38>)
 8000d4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d50:	6193      	str	r3, [r2, #24]
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_TIM_Base_MspInit+0x38>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	40012c00 	.word	0x40012c00
 8000d6c:	40021000 	.word	0x40021000

08000d70 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d8e:	d123      	bne.n	8000dd8 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d92:	69db      	ldr	r3, [r3, #28]
 8000d94:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	61d3      	str	r3, [r2, #28]
 8000d9c:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <HAL_TIM_Encoder_MspInit+0x70>)
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <HAL_TIM_Encoder_MspInit+0x70>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a0c      	ldr	r2, [pc, #48]	@ (8000de0 <HAL_TIM_Encoder_MspInit+0x70>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <HAL_TIM_Encoder_MspInit+0x70>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCB_T2C1_Pin|ENCA_T2C2_Pin;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4804      	ldr	r0, [pc, #16]	@ (8000de4 <HAL_TIM_Encoder_MspInit+0x74>)
 8000dd4:	f000 fb82 	bl	80014dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010800 	.word	0x40010800

08000de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	@ 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0318 	add.w	r3, r7, #24
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a3f      	ldr	r2, [pc, #252]	@ (8000f00 <HAL_UART_MspInit+0x118>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d13a      	bne.n	8000e7e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e08:	4b3e      	ldr	r3, [pc, #248]	@ (8000f04 <HAL_UART_MspInit+0x11c>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f04 <HAL_UART_MspInit+0x11c>)
 8000e0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b3b      	ldr	r3, [pc, #236]	@ (8000f04 <HAL_UART_MspInit+0x11c>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	4b38      	ldr	r3, [pc, #224]	@ (8000f04 <HAL_UART_MspInit+0x11c>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a37      	ldr	r2, [pc, #220]	@ (8000f04 <HAL_UART_MspInit+0x11c>)
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b35      	ldr	r3, [pc, #212]	@ (8000f04 <HAL_UART_MspInit+0x11c>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0318 	add.w	r3, r7, #24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	482e      	ldr	r0, [pc, #184]	@ (8000f08 <HAL_UART_MspInit+0x120>)
 8000e4e:	f000 fb45 	bl	80014dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4828      	ldr	r0, [pc, #160]	@ (8000f08 <HAL_UART_MspInit+0x120>)
 8000e68:	f000 fb38 	bl	80014dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2105      	movs	r1, #5
 8000e70:	2025      	movs	r0, #37	@ 0x25
 8000e72:	f000 fa56 	bl	8001322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e76:	2025      	movs	r0, #37	@ 0x25
 8000e78:	f000 fa6f 	bl	800135a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e7c:	e03c      	b.n	8000ef8 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a22      	ldr	r2, [pc, #136]	@ (8000f0c <HAL_UART_MspInit+0x124>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d137      	bne.n	8000ef8 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e88:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <HAL_UART_MspInit+0x11c>)
 8000e8a:	69db      	ldr	r3, [r3, #28]
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f04 <HAL_UART_MspInit+0x11c>)
 8000e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e92:	61d3      	str	r3, [r2, #28]
 8000e94:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <HAL_UART_MspInit+0x11c>)
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <HAL_UART_MspInit+0x11c>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a17      	ldr	r2, [pc, #92]	@ (8000f04 <HAL_UART_MspInit+0x11c>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <HAL_UART_MspInit+0x11c>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART2_TX_Pin;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UART2_TX_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0318 	add.w	r3, r7, #24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480f      	ldr	r0, [pc, #60]	@ (8000f08 <HAL_UART_MspInit+0x120>)
 8000ecc:	f000 fb06 	bl	80014dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART2_RX_Pin;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <HAL_UART_MspInit+0x120>)
 8000ee4:	f000 fafa 	bl	80014dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2105      	movs	r1, #5
 8000eec:	2026      	movs	r0, #38	@ 0x26
 8000eee:	f000 fa18 	bl	8001322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ef2:	2026      	movs	r0, #38	@ 0x26
 8000ef4:	f000 fa31 	bl	800135a <HAL_NVIC_EnableIRQ>
}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	@ 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40013800 	.word	0x40013800
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010800 	.word	0x40010800
 8000f0c:	40004400 	.word	0x40004400

08000f10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08e      	sub	sp, #56	@ 0x38
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000f26:	4b34      	ldr	r3, [pc, #208]	@ (8000ff8 <HAL_InitTick+0xe8>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a33      	ldr	r2, [pc, #204]	@ (8000ff8 <HAL_InitTick+0xe8>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b31      	ldr	r3, [pc, #196]	@ (8000ff8 <HAL_InitTick+0xe8>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f3e:	f107 0210 	add.w	r2, r7, #16
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 fd13 	bl	8002974 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d103      	bne.n	8000f60 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f58:	f001 fce4 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8000f5c:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f5e:	e004      	b.n	8000f6a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f60:	f001 fce0 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8000f64:	4603      	mov	r3, r0
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f6c:	4a23      	ldr	r2, [pc, #140]	@ (8000ffc <HAL_InitTick+0xec>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	0c9b      	lsrs	r3, r3, #18
 8000f74:	3b01      	subs	r3, #1
 8000f76:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000f78:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <HAL_InitTick+0xf0>)
 8000f7a:	4a22      	ldr	r2, [pc, #136]	@ (8001004 <HAL_InitTick+0xf4>)
 8000f7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000f7e:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <HAL_InitTick+0xf0>)
 8000f80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f84:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000f86:	4a1e      	ldr	r2, [pc, #120]	@ (8001000 <HAL_InitTick+0xf0>)
 8000f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f8a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <HAL_InitTick+0xf0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <HAL_InitTick+0xf0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f98:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <HAL_InitTick+0xf0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000f9e:	4818      	ldr	r0, [pc, #96]	@ (8001000 <HAL_InitTick+0xf0>)
 8000fa0:	f001 fdba 	bl	8002b18 <HAL_TIM_Base_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000faa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d11b      	bne.n	8000fea <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000fb2:	4813      	ldr	r0, [pc, #76]	@ (8001000 <HAL_InitTick+0xf0>)
 8000fb4:	f001 fe00 	bl	8002bb8 <HAL_TIM_Base_Start_IT>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000fbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d111      	bne.n	8000fea <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fc6:	201d      	movs	r0, #29
 8000fc8:	f000 f9c7 	bl	800135a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b0f      	cmp	r3, #15
 8000fd0:	d808      	bhi.n	8000fe4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	201d      	movs	r0, #29
 8000fd8:	f000 f9a3 	bl	8001322 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <HAL_InitTick+0xf8>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e002      	b.n	8000fea <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3738      	adds	r7, #56	@ 0x38
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	431bde83 	.word	0x431bde83
 8001000:	20000478 	.word	0x20000478
 8001004:	40000400 	.word	0x40000400
 8001008:	20000008 	.word	0x20000008

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <NMI_Handler+0x4>

08001014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <MemManage_Handler+0x4>

08001024 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <UsageFault_Handler+0x4>

08001034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN5_IT8_Pin);
 8001044:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001048:	f000 fbe4 	bl	8001814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <TIM3_IRQHandler+0x10>)
 8001056:	f001 fea3 	bl	8002da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000478 	.word	0x20000478

08001064 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <USART1_IRQHandler+0x10>)
 800106a:	f002 faed 	bl	8003648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200003c0 	.word	0x200003c0

08001078 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <USART2_IRQHandler+0x10>)
 800107e:	f002 fae3 	bl	8003648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000408 	.word	0x20000408

0800108c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_IT12_Pin);
 8001090:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001094:	f000 fbbe 	bl	8001814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_IT13_Pin);
 8001098:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800109c:	f000 fbba 	bl	8001814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_IT14_Pin);
 80010a0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80010a4:	f000 fbb6 	bl	8001814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN4_IT15_Pin);
 80010a8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80010ac:	f000 fbb2 	bl	8001814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c0:	f7ff fff8 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480b      	ldr	r0, [pc, #44]	@ (80010f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010c6:	490c      	ldr	r1, [pc, #48]	@ (80010f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010c8:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a09      	ldr	r2, [pc, #36]	@ (8001100 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010dc:	4c09      	ldr	r4, [pc, #36]	@ (8001104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ea:	f005 fc9f 	bl	8006a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ee:	f7ff f9ed 	bl	80004cc <main>
  bx lr
 80010f2:	4770      	bx	lr
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80010fc:	08006b68 	.word	0x08006b68
  ldr r2, =_sbss
 8001100:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001104:	20001210 	.word	0x20001210

08001108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC1_2_IRQHandler>
	...

0800110c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HAL_Init+0x28>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	@ (8001134 <HAL_Init+0x28>)
 8001116:	f043 0310 	orr.w	r3, r3, #16
 800111a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 f8f5 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	200f      	movs	r0, #15
 8001124:	f7ff fef4 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f7ff fd32 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40022000 	.word	0x40022000

08001138 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800113c:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <HAL_IncTick+0x1c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b05      	ldr	r3, [pc, #20]	@ (8001158 <HAL_IncTick+0x20>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a03      	ldr	r2, [pc, #12]	@ (8001158 <HAL_IncTick+0x20>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	2000000c 	.word	0x2000000c
 8001158:	200004c0 	.word	0x200004c0

0800115c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b02      	ldr	r3, [pc, #8]	@ (800116c <HAL_GetTick+0x10>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	200004c0 	.word	0x200004c0

08001170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff fff0 	bl	800115c <HAL_GetTick>
 800117c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001188:	d005      	beq.n	8001196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <HAL_Delay+0x44>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001196:	bf00      	nop
 8001198:	f7ff ffe0 	bl	800115c <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8f7      	bhi.n	8001198 <HAL_Delay+0x28>
  {
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000000c 	.word	0x2000000c

080011b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c8:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d4:	4013      	ands	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ea:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	60d3      	str	r3, [r2, #12]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001204:	4b04      	ldr	r3, [pc, #16]	@ (8001218 <__NVIC_GetPriorityGrouping+0x18>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	f003 0307 	and.w	r3, r3, #7
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	2b00      	cmp	r3, #0
 800122c:	db0b      	blt.n	8001246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 021f 	and.w	r2, r3, #31
 8001234:	4906      	ldr	r1, [pc, #24]	@ (8001250 <__NVIC_EnableIRQ+0x34>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	095b      	lsrs	r3, r3, #5
 800123c:	2001      	movs	r0, #1
 800123e:	fa00 f202 	lsl.w	r2, r0, r2
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	db0a      	blt.n	800127e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	490c      	ldr	r1, [pc, #48]	@ (80012a0 <__NVIC_SetPriority+0x4c>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	0112      	lsls	r2, r2, #4
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	440b      	add	r3, r1
 8001278:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800127c:	e00a      	b.n	8001294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4908      	ldr	r1, [pc, #32]	@ (80012a4 <__NVIC_SetPriority+0x50>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	3b04      	subs	r3, #4
 800128c:	0112      	lsls	r2, r2, #4
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	440b      	add	r3, r1
 8001292:	761a      	strb	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e100 	.word	0xe000e100
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	@ 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f1c3 0307 	rsb	r3, r3, #7
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	bf28      	it	cs
 80012c6:	2304      	movcs	r3, #4
 80012c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3304      	adds	r3, #4
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d902      	bls.n	80012d8 <NVIC_EncodePriority+0x30>
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b03      	subs	r3, #3
 80012d6:	e000      	b.n	80012da <NVIC_EncodePriority+0x32>
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	4313      	orrs	r3, r2
         );
}
 8001302:	4618      	mov	r0, r3
 8001304:	3724      	adds	r7, #36	@ 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff4f 	bl	80011b8 <__NVIC_SetPriorityGrouping>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001334:	f7ff ff64 	bl	8001200 <__NVIC_GetPriorityGrouping>
 8001338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	6978      	ldr	r0, [r7, #20]
 8001340:	f7ff ffb2 	bl	80012a8 <NVIC_EncodePriority>
 8001344:	4602      	mov	r2, r0
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff81 	bl	8001254 <__NVIC_SetPriority>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff57 	bl	800121c <__NVIC_EnableIRQ>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001376:	b480      	push	{r7}
 8001378:	b085      	sub	sp, #20
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d008      	beq.n	80013a0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2204      	movs	r2, #4
 8001392:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e020      	b.n	80013e2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 020e 	bic.w	r2, r2, #14
 80013ae:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0201 	bic.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013c8:	2101      	movs	r1, #1
 80013ca:	fa01 f202 	lsl.w	r2, r1, r2
 80013ce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d005      	beq.n	8001410 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2204      	movs	r2, #4
 8001408:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	e051      	b.n	80014b4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 020e 	bic.w	r2, r2, #14
 800141e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a22      	ldr	r2, [pc, #136]	@ (80014c0 <HAL_DMA_Abort_IT+0xd4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d029      	beq.n	800148e <HAL_DMA_Abort_IT+0xa2>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a21      	ldr	r2, [pc, #132]	@ (80014c4 <HAL_DMA_Abort_IT+0xd8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d022      	beq.n	800148a <HAL_DMA_Abort_IT+0x9e>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a1f      	ldr	r2, [pc, #124]	@ (80014c8 <HAL_DMA_Abort_IT+0xdc>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d01a      	beq.n	8001484 <HAL_DMA_Abort_IT+0x98>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a1e      	ldr	r2, [pc, #120]	@ (80014cc <HAL_DMA_Abort_IT+0xe0>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d012      	beq.n	800147e <HAL_DMA_Abort_IT+0x92>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a1c      	ldr	r2, [pc, #112]	@ (80014d0 <HAL_DMA_Abort_IT+0xe4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00a      	beq.n	8001478 <HAL_DMA_Abort_IT+0x8c>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a1b      	ldr	r2, [pc, #108]	@ (80014d4 <HAL_DMA_Abort_IT+0xe8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d102      	bne.n	8001472 <HAL_DMA_Abort_IT+0x86>
 800146c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001470:	e00e      	b.n	8001490 <HAL_DMA_Abort_IT+0xa4>
 8001472:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001476:	e00b      	b.n	8001490 <HAL_DMA_Abort_IT+0xa4>
 8001478:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800147c:	e008      	b.n	8001490 <HAL_DMA_Abort_IT+0xa4>
 800147e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001482:	e005      	b.n	8001490 <HAL_DMA_Abort_IT+0xa4>
 8001484:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001488:	e002      	b.n	8001490 <HAL_DMA_Abort_IT+0xa4>
 800148a:	2310      	movs	r3, #16
 800148c:	e000      	b.n	8001490 <HAL_DMA_Abort_IT+0xa4>
 800148e:	2301      	movs	r3, #1
 8001490:	4a11      	ldr	r2, [pc, #68]	@ (80014d8 <HAL_DMA_Abort_IT+0xec>)
 8001492:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	4798      	blx	r3
    } 
  }
  return status;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40020008 	.word	0x40020008
 80014c4:	4002001c 	.word	0x4002001c
 80014c8:	40020030 	.word	0x40020030
 80014cc:	40020044 	.word	0x40020044
 80014d0:	40020058 	.word	0x40020058
 80014d4:	4002006c 	.word	0x4002006c
 80014d8:	40020000 	.word	0x40020000

080014dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014dc:	b480      	push	{r7}
 80014de:	b08b      	sub	sp, #44	@ 0x2c
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ee:	e169      	b.n	80017c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014f0:	2201      	movs	r2, #1
 80014f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	429a      	cmp	r2, r3
 800150a:	f040 8158 	bne.w	80017be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4a9a      	ldr	r2, [pc, #616]	@ (800177c <HAL_GPIO_Init+0x2a0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d05e      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
 8001518:	4a98      	ldr	r2, [pc, #608]	@ (800177c <HAL_GPIO_Init+0x2a0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d875      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 800151e:	4a98      	ldr	r2, [pc, #608]	@ (8001780 <HAL_GPIO_Init+0x2a4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d058      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
 8001524:	4a96      	ldr	r2, [pc, #600]	@ (8001780 <HAL_GPIO_Init+0x2a4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d86f      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 800152a:	4a96      	ldr	r2, [pc, #600]	@ (8001784 <HAL_GPIO_Init+0x2a8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d052      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
 8001530:	4a94      	ldr	r2, [pc, #592]	@ (8001784 <HAL_GPIO_Init+0x2a8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d869      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 8001536:	4a94      	ldr	r2, [pc, #592]	@ (8001788 <HAL_GPIO_Init+0x2ac>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d04c      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
 800153c:	4a92      	ldr	r2, [pc, #584]	@ (8001788 <HAL_GPIO_Init+0x2ac>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d863      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 8001542:	4a92      	ldr	r2, [pc, #584]	@ (800178c <HAL_GPIO_Init+0x2b0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d046      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
 8001548:	4a90      	ldr	r2, [pc, #576]	@ (800178c <HAL_GPIO_Init+0x2b0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d85d      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 800154e:	2b12      	cmp	r3, #18
 8001550:	d82a      	bhi.n	80015a8 <HAL_GPIO_Init+0xcc>
 8001552:	2b12      	cmp	r3, #18
 8001554:	d859      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 8001556:	a201      	add	r2, pc, #4	@ (adr r2, 800155c <HAL_GPIO_Init+0x80>)
 8001558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155c:	080015d7 	.word	0x080015d7
 8001560:	080015b1 	.word	0x080015b1
 8001564:	080015c3 	.word	0x080015c3
 8001568:	08001605 	.word	0x08001605
 800156c:	0800160b 	.word	0x0800160b
 8001570:	0800160b 	.word	0x0800160b
 8001574:	0800160b 	.word	0x0800160b
 8001578:	0800160b 	.word	0x0800160b
 800157c:	0800160b 	.word	0x0800160b
 8001580:	0800160b 	.word	0x0800160b
 8001584:	0800160b 	.word	0x0800160b
 8001588:	0800160b 	.word	0x0800160b
 800158c:	0800160b 	.word	0x0800160b
 8001590:	0800160b 	.word	0x0800160b
 8001594:	0800160b 	.word	0x0800160b
 8001598:	0800160b 	.word	0x0800160b
 800159c:	0800160b 	.word	0x0800160b
 80015a0:	080015b9 	.word	0x080015b9
 80015a4:	080015cd 	.word	0x080015cd
 80015a8:	4a79      	ldr	r2, [pc, #484]	@ (8001790 <HAL_GPIO_Init+0x2b4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ae:	e02c      	b.n	800160a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	623b      	str	r3, [r7, #32]
          break;
 80015b6:	e029      	b.n	800160c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	3304      	adds	r3, #4
 80015be:	623b      	str	r3, [r7, #32]
          break;
 80015c0:	e024      	b.n	800160c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	3308      	adds	r3, #8
 80015c8:	623b      	str	r3, [r7, #32]
          break;
 80015ca:	e01f      	b.n	800160c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	330c      	adds	r3, #12
 80015d2:	623b      	str	r3, [r7, #32]
          break;
 80015d4:	e01a      	b.n	800160c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015de:	2304      	movs	r3, #4
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e013      	b.n	800160c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d105      	bne.n	80015f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015ec:	2308      	movs	r3, #8
 80015ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	611a      	str	r2, [r3, #16]
          break;
 80015f6:	e009      	b.n	800160c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f8:	2308      	movs	r3, #8
 80015fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	615a      	str	r2, [r3, #20]
          break;
 8001602:	e003      	b.n	800160c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
          break;
 8001608:	e000      	b.n	800160c <HAL_GPIO_Init+0x130>
          break;
 800160a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2bff      	cmp	r3, #255	@ 0xff
 8001610:	d801      	bhi.n	8001616 <HAL_GPIO_Init+0x13a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	e001      	b.n	800161a <HAL_GPIO_Init+0x13e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3304      	adds	r3, #4
 800161a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	2bff      	cmp	r3, #255	@ 0xff
 8001620:	d802      	bhi.n	8001628 <HAL_GPIO_Init+0x14c>
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x152>
 8001628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162a:	3b08      	subs	r3, #8
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	210f      	movs	r1, #15
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	401a      	ands	r2, r3
 8001640:	6a39      	ldr	r1, [r7, #32]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	431a      	orrs	r2, r3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 80b1 	beq.w	80017be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800165c:	4b4d      	ldr	r3, [pc, #308]	@ (8001794 <HAL_GPIO_Init+0x2b8>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a4c      	ldr	r2, [pc, #304]	@ (8001794 <HAL_GPIO_Init+0x2b8>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b4a      	ldr	r3, [pc, #296]	@ (8001794 <HAL_GPIO_Init+0x2b8>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001674:	4a48      	ldr	r2, [pc, #288]	@ (8001798 <HAL_GPIO_Init+0x2bc>)
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	3302      	adds	r3, #2
 800167c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001680:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	220f      	movs	r2, #15
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	4013      	ands	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a40      	ldr	r2, [pc, #256]	@ (800179c <HAL_GPIO_Init+0x2c0>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d013      	beq.n	80016c8 <HAL_GPIO_Init+0x1ec>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a3f      	ldr	r2, [pc, #252]	@ (80017a0 <HAL_GPIO_Init+0x2c4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00d      	beq.n	80016c4 <HAL_GPIO_Init+0x1e8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a3e      	ldr	r2, [pc, #248]	@ (80017a4 <HAL_GPIO_Init+0x2c8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d007      	beq.n	80016c0 <HAL_GPIO_Init+0x1e4>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a3d      	ldr	r2, [pc, #244]	@ (80017a8 <HAL_GPIO_Init+0x2cc>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d101      	bne.n	80016bc <HAL_GPIO_Init+0x1e0>
 80016b8:	2303      	movs	r3, #3
 80016ba:	e006      	b.n	80016ca <HAL_GPIO_Init+0x1ee>
 80016bc:	2304      	movs	r3, #4
 80016be:	e004      	b.n	80016ca <HAL_GPIO_Init+0x1ee>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e002      	b.n	80016ca <HAL_GPIO_Init+0x1ee>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_GPIO_Init+0x1ee>
 80016c8:	2300      	movs	r3, #0
 80016ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016cc:	f002 0203 	and.w	r2, r2, #3
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	4093      	lsls	r3, r2
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016da:	492f      	ldr	r1, [pc, #188]	@ (8001798 <HAL_GPIO_Init+0x2bc>)
 80016dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016f4:	4b2d      	ldr	r3, [pc, #180]	@ (80017ac <HAL_GPIO_Init+0x2d0>)
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	492c      	ldr	r1, [pc, #176]	@ (80017ac <HAL_GPIO_Init+0x2d0>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001702:	4b2a      	ldr	r3, [pc, #168]	@ (80017ac <HAL_GPIO_Init+0x2d0>)
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	43db      	mvns	r3, r3
 800170a:	4928      	ldr	r1, [pc, #160]	@ (80017ac <HAL_GPIO_Init+0x2d0>)
 800170c:	4013      	ands	r3, r2
 800170e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800171c:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <HAL_GPIO_Init+0x2d0>)
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	4922      	ldr	r1, [pc, #136]	@ (80017ac <HAL_GPIO_Init+0x2d0>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	60cb      	str	r3, [r1, #12]
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <HAL_GPIO_Init+0x2d0>)
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	43db      	mvns	r3, r3
 8001732:	491e      	ldr	r1, [pc, #120]	@ (80017ac <HAL_GPIO_Init+0x2d0>)
 8001734:	4013      	ands	r3, r2
 8001736:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <HAL_GPIO_Init+0x2d0>)
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	4918      	ldr	r1, [pc, #96]	@ (80017ac <HAL_GPIO_Init+0x2d0>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
 8001750:	e006      	b.n	8001760 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001752:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <HAL_GPIO_Init+0x2d0>)
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	43db      	mvns	r3, r3
 800175a:	4914      	ldr	r1, [pc, #80]	@ (80017ac <HAL_GPIO_Init+0x2d0>)
 800175c:	4013      	ands	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d021      	beq.n	80017b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800176c:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <HAL_GPIO_Init+0x2d0>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	490e      	ldr	r1, [pc, #56]	@ (80017ac <HAL_GPIO_Init+0x2d0>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	600b      	str	r3, [r1, #0]
 8001778:	e021      	b.n	80017be <HAL_GPIO_Init+0x2e2>
 800177a:	bf00      	nop
 800177c:	10320000 	.word	0x10320000
 8001780:	10310000 	.word	0x10310000
 8001784:	10220000 	.word	0x10220000
 8001788:	10210000 	.word	0x10210000
 800178c:	10120000 	.word	0x10120000
 8001790:	10110000 	.word	0x10110000
 8001794:	40021000 	.word	0x40021000
 8001798:	40010000 	.word	0x40010000
 800179c:	40010800 	.word	0x40010800
 80017a0:	40010c00 	.word	0x40010c00
 80017a4:	40011000 	.word	0x40011000
 80017a8:	40011400 	.word	0x40011400
 80017ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017b0:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <HAL_GPIO_Init+0x304>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	4909      	ldr	r1, [pc, #36]	@ (80017e0 <HAL_GPIO_Init+0x304>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	3301      	adds	r3, #1
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f47f ae8e 	bne.w	80014f0 <HAL_GPIO_Init+0x14>
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	372c      	adds	r7, #44	@ 0x2c
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	40010400 	.word	0x40010400

080017e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
 80017f0:	4613      	mov	r3, r2
 80017f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017f4:	787b      	ldrb	r3, [r7, #1]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001800:	e003      	b.n	800180a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	041a      	lsls	r2, r3, #16
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	611a      	str	r2, [r3, #16]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800181e:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800182a:	4a05      	ldr	r2, [pc, #20]	@ (8001840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f806 	bl	8001844 <HAL_GPIO_EXTI_Callback>
  }
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40010400 	.word	0x40010400

08001844 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e12b      	b.n	8001ac2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff f9be 	bl	8000c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2224      	movs	r2, #36	@ 0x24
 8001888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0201 	bic.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018bc:	f001 f832 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 80018c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4a81      	ldr	r2, [pc, #516]	@ (8001acc <HAL_I2C_Init+0x274>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d807      	bhi.n	80018dc <HAL_I2C_Init+0x84>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4a80      	ldr	r2, [pc, #512]	@ (8001ad0 <HAL_I2C_Init+0x278>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	bf94      	ite	ls
 80018d4:	2301      	movls	r3, #1
 80018d6:	2300      	movhi	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	e006      	b.n	80018ea <HAL_I2C_Init+0x92>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4a7d      	ldr	r2, [pc, #500]	@ (8001ad4 <HAL_I2C_Init+0x27c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	bf94      	ite	ls
 80018e4:	2301      	movls	r3, #1
 80018e6:	2300      	movhi	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e0e7      	b.n	8001ac2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4a78      	ldr	r2, [pc, #480]	@ (8001ad8 <HAL_I2C_Init+0x280>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	0c9b      	lsrs	r3, r3, #18
 80018fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	430a      	orrs	r2, r1
 8001910:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4a6a      	ldr	r2, [pc, #424]	@ (8001acc <HAL_I2C_Init+0x274>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d802      	bhi.n	800192c <HAL_I2C_Init+0xd4>
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	3301      	adds	r3, #1
 800192a:	e009      	b.n	8001940 <HAL_I2C_Init+0xe8>
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001932:	fb02 f303 	mul.w	r3, r2, r3
 8001936:	4a69      	ldr	r2, [pc, #420]	@ (8001adc <HAL_I2C_Init+0x284>)
 8001938:	fba2 2303 	umull	r2, r3, r2, r3
 800193c:	099b      	lsrs	r3, r3, #6
 800193e:	3301      	adds	r3, #1
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	430b      	orrs	r3, r1
 8001946:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001952:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	495c      	ldr	r1, [pc, #368]	@ (8001acc <HAL_I2C_Init+0x274>)
 800195c:	428b      	cmp	r3, r1
 800195e:	d819      	bhi.n	8001994 <HAL_I2C_Init+0x13c>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1e59      	subs	r1, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	fbb1 f3f3 	udiv	r3, r1, r3
 800196e:	1c59      	adds	r1, r3, #1
 8001970:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001974:	400b      	ands	r3, r1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00a      	beq.n	8001990 <HAL_I2C_Init+0x138>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1e59      	subs	r1, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fbb1 f3f3 	udiv	r3, r1, r3
 8001988:	3301      	adds	r3, #1
 800198a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198e:	e051      	b.n	8001a34 <HAL_I2C_Init+0x1dc>
 8001990:	2304      	movs	r3, #4
 8001992:	e04f      	b.n	8001a34 <HAL_I2C_Init+0x1dc>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d111      	bne.n	80019c0 <HAL_I2C_Init+0x168>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1e58      	subs	r0, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	440b      	add	r3, r1
 80019aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ae:	3301      	adds	r3, #1
 80019b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf0c      	ite	eq
 80019b8:	2301      	moveq	r3, #1
 80019ba:	2300      	movne	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	e012      	b.n	80019e6 <HAL_I2C_Init+0x18e>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1e58      	subs	r0, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6859      	ldr	r1, [r3, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	0099      	lsls	r1, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d6:	3301      	adds	r3, #1
 80019d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf0c      	ite	eq
 80019e0:	2301      	moveq	r3, #1
 80019e2:	2300      	movne	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_I2C_Init+0x196>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e022      	b.n	8001a34 <HAL_I2C_Init+0x1dc>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10e      	bne.n	8001a14 <HAL_I2C_Init+0x1bc>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1e58      	subs	r0, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6859      	ldr	r1, [r3, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	440b      	add	r3, r1
 8001a04:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a08:	3301      	adds	r3, #1
 8001a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a12:	e00f      	b.n	8001a34 <HAL_I2C_Init+0x1dc>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	1e58      	subs	r0, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6859      	ldr	r1, [r3, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	0099      	lsls	r1, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	6809      	ldr	r1, [r1, #0]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69da      	ldr	r2, [r3, #28]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6911      	ldr	r1, [r2, #16]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68d2      	ldr	r2, [r2, #12]
 8001a6e:	4311      	orrs	r1, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	430b      	orrs	r3, r1
 8001a76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2220      	movs	r2, #32
 8001aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	000186a0 	.word	0x000186a0
 8001ad0:	001e847f 	.word	0x001e847f
 8001ad4:	003d08ff 	.word	0x003d08ff
 8001ad8:	431bde83 	.word	0x431bde83
 8001adc:	10624dd3 	.word	0x10624dd3

08001ae0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	461a      	mov	r2, r3
 8001aec:	460b      	mov	r3, r1
 8001aee:	817b      	strh	r3, [r7, #10]
 8001af0:	4613      	mov	r3, r2
 8001af2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff fb32 	bl	800115c <HAL_GetTick>
 8001af8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b20      	cmp	r3, #32
 8001b04:	f040 80e0 	bne.w	8001cc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2319      	movs	r3, #25
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4970      	ldr	r1, [pc, #448]	@ (8001cd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 f964 	bl	8001de0 <I2C_WaitOnFlagUntilTimeout>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e0d3      	b.n	8001cca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_I2C_Master_Transmit+0x50>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e0cc      	b.n	8001cca <HAL_I2C_Master_Transmit+0x1ea>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d007      	beq.n	8001b56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0201 	orr.w	r2, r2, #1
 8001b54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2221      	movs	r2, #33	@ 0x21
 8001b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2210      	movs	r2, #16
 8001b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	893a      	ldrh	r2, [r7, #8]
 8001b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4a50      	ldr	r2, [pc, #320]	@ (8001cd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b98:	8979      	ldrh	r1, [r7, #10]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	6a3a      	ldr	r2, [r7, #32]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f89c 	bl	8001cdc <I2C_MasterRequestWrite>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e08d      	b.n	8001cca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001bc4:	e066      	b.n	8001c94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	6a39      	ldr	r1, [r7, #32]
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 fa22 	bl	8002014 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d107      	bne.n	8001bee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e06b      	b.n	8001cca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d11b      	bne.n	8001c68 <HAL_I2C_Master_Transmit+0x188>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d017      	beq.n	8001c68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3c:	781a      	ldrb	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	6a39      	ldr	r1, [r7, #32]
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 fa19 	bl	80020a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00d      	beq.n	8001c94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d107      	bne.n	8001c90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e01a      	b.n	8001cca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d194      	bne.n	8001bc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e000      	b.n	8001cca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001cc8:	2302      	movs	r3, #2
  }
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	00100002 	.word	0x00100002
 8001cd8:	ffff0000 	.word	0xffff0000

08001cdc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d006      	beq.n	8001d06 <I2C_MasterRequestWrite+0x2a>
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d003      	beq.n	8001d06 <I2C_MasterRequestWrite+0x2a>
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d04:	d108      	bne.n	8001d18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e00b      	b.n	8001d30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1c:	2b12      	cmp	r3, #18
 8001d1e:	d107      	bne.n	8001d30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 f84f 	bl	8001de0 <I2C_WaitOnFlagUntilTimeout>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00d      	beq.n	8001d64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d56:	d103      	bne.n	8001d60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e035      	b.n	8001dd0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d6c:	d108      	bne.n	8001d80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d6e:	897b      	ldrh	r3, [r7, #10]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d7c:	611a      	str	r2, [r3, #16]
 8001d7e:	e01b      	b.n	8001db8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d80:	897b      	ldrh	r3, [r7, #10]
 8001d82:	11db      	asrs	r3, r3, #7
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f003 0306 	and.w	r3, r3, #6
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f063 030f 	orn	r3, r3, #15
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	490e      	ldr	r1, [pc, #56]	@ (8001dd8 <I2C_MasterRequestWrite+0xfc>)
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 f898 	bl	8001ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e010      	b.n	8001dd0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dae:	897b      	ldrh	r3, [r7, #10]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	4907      	ldr	r1, [pc, #28]	@ (8001ddc <I2C_MasterRequestWrite+0x100>)
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 f888 	bl	8001ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	00010008 	.word	0x00010008
 8001ddc:	00010002 	.word	0x00010002

08001de0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	4613      	mov	r3, r2
 8001dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001df0:	e048      	b.n	8001e84 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d044      	beq.n	8001e84 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfa:	f7ff f9af 	bl	800115c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d302      	bcc.n	8001e10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d139      	bne.n	8001e84 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	0c1b      	lsrs	r3, r3, #16
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d10d      	bne.n	8001e36 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	43da      	mvns	r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	4013      	ands	r3, r2
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	461a      	mov	r2, r3
 8001e34:	e00c      	b.n	8001e50 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	43da      	mvns	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	4013      	ands	r3, r2
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d116      	bne.n	8001e84 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e70:	f043 0220 	orr.w	r2, r3, #32
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e023      	b.n	8001ecc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	0c1b      	lsrs	r3, r3, #16
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d10d      	bne.n	8001eaa <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	43da      	mvns	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf0c      	ite	eq
 8001ea0:	2301      	moveq	r3, #1
 8001ea2:	2300      	movne	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	e00c      	b.n	8001ec4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d093      	beq.n	8001df2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ee2:	e071      	b.n	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ef2:	d123      	bne.n	8001f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f02:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f28:	f043 0204 	orr.w	r2, r3, #4
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e067      	b.n	800200c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f42:	d041      	beq.n	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f44:	f7ff f90a 	bl	800115c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d302      	bcc.n	8001f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d136      	bne.n	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	0c1b      	lsrs	r3, r3, #16
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d10c      	bne.n	8001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	bf14      	ite	ne
 8001f76:	2301      	movne	r3, #1
 8001f78:	2300      	moveq	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	e00b      	b.n	8001f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	43da      	mvns	r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf14      	ite	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	2300      	moveq	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d016      	beq.n	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	f043 0220 	orr.w	r2, r3, #32
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e021      	b.n	800200c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	0c1b      	lsrs	r3, r3, #16
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d10c      	bne.n	8001fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	43da      	mvns	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	bf14      	ite	ne
 8001fe4:	2301      	movne	r3, #1
 8001fe6:	2300      	moveq	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	e00b      	b.n	8002004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bf14      	ite	ne
 8001ffe:	2301      	movne	r3, #1
 8002000:	2300      	moveq	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	f47f af6d 	bne.w	8001ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002020:	e034      	b.n	800208c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 f886 	bl	8002134 <I2C_IsAcknowledgeFailed>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e034      	b.n	800209c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d028      	beq.n	800208c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800203a:	f7ff f88f 	bl	800115c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	429a      	cmp	r2, r3
 8002048:	d302      	bcc.n	8002050 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d11d      	bne.n	800208c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800205a:	2b80      	cmp	r3, #128	@ 0x80
 800205c:	d016      	beq.n	800208c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e007      	b.n	800209c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002096:	2b80      	cmp	r3, #128	@ 0x80
 8002098:	d1c3      	bne.n	8002022 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020b0:	e034      	b.n	800211c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f83e 	bl	8002134 <I2C_IsAcknowledgeFailed>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e034      	b.n	800212c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d028      	beq.n	800211c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ca:	f7ff f847 	bl	800115c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d302      	bcc.n	80020e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d11d      	bne.n	800211c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d016      	beq.n	800211c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	f043 0220 	orr.w	r2, r3, #32
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e007      	b.n	800212c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b04      	cmp	r3, #4
 8002128:	d1c3      	bne.n	80020b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800214a:	d11b      	bne.n	8002184 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002154:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	f043 0204 	orr.w	r2, r3, #4
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e272      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8087 	beq.w	80022be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021b0:	4b92      	ldr	r3, [pc, #584]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d00c      	beq.n	80021d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021bc:	4b8f      	ldr	r3, [pc, #572]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d112      	bne.n	80021ee <HAL_RCC_OscConfig+0x5e>
 80021c8:	4b8c      	ldr	r3, [pc, #560]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021d4:	d10b      	bne.n	80021ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d6:	4b89      	ldr	r3, [pc, #548]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d06c      	beq.n	80022bc <HAL_RCC_OscConfig+0x12c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d168      	bne.n	80022bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e24c      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x76>
 80021f8:	4b80      	ldr	r3, [pc, #512]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a7f      	ldr	r2, [pc, #508]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	e02e      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x98>
 800220e:	4b7b      	ldr	r3, [pc, #492]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a7a      	ldr	r2, [pc, #488]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b78      	ldr	r3, [pc, #480]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a77      	ldr	r2, [pc, #476]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002220:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e01d      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0xbc>
 8002232:	4b72      	ldr	r3, [pc, #456]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a71      	ldr	r2, [pc, #452]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b6f      	ldr	r3, [pc, #444]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a6e      	ldr	r2, [pc, #440]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e00b      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 800224c:	4b6b      	ldr	r3, [pc, #428]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a6a      	ldr	r2, [pc, #424]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b68      	ldr	r3, [pc, #416]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a67      	ldr	r2, [pc, #412]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 800225e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002262:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d013      	beq.n	8002294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7fe ff76 	bl	800115c <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002274:	f7fe ff72 	bl	800115c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	@ 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e200      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	4b5d      	ldr	r3, [pc, #372]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0xe4>
 8002292:	e014      	b.n	80022be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7fe ff62 	bl	800115c <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe ff5e 	bl	800115c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	@ 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e1ec      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	4b53      	ldr	r3, [pc, #332]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x10c>
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d063      	beq.n	8002392 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ca:	4b4c      	ldr	r3, [pc, #304]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022d6:	4b49      	ldr	r3, [pc, #292]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d11c      	bne.n	800231c <HAL_RCC_OscConfig+0x18c>
 80022e2:	4b46      	ldr	r3, [pc, #280]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d116      	bne.n	800231c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	4b43      	ldr	r3, [pc, #268]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <HAL_RCC_OscConfig+0x176>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d001      	beq.n	8002306 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e1c0      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002306:	4b3d      	ldr	r3, [pc, #244]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4939      	ldr	r1, [pc, #228]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	e03a      	b.n	8002392 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002324:	4b36      	ldr	r3, [pc, #216]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe ff17 	bl	800115c <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002332:	f7fe ff13 	bl	800115c <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e1a1      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002344:	4b2d      	ldr	r3, [pc, #180]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	4b2a      	ldr	r3, [pc, #168]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4927      	ldr	r1, [pc, #156]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002360:	4313      	orrs	r3, r2
 8002362:	600b      	str	r3, [r1, #0]
 8002364:	e015      	b.n	8002392 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002366:	4b26      	ldr	r3, [pc, #152]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe fef6 	bl	800115c <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002374:	f7fe fef2 	bl	800115c <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e180      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002386:	4b1d      	ldr	r3, [pc, #116]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d03a      	beq.n	8002414 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d019      	beq.n	80023da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a6:	4b17      	ldr	r3, [pc, #92]	@ (8002404 <HAL_RCC_OscConfig+0x274>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7fe fed6 	bl	800115c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b4:	f7fe fed2 	bl	800115c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e160      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c6:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <HAL_RCC_OscConfig+0x26c>)
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023d2:	2001      	movs	r0, #1
 80023d4:	f000 fafe 	bl	80029d4 <RCC_Delay>
 80023d8:	e01c      	b.n	8002414 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023da:	4b0a      	ldr	r3, [pc, #40]	@ (8002404 <HAL_RCC_OscConfig+0x274>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e0:	f7fe febc 	bl	800115c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e6:	e00f      	b.n	8002408 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e8:	f7fe feb8 	bl	800115c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d908      	bls.n	8002408 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e146      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	42420000 	.word	0x42420000
 8002404:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002408:	4b92      	ldr	r3, [pc, #584]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e9      	bne.n	80023e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a6 	beq.w	800256e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002426:	4b8b      	ldr	r3, [pc, #556]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10d      	bne.n	800244e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b88      	ldr	r3, [pc, #544]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4a87      	ldr	r2, [pc, #540]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800243c:	61d3      	str	r3, [r2, #28]
 800243e:	4b85      	ldr	r3, [pc, #532]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244e:	4b82      	ldr	r3, [pc, #520]	@ (8002658 <HAL_RCC_OscConfig+0x4c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d118      	bne.n	800248c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245a:	4b7f      	ldr	r3, [pc, #508]	@ (8002658 <HAL_RCC_OscConfig+0x4c8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a7e      	ldr	r2, [pc, #504]	@ (8002658 <HAL_RCC_OscConfig+0x4c8>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002466:	f7fe fe79 	bl	800115c <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246e:	f7fe fe75 	bl	800115c <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b64      	cmp	r3, #100	@ 0x64
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e103      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	4b75      	ldr	r3, [pc, #468]	@ (8002658 <HAL_RCC_OscConfig+0x4c8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x312>
 8002494:	4b6f      	ldr	r3, [pc, #444]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4a6e      	ldr	r2, [pc, #440]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6213      	str	r3, [r2, #32]
 80024a0:	e02d      	b.n	80024fe <HAL_RCC_OscConfig+0x36e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x334>
 80024aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a69      	ldr	r2, [pc, #420]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6213      	str	r3, [r2, #32]
 80024b6:	4b67      	ldr	r3, [pc, #412]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a66      	ldr	r2, [pc, #408]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	f023 0304 	bic.w	r3, r3, #4
 80024c0:	6213      	str	r3, [r2, #32]
 80024c2:	e01c      	b.n	80024fe <HAL_RCC_OscConfig+0x36e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d10c      	bne.n	80024e6 <HAL_RCC_OscConfig+0x356>
 80024cc:	4b61      	ldr	r3, [pc, #388]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4a60      	ldr	r2, [pc, #384]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	6213      	str	r3, [r2, #32]
 80024d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6213      	str	r3, [r2, #32]
 80024e4:	e00b      	b.n	80024fe <HAL_RCC_OscConfig+0x36e>
 80024e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a5a      	ldr	r2, [pc, #360]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	6213      	str	r3, [r2, #32]
 80024f2:	4b58      	ldr	r3, [pc, #352]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a57      	ldr	r2, [pc, #348]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d015      	beq.n	8002532 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7fe fe29 	bl	800115c <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fe fe25 	bl	800115c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0b1      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002524:	4b4b      	ldr	r3, [pc, #300]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ee      	beq.n	800250e <HAL_RCC_OscConfig+0x37e>
 8002530:	e014      	b.n	800255c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7fe fe13 	bl	800115c <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7fe fe0f 	bl	800115c <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e09b      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002550:	4b40      	ldr	r3, [pc, #256]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1ee      	bne.n	800253a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d105      	bne.n	800256e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002562:	4b3c      	ldr	r3, [pc, #240]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4a3b      	ldr	r2, [pc, #236]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800256c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8087 	beq.w	8002686 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002578:	4b36      	ldr	r3, [pc, #216]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d061      	beq.n	8002648 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d146      	bne.n	800261a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258c:	4b33      	ldr	r3, [pc, #204]	@ (800265c <HAL_RCC_OscConfig+0x4cc>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fe fde3 	bl	800115c <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe fddf 	bl	800115c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e06d      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ac:	4b29      	ldr	r3, [pc, #164]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025c0:	d108      	bne.n	80025d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025c2:	4b24      	ldr	r3, [pc, #144]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	4921      	ldr	r1, [pc, #132]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a19      	ldr	r1, [r3, #32]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e4:	430b      	orrs	r3, r1
 80025e6:	491b      	ldr	r1, [pc, #108]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ec:	4b1b      	ldr	r3, [pc, #108]	@ (800265c <HAL_RCC_OscConfig+0x4cc>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f2:	f7fe fdb3 	bl	800115c <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fa:	f7fe fdaf 	bl	800115c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e03d      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800260c:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x46a>
 8002618:	e035      	b.n	8002686 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	4b10      	ldr	r3, [pc, #64]	@ (800265c <HAL_RCC_OscConfig+0x4cc>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7fe fd9c 	bl	800115c <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002628:	f7fe fd98 	bl	800115c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e026      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263a:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x498>
 8002646:	e01e      	b.n	8002686 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d107      	bne.n	8002660 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e019      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
 8002654:	40021000 	.word	0x40021000
 8002658:	40007000 	.word	0x40007000
 800265c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002660:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_RCC_OscConfig+0x500>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	429a      	cmp	r2, r3
 8002672:	d106      	bne.n	8002682 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267e:	429a      	cmp	r2, r3
 8002680:	d001      	beq.n	8002686 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000

08002694 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0d0      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d910      	bls.n	80026d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b67      	ldr	r3, [pc, #412]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 0207 	bic.w	r2, r3, #7
 80026be:	4965      	ldr	r1, [pc, #404]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b63      	ldr	r3, [pc, #396]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0b8      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d020      	beq.n	8002726 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026f0:	4b59      	ldr	r3, [pc, #356]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a58      	ldr	r2, [pc, #352]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002708:	4b53      	ldr	r3, [pc, #332]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4a52      	ldr	r2, [pc, #328]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002712:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002714:	4b50      	ldr	r3, [pc, #320]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	494d      	ldr	r1, [pc, #308]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d040      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	4b47      	ldr	r3, [pc, #284]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d115      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e07f      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d107      	bne.n	8002762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002752:	4b41      	ldr	r3, [pc, #260]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e073      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002762:	4b3d      	ldr	r3, [pc, #244]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e06b      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002772:	4b39      	ldr	r3, [pc, #228]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f023 0203 	bic.w	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4936      	ldr	r1, [pc, #216]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002784:	f7fe fcea 	bl	800115c <HAL_GetTick>
 8002788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278c:	f7fe fce6 	bl	800115c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e053      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 020c 	and.w	r2, r3, #12
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d1eb      	bne.n	800278c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b4:	4b27      	ldr	r3, [pc, #156]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d210      	bcs.n	80027e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b24      	ldr	r3, [pc, #144]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 0207 	bic.w	r2, r3, #7
 80027ca:	4922      	ldr	r1, [pc, #136]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	4b20      	ldr	r3, [pc, #128]	@ (8002854 <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e032      	b.n	800284a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f0:	4b19      	ldr	r3, [pc, #100]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4916      	ldr	r1, [pc, #88]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800280e:	4b12      	ldr	r3, [pc, #72]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	490e      	ldr	r1, [pc, #56]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002822:	f000 f821 	bl	8002868 <HAL_RCC_GetSysClockFreq>
 8002826:	4602      	mov	r2, r0
 8002828:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	490a      	ldr	r1, [pc, #40]	@ (800285c <HAL_RCC_ClockConfig+0x1c8>)
 8002834:	5ccb      	ldrb	r3, [r1, r3]
 8002836:	fa22 f303 	lsr.w	r3, r2, r3
 800283a:	4a09      	ldr	r2, [pc, #36]	@ (8002860 <HAL_RCC_ClockConfig+0x1cc>)
 800283c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800283e:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <HAL_RCC_ClockConfig+0x1d0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fb64 	bl	8000f10 <HAL_InitTick>

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40022000 	.word	0x40022000
 8002858:	40021000 	.word	0x40021000
 800285c:	08006b2c 	.word	0x08006b2c
 8002860:	20000004 	.word	0x20000004
 8002864:	20000008 	.word	0x20000008

08002868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002882:	4b1e      	ldr	r3, [pc, #120]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x94>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b04      	cmp	r3, #4
 8002890:	d002      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x30>
 8002892:	2b08      	cmp	r3, #8
 8002894:	d003      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0x36>
 8002896:	e027      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002898:	4b19      	ldr	r3, [pc, #100]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x98>)
 800289a:	613b      	str	r3, [r7, #16]
      break;
 800289c:	e027      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	0c9b      	lsrs	r3, r3, #18
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	4a17      	ldr	r2, [pc, #92]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028a8:	5cd3      	ldrb	r3, [r2, r3]
 80028aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d010      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028b6:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x94>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	0c5b      	lsrs	r3, r3, #17
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	4a11      	ldr	r2, [pc, #68]	@ (8002908 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ca:	fb03 f202 	mul.w	r2, r3, r2
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e004      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a0c      	ldr	r2, [pc, #48]	@ (800290c <HAL_RCC_GetSysClockFreq+0xa4>)
 80028dc:	fb02 f303 	mul.w	r3, r2, r3
 80028e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	613b      	str	r3, [r7, #16]
      break;
 80028e6:	e002      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028e8:	4b05      	ldr	r3, [pc, #20]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ea:	613b      	str	r3, [r7, #16]
      break;
 80028ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ee:	693b      	ldr	r3, [r7, #16]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	007a1200 	.word	0x007a1200
 8002904:	08006b44 	.word	0x08006b44
 8002908:	08006b54 	.word	0x08006b54
 800290c:	003d0900 	.word	0x003d0900

08002910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002914:	4b02      	ldr	r3, [pc, #8]	@ (8002920 <HAL_RCC_GetHCLKFreq+0x10>)
 8002916:	681b      	ldr	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	20000004 	.word	0x20000004

08002924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002928:	f7ff fff2 	bl	8002910 <HAL_RCC_GetHCLKFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	4903      	ldr	r1, [pc, #12]	@ (8002948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000
 8002948:	08006b3c 	.word	0x08006b3c

0800294c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002950:	f7ff ffde 	bl	8002910 <HAL_RCC_GetHCLKFreq>
 8002954:	4602      	mov	r2, r0
 8002956:	4b05      	ldr	r3, [pc, #20]	@ (800296c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	0adb      	lsrs	r3, r3, #11
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	4903      	ldr	r1, [pc, #12]	@ (8002970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002962:	5ccb      	ldrb	r3, [r1, r3]
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002968:	4618      	mov	r0, r3
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40021000 	.word	0x40021000
 8002970:	08006b3c 	.word	0x08006b3c

08002974 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	220f      	movs	r2, #15
 8002982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_RCC_GetClockConfig+0x58>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0203 	and.w	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002990:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <HAL_RCC_GetClockConfig+0x58>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800299c:	4b0b      	ldr	r3, [pc, #44]	@ (80029cc <HAL_RCC_GetClockConfig+0x58>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80029a8:	4b08      	ldr	r3, [pc, #32]	@ (80029cc <HAL_RCC_GetClockConfig+0x58>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029b6:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0207 	and.w	r2, r3, #7
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40022000 	.word	0x40022000

080029d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a08 <RCC_Delay+0x34>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0a      	ldr	r2, [pc, #40]	@ (8002a0c <RCC_Delay+0x38>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	0a5b      	lsrs	r3, r3, #9
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029f0:	bf00      	nop
  }
  while (Delay --);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1e5a      	subs	r2, r3, #1
 80029f6:	60fa      	str	r2, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f9      	bne.n	80029f0 <RCC_Delay+0x1c>
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	20000004 	.word	0x20000004
 8002a0c:	10624dd3 	.word	0x10624dd3

08002a10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e076      	b.n	8002b10 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d108      	bne.n	8002a3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a32:	d009      	beq.n	8002a48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	61da      	str	r2, [r3, #28]
 8002a3a:	e005      	b.n	8002a48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fe f91c 	bl	8000ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002acc:	ea42 0103 	orr.w	r1, r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	0c1a      	lsrs	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f002 0204 	and.w	r2, r2, #4
 8002aee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002afe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e041      	b.n	8002bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe f8f8 	bl	8000d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	4619      	mov	r1, r3
 8002b56:	4610      	mov	r0, r2
 8002b58:	f000 fb16 	bl	8003188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d001      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e03a      	b.n	8002c46 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a18      	ldr	r2, [pc, #96]	@ (8002c50 <HAL_TIM_Base_Start_IT+0x98>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00e      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0x58>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bfa:	d009      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0x58>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a14      	ldr	r2, [pc, #80]	@ (8002c54 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d004      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0x58>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a13      	ldr	r2, [pc, #76]	@ (8002c58 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d111      	bne.n	8002c34 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d010      	beq.n	8002c44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0201 	orr.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c32:	e007      	b.n	8002c44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	40012c00 	.word	0x40012c00
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40000800 	.word	0x40000800

08002c5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e093      	b.n	8002d98 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d106      	bne.n	8002c8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7fe f873 	bl	8000d70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ca0:	f023 0307 	bic.w	r3, r3, #7
 8002ca4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3304      	adds	r3, #4
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f000 fa69 	bl	8003188 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cde:	f023 0303 	bic.w	r3, r3, #3
 8002ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002cfc:	f023 030c 	bic.w	r3, r3, #12
 8002d00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	011a      	lsls	r2, r3, #4
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	031b      	lsls	r3, r3, #12
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002d3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	4313      	orrs	r3, r2
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d122      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d11b      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0202 	mvn.w	r2, #2
 8002dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9b4 	bl	8003150 <HAL_TIM_IC_CaptureCallback>
 8002de8:	e005      	b.n	8002df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f9a7 	bl	800313e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f9b6 	bl	8003162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d122      	bne.n	8002e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d11b      	bne.n	8002e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0204 	mvn.w	r2, #4
 8002e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2202      	movs	r2, #2
 8002e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f98a 	bl	8003150 <HAL_TIM_IC_CaptureCallback>
 8002e3c:	e005      	b.n	8002e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f97d 	bl	800313e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f98c 	bl	8003162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d122      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d11b      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0208 	mvn.w	r2, #8
 8002e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2204      	movs	r2, #4
 8002e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f960 	bl	8003150 <HAL_TIM_IC_CaptureCallback>
 8002e90:	e005      	b.n	8002e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f953 	bl	800313e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f962 	bl	8003162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b10      	cmp	r3, #16
 8002eb0:	d122      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d11b      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0210 	mvn.w	r2, #16
 8002ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2208      	movs	r2, #8
 8002ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f936 	bl	8003150 <HAL_TIM_IC_CaptureCallback>
 8002ee4:	e005      	b.n	8002ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f929 	bl	800313e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f938 	bl	8003162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d10e      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d107      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0201 	mvn.w	r2, #1
 8002f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fd fe1e 	bl	8000b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2e:	2b80      	cmp	r3, #128	@ 0x80
 8002f30:	d10e      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3c:	2b80      	cmp	r3, #128	@ 0x80
 8002f3e:	d107      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fa7b 	bl	8003446 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5a:	2b40      	cmp	r3, #64	@ 0x40
 8002f5c:	d10e      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f68:	2b40      	cmp	r3, #64	@ 0x40
 8002f6a:	d107      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f8fc 	bl	8003174 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d10e      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d107      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0220 	mvn.w	r2, #32
 8002fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa46 	bl	8003434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_TIM_ConfigClockSource+0x1c>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e0b4      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x186>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003004:	d03e      	beq.n	8003084 <HAL_TIM_ConfigClockSource+0xd4>
 8003006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800300a:	f200 8087 	bhi.w	800311c <HAL_TIM_ConfigClockSource+0x16c>
 800300e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003012:	f000 8086 	beq.w	8003122 <HAL_TIM_ConfigClockSource+0x172>
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800301a:	d87f      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x16c>
 800301c:	2b70      	cmp	r3, #112	@ 0x70
 800301e:	d01a      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0xa6>
 8003020:	2b70      	cmp	r3, #112	@ 0x70
 8003022:	d87b      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x16c>
 8003024:	2b60      	cmp	r3, #96	@ 0x60
 8003026:	d050      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x11a>
 8003028:	2b60      	cmp	r3, #96	@ 0x60
 800302a:	d877      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x16c>
 800302c:	2b50      	cmp	r3, #80	@ 0x50
 800302e:	d03c      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0xfa>
 8003030:	2b50      	cmp	r3, #80	@ 0x50
 8003032:	d873      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x16c>
 8003034:	2b40      	cmp	r3, #64	@ 0x40
 8003036:	d058      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x13a>
 8003038:	2b40      	cmp	r3, #64	@ 0x40
 800303a:	d86f      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x16c>
 800303c:	2b30      	cmp	r3, #48	@ 0x30
 800303e:	d064      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x15a>
 8003040:	2b30      	cmp	r3, #48	@ 0x30
 8003042:	d86b      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x16c>
 8003044:	2b20      	cmp	r3, #32
 8003046:	d060      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x15a>
 8003048:	2b20      	cmp	r3, #32
 800304a:	d867      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x16c>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d05c      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x15a>
 8003050:	2b10      	cmp	r3, #16
 8003052:	d05a      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x15a>
 8003054:	e062      	b.n	800311c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003066:	f000 f968 	bl	800333a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	609a      	str	r2, [r3, #8]
      break;
 8003082:	e04f      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003094:	f000 f951 	bl	800333a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030a6:	609a      	str	r2, [r3, #8]
      break;
 80030a8:	e03c      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b6:	461a      	mov	r2, r3
 80030b8:	f000 f8c8 	bl	800324c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2150      	movs	r1, #80	@ 0x50
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f91f 	bl	8003306 <TIM_ITRx_SetConfig>
      break;
 80030c8:	e02c      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d6:	461a      	mov	r2, r3
 80030d8:	f000 f8e6 	bl	80032a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2160      	movs	r1, #96	@ 0x60
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f90f 	bl	8003306 <TIM_ITRx_SetConfig>
      break;
 80030e8:	e01c      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f6:	461a      	mov	r2, r3
 80030f8:	f000 f8a8 	bl	800324c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2140      	movs	r1, #64	@ 0x40
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f8ff 	bl	8003306 <TIM_ITRx_SetConfig>
      break;
 8003108:	e00c      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4619      	mov	r1, r3
 8003114:	4610      	mov	r0, r2
 8003116:	f000 f8f6 	bl	8003306 <TIM_ITRx_SetConfig>
      break;
 800311a:	e003      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
      break;
 8003120:	e000      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr

08003162 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr
	...

08003188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a29      	ldr	r2, [pc, #164]	@ (8003240 <TIM_Base_SetConfig+0xb8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00b      	beq.n	80031b8 <TIM_Base_SetConfig+0x30>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a6:	d007      	beq.n	80031b8 <TIM_Base_SetConfig+0x30>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a26      	ldr	r2, [pc, #152]	@ (8003244 <TIM_Base_SetConfig+0xbc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d003      	beq.n	80031b8 <TIM_Base_SetConfig+0x30>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a25      	ldr	r2, [pc, #148]	@ (8003248 <TIM_Base_SetConfig+0xc0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d108      	bne.n	80031ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003240 <TIM_Base_SetConfig+0xb8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00b      	beq.n	80031ea <TIM_Base_SetConfig+0x62>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d8:	d007      	beq.n	80031ea <TIM_Base_SetConfig+0x62>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a19      	ldr	r2, [pc, #100]	@ (8003244 <TIM_Base_SetConfig+0xbc>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d003      	beq.n	80031ea <TIM_Base_SetConfig+0x62>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a18      	ldr	r2, [pc, #96]	@ (8003248 <TIM_Base_SetConfig+0xc0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d108      	bne.n	80031fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a07      	ldr	r2, [pc, #28]	@ (8003240 <TIM_Base_SetConfig+0xb8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d103      	bne.n	8003230 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	615a      	str	r2, [r3, #20]
}
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	40012c00 	.word	0x40012c00
 8003244:	40000400 	.word	0x40000400
 8003248:	40000800 	.word	0x40000800

0800324c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f023 0201 	bic.w	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f023 030a 	bic.w	r3, r3, #10
 8003288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	621a      	str	r2, [r3, #32]
}
 800329e:	bf00      	nop
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f023 0210 	bic.w	r2, r3, #16
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80032d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	031b      	lsls	r3, r3, #12
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	621a      	str	r2, [r3, #32]
}
 80032fc:	bf00      	nop
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800331c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	f043 0307 	orr.w	r3, r3, #7
 8003328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	609a      	str	r2, [r3, #8]
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800333a:	b480      	push	{r7}
 800333c:	b087      	sub	sp, #28
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
 8003346:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003354:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	021a      	lsls	r2, r3, #8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	431a      	orrs	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4313      	orrs	r3, r2
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	609a      	str	r2, [r3, #8]
}
 800336e:	bf00      	nop
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800338c:	2302      	movs	r3, #2
 800338e:	e046      	b.n	800341e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a16      	ldr	r2, [pc, #88]	@ (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00e      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033dc:	d009      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a12      	ldr	r2, [pc, #72]	@ (800342c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d004      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a10      	ldr	r2, [pc, #64]	@ (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d10c      	bne.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	4313      	orrs	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr
 8003428:	40012c00 	.word	0x40012c00
 800342c:	40000400 	.word	0x40000400
 8003430:	40000800 	.word	0x40000800

08003434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e042      	b.n	80034f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd fcb2 	bl	8000de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2224      	movs	r2, #36	@ 0x24
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800349a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fdc5 	bl	800402c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695a      	ldr	r2, [r3, #20]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	@ 0x28
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b20      	cmp	r3, #32
 8003516:	d16d      	bne.n	80035f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_UART_Transmit+0x2c>
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e066      	b.n	80035f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2221      	movs	r2, #33	@ 0x21
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003536:	f7fd fe11 	bl	800115c <HAL_GetTick>
 800353a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	88fa      	ldrh	r2, [r7, #6]
 8003540:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	88fa      	ldrh	r2, [r7, #6]
 8003546:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003550:	d108      	bne.n	8003564 <HAL_UART_Transmit+0x6c>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d104      	bne.n	8003564 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	e003      	b.n	800356c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003568:	2300      	movs	r3, #0
 800356a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800356c:	e02a      	b.n	80035c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	2180      	movs	r1, #128	@ 0x80
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 fb14 	bl	8003ba6 <UART_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e036      	b.n	80035f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10b      	bne.n	80035a6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800359c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	3302      	adds	r3, #2
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	e007      	b.n	80035b6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	3301      	adds	r3, #1
 80035b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1cf      	bne.n	800356e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	2140      	movs	r1, #64	@ 0x40
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fae4 	bl	8003ba6 <UART_WaitOnFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e006      	b.n	80035f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	4613      	mov	r3, r2
 800360a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b20      	cmp	r3, #32
 8003616:	d112      	bne.n	800363e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_UART_Receive_IT+0x26>
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e00b      	b.n	8003640 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	461a      	mov	r2, r3
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fb24 	bl	8003c82 <UART_Start_Receive_IT>
 800363a:	4603      	mov	r3, r0
 800363c:	e000      	b.n	8003640 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800363e:	2302      	movs	r3, #2
  }
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b0ba      	sub	sp, #232	@ 0xe8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003674:	2300      	movs	r3, #0
 8003676:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800367a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10f      	bne.n	80036ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800368e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_UART_IRQHandler+0x66>
 800369a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fc01 	bl	8003eae <UART_Receive_IT>
      return;
 80036ac:	e25b      	b.n	8003b66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80de 	beq.w	8003874 <HAL_UART_IRQHandler+0x22c>
 80036b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d106      	bne.n	80036d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80d1 	beq.w	8003874 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_UART_IRQHandler+0xae>
 80036de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ee:	f043 0201 	orr.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_UART_IRQHandler+0xd2>
 8003702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	f043 0202 	orr.w	r2, r3, #2
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800371a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00b      	beq.n	800373e <HAL_UART_IRQHandler+0xf6>
 8003726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003736:	f043 0204 	orr.w	r2, r3, #4
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800373e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d011      	beq.n	800376e <HAL_UART_IRQHandler+0x126>
 800374a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d105      	bne.n	8003762 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	f043 0208 	orr.w	r2, r3, #8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 81f2 	beq.w	8003b5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_UART_IRQHandler+0x14e>
 8003784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 fb8c 	bl	8003eae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <HAL_UART_IRQHandler+0x17a>
 80037ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d04f      	beq.n	8003862 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa96 	bl	8003cf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d041      	beq.n	800385a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3314      	adds	r3, #20
 80037dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3314      	adds	r3, #20
 80037fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003802:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800380e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800381a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1d9      	bne.n	80037d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d013      	beq.n	8003852 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a28 <HAL_UART_IRQHandler+0x3e0>)
 8003830:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003836:	4618      	mov	r0, r3
 8003838:	f7fd fdd8 	bl	80013ec <HAL_DMA_Abort_IT>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d016      	beq.n	8003870 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800384c:	4610      	mov	r0, r2
 800384e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	e00e      	b.n	8003870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f993 	bl	8003b7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	e00a      	b.n	8003870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f98f 	bl	8003b7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	e006      	b.n	8003870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f98b 	bl	8003b7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800386e:	e175      	b.n	8003b5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003870:	bf00      	nop
    return;
 8003872:	e173      	b.n	8003b5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003878:	2b01      	cmp	r3, #1
 800387a:	f040 814f 	bne.w	8003b1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800387e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8148 	beq.w	8003b1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800388c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8141 	beq.w	8003b1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80b6 	beq.w	8003a2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8145 	beq.w	8003b60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038de:	429a      	cmp	r2, r3
 80038e0:	f080 813e 	bcs.w	8003b60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	f000 8088 	beq.w	8003a08 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003906:	e853 3f00 	ldrex	r3, [r3]
 800390a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800390e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003912:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003916:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	330c      	adds	r3, #12
 8003920:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003924:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003928:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003930:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800393c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1d9      	bne.n	80038f8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3314      	adds	r3, #20
 800394a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800394e:	e853 3f00 	ldrex	r3, [r3]
 8003952:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003954:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3314      	adds	r3, #20
 8003964:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003968:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800396c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003970:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003974:	e841 2300 	strex	r3, r2, [r1]
 8003978:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800397a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e1      	bne.n	8003944 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3314      	adds	r3, #20
 8003986:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003990:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003992:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003996:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3314      	adds	r3, #20
 80039a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039a4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039ac:	e841 2300 	strex	r3, r2, [r1]
 80039b0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e3      	bne.n	8003980 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	330c      	adds	r3, #12
 80039cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039d8:	f023 0310 	bic.w	r3, r3, #16
 80039dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039ec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039f2:	e841 2300 	strex	r3, r2, [r1]
 80039f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1e3      	bne.n	80039c6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd fcb7 	bl	8001376 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f8b6 	bl	8003b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a24:	e09c      	b.n	8003b60 <HAL_UART_IRQHandler+0x518>
 8003a26:	bf00      	nop
 8003a28:	08003db9 	.word	0x08003db9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 808e 	beq.w	8003b64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8089 	beq.w	8003b64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	330c      	adds	r3, #12
 8003a58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a76:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e3      	bne.n	8003a52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	623b      	str	r3, [r7, #32]
   return(result);
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3314      	adds	r3, #20
 8003aaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003aae:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e3      	bne.n	8003a8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0310 	bic.w	r3, r3, #16
 8003ae6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003af4:	61fa      	str	r2, [r7, #28]
 8003af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	69b9      	ldr	r1, [r7, #24]
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	617b      	str	r3, [r7, #20]
   return(result);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e3      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f83b 	bl	8003b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b1a:	e023      	b.n	8003b64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d009      	beq.n	8003b3c <HAL_UART_IRQHandler+0x4f4>
 8003b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f953 	bl	8003de0 <UART_Transmit_IT>
    return;
 8003b3a:	e014      	b.n	8003b66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00e      	beq.n	8003b66 <HAL_UART_IRQHandler+0x51e>
 8003b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f992 	bl	8003e7e <UART_EndTransmit_IT>
    return;
 8003b5a:	e004      	b.n	8003b66 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b5c:	bf00      	nop
 8003b5e:	e002      	b.n	8003b66 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b60:	bf00      	nop
 8003b62:	e000      	b.n	8003b66 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b64:	bf00      	nop
  }
}
 8003b66:	37e8      	adds	r7, #232	@ 0xe8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr

08003b7e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr

08003ba6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b090      	sub	sp, #64	@ 0x40
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb6:	e050      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbe:	d04c      	beq.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d007      	beq.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bc6:	f7fd fac9 	bl	800115c <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d241      	bcs.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	330c      	adds	r3, #12
 8003bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	330c      	adds	r3, #12
 8003bf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bf6:	637a      	str	r2, [r7, #52]	@ 0x34
 8003bf8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e5      	bne.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3314      	adds	r3, #20
 8003c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	613b      	str	r3, [r7, #16]
   return(result);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3314      	adds	r3, #20
 8003c28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c2a:	623a      	str	r2, [r7, #32]
 8003c2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	69f9      	ldr	r1, [r7, #28]
 8003c30:	6a3a      	ldr	r2, [r7, #32]
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e5      	bne.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e00f      	b.n	8003c7a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4013      	ands	r3, r2
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	bf0c      	ite	eq
 8003c6a:	2301      	moveq	r3, #1
 8003c6c:	2300      	movne	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d09f      	beq.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3740      	adds	r7, #64	@ 0x40
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	88fa      	ldrh	r2, [r7, #6]
 8003c9a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	88fa      	ldrh	r2, [r7, #6]
 8003ca0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2222      	movs	r2, #34	@ 0x22
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cc6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0220 	orr.w	r2, r2, #32
 8003ce6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b095      	sub	sp, #84	@ 0x54
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	330c      	adds	r3, #12
 8003d02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d06:	e853 3f00 	ldrex	r3, [r3]
 8003d0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d1c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e5      	bne.n	8003cfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3314      	adds	r3, #20
 8003d36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3314      	adds	r3, #20
 8003d4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e5      	bne.n	8003d30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d119      	bne.n	8003da0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f023 0310 	bic.w	r3, r3, #16
 8003d82:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d8c:	61ba      	str	r2, [r7, #24]
 8003d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6979      	ldr	r1, [r7, #20]
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	613b      	str	r3, [r7, #16]
   return(result);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e5      	bne.n	8003d6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003dae:	bf00      	nop
 8003db0:	3754      	adds	r7, #84	@ 0x54
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f7ff fed3 	bl	8003b7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b21      	cmp	r3, #33	@ 0x21
 8003df2:	d13e      	bne.n	8003e72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dfc:	d114      	bne.n	8003e28 <UART_Transmit_IT+0x48>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d110      	bne.n	8003e28 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	1c9a      	adds	r2, r3, #2
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	621a      	str	r2, [r3, #32]
 8003e26:	e008      	b.n	8003e3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	1c59      	adds	r1, r3, #1
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6211      	str	r1, [r2, #32]
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	4619      	mov	r1, r3
 8003e48:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10f      	bne.n	8003e6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e000      	b.n	8003e74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e72:	2302      	movs	r3, #2
  }
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr

08003e7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff fe64 	bl	8003b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b08c      	sub	sp, #48	@ 0x30
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b22      	cmp	r3, #34	@ 0x22
 8003ec0:	f040 80ae 	bne.w	8004020 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ecc:	d117      	bne.n	8003efe <UART_Receive_IT+0x50>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d113      	bne.n	8003efe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ede:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef6:	1c9a      	adds	r2, r3, #2
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	629a      	str	r2, [r3, #40]	@ 0x28
 8003efc:	e026      	b.n	8003f4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f10:	d007      	beq.n	8003f22 <UART_Receive_IT+0x74>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <UART_Receive_IT+0x82>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	e008      	b.n	8003f42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d15d      	bne.n	800401c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0220 	bic.w	r2, r2, #32
 8003f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d135      	bne.n	8004012 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	613b      	str	r3, [r7, #16]
   return(result);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f023 0310 	bic.w	r3, r3, #16
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fcc:	623a      	str	r2, [r7, #32]
 8003fce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	69f9      	ldr	r1, [r7, #28]
 8003fd2:	6a3a      	ldr	r2, [r7, #32]
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e5      	bne.n	8003fac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d10a      	bne.n	8004004 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004008:	4619      	mov	r1, r3
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff fdc0 	bl	8003b90 <HAL_UARTEx_RxEventCallback>
 8004010:	e002      	b.n	8004018 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fc f9b2 	bl	800037c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	e002      	b.n	8004022 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004020:	2302      	movs	r3, #2
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3730      	adds	r7, #48	@ 0x30
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004066:	f023 030c 	bic.w	r3, r3, #12
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	430b      	orrs	r3, r1
 8004072:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a2c      	ldr	r2, [pc, #176]	@ (8004140 <UART_SetConfig+0x114>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d103      	bne.n	800409c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004094:	f7fe fc5a 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	e002      	b.n	80040a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800409c:	f7fe fc42 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 80040a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	009a      	lsls	r2, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	4a22      	ldr	r2, [pc, #136]	@ (8004144 <UART_SetConfig+0x118>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	0119      	lsls	r1, r3, #4
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009a      	lsls	r2, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <UART_SetConfig+0x118>)
 80040da:	fba3 0302 	umull	r0, r3, r3, r2
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2064      	movs	r0, #100	@ 0x64
 80040e2:	fb00 f303 	mul.w	r3, r0, r3
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	3332      	adds	r3, #50	@ 0x32
 80040ec:	4a15      	ldr	r2, [pc, #84]	@ (8004144 <UART_SetConfig+0x118>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040f8:	4419      	add	r1, r3
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009a      	lsls	r2, r3, #2
 8004104:	441a      	add	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004110:	4b0c      	ldr	r3, [pc, #48]	@ (8004144 <UART_SetConfig+0x118>)
 8004112:	fba3 0302 	umull	r0, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2064      	movs	r0, #100	@ 0x64
 800411a:	fb00 f303 	mul.w	r3, r0, r3
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	3332      	adds	r3, #50	@ 0x32
 8004124:	4a07      	ldr	r2, [pc, #28]	@ (8004144 <UART_SetConfig+0x118>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	f003 020f 	and.w	r2, r3, #15
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	440a      	add	r2, r1
 8004136:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40013800 	.word	0x40013800
 8004144:	51eb851f 	.word	0x51eb851f

08004148 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800415a:	2b84      	cmp	r3, #132	@ 0x84
 800415c:	d005      	beq.n	800416a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800415e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4413      	add	r3, r2
 8004166:	3303      	adds	r3, #3
 8004168:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800416a:	68fb      	ldr	r3, [r7, #12]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr

08004176 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800417c:	f3ef 8305 	mrs	r3, IPSR
 8004180:	607b      	str	r3, [r7, #4]
  return(result);
 8004182:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf14      	ite	ne
 8004188:	2301      	movne	r3, #1
 800418a:	2300      	moveq	r3, #0
 800418c:	b2db      	uxtb	r3, r3
}
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800419c:	f001 fa16 	bl	80055cc <vTaskStartScheduler>
  
  return osOK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80041a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041a8:	b089      	sub	sp, #36	@ 0x24
 80041aa:	af04      	add	r7, sp, #16
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d020      	beq.n	80041fa <osThreadCreate+0x54>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01c      	beq.n	80041fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685c      	ldr	r4, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691e      	ldr	r6, [r3, #16]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff ffb8 	bl	8004148 <makeFreeRtosPriority>
 80041d8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041e2:	9202      	str	r2, [sp, #8]
 80041e4:	9301      	str	r3, [sp, #4]
 80041e6:	9100      	str	r1, [sp, #0]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	4632      	mov	r2, r6
 80041ec:	4629      	mov	r1, r5
 80041ee:	4620      	mov	r0, r4
 80041f0:	f000 ff77 	bl	80050e2 <xTaskCreateStatic>
 80041f4:	4603      	mov	r3, r0
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	e01c      	b.n	8004234 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685c      	ldr	r4, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004206:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff ff9a 	bl	8004148 <makeFreeRtosPriority>
 8004214:	4602      	mov	r2, r0
 8004216:	f107 030c 	add.w	r3, r7, #12
 800421a:	9301      	str	r3, [sp, #4]
 800421c:	9200      	str	r2, [sp, #0]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	4632      	mov	r2, r6
 8004222:	4629      	mov	r1, r5
 8004224:	4620      	mov	r0, r4
 8004226:	f000 ffbb 	bl	80051a0 <xTaskCreate>
 800422a:	4603      	mov	r3, r0
 800422c:	2b01      	cmp	r3, #1
 800422e:	d001      	beq.n	8004234 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004230:	2300      	movs	r3, #0
 8004232:	e000      	b.n	8004236 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004234:	68fb      	ldr	r3, [r7, #12]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800423e <osThreadSetPriority>:
* @param   priority      new priority value for the thread function.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	460b      	mov	r3, r1
 8004248:	807b      	strh	r3, [r7, #2]
#if (INCLUDE_vTaskPrioritySet == 1)
  vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 800424a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff ff7a 	bl	8004148 <makeFreeRtosPriority>
 8004254:	4603      	mov	r3, r0
 8004256:	4619      	mov	r1, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f001 f907 	bl	800546c <vTaskPrioritySet>
  return osOK;
 800425e:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <osDelay+0x16>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	e000      	b.n	8004280 <osDelay+0x18>
 800427e:	2301      	movs	r3, #1
 8004280:	4618      	mov	r0, r3
 8004282:	f001 f8bd 	bl	8005400 <vTaskDelay>
  
  return osOK;
 8004286:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	4619      	mov	r1, r3
 80042a6:	2001      	movs	r0, #1
 80042a8:	f000 fab4 	bl	8004814 <xQueueCreateMutexStatic>
 80042ac:	4603      	mov	r3, r0
 80042ae:	e003      	b.n	80042b8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80042b0:	2001      	movs	r0, #1
 80042b2:	f000 fa97 	bl	80047e4 <xQueueCreateMutex>
 80042b6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80042ca:	2300      	movs	r3, #0
 80042cc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <osMutexWait+0x18>
    return osErrorParameter;
 80042d4:	2380      	movs	r3, #128	@ 0x80
 80042d6:	e03a      	b.n	800434e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e2:	d103      	bne.n	80042ec <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80042e4:	f04f 33ff 	mov.w	r3, #4294967295
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	e009      	b.n	8004300 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d006      	beq.n	8004300 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <osMutexWait+0x40>
      ticks = 1;
 80042fc:	2301      	movs	r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004300:	f7ff ff39 	bl	8004176 <inHandlerMode>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d017      	beq.n	800433a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800430a:	f107 0308 	add.w	r3, r7, #8
 800430e:	461a      	mov	r2, r3
 8004310:	2100      	movs	r1, #0
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fd3c 	bl	8004d90 <xQueueReceiveFromISR>
 8004318:	4603      	mov	r3, r0
 800431a:	2b01      	cmp	r3, #1
 800431c:	d001      	beq.n	8004322 <osMutexWait+0x62>
      return osErrorOS;
 800431e:	23ff      	movs	r3, #255	@ 0xff
 8004320:	e015      	b.n	800434e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d011      	beq.n	800434c <osMutexWait+0x8c>
 8004328:	4b0b      	ldr	r3, [pc, #44]	@ (8004358 <osMutexWait+0x98>)
 800432a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	e008      	b.n	800434c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800433a:	68f9      	ldr	r1, [r7, #12]
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fc17 	bl	8004b70 <xQueueSemaphoreTake>
 8004342:	4603      	mov	r3, r0
 8004344:	2b01      	cmp	r3, #1
 8004346:	d001      	beq.n	800434c <osMutexWait+0x8c>
    return osErrorOS;
 8004348:	23ff      	movs	r3, #255	@ 0xff
 800434a:	e000      	b.n	800434e <osMutexWait+0x8e>
  }
  
  return osOK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004368:	2300      	movs	r3, #0
 800436a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800436c:	f7ff ff03 	bl	8004176 <inHandlerMode>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004376:	f107 0308 	add.w	r3, r7, #8
 800437a:	4619      	mov	r1, r3
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fb67 	bl	8004a50 <xQueueGiveFromISR>
 8004382:	4603      	mov	r3, r0
 8004384:	2b01      	cmp	r3, #1
 8004386:	d001      	beq.n	800438c <osMutexRelease+0x30>
      return osErrorOS;
 8004388:	23ff      	movs	r3, #255	@ 0xff
 800438a:	e017      	b.n	80043bc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d013      	beq.n	80043ba <osMutexRelease+0x5e>
 8004392:	4b0c      	ldr	r3, [pc, #48]	@ (80043c4 <osMutexRelease+0x68>)
 8004394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	e00a      	b.n	80043ba <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80043a4:	2300      	movs	r3, #0
 80043a6:	2200      	movs	r2, #0
 80043a8:	2100      	movs	r1, #0
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fa4e 	bl	800484c <xQueueGenericSend>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d001      	beq.n	80043ba <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80043b6:	23ff      	movs	r3, #255	@ 0xff
 80043b8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80043ba:	68fb      	ldr	r3, [r7, #12]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f103 0208 	add.w	r2, r3, #8
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f04f 32ff 	mov.w	r2, #4294967295
 80043e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f103 0208 	add.w	r2, r3, #8
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f103 0208 	add.w	r2, r3, #8
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr

08004406 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr

0800441e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800441e:	b480      	push	{r7}
 8004420:	b085      	sub	sp, #20
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	601a      	str	r2, [r3, #0]
}
 800445a:	bf00      	nop
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d103      	bne.n	8004484 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	e00c      	b.n	800449e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3308      	adds	r3, #8
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	e002      	b.n	8004492 <vListInsert+0x2e>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	429a      	cmp	r2, r3
 800449c:	d2f6      	bcs.n	800448c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	601a      	str	r2, [r3, #0]
}
 80044ca:	bf00      	nop
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr

080044d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6892      	ldr	r2, [r2, #8]
 80044ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6852      	ldr	r2, [r2, #4]
 80044f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d103      	bne.n	8004508 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	1e5a      	subs	r2, r3, #1
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr
	...

08004528 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10b      	bne.n	8004554 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800454e:	bf00      	nop
 8004550:	bf00      	nop
 8004552:	e7fd      	b.n	8004550 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004554:	f001 ff82 	bl	800645c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004560:	68f9      	ldr	r1, [r7, #12]
 8004562:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	441a      	add	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004584:	3b01      	subs	r3, #1
 8004586:	68f9      	ldr	r1, [r7, #12]
 8004588:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	441a      	add	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	22ff      	movs	r2, #255	@ 0xff
 8004598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	22ff      	movs	r2, #255	@ 0xff
 80045a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d114      	bne.n	80045d4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d01a      	beq.n	80045e8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3310      	adds	r3, #16
 80045b6:	4618      	mov	r0, r3
 80045b8:	f001 fa56 	bl	8005a68 <xTaskRemoveFromEventList>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d012      	beq.n	80045e8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045c2:	4b0d      	ldr	r3, [pc, #52]	@ (80045f8 <xQueueGenericReset+0xd0>)
 80045c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	e009      	b.n	80045e8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3310      	adds	r3, #16
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff fef5 	bl	80043c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3324      	adds	r3, #36	@ 0x24
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff fef0 	bl	80043c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045e8:	f001 ff68 	bl	80064bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045ec:	2301      	movs	r3, #1
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08e      	sub	sp, #56	@ 0x38
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10b      	bne.n	8004628 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	e7fd      	b.n	8004624 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10b      	bne.n	8004646 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	e7fd      	b.n	8004642 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <xQueueGenericCreateStatic+0x56>
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <xQueueGenericCreateStatic+0x5a>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <xQueueGenericCreateStatic+0x5c>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10b      	bne.n	8004674 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	623b      	str	r3, [r7, #32]
}
 800466e:	bf00      	nop
 8004670:	bf00      	nop
 8004672:	e7fd      	b.n	8004670 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d102      	bne.n	8004680 <xQueueGenericCreateStatic+0x84>
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <xQueueGenericCreateStatic+0x88>
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <xQueueGenericCreateStatic+0x8a>
 8004684:	2300      	movs	r3, #0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10b      	bne.n	80046a2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	61fb      	str	r3, [r7, #28]
}
 800469c:	bf00      	nop
 800469e:	bf00      	nop
 80046a0:	e7fd      	b.n	800469e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046a2:	2348      	movs	r3, #72	@ 0x48
 80046a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b48      	cmp	r3, #72	@ 0x48
 80046aa:	d00b      	beq.n	80046c4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	61bb      	str	r3, [r7, #24]
}
 80046be:	bf00      	nop
 80046c0:	bf00      	nop
 80046c2:	e7fd      	b.n	80046c0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80046c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00d      	beq.n	80046ea <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046d6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80046da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	4613      	mov	r3, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 f844 	bl	8004772 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80046ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3730      	adds	r7, #48	@ 0x30
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	@ 0x28
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	4613      	mov	r3, r2
 8004700:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	613b      	str	r3, [r7, #16]
}
 800471a:	bf00      	nop
 800471c:	bf00      	nop
 800471e:	e7fd      	b.n	800471c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d102      	bne.n	800472c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	e004      	b.n	8004736 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	fb02 f303 	mul.w	r3, r2, r3
 8004734:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	3348      	adds	r3, #72	@ 0x48
 800473a:	4618      	mov	r0, r3
 800473c:	f001 ff90 	bl	8006660 <pvPortMalloc>
 8004740:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00f      	beq.n	8004768 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	3348      	adds	r3, #72	@ 0x48
 800474c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004756:	79fa      	ldrb	r2, [r7, #7]
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f805 	bl	8004772 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004768:	69bb      	ldr	r3, [r7, #24]
	}
 800476a:	4618      	mov	r0, r3
 800476c:	3720      	adds	r7, #32
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d103      	bne.n	800478e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	e002      	b.n	8004794 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047a0:	2101      	movs	r1, #1
 80047a2:	69b8      	ldr	r0, [r7, #24]
 80047a4:	f7ff fec0 	bl	8004528 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00e      	beq.n	80047dc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80047d0:	2300      	movs	r3, #0
 80047d2:	2200      	movs	r2, #0
 80047d4:	2100      	movs	r1, #0
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f838 	bl	800484c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80047dc:	bf00      	nop
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80047ee:	2301      	movs	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	461a      	mov	r2, r3
 80047fa:	6939      	ldr	r1, [r7, #16]
 80047fc:	6978      	ldr	r0, [r7, #20]
 80047fe:	f7ff ff79 	bl	80046f4 <xQueueGenericCreate>
 8004802:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7ff ffd3 	bl	80047b0 <prvInitialiseMutex>

		return pxNewQueue;
 800480a:	68fb      	ldr	r3, [r7, #12]
	}
 800480c:	4618      	mov	r0, r3
 800480e:	3718      	adds	r7, #24
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af02      	add	r7, sp, #8
 800481a:	4603      	mov	r3, r0
 800481c:	6039      	str	r1, [r7, #0]
 800481e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004820:	2301      	movs	r3, #1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2200      	movs	r2, #0
 8004830:	6939      	ldr	r1, [r7, #16]
 8004832:	6978      	ldr	r0, [r7, #20]
 8004834:	f7ff fee2 	bl	80045fc <xQueueGenericCreateStatic>
 8004838:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f7ff ffb8 	bl	80047b0 <prvInitialiseMutex>

		return pxNewQueue;
 8004840:	68fb      	ldr	r3, [r7, #12]
	}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08e      	sub	sp, #56	@ 0x38
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800485a:	2300      	movs	r3, #0
 800485c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10b      	bne.n	8004880 <xQueueGenericSend+0x34>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800487a:	bf00      	nop
 800487c:	bf00      	nop
 800487e:	e7fd      	b.n	800487c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d103      	bne.n	800488e <xQueueGenericSend+0x42>
 8004886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <xQueueGenericSend+0x46>
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <xQueueGenericSend+0x48>
 8004892:	2300      	movs	r3, #0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10b      	bne.n	80048b0 <xQueueGenericSend+0x64>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	e7fd      	b.n	80048ac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d103      	bne.n	80048be <xQueueGenericSend+0x72>
 80048b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <xQueueGenericSend+0x76>
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <xQueueGenericSend+0x78>
 80048c2:	2300      	movs	r3, #0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <xQueueGenericSend+0x94>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	623b      	str	r3, [r7, #32]
}
 80048da:	bf00      	nop
 80048dc:	bf00      	nop
 80048de:	e7fd      	b.n	80048dc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048e0:	f001 fa86 	bl	8005df0 <xTaskGetSchedulerState>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d102      	bne.n	80048f0 <xQueueGenericSend+0xa4>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <xQueueGenericSend+0xa8>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <xQueueGenericSend+0xaa>
 80048f4:	2300      	movs	r3, #0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10b      	bne.n	8004912 <xQueueGenericSend+0xc6>
	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	61fb      	str	r3, [r7, #28]
}
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	e7fd      	b.n	800490e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004912:	f001 fda3 	bl	800645c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800491a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491e:	429a      	cmp	r2, r3
 8004920:	d302      	bcc.n	8004928 <xQueueGenericSend+0xdc>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b02      	cmp	r3, #2
 8004926:	d129      	bne.n	800497c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800492e:	f000 fac8 	bl	8004ec2 <prvCopyDataToQueue>
 8004932:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004938:	2b00      	cmp	r3, #0
 800493a:	d010      	beq.n	800495e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800493c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493e:	3324      	adds	r3, #36	@ 0x24
 8004940:	4618      	mov	r0, r3
 8004942:	f001 f891 	bl	8005a68 <xTaskRemoveFromEventList>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d013      	beq.n	8004974 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800494c:	4b3f      	ldr	r3, [pc, #252]	@ (8004a4c <xQueueGenericSend+0x200>)
 800494e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	e00a      	b.n	8004974 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800495e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004964:	4b39      	ldr	r3, [pc, #228]	@ (8004a4c <xQueueGenericSend+0x200>)
 8004966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004974:	f001 fda2 	bl	80064bc <vPortExitCritical>
				return pdPASS;
 8004978:	2301      	movs	r3, #1
 800497a:	e063      	b.n	8004a44 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d103      	bne.n	800498a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004982:	f001 fd9b 	bl	80064bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004986:	2300      	movs	r3, #0
 8004988:	e05c      	b.n	8004a44 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800498a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800498c:	2b00      	cmp	r3, #0
 800498e:	d106      	bne.n	800499e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004990:	f107 0314 	add.w	r3, r7, #20
 8004994:	4618      	mov	r0, r3
 8004996:	f001 f8cb 	bl	8005b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800499a:	2301      	movs	r3, #1
 800499c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800499e:	f001 fd8d 	bl	80064bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049a2:	f000 fe75 	bl	8005690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049a6:	f001 fd59 	bl	800645c <vPortEnterCritical>
 80049aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049b0:	b25b      	sxtb	r3, r3
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d103      	bne.n	80049c0 <xQueueGenericSend+0x174>
 80049b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049c6:	b25b      	sxtb	r3, r3
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d103      	bne.n	80049d6 <xQueueGenericSend+0x18a>
 80049ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049d6:	f001 fd71 	bl	80064bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049da:	1d3a      	adds	r2, r7, #4
 80049dc:	f107 0314 	add.w	r3, r7, #20
 80049e0:	4611      	mov	r1, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f001 f8ba 	bl	8005b5c <xTaskCheckForTimeOut>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d124      	bne.n	8004a38 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049f0:	f000 fb5f 	bl	80050b2 <prvIsQueueFull>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d018      	beq.n	8004a2c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fc:	3310      	adds	r3, #16
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4611      	mov	r1, r2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f001 f80a 	bl	8005a1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a0a:	f000 faea 	bl	8004fe2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a0e:	f000 fe4d 	bl	80056ac <xTaskResumeAll>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f47f af7c 	bne.w	8004912 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a4c <xQueueGenericSend+0x200>)
 8004a1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	e772      	b.n	8004912 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a2e:	f000 fad8 	bl	8004fe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a32:	f000 fe3b 	bl	80056ac <xTaskResumeAll>
 8004a36:	e76c      	b.n	8004912 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a3a:	f000 fad2 	bl	8004fe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a3e:	f000 fe35 	bl	80056ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a42:	2300      	movs	r3, #0
		}
	}
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3738      	adds	r7, #56	@ 0x38
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	e000ed04 	.word	0xe000ed04

08004a50 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08e      	sub	sp, #56	@ 0x38
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	623b      	str	r3, [r7, #32]
}
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
 8004a7a:	e7fd      	b.n	8004a78 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00b      	beq.n	8004a9c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	61fb      	str	r3, [r7, #28]
}
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	e7fd      	b.n	8004a98 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d103      	bne.n	8004aac <xQueueGiveFromISR+0x5c>
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <xQueueGiveFromISR+0x60>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <xQueueGiveFromISR+0x62>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10b      	bne.n	8004ace <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	61bb      	str	r3, [r7, #24]
}
 8004ac8:	bf00      	nop
 8004aca:	bf00      	nop
 8004acc:	e7fd      	b.n	8004aca <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ace:	f001 fd87 	bl	80065e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ad2:	f3ef 8211 	mrs	r2, BASEPRI
 8004ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	617a      	str	r2, [r7, #20]
 8004ae8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004aea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d22b      	bcs.n	8004b56 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b18:	d112      	bne.n	8004b40 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d016      	beq.n	8004b50 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b24:	3324      	adds	r3, #36	@ 0x24
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 ff9e 	bl	8005a68 <xTaskRemoveFromEventList>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00e      	beq.n	8004b50 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00b      	beq.n	8004b50 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e007      	b.n	8004b50 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b44:	3301      	adds	r3, #1
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	b25a      	sxtb	r2, r3
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004b50:	2301      	movs	r3, #1
 8004b52:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b54:	e001      	b.n	8004b5a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3738      	adds	r7, #56	@ 0x38
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08e      	sub	sp, #56	@ 0x38
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10b      	bne.n	8004ba4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	623b      	str	r3, [r7, #32]
}
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
 8004ba2:	e7fd      	b.n	8004ba0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00b      	beq.n	8004bc4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	61fb      	str	r3, [r7, #28]
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bc4:	f001 f914 	bl	8005df0 <xTaskGetSchedulerState>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <xQueueSemaphoreTake+0x64>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <xQueueSemaphoreTake+0x68>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <xQueueSemaphoreTake+0x6a>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10b      	bne.n	8004bf6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	61bb      	str	r3, [r7, #24]
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	e7fd      	b.n	8004bf2 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bf6:	f001 fc31 	bl	800645c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d024      	beq.n	8004c50 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	1e5a      	subs	r2, r3, #1
 8004c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c0c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d104      	bne.n	8004c20 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004c16:	f001 fab9 	bl	800618c <pvTaskIncrementMutexHeldCount>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c1e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00f      	beq.n	8004c48 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2a:	3310      	adds	r3, #16
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 ff1b 	bl	8005a68 <xTaskRemoveFromEventList>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c38:	4b54      	ldr	r3, [pc, #336]	@ (8004d8c <xQueueSemaphoreTake+0x21c>)
 8004c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c48:	f001 fc38 	bl	80064bc <vPortExitCritical>
				return pdPASS;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e098      	b.n	8004d82 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d112      	bne.n	8004c7c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00b      	beq.n	8004c74 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	617b      	str	r3, [r7, #20]
}
 8004c6e:	bf00      	nop
 8004c70:	bf00      	nop
 8004c72:	e7fd      	b.n	8004c70 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004c74:	f001 fc22 	bl	80064bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e082      	b.n	8004d82 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c82:	f107 030c 	add.w	r3, r7, #12
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 ff52 	bl	8005b30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c90:	f001 fc14 	bl	80064bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c94:	f000 fcfc 	bl	8005690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c98:	f001 fbe0 	bl	800645c <vPortEnterCritical>
 8004c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ca2:	b25b      	sxtb	r3, r3
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d103      	bne.n	8004cb2 <xQueueSemaphoreTake+0x142>
 8004caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cb8:	b25b      	sxtb	r3, r3
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbe:	d103      	bne.n	8004cc8 <xQueueSemaphoreTake+0x158>
 8004cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cc8:	f001 fbf8 	bl	80064bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ccc:	463a      	mov	r2, r7
 8004cce:	f107 030c 	add.w	r3, r7, #12
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 ff41 	bl	8005b5c <xTaskCheckForTimeOut>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d132      	bne.n	8004d46 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ce0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ce2:	f000 f9d0 	bl	8005086 <prvIsQueueEmpty>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d026      	beq.n	8004d3a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d109      	bne.n	8004d08 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004cf4:	f001 fbb2 	bl	800645c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 f895 	bl	8005e2c <xTaskPriorityInherit>
 8004d02:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004d04:	f001 fbda 	bl	80064bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d0a:	3324      	adds	r3, #36	@ 0x24
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fe83 	bl	8005a1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d18:	f000 f963 	bl	8004fe2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d1c:	f000 fcc6 	bl	80056ac <xTaskResumeAll>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f47f af67 	bne.w	8004bf6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004d28:	4b18      	ldr	r3, [pc, #96]	@ (8004d8c <xQueueSemaphoreTake+0x21c>)
 8004d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	e75d      	b.n	8004bf6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004d3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d3c:	f000 f951 	bl	8004fe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d40:	f000 fcb4 	bl	80056ac <xTaskResumeAll>
 8004d44:	e757      	b.n	8004bf6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004d46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d48:	f000 f94b 	bl	8004fe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d4c:	f000 fcae 	bl	80056ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d52:	f000 f998 	bl	8005086 <prvIsQueueEmpty>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f43f af4c 	beq.w	8004bf6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004d64:	f001 fb7a 	bl	800645c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004d68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d6a:	f000 f893 	bl	8004e94 <prvGetDisinheritPriorityAfterTimeout>
 8004d6e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d76:	4618      	mov	r0, r3
 8004d78:	f001 f966 	bl	8006048 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004d7c:	f001 fb9e 	bl	80064bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3738      	adds	r7, #56	@ 0x38
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	e000ed04 	.word	0xe000ed04

08004d90 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08e      	sub	sp, #56	@ 0x38
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10b      	bne.n	8004dbe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	623b      	str	r3, [r7, #32]
}
 8004db8:	bf00      	nop
 8004dba:	bf00      	nop
 8004dbc:	e7fd      	b.n	8004dba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d103      	bne.n	8004dcc <xQueueReceiveFromISR+0x3c>
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <xQueueReceiveFromISR+0x40>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <xQueueReceiveFromISR+0x42>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10b      	bne.n	8004dee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	61fb      	str	r3, [r7, #28]
}
 8004de8:	bf00      	nop
 8004dea:	bf00      	nop
 8004dec:	e7fd      	b.n	8004dea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dee:	f001 fbf7 	bl	80065e0 <vPortValidateInterruptPriority>
	__asm volatile
 8004df2:	f3ef 8211 	mrs	r2, BASEPRI
 8004df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	61ba      	str	r2, [r7, #24]
 8004e08:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004e0a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e12:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d02f      	beq.n	8004e7a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e28:	f000 f8b5 	bl	8004f96 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2e:	1e5a      	subs	r2, r3, #1
 8004e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e32:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004e34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3c:	d112      	bne.n	8004e64 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d016      	beq.n	8004e74 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e48:	3310      	adds	r3, #16
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fe0c 	bl	8005a68 <xTaskRemoveFromEventList>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00e      	beq.n	8004e74 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00b      	beq.n	8004e74 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	e007      	b.n	8004e74 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004e64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e68:	3301      	adds	r3, #1
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	b25a      	sxtb	r2, r3
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004e74:	2301      	movs	r3, #1
 8004e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e78:	e001      	b.n	8004e7e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e80:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f383 8811 	msr	BASEPRI, r3
}
 8004e88:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3738      	adds	r7, #56	@ 0x38
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d006      	beq.n	8004eb2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f1c3 0307 	rsb	r3, r3, #7
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	e001      	b.n	8004eb6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
	}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr

08004ec2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b086      	sub	sp, #24
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10d      	bne.n	8004efc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d14d      	bne.n	8004f84 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f001 f823 	bl	8005f38 <xTaskPriorityDisinherit>
 8004ef2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	e043      	b.n	8004f84 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d119      	bne.n	8004f36 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6898      	ldr	r0, [r3, #8]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	f001 fdb1 	bl	8006a74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1a:	441a      	add	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d32b      	bcc.n	8004f84 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	609a      	str	r2, [r3, #8]
 8004f34:	e026      	b.n	8004f84 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	68d8      	ldr	r0, [r3, #12]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	f001 fd97 	bl	8006a74 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	425b      	negs	r3, r3
 8004f50:	441a      	add	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d207      	bcs.n	8004f72 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6a:	425b      	negs	r3, r3
 8004f6c:	441a      	add	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d105      	bne.n	8004f84 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004f8c:	697b      	ldr	r3, [r7, #20]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d018      	beq.n	8004fda <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb0:	441a      	add	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d303      	bcc.n	8004fca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68d9      	ldr	r1, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	6838      	ldr	r0, [r7, #0]
 8004fd6:	f001 fd4d 	bl	8006a74 <memcpy>
	}
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fea:	f001 fa37 	bl	800645c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ff4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ff6:	e011      	b.n	800501c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d012      	beq.n	8005026 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3324      	adds	r3, #36	@ 0x24
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fd2f 	bl	8005a68 <xTaskRemoveFromEventList>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005010:	f000 fe08 	bl	8005c24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	3b01      	subs	r3, #1
 8005018:	b2db      	uxtb	r3, r3
 800501a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800501c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005020:	2b00      	cmp	r3, #0
 8005022:	dce9      	bgt.n	8004ff8 <prvUnlockQueue+0x16>
 8005024:	e000      	b.n	8005028 <prvUnlockQueue+0x46>
					break;
 8005026:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	22ff      	movs	r2, #255	@ 0xff
 800502c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005030:	f001 fa44 	bl	80064bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005034:	f001 fa12 	bl	800645c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800503e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005040:	e011      	b.n	8005066 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d012      	beq.n	8005070 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3310      	adds	r3, #16
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fd0a 	bl	8005a68 <xTaskRemoveFromEventList>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800505a:	f000 fde3 	bl	8005c24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800505e:	7bbb      	ldrb	r3, [r7, #14]
 8005060:	3b01      	subs	r3, #1
 8005062:	b2db      	uxtb	r3, r3
 8005064:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800506a:	2b00      	cmp	r3, #0
 800506c:	dce9      	bgt.n	8005042 <prvUnlockQueue+0x60>
 800506e:	e000      	b.n	8005072 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005070:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	22ff      	movs	r2, #255	@ 0xff
 8005076:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800507a:	f001 fa1f 	bl	80064bc <vPortExitCritical>
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800508e:	f001 f9e5 	bl	800645c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800509a:	2301      	movs	r3, #1
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	e001      	b.n	80050a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050a4:	f001 fa0a 	bl	80064bc <vPortExitCritical>

	return xReturn;
 80050a8:	68fb      	ldr	r3, [r7, #12]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050ba:	f001 f9cf 	bl	800645c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d102      	bne.n	80050d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050ca:	2301      	movs	r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	e001      	b.n	80050d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050d4:	f001 f9f2 	bl	80064bc <vPortExitCritical>

	return xReturn;
 80050d8:	68fb      	ldr	r3, [r7, #12]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b08e      	sub	sp, #56	@ 0x38
 80050e6:	af04      	add	r7, sp, #16
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	607a      	str	r2, [r7, #4]
 80050ee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10b      	bne.n	800510e <xTaskCreateStatic+0x2c>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	623b      	str	r3, [r7, #32]
}
 8005108:	bf00      	nop
 800510a:	bf00      	nop
 800510c:	e7fd      	b.n	800510a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800510e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10b      	bne.n	800512c <xTaskCreateStatic+0x4a>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	61fb      	str	r3, [r7, #28]
}
 8005126:	bf00      	nop
 8005128:	bf00      	nop
 800512a:	e7fd      	b.n	8005128 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800512c:	2354      	movs	r3, #84	@ 0x54
 800512e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b54      	cmp	r3, #84	@ 0x54
 8005134:	d00b      	beq.n	800514e <xTaskCreateStatic+0x6c>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	61bb      	str	r3, [r7, #24]
}
 8005148:	bf00      	nop
 800514a:	bf00      	nop
 800514c:	e7fd      	b.n	800514a <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800514e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01e      	beq.n	8005192 <xTaskCreateStatic+0xb0>
 8005154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01b      	beq.n	8005192 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800515a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005162:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	2202      	movs	r2, #2
 8005168:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800516c:	2300      	movs	r3, #0
 800516e:	9303      	str	r3, [sp, #12]
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	9302      	str	r3, [sp, #8]
 8005174:	f107 0314 	add.w	r3, r7, #20
 8005178:	9301      	str	r3, [sp, #4]
 800517a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f850 	bl	800522a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800518a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800518c:	f000 f8ce 	bl	800532c <prvAddNewTaskToReadyList>
 8005190:	e001      	b.n	8005196 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005196:	697b      	ldr	r3, [r7, #20]
	}
 8005198:	4618      	mov	r0, r3
 800519a:	3728      	adds	r7, #40	@ 0x28
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08c      	sub	sp, #48	@ 0x30
 80051a4:	af04      	add	r7, sp, #16
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	4613      	mov	r3, r2
 80051ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051b0:	88fb      	ldrh	r3, [r7, #6]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f001 fa53 	bl	8006660 <pvPortMalloc>
 80051ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00e      	beq.n	80051e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80051c2:	2054      	movs	r0, #84	@ 0x54
 80051c4:	f001 fa4c 	bl	8006660 <pvPortMalloc>
 80051c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80051d6:	e005      	b.n	80051e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051d8:	6978      	ldr	r0, [r7, #20]
 80051da:	f001 fb09 	bl	80067f0 <vPortFree>
 80051de:	e001      	b.n	80051e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d017      	beq.n	800521a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051f2:	88fa      	ldrh	r2, [r7, #6]
 80051f4:	2300      	movs	r3, #0
 80051f6:	9303      	str	r3, [sp, #12]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	9302      	str	r3, [sp, #8]
 80051fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f80e 	bl	800522a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800520e:	69f8      	ldr	r0, [r7, #28]
 8005210:	f000 f88c 	bl	800532c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005214:	2301      	movs	r3, #1
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	e002      	b.n	8005220 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800521a:	f04f 33ff 	mov.w	r3, #4294967295
 800521e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005220:	69bb      	ldr	r3, [r7, #24]
	}
 8005222:	4618      	mov	r0, r3
 8005224:	3720      	adds	r7, #32
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b088      	sub	sp, #32
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
 8005236:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005242:	3b01      	subs	r3, #1
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	f023 0307 	bic.w	r3, r3, #7
 8005250:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00b      	beq.n	8005274 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	617b      	str	r3, [r7, #20]
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005274:	2300      	movs	r3, #0
 8005276:	61fb      	str	r3, [r7, #28]
 8005278:	e012      	b.n	80052a0 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	4413      	add	r3, r2
 8005280:	7819      	ldrb	r1, [r3, #0]
 8005282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	4413      	add	r3, r2
 8005288:	3334      	adds	r3, #52	@ 0x34
 800528a:	460a      	mov	r2, r1
 800528c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4413      	add	r3, r2
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d006      	beq.n	80052a8 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	3301      	adds	r3, #1
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2b0f      	cmp	r3, #15
 80052a4:	d9e9      	bls.n	800527a <prvInitialiseNewTask+0x50>
 80052a6:	e000      	b.n	80052aa <prvInitialiseNewTask+0x80>
		{
			break;
 80052a8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b4:	2b06      	cmp	r3, #6
 80052b6:	d901      	bls.n	80052bc <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052b8:	2306      	movs	r3, #6
 80052ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052c6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80052c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ca:	2200      	movs	r2, #0
 80052cc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	3304      	adds	r3, #4
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff f897 	bl	8004406 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052da:	3318      	adds	r3, #24
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff f892 	bl	8004406 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ea:	f1c3 0207 	rsb	r2, r3, #7
 80052ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052f6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fa:	2200      	movs	r2, #0
 80052fc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	68f9      	ldr	r1, [r7, #12]
 800530a:	69b8      	ldr	r0, [r7, #24]
 800530c:	f000 ffb8 	bl	8006280 <pxPortInitialiseStack>
 8005310:	4602      	mov	r2, r0
 8005312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005314:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005320:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005322:	bf00      	nop
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005334:	f001 f892 	bl	800645c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005338:	4b2a      	ldr	r3, [pc, #168]	@ (80053e4 <prvAddNewTaskToReadyList+0xb8>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3301      	adds	r3, #1
 800533e:	4a29      	ldr	r2, [pc, #164]	@ (80053e4 <prvAddNewTaskToReadyList+0xb8>)
 8005340:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005342:	4b29      	ldr	r3, [pc, #164]	@ (80053e8 <prvAddNewTaskToReadyList+0xbc>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d109      	bne.n	800535e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800534a:	4a27      	ldr	r2, [pc, #156]	@ (80053e8 <prvAddNewTaskToReadyList+0xbc>)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005350:	4b24      	ldr	r3, [pc, #144]	@ (80053e4 <prvAddNewTaskToReadyList+0xb8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d110      	bne.n	800537a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005358:	f000 fc88 	bl	8005c6c <prvInitialiseTaskLists>
 800535c:	e00d      	b.n	800537a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800535e:	4b23      	ldr	r3, [pc, #140]	@ (80053ec <prvAddNewTaskToReadyList+0xc0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005366:	4b20      	ldr	r3, [pc, #128]	@ (80053e8 <prvAddNewTaskToReadyList+0xbc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005370:	429a      	cmp	r2, r3
 8005372:	d802      	bhi.n	800537a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005374:	4a1c      	ldr	r2, [pc, #112]	@ (80053e8 <prvAddNewTaskToReadyList+0xbc>)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800537a:	4b1d      	ldr	r3, [pc, #116]	@ (80053f0 <prvAddNewTaskToReadyList+0xc4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3301      	adds	r3, #1
 8005380:	4a1b      	ldr	r2, [pc, #108]	@ (80053f0 <prvAddNewTaskToReadyList+0xc4>)
 8005382:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005388:	2201      	movs	r2, #1
 800538a:	409a      	lsls	r2, r3
 800538c:	4b19      	ldr	r3, [pc, #100]	@ (80053f4 <prvAddNewTaskToReadyList+0xc8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4313      	orrs	r3, r2
 8005392:	4a18      	ldr	r2, [pc, #96]	@ (80053f4 <prvAddNewTaskToReadyList+0xc8>)
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4a15      	ldr	r2, [pc, #84]	@ (80053f8 <prvAddNewTaskToReadyList+0xcc>)
 80053a4:	441a      	add	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f7ff f836 	bl	800441e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053b2:	f001 f883 	bl	80064bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053b6:	4b0d      	ldr	r3, [pc, #52]	@ (80053ec <prvAddNewTaskToReadyList+0xc0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00e      	beq.n	80053dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053be:	4b0a      	ldr	r3, [pc, #40]	@ (80053e8 <prvAddNewTaskToReadyList+0xbc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d207      	bcs.n	80053dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053cc:	4b0b      	ldr	r3, [pc, #44]	@ (80053fc <prvAddNewTaskToReadyList+0xd0>)
 80053ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	200005c4 	.word	0x200005c4
 80053e8:	200004c4 	.word	0x200004c4
 80053ec:	200005d0 	.word	0x200005d0
 80053f0:	200005e0 	.word	0x200005e0
 80053f4:	200005cc 	.word	0x200005cc
 80053f8:	200004c8 	.word	0x200004c8
 80053fc:	e000ed04 	.word	0xe000ed04

08005400 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d018      	beq.n	8005444 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005412:	4b14      	ldr	r3, [pc, #80]	@ (8005464 <vTaskDelay+0x64>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00b      	beq.n	8005432 <vTaskDelay+0x32>
	__asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	60bb      	str	r3, [r7, #8]
}
 800542c:	bf00      	nop
 800542e:	bf00      	nop
 8005430:	e7fd      	b.n	800542e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005432:	f000 f92d 	bl	8005690 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005436:	2100      	movs	r1, #0
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 febb 	bl	80061b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800543e:	f000 f935 	bl	80056ac <xTaskResumeAll>
 8005442:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d107      	bne.n	800545a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800544a:	4b07      	ldr	r3, [pc, #28]	@ (8005468 <vTaskDelay+0x68>)
 800544c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800545a:	bf00      	nop
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	200005ec 	.word	0x200005ec
 8005468:	e000ed04 	.word	0xe000ed04

0800546c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b06      	cmp	r3, #6
 800547e:	d90b      	bls.n	8005498 <vTaskPrioritySet+0x2c>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	60fb      	str	r3, [r7, #12]
}
 8005492:	bf00      	nop
 8005494:	bf00      	nop
 8005496:	e7fd      	b.n	8005494 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2b06      	cmp	r3, #6
 800549c:	d901      	bls.n	80054a2 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800549e:	2306      	movs	r3, #6
 80054a0:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80054a2:	f000 ffdb 	bl	800645c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d102      	bne.n	80054b2 <vTaskPrioritySet+0x46>
 80054ac:	4b43      	ldr	r3, [pc, #268]	@ (80055bc <vTaskPrioritySet+0x150>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	e000      	b.n	80054b4 <vTaskPrioritySet+0x48>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ba:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d074      	beq.n	80055ae <vTaskPrioritySet+0x142>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d90d      	bls.n	80054e8 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 80054cc:	4b3b      	ldr	r3, [pc, #236]	@ (80055bc <vTaskPrioritySet+0x150>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d00f      	beq.n	80054f6 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80054d6:	4b39      	ldr	r3, [pc, #228]	@ (80055bc <vTaskPrioritySet+0x150>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d309      	bcc.n	80054f6 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 80054e2:	2301      	movs	r3, #1
 80054e4:	61fb      	str	r3, [r7, #28]
 80054e6:	e006      	b.n	80054f6 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80054e8:	4b34      	ldr	r3, [pc, #208]	@ (80055bc <vTaskPrioritySet+0x150>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d101      	bne.n	80054f6 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80054f2:	2301      	movs	r3, #1
 80054f4:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fa:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	429a      	cmp	r2, r3
 8005506:	d102      	bne.n	800550e <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	645a      	str	r2, [r3, #68]	@ 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	2b00      	cmp	r3, #0
 800551a:	db04      	blt.n	8005526 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	f1c3 0207 	rsb	r2, r3, #7
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	6959      	ldr	r1, [r3, #20]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4a22      	ldr	r2, [pc, #136]	@ (80055c0 <vTaskPrioritySet+0x154>)
 8005536:	4413      	add	r3, r2
 8005538:	4299      	cmp	r1, r3
 800553a:	d101      	bne.n	8005540 <vTaskPrioritySet+0xd4>
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <vTaskPrioritySet+0xd6>
 8005540:	2300      	movs	r3, #0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d028      	beq.n	8005598 <vTaskPrioritySet+0x12c>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	3304      	adds	r3, #4
 800554a:	4618      	mov	r0, r3
 800554c:	f7fe ffc2 	bl	80044d4 <uxListRemove>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d109      	bne.n	800556a <vTaskPrioritySet+0xfe>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8005556:	2201      	movs	r2, #1
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	43da      	mvns	r2, r3
 8005560:	4b18      	ldr	r3, [pc, #96]	@ (80055c4 <vTaskPrioritySet+0x158>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4013      	ands	r3, r2
 8005566:	4a17      	ldr	r2, [pc, #92]	@ (80055c4 <vTaskPrioritySet+0x158>)
 8005568:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556e:	2201      	movs	r2, #1
 8005570:	409a      	lsls	r2, r3
 8005572:	4b14      	ldr	r3, [pc, #80]	@ (80055c4 <vTaskPrioritySet+0x158>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4313      	orrs	r3, r2
 8005578:	4a12      	ldr	r2, [pc, #72]	@ (80055c4 <vTaskPrioritySet+0x158>)
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4a0d      	ldr	r2, [pc, #52]	@ (80055c0 <vTaskPrioritySet+0x154>)
 800558a:	441a      	add	r2, r3
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	3304      	adds	r3, #4
 8005590:	4619      	mov	r1, r3
 8005592:	4610      	mov	r0, r2
 8005594:	f7fe ff43 	bl	800441e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d007      	beq.n	80055ae <vTaskPrioritySet+0x142>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800559e:	4b0a      	ldr	r3, [pc, #40]	@ (80055c8 <vTaskPrioritySet+0x15c>)
 80055a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80055ae:	f000 ff85 	bl	80064bc <vPortExitCritical>
	}
 80055b2:	bf00      	nop
 80055b4:	3720      	adds	r7, #32
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	200004c4 	.word	0x200004c4
 80055c0:	200004c8 	.word	0x200004c8
 80055c4:	200005cc 	.word	0x200005cc
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	@ 0x28
 80055d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055da:	463a      	mov	r2, r7
 80055dc:	1d39      	adds	r1, r7, #4
 80055de:	f107 0308 	add.w	r3, r7, #8
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fa fe90 	bl	8000308 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	9202      	str	r2, [sp, #8]
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	2300      	movs	r3, #0
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	2300      	movs	r3, #0
 80055f8:	460a      	mov	r2, r1
 80055fa:	491f      	ldr	r1, [pc, #124]	@ (8005678 <vTaskStartScheduler+0xac>)
 80055fc:	481f      	ldr	r0, [pc, #124]	@ (800567c <vTaskStartScheduler+0xb0>)
 80055fe:	f7ff fd70 	bl	80050e2 <xTaskCreateStatic>
 8005602:	4603      	mov	r3, r0
 8005604:	4a1e      	ldr	r2, [pc, #120]	@ (8005680 <vTaskStartScheduler+0xb4>)
 8005606:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005608:	4b1d      	ldr	r3, [pc, #116]	@ (8005680 <vTaskStartScheduler+0xb4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005610:	2301      	movs	r3, #1
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	e001      	b.n	800561a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d116      	bne.n	800564e <vTaskStartScheduler+0x82>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	613b      	str	r3, [r7, #16]
}
 8005632:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005634:	4b13      	ldr	r3, [pc, #76]	@ (8005684 <vTaskStartScheduler+0xb8>)
 8005636:	f04f 32ff 	mov.w	r2, #4294967295
 800563a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800563c:	4b12      	ldr	r3, [pc, #72]	@ (8005688 <vTaskStartScheduler+0xbc>)
 800563e:	2201      	movs	r2, #1
 8005640:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005642:	4b12      	ldr	r3, [pc, #72]	@ (800568c <vTaskStartScheduler+0xc0>)
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005648:	f000 fe96 	bl	8006378 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800564c:	e00f      	b.n	800566e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005654:	d10b      	bne.n	800566e <vTaskStartScheduler+0xa2>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	60fb      	str	r3, [r7, #12]
}
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	e7fd      	b.n	800566a <vTaskStartScheduler+0x9e>
}
 800566e:	bf00      	nop
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	08006b24 	.word	0x08006b24
 800567c:	08005c3d 	.word	0x08005c3d
 8005680:	200005e8 	.word	0x200005e8
 8005684:	200005e4 	.word	0x200005e4
 8005688:	200005d0 	.word	0x200005d0
 800568c:	200005c8 	.word	0x200005c8

08005690 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005694:	4b04      	ldr	r3, [pc, #16]	@ (80056a8 <vTaskSuspendAll+0x18>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	4a03      	ldr	r2, [pc, #12]	@ (80056a8 <vTaskSuspendAll+0x18>)
 800569c:	6013      	str	r3, [r2, #0]
}
 800569e:	bf00      	nop
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	200005ec 	.word	0x200005ec

080056ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056ba:	4b42      	ldr	r3, [pc, #264]	@ (80057c4 <xTaskResumeAll+0x118>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10b      	bne.n	80056da <xTaskResumeAll+0x2e>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	603b      	str	r3, [r7, #0]
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop
 80056d8:	e7fd      	b.n	80056d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056da:	f000 febf 	bl	800645c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056de:	4b39      	ldr	r3, [pc, #228]	@ (80057c4 <xTaskResumeAll+0x118>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	4a37      	ldr	r2, [pc, #220]	@ (80057c4 <xTaskResumeAll+0x118>)
 80056e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056e8:	4b36      	ldr	r3, [pc, #216]	@ (80057c4 <xTaskResumeAll+0x118>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d161      	bne.n	80057b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056f0:	4b35      	ldr	r3, [pc, #212]	@ (80057c8 <xTaskResumeAll+0x11c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d05d      	beq.n	80057b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056f8:	e02e      	b.n	8005758 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80056fa:	4b34      	ldr	r3, [pc, #208]	@ (80057cc <xTaskResumeAll+0x120>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3318      	adds	r3, #24
 8005706:	4618      	mov	r0, r3
 8005708:	f7fe fee4 	bl	80044d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3304      	adds	r3, #4
 8005710:	4618      	mov	r0, r3
 8005712:	f7fe fedf 	bl	80044d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571a:	2201      	movs	r2, #1
 800571c:	409a      	lsls	r2, r3
 800571e:	4b2c      	ldr	r3, [pc, #176]	@ (80057d0 <xTaskResumeAll+0x124>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4313      	orrs	r3, r2
 8005724:	4a2a      	ldr	r2, [pc, #168]	@ (80057d0 <xTaskResumeAll+0x124>)
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4a27      	ldr	r2, [pc, #156]	@ (80057d4 <xTaskResumeAll+0x128>)
 8005736:	441a      	add	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3304      	adds	r3, #4
 800573c:	4619      	mov	r1, r3
 800573e:	4610      	mov	r0, r2
 8005740:	f7fe fe6d 	bl	800441e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005748:	4b23      	ldr	r3, [pc, #140]	@ (80057d8 <xTaskResumeAll+0x12c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574e:	429a      	cmp	r2, r3
 8005750:	d302      	bcc.n	8005758 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005752:	4b22      	ldr	r3, [pc, #136]	@ (80057dc <xTaskResumeAll+0x130>)
 8005754:	2201      	movs	r2, #1
 8005756:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005758:	4b1c      	ldr	r3, [pc, #112]	@ (80057cc <xTaskResumeAll+0x120>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1cc      	bne.n	80056fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005766:	f000 fb1f 	bl	8005da8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800576a:	4b1d      	ldr	r3, [pc, #116]	@ (80057e0 <xTaskResumeAll+0x134>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d010      	beq.n	8005798 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005776:	f000 f837 	bl	80057e8 <xTaskIncrementTick>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005780:	4b16      	ldr	r3, [pc, #88]	@ (80057dc <xTaskResumeAll+0x130>)
 8005782:	2201      	movs	r2, #1
 8005784:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3b01      	subs	r3, #1
 800578a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f1      	bne.n	8005776 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005792:	4b13      	ldr	r3, [pc, #76]	@ (80057e0 <xTaskResumeAll+0x134>)
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005798:	4b10      	ldr	r3, [pc, #64]	@ (80057dc <xTaskResumeAll+0x130>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d009      	beq.n	80057b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057a0:	2301      	movs	r3, #1
 80057a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057a4:	4b0f      	ldr	r3, [pc, #60]	@ (80057e4 <xTaskResumeAll+0x138>)
 80057a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057b4:	f000 fe82 	bl	80064bc <vPortExitCritical>

	return xAlreadyYielded;
 80057b8:	68bb      	ldr	r3, [r7, #8]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	200005ec 	.word	0x200005ec
 80057c8:	200005c4 	.word	0x200005c4
 80057cc:	20000584 	.word	0x20000584
 80057d0:	200005cc 	.word	0x200005cc
 80057d4:	200004c8 	.word	0x200004c8
 80057d8:	200004c4 	.word	0x200004c4
 80057dc:	200005d8 	.word	0x200005d8
 80057e0:	200005d4 	.word	0x200005d4
 80057e4:	e000ed04 	.word	0xe000ed04

080057e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057ee:	2300      	movs	r3, #0
 80057f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057f2:	4b51      	ldr	r3, [pc, #324]	@ (8005938 <xTaskIncrementTick+0x150>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f040 808e 	bne.w	8005918 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057fc:	4b4f      	ldr	r3, [pc, #316]	@ (800593c <xTaskIncrementTick+0x154>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3301      	adds	r3, #1
 8005802:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005804:	4a4d      	ldr	r2, [pc, #308]	@ (800593c <xTaskIncrementTick+0x154>)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d121      	bne.n	8005854 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005810:	4b4b      	ldr	r3, [pc, #300]	@ (8005940 <xTaskIncrementTick+0x158>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00b      	beq.n	8005832 <xTaskIncrementTick+0x4a>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	603b      	str	r3, [r7, #0]
}
 800582c:	bf00      	nop
 800582e:	bf00      	nop
 8005830:	e7fd      	b.n	800582e <xTaskIncrementTick+0x46>
 8005832:	4b43      	ldr	r3, [pc, #268]	@ (8005940 <xTaskIncrementTick+0x158>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	4b42      	ldr	r3, [pc, #264]	@ (8005944 <xTaskIncrementTick+0x15c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a40      	ldr	r2, [pc, #256]	@ (8005940 <xTaskIncrementTick+0x158>)
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	4a40      	ldr	r2, [pc, #256]	@ (8005944 <xTaskIncrementTick+0x15c>)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	4b40      	ldr	r3, [pc, #256]	@ (8005948 <xTaskIncrementTick+0x160>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3301      	adds	r3, #1
 800584c:	4a3e      	ldr	r2, [pc, #248]	@ (8005948 <xTaskIncrementTick+0x160>)
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	f000 faaa 	bl	8005da8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005854:	4b3d      	ldr	r3, [pc, #244]	@ (800594c <xTaskIncrementTick+0x164>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	429a      	cmp	r2, r3
 800585c:	d34d      	bcc.n	80058fa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800585e:	4b38      	ldr	r3, [pc, #224]	@ (8005940 <xTaskIncrementTick+0x158>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <xTaskIncrementTick+0x84>
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <xTaskIncrementTick+0x86>
 800586c:	2300      	movs	r3, #0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005872:	4b36      	ldr	r3, [pc, #216]	@ (800594c <xTaskIncrementTick+0x164>)
 8005874:	f04f 32ff 	mov.w	r2, #4294967295
 8005878:	601a      	str	r2, [r3, #0]
					break;
 800587a:	e03e      	b.n	80058fa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800587c:	4b30      	ldr	r3, [pc, #192]	@ (8005940 <xTaskIncrementTick+0x158>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d203      	bcs.n	800589c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005894:	4a2d      	ldr	r2, [pc, #180]	@ (800594c <xTaskIncrementTick+0x164>)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6013      	str	r3, [r2, #0]
						break;
 800589a:	e02e      	b.n	80058fa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	3304      	adds	r3, #4
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe fe17 	bl	80044d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d004      	beq.n	80058b8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	3318      	adds	r3, #24
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fe fe0e 	bl	80044d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058bc:	2201      	movs	r2, #1
 80058be:	409a      	lsls	r2, r3
 80058c0:	4b23      	ldr	r3, [pc, #140]	@ (8005950 <xTaskIncrementTick+0x168>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	4a22      	ldr	r2, [pc, #136]	@ (8005950 <xTaskIncrementTick+0x168>)
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005954 <xTaskIncrementTick+0x16c>)
 80058d8:	441a      	add	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	3304      	adds	r3, #4
 80058de:	4619      	mov	r1, r3
 80058e0:	4610      	mov	r0, r2
 80058e2:	f7fe fd9c 	bl	800441e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005958 <xTaskIncrementTick+0x170>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d3b4      	bcc.n	800585e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80058f4:	2301      	movs	r3, #1
 80058f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058f8:	e7b1      	b.n	800585e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058fa:	4b17      	ldr	r3, [pc, #92]	@ (8005958 <xTaskIncrementTick+0x170>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005900:	4914      	ldr	r1, [pc, #80]	@ (8005954 <xTaskIncrementTick+0x16c>)
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	440b      	add	r3, r1
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d907      	bls.n	8005922 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005912:	2301      	movs	r3, #1
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	e004      	b.n	8005922 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005918:	4b10      	ldr	r3, [pc, #64]	@ (800595c <xTaskIncrementTick+0x174>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3301      	adds	r3, #1
 800591e:	4a0f      	ldr	r2, [pc, #60]	@ (800595c <xTaskIncrementTick+0x174>)
 8005920:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005922:	4b0f      	ldr	r3, [pc, #60]	@ (8005960 <xTaskIncrementTick+0x178>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800592a:	2301      	movs	r3, #1
 800592c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800592e:	697b      	ldr	r3, [r7, #20]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	200005ec 	.word	0x200005ec
 800593c:	200005c8 	.word	0x200005c8
 8005940:	2000057c 	.word	0x2000057c
 8005944:	20000580 	.word	0x20000580
 8005948:	200005dc 	.word	0x200005dc
 800594c:	200005e4 	.word	0x200005e4
 8005950:	200005cc 	.word	0x200005cc
 8005954:	200004c8 	.word	0x200004c8
 8005958:	200004c4 	.word	0x200004c4
 800595c:	200005d4 	.word	0x200005d4
 8005960:	200005d8 	.word	0x200005d8

08005964 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800596a:	4b27      	ldr	r3, [pc, #156]	@ (8005a08 <vTaskSwitchContext+0xa4>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005972:	4b26      	ldr	r3, [pc, #152]	@ (8005a0c <vTaskSwitchContext+0xa8>)
 8005974:	2201      	movs	r2, #1
 8005976:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005978:	e040      	b.n	80059fc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800597a:	4b24      	ldr	r3, [pc, #144]	@ (8005a0c <vTaskSwitchContext+0xa8>)
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005980:	4b23      	ldr	r3, [pc, #140]	@ (8005a10 <vTaskSwitchContext+0xac>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	fab3 f383 	clz	r3, r3
 800598c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800598e:	7afb      	ldrb	r3, [r7, #11]
 8005990:	f1c3 031f 	rsb	r3, r3, #31
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	491f      	ldr	r1, [pc, #124]	@ (8005a14 <vTaskSwitchContext+0xb0>)
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	607b      	str	r3, [r7, #4]
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	e7fd      	b.n	80059be <vTaskSwitchContext+0x5a>
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4a11      	ldr	r2, [pc, #68]	@ (8005a14 <vTaskSwitchContext+0xb0>)
 80059ce:	4413      	add	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	605a      	str	r2, [r3, #4]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	3308      	adds	r3, #8
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d104      	bne.n	80059f2 <vTaskSwitchContext+0x8e>
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4a07      	ldr	r2, [pc, #28]	@ (8005a18 <vTaskSwitchContext+0xb4>)
 80059fa:	6013      	str	r3, [r2, #0]
}
 80059fc:	bf00      	nop
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bc80      	pop	{r7}
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	200005ec 	.word	0x200005ec
 8005a0c:	200005d8 	.word	0x200005d8
 8005a10:	200005cc 	.word	0x200005cc
 8005a14:	200004c8 	.word	0x200004c8
 8005a18:	200004c4 	.word	0x200004c4

08005a1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10b      	bne.n	8005a44 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	60fb      	str	r3, [r7, #12]
}
 8005a3e:	bf00      	nop
 8005a40:	bf00      	nop
 8005a42:	e7fd      	b.n	8005a40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a44:	4b07      	ldr	r3, [pc, #28]	@ (8005a64 <vTaskPlaceOnEventList+0x48>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3318      	adds	r3, #24
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7fe fd09 	bl	8004464 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a52:	2101      	movs	r1, #1
 8005a54:	6838      	ldr	r0, [r7, #0]
 8005a56:	f000 fbad 	bl	80061b4 <prvAddCurrentTaskToDelayedList>
}
 8005a5a:	bf00      	nop
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	200004c4 	.word	0x200004c4

08005a68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10b      	bne.n	8005a96 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	60fb      	str	r3, [r7, #12]
}
 8005a90:	bf00      	nop
 8005a92:	bf00      	nop
 8005a94:	e7fd      	b.n	8005a92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	3318      	adds	r3, #24
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fe fd1a 	bl	80044d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b18 <xTaskRemoveFromEventList+0xb0>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d11c      	bne.n	8005ae2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fe fd11 	bl	80044d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	409a      	lsls	r2, r3
 8005aba:	4b18      	ldr	r3, [pc, #96]	@ (8005b1c <xTaskRemoveFromEventList+0xb4>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	4a16      	ldr	r2, [pc, #88]	@ (8005b1c <xTaskRemoveFromEventList+0xb4>)
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4a13      	ldr	r2, [pc, #76]	@ (8005b20 <xTaskRemoveFromEventList+0xb8>)
 8005ad2:	441a      	add	r2, r3
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f7fe fc9f 	bl	800441e <vListInsertEnd>
 8005ae0:	e005      	b.n	8005aee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	3318      	adds	r3, #24
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	480e      	ldr	r0, [pc, #56]	@ (8005b24 <xTaskRemoveFromEventList+0xbc>)
 8005aea:	f7fe fc98 	bl	800441e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005af2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b28 <xTaskRemoveFromEventList+0xc0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d905      	bls.n	8005b08 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005afc:	2301      	movs	r3, #1
 8005afe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b00:	4b0a      	ldr	r3, [pc, #40]	@ (8005b2c <xTaskRemoveFromEventList+0xc4>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	e001      	b.n	8005b0c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005b0c:	697b      	ldr	r3, [r7, #20]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	200005ec 	.word	0x200005ec
 8005b1c:	200005cc 	.word	0x200005cc
 8005b20:	200004c8 	.word	0x200004c8
 8005b24:	20000584 	.word	0x20000584
 8005b28:	200004c4 	.word	0x200004c4
 8005b2c:	200005d8 	.word	0x200005d8

08005b30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b38:	4b06      	ldr	r3, [pc, #24]	@ (8005b54 <vTaskInternalSetTimeOutState+0x24>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b40:	4b05      	ldr	r3, [pc, #20]	@ (8005b58 <vTaskInternalSetTimeOutState+0x28>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	605a      	str	r2, [r3, #4]
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	200005dc 	.word	0x200005dc
 8005b58:	200005c8 	.word	0x200005c8

08005b5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10b      	bne.n	8005b84 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	613b      	str	r3, [r7, #16]
}
 8005b7e:	bf00      	nop
 8005b80:	bf00      	nop
 8005b82:	e7fd      	b.n	8005b80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	60fb      	str	r3, [r7, #12]
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	e7fd      	b.n	8005b9e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005ba2:	f000 fc5b 	bl	800645c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c1c <xTaskCheckForTimeOut+0xc0>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d102      	bne.n	8005bc6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	e023      	b.n	8005c0e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	4b15      	ldr	r3, [pc, #84]	@ (8005c20 <xTaskCheckForTimeOut+0xc4>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d007      	beq.n	8005be2 <xTaskCheckForTimeOut+0x86>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d302      	bcc.n	8005be2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	61fb      	str	r3, [r7, #28]
 8005be0:	e015      	b.n	8005c0e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d20b      	bcs.n	8005c04 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	1ad2      	subs	r2, r2, r3
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff ff99 	bl	8005b30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61fb      	str	r3, [r7, #28]
 8005c02:	e004      	b.n	8005c0e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c0e:	f000 fc55 	bl	80064bc <vPortExitCritical>

	return xReturn;
 8005c12:	69fb      	ldr	r3, [r7, #28]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3720      	adds	r7, #32
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	200005c8 	.word	0x200005c8
 8005c20:	200005dc 	.word	0x200005dc

08005c24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c28:	4b03      	ldr	r3, [pc, #12]	@ (8005c38 <vTaskMissedYield+0x14>)
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bc80      	pop	{r7}
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	200005d8 	.word	0x200005d8

08005c3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c44:	f000 f852 	bl	8005cec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c48:	4b06      	ldr	r3, [pc, #24]	@ (8005c64 <prvIdleTask+0x28>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d9f9      	bls.n	8005c44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c50:	4b05      	ldr	r3, [pc, #20]	@ (8005c68 <prvIdleTask+0x2c>)
 8005c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c60:	e7f0      	b.n	8005c44 <prvIdleTask+0x8>
 8005c62:	bf00      	nop
 8005c64:	200004c8 	.word	0x200004c8
 8005c68:	e000ed04 	.word	0xe000ed04

08005c6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c72:	2300      	movs	r3, #0
 8005c74:	607b      	str	r3, [r7, #4]
 8005c76:	e00c      	b.n	8005c92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4a12      	ldr	r2, [pc, #72]	@ (8005ccc <prvInitialiseTaskLists+0x60>)
 8005c84:	4413      	add	r3, r2
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe fb9e 	bl	80043c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b06      	cmp	r3, #6
 8005c96:	d9ef      	bls.n	8005c78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c98:	480d      	ldr	r0, [pc, #52]	@ (8005cd0 <prvInitialiseTaskLists+0x64>)
 8005c9a:	f7fe fb95 	bl	80043c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c9e:	480d      	ldr	r0, [pc, #52]	@ (8005cd4 <prvInitialiseTaskLists+0x68>)
 8005ca0:	f7fe fb92 	bl	80043c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ca4:	480c      	ldr	r0, [pc, #48]	@ (8005cd8 <prvInitialiseTaskLists+0x6c>)
 8005ca6:	f7fe fb8f 	bl	80043c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005caa:	480c      	ldr	r0, [pc, #48]	@ (8005cdc <prvInitialiseTaskLists+0x70>)
 8005cac:	f7fe fb8c 	bl	80043c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005cb0:	480b      	ldr	r0, [pc, #44]	@ (8005ce0 <prvInitialiseTaskLists+0x74>)
 8005cb2:	f7fe fb89 	bl	80043c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce4 <prvInitialiseTaskLists+0x78>)
 8005cb8:	4a05      	ldr	r2, [pc, #20]	@ (8005cd0 <prvInitialiseTaskLists+0x64>)
 8005cba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce8 <prvInitialiseTaskLists+0x7c>)
 8005cbe:	4a05      	ldr	r2, [pc, #20]	@ (8005cd4 <prvInitialiseTaskLists+0x68>)
 8005cc0:	601a      	str	r2, [r3, #0]
}
 8005cc2:	bf00      	nop
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	200004c8 	.word	0x200004c8
 8005cd0:	20000554 	.word	0x20000554
 8005cd4:	20000568 	.word	0x20000568
 8005cd8:	20000584 	.word	0x20000584
 8005cdc:	20000598 	.word	0x20000598
 8005ce0:	200005b0 	.word	0x200005b0
 8005ce4:	2000057c 	.word	0x2000057c
 8005ce8:	20000580 	.word	0x20000580

08005cec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cf2:	e019      	b.n	8005d28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cf4:	f000 fbb2 	bl	800645c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005cf8:	4b10      	ldr	r3, [pc, #64]	@ (8005d3c <prvCheckTasksWaitingTermination+0x50>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3304      	adds	r3, #4
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fe fbe5 	bl	80044d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d40 <prvCheckTasksWaitingTermination+0x54>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	4a0b      	ldr	r2, [pc, #44]	@ (8005d40 <prvCheckTasksWaitingTermination+0x54>)
 8005d12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d14:	4b0b      	ldr	r3, [pc, #44]	@ (8005d44 <prvCheckTasksWaitingTermination+0x58>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005d44 <prvCheckTasksWaitingTermination+0x58>)
 8005d1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d1e:	f000 fbcd 	bl	80064bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f810 	bl	8005d48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d28:	4b06      	ldr	r3, [pc, #24]	@ (8005d44 <prvCheckTasksWaitingTermination+0x58>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e1      	bne.n	8005cf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000598 	.word	0x20000598
 8005d40:	200005c4 	.word	0x200005c4
 8005d44:	200005ac 	.word	0x200005ac

08005d48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d108      	bne.n	8005d6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fd46 	bl	80067f0 <vPortFree>
				vPortFree( pxTCB );
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fd43 	bl	80067f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d6a:	e019      	b.n	8005da0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d103      	bne.n	8005d7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fd3a 	bl	80067f0 <vPortFree>
	}
 8005d7c:	e010      	b.n	8005da0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d00b      	beq.n	8005da0 <prvDeleteTCB+0x58>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	60fb      	str	r3, [r7, #12]
}
 8005d9a:	bf00      	nop
 8005d9c:	bf00      	nop
 8005d9e:	e7fd      	b.n	8005d9c <prvDeleteTCB+0x54>
	}
 8005da0:	bf00      	nop
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dae:	4b0e      	ldr	r3, [pc, #56]	@ (8005de8 <prvResetNextTaskUnblockTime+0x40>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <prvResetNextTaskUnblockTime+0x14>
 8005db8:	2301      	movs	r3, #1
 8005dba:	e000      	b.n	8005dbe <prvResetNextTaskUnblockTime+0x16>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d004      	beq.n	8005dcc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dec <prvResetNextTaskUnblockTime+0x44>)
 8005dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005dca:	e008      	b.n	8005dde <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005dcc:	4b06      	ldr	r3, [pc, #24]	@ (8005de8 <prvResetNextTaskUnblockTime+0x40>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	4a04      	ldr	r2, [pc, #16]	@ (8005dec <prvResetNextTaskUnblockTime+0x44>)
 8005ddc:	6013      	str	r3, [r2, #0]
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bc80      	pop	{r7}
 8005de6:	4770      	bx	lr
 8005de8:	2000057c 	.word	0x2000057c
 8005dec:	200005e4 	.word	0x200005e4

08005df0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005df6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e24 <xTaskGetSchedulerState+0x34>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d102      	bne.n	8005e04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	607b      	str	r3, [r7, #4]
 8005e02:	e008      	b.n	8005e16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e04:	4b08      	ldr	r3, [pc, #32]	@ (8005e28 <xTaskGetSchedulerState+0x38>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	607b      	str	r3, [r7, #4]
 8005e10:	e001      	b.n	8005e16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e12:	2300      	movs	r3, #0
 8005e14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e16:	687b      	ldr	r3, [r7, #4]
	}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	200005d0 	.word	0x200005d0
 8005e28:	200005ec 	.word	0x200005ec

08005e2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d06e      	beq.n	8005f20 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e46:	4b39      	ldr	r3, [pc, #228]	@ (8005f2c <xTaskPriorityInherit+0x100>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d25e      	bcs.n	8005f0e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	db06      	blt.n	8005e66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e58:	4b34      	ldr	r3, [pc, #208]	@ (8005f2c <xTaskPriorityInherit+0x100>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5e:	f1c3 0207 	rsb	r2, r3, #7
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	6959      	ldr	r1, [r3, #20]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4a2e      	ldr	r2, [pc, #184]	@ (8005f30 <xTaskPriorityInherit+0x104>)
 8005e78:	4413      	add	r3, r2
 8005e7a:	4299      	cmp	r1, r3
 8005e7c:	d101      	bne.n	8005e82 <xTaskPriorityInherit+0x56>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e000      	b.n	8005e84 <xTaskPriorityInherit+0x58>
 8005e82:	2300      	movs	r3, #0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d03a      	beq.n	8005efe <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fe fb21 	bl	80044d4 <uxListRemove>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d115      	bne.n	8005ec4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e9c:	4924      	ldr	r1, [pc, #144]	@ (8005f30 <xTaskPriorityInherit+0x104>)
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <xTaskPriorityInherit+0x98>
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	43da      	mvns	r2, r3
 8005eba:	4b1e      	ldr	r3, [pc, #120]	@ (8005f34 <xTaskPriorityInherit+0x108>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f34 <xTaskPriorityInherit+0x108>)
 8005ec2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ec4:	4b19      	ldr	r3, [pc, #100]	@ (8005f2c <xTaskPriorityInherit+0x100>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	409a      	lsls	r2, r3
 8005ed6:	4b17      	ldr	r3, [pc, #92]	@ (8005f34 <xTaskPriorityInherit+0x108>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	4a15      	ldr	r2, [pc, #84]	@ (8005f34 <xTaskPriorityInherit+0x108>)
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4a10      	ldr	r2, [pc, #64]	@ (8005f30 <xTaskPriorityInherit+0x104>)
 8005eee:	441a      	add	r2, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	f7fe fa91 	bl	800441e <vListInsertEnd>
 8005efc:	e004      	b.n	8005f08 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005efe:	4b0b      	ldr	r3, [pc, #44]	@ (8005f2c <xTaskPriorityInherit+0x100>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	e008      	b.n	8005f20 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f12:	4b06      	ldr	r3, [pc, #24]	@ (8005f2c <xTaskPriorityInherit+0x100>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d201      	bcs.n	8005f20 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f20:	68fb      	ldr	r3, [r7, #12]
	}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	200004c4 	.word	0x200004c4
 8005f30:	200004c8 	.word	0x200004c8
 8005f34:	200005cc 	.word	0x200005cc

08005f38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d070      	beq.n	8006030 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800603c <xTaskPriorityDisinherit+0x104>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d00b      	beq.n	8005f70 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	60fb      	str	r3, [r7, #12]
}
 8005f6a:	bf00      	nop
 8005f6c:	bf00      	nop
 8005f6e:	e7fd      	b.n	8005f6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10b      	bne.n	8005f90 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	60bb      	str	r3, [r7, #8]
}
 8005f8a:	bf00      	nop
 8005f8c:	bf00      	nop
 8005f8e:	e7fd      	b.n	8005f8c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f94:	1e5a      	subs	r2, r3, #1
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d044      	beq.n	8006030 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d140      	bne.n	8006030 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fe fa8e 	bl	80044d4 <uxListRemove>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d115      	bne.n	8005fea <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc2:	491f      	ldr	r1, [pc, #124]	@ (8006040 <xTaskPriorityDisinherit+0x108>)
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	440b      	add	r3, r1
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10a      	bne.n	8005fea <xTaskPriorityDisinherit+0xb2>
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd8:	2201      	movs	r2, #1
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	43da      	mvns	r2, r3
 8005fe0:	4b18      	ldr	r3, [pc, #96]	@ (8006044 <xTaskPriorityDisinherit+0x10c>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	4a17      	ldr	r2, [pc, #92]	@ (8006044 <xTaskPriorityDisinherit+0x10c>)
 8005fe8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff6:	f1c3 0207 	rsb	r2, r3, #7
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006002:	2201      	movs	r2, #1
 8006004:	409a      	lsls	r2, r3
 8006006:	4b0f      	ldr	r3, [pc, #60]	@ (8006044 <xTaskPriorityDisinherit+0x10c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4313      	orrs	r3, r2
 800600c:	4a0d      	ldr	r2, [pc, #52]	@ (8006044 <xTaskPriorityDisinherit+0x10c>)
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4a08      	ldr	r2, [pc, #32]	@ (8006040 <xTaskPriorityDisinherit+0x108>)
 800601e:	441a      	add	r2, r3
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	3304      	adds	r3, #4
 8006024:	4619      	mov	r1, r3
 8006026:	4610      	mov	r0, r2
 8006028:	f7fe f9f9 	bl	800441e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800602c:	2301      	movs	r3, #1
 800602e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006030:	697b      	ldr	r3, [r7, #20]
	}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	200004c4 	.word	0x200004c4
 8006040:	200004c8 	.word	0x200004c8
 8006044:	200005cc 	.word	0x200005cc

08006048 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006056:	2301      	movs	r3, #1
 8006058:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 808a 	beq.w	8006176 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10b      	bne.n	8006082 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	60fb      	str	r3, [r7, #12]
}
 800607c:	bf00      	nop
 800607e:	bf00      	nop
 8006080:	e7fd      	b.n	800607e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d902      	bls.n	8006092 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	e002      	b.n	8006098 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006096:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d069      	beq.n	8006176 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d164      	bne.n	8006176 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80060ac:	4b34      	ldr	r3, [pc, #208]	@ (8006180 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d10b      	bne.n	80060ce <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	60bb      	str	r3, [r7, #8]
}
 80060c8:	bf00      	nop
 80060ca:	bf00      	nop
 80060cc:	e7fd      	b.n	80060ca <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	db04      	blt.n	80060ec <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	f1c3 0207 	rsb	r2, r3, #7
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	6959      	ldr	r1, [r3, #20]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4a22      	ldr	r2, [pc, #136]	@ (8006184 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80060fc:	4413      	add	r3, r2
 80060fe:	4299      	cmp	r1, r3
 8006100:	d101      	bne.n	8006106 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8006102:	2301      	movs	r3, #1
 8006104:	e000      	b.n	8006108 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8006106:	2300      	movs	r3, #0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d034      	beq.n	8006176 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	3304      	adds	r3, #4
 8006110:	4618      	mov	r0, r3
 8006112:	f7fe f9df 	bl	80044d4 <uxListRemove>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d115      	bne.n	8006148 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006120:	4918      	ldr	r1, [pc, #96]	@ (8006184 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006122:	4613      	mov	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	440b      	add	r3, r1
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006136:	2201      	movs	r2, #1
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	43da      	mvns	r2, r3
 800613e:	4b12      	ldr	r3, [pc, #72]	@ (8006188 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4013      	ands	r3, r2
 8006144:	4a10      	ldr	r2, [pc, #64]	@ (8006188 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8006146:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614c:	2201      	movs	r2, #1
 800614e:	409a      	lsls	r2, r3
 8006150:	4b0d      	ldr	r3, [pc, #52]	@ (8006188 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4313      	orrs	r3, r2
 8006156:	4a0c      	ldr	r2, [pc, #48]	@ (8006188 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4a07      	ldr	r2, [pc, #28]	@ (8006184 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006168:	441a      	add	r2, r3
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	3304      	adds	r3, #4
 800616e:	4619      	mov	r1, r3
 8006170:	4610      	mov	r0, r2
 8006172:	f7fe f954 	bl	800441e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006176:	bf00      	nop
 8006178:	3720      	adds	r7, #32
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	200004c4 	.word	0x200004c4
 8006184:	200004c8 	.word	0x200004c8
 8006188:	200005cc 	.word	0x200005cc

0800618c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006190:	4b07      	ldr	r3, [pc, #28]	@ (80061b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d004      	beq.n	80061a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006198:	4b05      	ldr	r3, [pc, #20]	@ (80061b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800619e:	3201      	adds	r2, #1
 80061a0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80061a2:	4b03      	ldr	r3, [pc, #12]	@ (80061b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80061a4:	681b      	ldr	r3, [r3, #0]
	}
 80061a6:	4618      	mov	r0, r3
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bc80      	pop	{r7}
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	200004c4 	.word	0x200004c4

080061b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061be:	4b29      	ldr	r3, [pc, #164]	@ (8006264 <prvAddCurrentTaskToDelayedList+0xb0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061c4:	4b28      	ldr	r3, [pc, #160]	@ (8006268 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe f982 	bl	80044d4 <uxListRemove>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10b      	bne.n	80061ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80061d6:	4b24      	ldr	r3, [pc, #144]	@ (8006268 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061dc:	2201      	movs	r2, #1
 80061de:	fa02 f303 	lsl.w	r3, r2, r3
 80061e2:	43da      	mvns	r2, r3
 80061e4:	4b21      	ldr	r3, [pc, #132]	@ (800626c <prvAddCurrentTaskToDelayedList+0xb8>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4013      	ands	r3, r2
 80061ea:	4a20      	ldr	r2, [pc, #128]	@ (800626c <prvAddCurrentTaskToDelayedList+0xb8>)
 80061ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f4:	d10a      	bne.n	800620c <prvAddCurrentTaskToDelayedList+0x58>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d007      	beq.n	800620c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006268 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3304      	adds	r3, #4
 8006202:	4619      	mov	r1, r3
 8006204:	481a      	ldr	r0, [pc, #104]	@ (8006270 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006206:	f7fe f90a 	bl	800441e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800620a:	e026      	b.n	800625a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4413      	add	r3, r2
 8006212:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006214:	4b14      	ldr	r3, [pc, #80]	@ (8006268 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	429a      	cmp	r2, r3
 8006222:	d209      	bcs.n	8006238 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006224:	4b13      	ldr	r3, [pc, #76]	@ (8006274 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	4b0f      	ldr	r3, [pc, #60]	@ (8006268 <prvAddCurrentTaskToDelayedList+0xb4>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3304      	adds	r3, #4
 800622e:	4619      	mov	r1, r3
 8006230:	4610      	mov	r0, r2
 8006232:	f7fe f917 	bl	8004464 <vListInsert>
}
 8006236:	e010      	b.n	800625a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006238:	4b0f      	ldr	r3, [pc, #60]	@ (8006278 <prvAddCurrentTaskToDelayedList+0xc4>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <prvAddCurrentTaskToDelayedList+0xb4>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3304      	adds	r3, #4
 8006242:	4619      	mov	r1, r3
 8006244:	4610      	mov	r0, r2
 8006246:	f7fe f90d 	bl	8004464 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800624a:	4b0c      	ldr	r3, [pc, #48]	@ (800627c <prvAddCurrentTaskToDelayedList+0xc8>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	429a      	cmp	r2, r3
 8006252:	d202      	bcs.n	800625a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006254:	4a09      	ldr	r2, [pc, #36]	@ (800627c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	6013      	str	r3, [r2, #0]
}
 800625a:	bf00      	nop
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	200005c8 	.word	0x200005c8
 8006268:	200004c4 	.word	0x200004c4
 800626c:	200005cc 	.word	0x200005cc
 8006270:	200005b0 	.word	0x200005b0
 8006274:	20000580 	.word	0x20000580
 8006278:	2000057c 	.word	0x2000057c
 800627c:	200005e4 	.word	0x200005e4

08006280 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3b04      	subs	r3, #4
 8006290:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3b04      	subs	r3, #4
 800629e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f023 0201 	bic.w	r2, r3, #1
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3b04      	subs	r3, #4
 80062ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062b0:	4a08      	ldr	r2, [pc, #32]	@ (80062d4 <pxPortInitialiseStack+0x54>)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3b14      	subs	r3, #20
 80062ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3b20      	subs	r3, #32
 80062c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062c8:	68fb      	ldr	r3, [r7, #12]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr
 80062d4:	080062d9 	.word	0x080062d9

080062d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80062de:	2300      	movs	r3, #0
 80062e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062e2:	4b12      	ldr	r3, [pc, #72]	@ (800632c <prvTaskExitError+0x54>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ea:	d00b      	beq.n	8006304 <prvTaskExitError+0x2c>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	60fb      	str	r3, [r7, #12]
}
 80062fe:	bf00      	nop
 8006300:	bf00      	nop
 8006302:	e7fd      	b.n	8006300 <prvTaskExitError+0x28>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	60bb      	str	r3, [r7, #8]
}
 8006316:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006318:	bf00      	nop
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0fc      	beq.n	800631a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	bc80      	pop	{r7}
 800632a:	4770      	bx	lr
 800632c:	20000010 	.word	0x20000010

08006330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006330:	4b07      	ldr	r3, [pc, #28]	@ (8006350 <pxCurrentTCBConst2>)
 8006332:	6819      	ldr	r1, [r3, #0]
 8006334:	6808      	ldr	r0, [r1, #0]
 8006336:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800633a:	f380 8809 	msr	PSP, r0
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f04f 0000 	mov.w	r0, #0
 8006346:	f380 8811 	msr	BASEPRI, r0
 800634a:	f04e 0e0d 	orr.w	lr, lr, #13
 800634e:	4770      	bx	lr

08006350 <pxCurrentTCBConst2>:
 8006350:	200004c4 	.word	0x200004c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop

08006358 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006358:	4806      	ldr	r0, [pc, #24]	@ (8006374 <prvPortStartFirstTask+0x1c>)
 800635a:	6800      	ldr	r0, [r0, #0]
 800635c:	6800      	ldr	r0, [r0, #0]
 800635e:	f380 8808 	msr	MSP, r0
 8006362:	b662      	cpsie	i
 8006364:	b661      	cpsie	f
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	df00      	svc	0
 8006370:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006372:	bf00      	nop
 8006374:	e000ed08 	.word	0xe000ed08

08006378 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800637e:	4b32      	ldr	r3, [pc, #200]	@ (8006448 <xPortStartScheduler+0xd0>)
 8006380:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	22ff      	movs	r2, #255	@ 0xff
 800638e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	b2db      	uxtb	r3, r3
 800639c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	4b2a      	ldr	r3, [pc, #168]	@ (800644c <xPortStartScheduler+0xd4>)
 80063a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063a6:	4b2a      	ldr	r3, [pc, #168]	@ (8006450 <xPortStartScheduler+0xd8>)
 80063a8:	2207      	movs	r2, #7
 80063aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063ac:	e009      	b.n	80063c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80063ae:	4b28      	ldr	r3, [pc, #160]	@ (8006450 <xPortStartScheduler+0xd8>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	4a26      	ldr	r2, [pc, #152]	@ (8006450 <xPortStartScheduler+0xd8>)
 80063b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ca:	2b80      	cmp	r3, #128	@ 0x80
 80063cc:	d0ef      	beq.n	80063ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063ce:	4b20      	ldr	r3, [pc, #128]	@ (8006450 <xPortStartScheduler+0xd8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f1c3 0307 	rsb	r3, r3, #7
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d00b      	beq.n	80063f2 <xPortStartScheduler+0x7a>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	60bb      	str	r3, [r7, #8]
}
 80063ec:	bf00      	nop
 80063ee:	bf00      	nop
 80063f0:	e7fd      	b.n	80063ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063f2:	4b17      	ldr	r3, [pc, #92]	@ (8006450 <xPortStartScheduler+0xd8>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	4a15      	ldr	r2, [pc, #84]	@ (8006450 <xPortStartScheduler+0xd8>)
 80063fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063fc:	4b14      	ldr	r3, [pc, #80]	@ (8006450 <xPortStartScheduler+0xd8>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006404:	4a12      	ldr	r2, [pc, #72]	@ (8006450 <xPortStartScheduler+0xd8>)
 8006406:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	b2da      	uxtb	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006410:	4b10      	ldr	r3, [pc, #64]	@ (8006454 <xPortStartScheduler+0xdc>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a0f      	ldr	r2, [pc, #60]	@ (8006454 <xPortStartScheduler+0xdc>)
 8006416:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800641a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800641c:	4b0d      	ldr	r3, [pc, #52]	@ (8006454 <xPortStartScheduler+0xdc>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a0c      	ldr	r2, [pc, #48]	@ (8006454 <xPortStartScheduler+0xdc>)
 8006422:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006426:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006428:	f000 f8b8 	bl	800659c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800642c:	4b0a      	ldr	r3, [pc, #40]	@ (8006458 <xPortStartScheduler+0xe0>)
 800642e:	2200      	movs	r2, #0
 8006430:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006432:	f7ff ff91 	bl	8006358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006436:	f7ff fa95 	bl	8005964 <vTaskSwitchContext>
	prvTaskExitError();
 800643a:	f7ff ff4d 	bl	80062d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	e000e400 	.word	0xe000e400
 800644c:	200005f0 	.word	0x200005f0
 8006450:	200005f4 	.word	0x200005f4
 8006454:	e000ed20 	.word	0xe000ed20
 8006458:	20000010 	.word	0x20000010

0800645c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	607b      	str	r3, [r7, #4]
}
 8006474:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006476:	4b0f      	ldr	r3, [pc, #60]	@ (80064b4 <vPortEnterCritical+0x58>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3301      	adds	r3, #1
 800647c:	4a0d      	ldr	r2, [pc, #52]	@ (80064b4 <vPortEnterCritical+0x58>)
 800647e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006480:	4b0c      	ldr	r3, [pc, #48]	@ (80064b4 <vPortEnterCritical+0x58>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d110      	bne.n	80064aa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006488:	4b0b      	ldr	r3, [pc, #44]	@ (80064b8 <vPortEnterCritical+0x5c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00b      	beq.n	80064aa <vPortEnterCritical+0x4e>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	603b      	str	r3, [r7, #0]
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop
 80064a8:	e7fd      	b.n	80064a6 <vPortEnterCritical+0x4a>
	}
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bc80      	pop	{r7}
 80064b2:	4770      	bx	lr
 80064b4:	20000010 	.word	0x20000010
 80064b8:	e000ed04 	.word	0xe000ed04

080064bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064c2:	4b12      	ldr	r3, [pc, #72]	@ (800650c <vPortExitCritical+0x50>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10b      	bne.n	80064e2 <vPortExitCritical+0x26>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	607b      	str	r3, [r7, #4]
}
 80064dc:	bf00      	nop
 80064de:	bf00      	nop
 80064e0:	e7fd      	b.n	80064de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064e2:	4b0a      	ldr	r3, [pc, #40]	@ (800650c <vPortExitCritical+0x50>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	4a08      	ldr	r2, [pc, #32]	@ (800650c <vPortExitCritical+0x50>)
 80064ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064ec:	4b07      	ldr	r3, [pc, #28]	@ (800650c <vPortExitCritical+0x50>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d105      	bne.n	8006500 <vPortExitCritical+0x44>
 80064f4:	2300      	movs	r3, #0
 80064f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	f383 8811 	msr	BASEPRI, r3
}
 80064fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	bc80      	pop	{r7}
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	20000010 	.word	0x20000010

08006510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006510:	f3ef 8009 	mrs	r0, PSP
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	4b0d      	ldr	r3, [pc, #52]	@ (8006550 <pxCurrentTCBConst>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006520:	6010      	str	r0, [r2, #0]
 8006522:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006526:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800652a:	f380 8811 	msr	BASEPRI, r0
 800652e:	f7ff fa19 	bl	8005964 <vTaskSwitchContext>
 8006532:	f04f 0000 	mov.w	r0, #0
 8006536:	f380 8811 	msr	BASEPRI, r0
 800653a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800653e:	6819      	ldr	r1, [r3, #0]
 8006540:	6808      	ldr	r0, [r1, #0]
 8006542:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006546:	f380 8809 	msr	PSP, r0
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	4770      	bx	lr

08006550 <pxCurrentTCBConst>:
 8006550:	200004c4 	.word	0x200004c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop

08006558 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	607b      	str	r3, [r7, #4]
}
 8006570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006572:	f7ff f939 	bl	80057e8 <xTaskIncrementTick>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800657c:	4b06      	ldr	r3, [pc, #24]	@ (8006598 <SysTick_Handler+0x40>)
 800657e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	2300      	movs	r3, #0
 8006586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	f383 8811 	msr	BASEPRI, r3
}
 800658e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006590:	bf00      	nop
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	e000ed04 	.word	0xe000ed04

0800659c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065a0:	4b0a      	ldr	r3, [pc, #40]	@ (80065cc <vPortSetupTimerInterrupt+0x30>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065a6:	4b0a      	ldr	r3, [pc, #40]	@ (80065d0 <vPortSetupTimerInterrupt+0x34>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065ac:	4b09      	ldr	r3, [pc, #36]	@ (80065d4 <vPortSetupTimerInterrupt+0x38>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a09      	ldr	r2, [pc, #36]	@ (80065d8 <vPortSetupTimerInterrupt+0x3c>)
 80065b2:	fba2 2303 	umull	r2, r3, r2, r3
 80065b6:	099b      	lsrs	r3, r3, #6
 80065b8:	4a08      	ldr	r2, [pc, #32]	@ (80065dc <vPortSetupTimerInterrupt+0x40>)
 80065ba:	3b01      	subs	r3, #1
 80065bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065be:	4b03      	ldr	r3, [pc, #12]	@ (80065cc <vPortSetupTimerInterrupt+0x30>)
 80065c0:	2207      	movs	r2, #7
 80065c2:	601a      	str	r2, [r3, #0]
}
 80065c4:	bf00      	nop
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bc80      	pop	{r7}
 80065ca:	4770      	bx	lr
 80065cc:	e000e010 	.word	0xe000e010
 80065d0:	e000e018 	.word	0xe000e018
 80065d4:	20000004 	.word	0x20000004
 80065d8:	10624dd3 	.word	0x10624dd3
 80065dc:	e000e014 	.word	0xe000e014

080065e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065e6:	f3ef 8305 	mrs	r3, IPSR
 80065ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b0f      	cmp	r3, #15
 80065f0:	d915      	bls.n	800661e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065f2:	4a17      	ldr	r2, [pc, #92]	@ (8006650 <vPortValidateInterruptPriority+0x70>)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065fc:	4b15      	ldr	r3, [pc, #84]	@ (8006654 <vPortValidateInterruptPriority+0x74>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	7afa      	ldrb	r2, [r7, #11]
 8006602:	429a      	cmp	r2, r3
 8006604:	d20b      	bcs.n	800661e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	607b      	str	r3, [r7, #4]
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	e7fd      	b.n	800661a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800661e:	4b0e      	ldr	r3, [pc, #56]	@ (8006658 <vPortValidateInterruptPriority+0x78>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006626:	4b0d      	ldr	r3, [pc, #52]	@ (800665c <vPortValidateInterruptPriority+0x7c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	d90b      	bls.n	8006646 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	603b      	str	r3, [r7, #0]
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	e7fd      	b.n	8006642 <vPortValidateInterruptPriority+0x62>
	}
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	bc80      	pop	{r7}
 800664e:	4770      	bx	lr
 8006650:	e000e3f0 	.word	0xe000e3f0
 8006654:	200005f0 	.word	0x200005f0
 8006658:	e000ed0c 	.word	0xe000ed0c
 800665c:	200005f4 	.word	0x200005f4

08006660 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08a      	sub	sp, #40	@ 0x28
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006668:	2300      	movs	r3, #0
 800666a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800666c:	f7ff f810 	bl	8005690 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006670:	4b5a      	ldr	r3, [pc, #360]	@ (80067dc <pvPortMalloc+0x17c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006678:	f000 f916 	bl	80068a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800667c:	4b58      	ldr	r3, [pc, #352]	@ (80067e0 <pvPortMalloc+0x180>)
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4013      	ands	r3, r2
 8006684:	2b00      	cmp	r3, #0
 8006686:	f040 8090 	bne.w	80067aa <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01e      	beq.n	80066ce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006690:	2208      	movs	r2, #8
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4413      	add	r3, r2
 8006696:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d015      	beq.n	80066ce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f023 0307 	bic.w	r3, r3, #7
 80066a8:	3308      	adds	r3, #8
 80066aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00b      	beq.n	80066ce <pvPortMalloc+0x6e>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	617b      	str	r3, [r7, #20]
}
 80066c8:	bf00      	nop
 80066ca:	bf00      	nop
 80066cc:	e7fd      	b.n	80066ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d06a      	beq.n	80067aa <pvPortMalloc+0x14a>
 80066d4:	4b43      	ldr	r3, [pc, #268]	@ (80067e4 <pvPortMalloc+0x184>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d865      	bhi.n	80067aa <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066de:	4b42      	ldr	r3, [pc, #264]	@ (80067e8 <pvPortMalloc+0x188>)
 80066e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066e2:	4b41      	ldr	r3, [pc, #260]	@ (80067e8 <pvPortMalloc+0x188>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066e8:	e004      	b.n	80066f4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d903      	bls.n	8006706 <pvPortMalloc+0xa6>
 80066fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f1      	bne.n	80066ea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006706:	4b35      	ldr	r3, [pc, #212]	@ (80067dc <pvPortMalloc+0x17c>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800670c:	429a      	cmp	r2, r3
 800670e:	d04c      	beq.n	80067aa <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2208      	movs	r2, #8
 8006716:	4413      	add	r3, r2
 8006718:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800671a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	1ad2      	subs	r2, r2, r3
 800672a:	2308      	movs	r3, #8
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	429a      	cmp	r2, r3
 8006730:	d920      	bls.n	8006774 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4413      	add	r3, r2
 8006738:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <pvPortMalloc+0xfc>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	613b      	str	r3, [r7, #16]
}
 8006756:	bf00      	nop
 8006758:	bf00      	nop
 800675a:	e7fd      	b.n	8006758 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	1ad2      	subs	r2, r2, r3
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800676e:	69b8      	ldr	r0, [r7, #24]
 8006770:	f000 f8fc 	bl	800696c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006774:	4b1b      	ldr	r3, [pc, #108]	@ (80067e4 <pvPortMalloc+0x184>)
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	4a19      	ldr	r2, [pc, #100]	@ (80067e4 <pvPortMalloc+0x184>)
 8006780:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006782:	4b18      	ldr	r3, [pc, #96]	@ (80067e4 <pvPortMalloc+0x184>)
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	4b19      	ldr	r3, [pc, #100]	@ (80067ec <pvPortMalloc+0x18c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d203      	bcs.n	8006796 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800678e:	4b15      	ldr	r3, [pc, #84]	@ (80067e4 <pvPortMalloc+0x184>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a16      	ldr	r2, [pc, #88]	@ (80067ec <pvPortMalloc+0x18c>)
 8006794:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	4b11      	ldr	r3, [pc, #68]	@ (80067e0 <pvPortMalloc+0x180>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	431a      	orrs	r2, r3
 80067a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067aa:	f7fe ff7f 	bl	80056ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00b      	beq.n	80067d0 <pvPortMalloc+0x170>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	60fb      	str	r3, [r7, #12]
}
 80067ca:	bf00      	nop
 80067cc:	bf00      	nop
 80067ce:	e7fd      	b.n	80067cc <pvPortMalloc+0x16c>
	return pvReturn;
 80067d0:	69fb      	ldr	r3, [r7, #28]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3728      	adds	r7, #40	@ 0x28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20001200 	.word	0x20001200
 80067e0:	2000120c 	.word	0x2000120c
 80067e4:	20001204 	.word	0x20001204
 80067e8:	200011f8 	.word	0x200011f8
 80067ec:	20001208 	.word	0x20001208

080067f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d04a      	beq.n	8006898 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006802:	2308      	movs	r3, #8
 8006804:	425b      	negs	r3, r3
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	4413      	add	r3, r2
 800680a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	4b22      	ldr	r3, [pc, #136]	@ (80068a0 <vPortFree+0xb0>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4013      	ands	r3, r2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10b      	bne.n	8006836 <vPortFree+0x46>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	60fb      	str	r3, [r7, #12]
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00b      	beq.n	8006856 <vPortFree+0x66>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	60bb      	str	r3, [r7, #8]
}
 8006850:	bf00      	nop
 8006852:	bf00      	nop
 8006854:	e7fd      	b.n	8006852 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	4b11      	ldr	r3, [pc, #68]	@ (80068a0 <vPortFree+0xb0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4013      	ands	r3, r2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d019      	beq.n	8006898 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d115      	bne.n	8006898 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	4b0b      	ldr	r3, [pc, #44]	@ (80068a0 <vPortFree+0xb0>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	43db      	mvns	r3, r3
 8006876:	401a      	ands	r2, r3
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800687c:	f7fe ff08 	bl	8005690 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	4b07      	ldr	r3, [pc, #28]	@ (80068a4 <vPortFree+0xb4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4413      	add	r3, r2
 800688a:	4a06      	ldr	r2, [pc, #24]	@ (80068a4 <vPortFree+0xb4>)
 800688c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800688e:	6938      	ldr	r0, [r7, #16]
 8006890:	f000 f86c 	bl	800696c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006894:	f7fe ff0a 	bl	80056ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006898:	bf00      	nop
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	2000120c 	.word	0x2000120c
 80068a4:	20001204 	.word	0x20001204

080068a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80068b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068b4:	4b27      	ldr	r3, [pc, #156]	@ (8006954 <prvHeapInit+0xac>)
 80068b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f003 0307 	and.w	r3, r3, #7
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00c      	beq.n	80068dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3307      	adds	r3, #7
 80068c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f023 0307 	bic.w	r3, r3, #7
 80068ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006954 <prvHeapInit+0xac>)
 80068d8:	4413      	add	r3, r2
 80068da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006958 <prvHeapInit+0xb0>)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068e6:	4b1c      	ldr	r3, [pc, #112]	@ (8006958 <prvHeapInit+0xb0>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	4413      	add	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068f4:	2208      	movs	r2, #8
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	1a9b      	subs	r3, r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0307 	bic.w	r3, r3, #7
 8006902:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4a15      	ldr	r2, [pc, #84]	@ (800695c <prvHeapInit+0xb4>)
 8006908:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800690a:	4b14      	ldr	r3, [pc, #80]	@ (800695c <prvHeapInit+0xb4>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2200      	movs	r2, #0
 8006910:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006912:	4b12      	ldr	r3, [pc, #72]	@ (800695c <prvHeapInit+0xb4>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2200      	movs	r2, #0
 8006918:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	1ad2      	subs	r2, r2, r3
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006928:	4b0c      	ldr	r3, [pc, #48]	@ (800695c <prvHeapInit+0xb4>)
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	4a0a      	ldr	r2, [pc, #40]	@ (8006960 <prvHeapInit+0xb8>)
 8006936:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	4a09      	ldr	r2, [pc, #36]	@ (8006964 <prvHeapInit+0xbc>)
 800693e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006940:	4b09      	ldr	r3, [pc, #36]	@ (8006968 <prvHeapInit+0xc0>)
 8006942:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006946:	601a      	str	r2, [r3, #0]
}
 8006948:	bf00      	nop
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	200005f8 	.word	0x200005f8
 8006958:	200011f8 	.word	0x200011f8
 800695c:	20001200 	.word	0x20001200
 8006960:	20001208 	.word	0x20001208
 8006964:	20001204 	.word	0x20001204
 8006968:	2000120c 	.word	0x2000120c

0800696c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006974:	4b27      	ldr	r3, [pc, #156]	@ (8006a14 <prvInsertBlockIntoFreeList+0xa8>)
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	e002      	b.n	8006980 <prvInsertBlockIntoFreeList+0x14>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	429a      	cmp	r2, r3
 8006988:	d8f7      	bhi.n	800697a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	4413      	add	r3, r2
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	429a      	cmp	r2, r3
 800699a:	d108      	bne.n	80069ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	441a      	add	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	441a      	add	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d118      	bne.n	80069f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	4b14      	ldr	r3, [pc, #80]	@ (8006a18 <prvInsertBlockIntoFreeList+0xac>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d00d      	beq.n	80069ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	441a      	add	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	e008      	b.n	80069fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006a18 <prvInsertBlockIntoFreeList+0xac>)
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	e003      	b.n	80069fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d002      	beq.n	8006a0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a0a:	bf00      	nop
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr
 8006a14:	200011f8 	.word	0x200011f8
 8006a18:	20001200 	.word	0x20001200

08006a1c <memset>:
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	4402      	add	r2, r0
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d100      	bne.n	8006a26 <memset+0xa>
 8006a24:	4770      	bx	lr
 8006a26:	f803 1b01 	strb.w	r1, [r3], #1
 8006a2a:	e7f9      	b.n	8006a20 <memset+0x4>

08006a2c <__libc_init_array>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	2600      	movs	r6, #0
 8006a30:	4d0c      	ldr	r5, [pc, #48]	@ (8006a64 <__libc_init_array+0x38>)
 8006a32:	4c0d      	ldr	r4, [pc, #52]	@ (8006a68 <__libc_init_array+0x3c>)
 8006a34:	1b64      	subs	r4, r4, r5
 8006a36:	10a4      	asrs	r4, r4, #2
 8006a38:	42a6      	cmp	r6, r4
 8006a3a:	d109      	bne.n	8006a50 <__libc_init_array+0x24>
 8006a3c:	f000 f828 	bl	8006a90 <_init>
 8006a40:	2600      	movs	r6, #0
 8006a42:	4d0a      	ldr	r5, [pc, #40]	@ (8006a6c <__libc_init_array+0x40>)
 8006a44:	4c0a      	ldr	r4, [pc, #40]	@ (8006a70 <__libc_init_array+0x44>)
 8006a46:	1b64      	subs	r4, r4, r5
 8006a48:	10a4      	asrs	r4, r4, #2
 8006a4a:	42a6      	cmp	r6, r4
 8006a4c:	d105      	bne.n	8006a5a <__libc_init_array+0x2e>
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a54:	4798      	blx	r3
 8006a56:	3601      	adds	r6, #1
 8006a58:	e7ee      	b.n	8006a38 <__libc_init_array+0xc>
 8006a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a5e:	4798      	blx	r3
 8006a60:	3601      	adds	r6, #1
 8006a62:	e7f2      	b.n	8006a4a <__libc_init_array+0x1e>
 8006a64:	08006b60 	.word	0x08006b60
 8006a68:	08006b60 	.word	0x08006b60
 8006a6c:	08006b60 	.word	0x08006b60
 8006a70:	08006b64 	.word	0x08006b64

08006a74 <memcpy>:
 8006a74:	440a      	add	r2, r1
 8006a76:	4291      	cmp	r1, r2
 8006a78:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a7c:	d100      	bne.n	8006a80 <memcpy+0xc>
 8006a7e:	4770      	bx	lr
 8006a80:	b510      	push	{r4, lr}
 8006a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a86:	4291      	cmp	r1, r2
 8006a88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a8c:	d1f9      	bne.n	8006a82 <memcpy+0xe>
 8006a8e:	bd10      	pop	{r4, pc}

08006a90 <_init>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	bf00      	nop
 8006a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a96:	bc08      	pop	{r3}
 8006a98:	469e      	mov	lr, r3
 8006a9a:	4770      	bx	lr

08006a9c <_fini>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	bf00      	nop
 8006aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa2:	bc08      	pop	{r3}
 8006aa4:	469e      	mov	lr, r3
 8006aa6:	4770      	bx	lr
