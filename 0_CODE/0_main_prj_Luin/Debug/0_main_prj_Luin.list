
0_main_prj_Luin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006508  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006618  08006618  00007618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d8  080066d8  00008014  2**0
                  CONTENTS
  4 .ARM          00000008  080066d8  080066d8  000076d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066e0  080066e0  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066e0  080066e0  000076e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066e4  080066e4  000076e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080066e8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011fc  20000014  080066fc  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001210  080066fc  00008210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bce  00000000  00000000  0000803d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003662  00000000  00000000  0001fc0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  00023270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001233  00000000  00000000  00024998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a29d  00000000  00000000  00025bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c10e  00000000  00000000  0003fe68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097627  00000000  00000000  0005bf76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f359d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006214  00000000  00000000  000f35e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  000f97f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08006600 	.word	0x08006600

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08006600 	.word	0x08006600

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <CLCD_Delay>:
//************************** Low Level Function ****************************************************************//
uint8_t currentline;
uint8_t Xcursor,Ycursor,countWriteChar,CurrentWriteChar;
CLCD_I2C_Name LCD1;
static void CLCD_Delay(uint16_t Time)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	4618      	mov	r0, r3
 800016e:	f000 fffd 	bl	800116c <HAL_Delay>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}

0800017a <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b086      	sub	sp, #24
 800017e:	af02      	add	r7, sp, #8
 8000180:	6078      	str	r0, [r7, #4]
 8000182:	460b      	mov	r3, r1
 8000184:	70fb      	strb	r3, [r7, #3]
 8000186:	4613      	mov	r3, r2
 8000188:	70bb      	strb	r3, [r7, #2]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 800018a:	78fb      	ldrb	r3, [r7, #3]
 800018c:	f023 030f 	bic.w	r3, r3, #15
 8000190:	73fb      	strb	r3, [r7, #15]
	Data_L = (Data<<4)&0xF0;
 8000192:	78fb      	ldrb	r3, [r7, #3]
 8000194:	011b      	lsls	r3, r3, #4
 8000196:	73bb      	strb	r3, [r7, #14]
	if(LCD->BACKLIGHT)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	7adb      	ldrb	r3, [r3, #11]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d007      	beq.n	80001b0 <CLCD_WriteI2C+0x36>
	{
		Data_H |= LCD_BACKLIGHT;
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	f043 0308 	orr.w	r3, r3, #8
 80001a6:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 80001a8:	7bbb      	ldrb	r3, [r7, #14]
 80001aa:	f043 0308 	orr.w	r3, r3, #8
 80001ae:	73bb      	strb	r3, [r7, #14]
	}
	if(Mode == CLCD_DATA)
 80001b0:	78bb      	ldrb	r3, [r7, #2]
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	d108      	bne.n	80001c8 <CLCD_WriteI2C+0x4e>
	{
		Data_H |= LCD_RS;
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
 80001b8:	f043 0301 	orr.w	r3, r3, #1
 80001bc:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	73bb      	strb	r3, [r7, #14]
 80001c6:	e00a      	b.n	80001de <CLCD_WriteI2C+0x64>
	}
	else if(Mode == CLCD_COMMAND)
 80001c8:	78bb      	ldrb	r3, [r7, #2]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d107      	bne.n	80001de <CLCD_WriteI2C+0x64>
	{
		Data_H &= ~LCD_RS;
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f023 0301 	bic.w	r3, r3, #1
 80001d4:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 80001d6:	7bbb      	ldrb	r3, [r7, #14]
 80001d8:	f023 0301 	bic.w	r3, r3, #1
 80001dc:	73bb      	strb	r3, [r7, #14]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 80001de:	7bfb      	ldrb	r3, [r7, #15]
 80001e0:	f043 0304 	orr.w	r3, r3, #4
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	723b      	strb	r3, [r7, #8]
	CLCD_Delay(1);
 80001e8:	2001      	movs	r0, #1
 80001ea:	f7ff ffb9 	bl	8000160 <CLCD_Delay>
	Data_I2C[1] = Data_H;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	727b      	strb	r3, [r7, #9]
	Data_I2C[2] = Data_L|LCD_EN;
 80001f2:	7bbb      	ldrb	r3, [r7, #14]
 80001f4:	f043 0304 	orr.w	r3, r3, #4
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	72bb      	strb	r3, [r7, #10]
	CLCD_Delay(1);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f7ff ffaf 	bl	8000160 <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6818      	ldr	r0, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	791b      	ldrb	r3, [r3, #4]
 800020e:	4619      	mov	r1, r3
 8000210:	f107 0208 	add.w	r2, r7, #8
 8000214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2304      	movs	r3, #4
 800021c:	f001 fc5e 	bl	8001adc <HAL_I2C_Master_Transmit>

}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <CLCD_I2C_Init>:
//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	4611      	mov	r1, r2
 8000234:	461a      	mov	r2, r3
 8000236:	460b      	mov	r3, r1
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	4613      	mov	r3, r2
 800023c:	71bb      	strb	r3, [r7, #6]
	LCD->I2C = hi2c_CLCD;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	79fa      	ldrb	r2, [r7, #7]
 8000248:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	7e3a      	ldrb	r2, [r7, #24]
 8000254:	719a      	strb	r2, [r3, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2228      	movs	r2, #40	@ 0x28
 800025a:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2206      	movs	r2, #6
 8000260:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	220c      	movs	r2, #12
 8000266:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	2214      	movs	r2, #20
 800026c:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2208      	movs	r2, #8
 8000272:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(50);
 8000274:	2032      	movs	r0, #50	@ 0x32
 8000276:	f7ff ff73 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 800027a:	2200      	movs	r2, #0
 800027c:	2133      	movs	r1, #51	@ 0x33
 800027e:	68f8      	ldr	r0, [r7, #12]
 8000280:	f7ff ff7b 	bl	800017a <CLCD_WriteI2C>
//	CLCD_Delay(5);
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8000284:	2200      	movs	r2, #0
 8000286:	2133      	movs	r1, #51	@ 0x33
 8000288:	68f8      	ldr	r0, [r7, #12]
 800028a:	f7ff ff76 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800028e:	2005      	movs	r0, #5
 8000290:	f7ff ff66 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8000294:	2200      	movs	r2, #0
 8000296:	2132      	movs	r1, #50	@ 0x32
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f7ff ff6e 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 800029e:	2005      	movs	r0, #5
 80002a0:	f7ff ff5e 	bl	8000160 <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2120      	movs	r1, #32
 80002a8:	68f8      	ldr	r0, [r7, #12]
 80002aa:	f7ff ff66 	bl	800017a <CLCD_WriteI2C>
	CLCD_Delay(5);
 80002ae:	2005      	movs	r0, #5
 80002b0:	f7ff ff56 	bl	8000160 <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	79db      	ldrb	r3, [r3, #7]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	68f8      	ldr	r0, [r7, #12]
 80002be:	f7ff ff5c 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	7a1b      	ldrb	r3, [r3, #8]
 80002c6:	2200      	movs	r2, #0
 80002c8:	4619      	mov	r1, r3
 80002ca:	68f8      	ldr	r0, [r7, #12]
 80002cc:	f7ff ff55 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	7a5b      	ldrb	r3, [r3, #9]
 80002d4:	2200      	movs	r2, #0
 80002d6:	4619      	mov	r1, r3
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	f7ff ff4e 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	7a9b      	ldrb	r3, [r3, #10]
 80002e2:	2200      	movs	r2, #0
 80002e4:	4619      	mov	r1, r3
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff47 	bl	800017a <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2101      	movs	r1, #1
 80002f0:	68f8      	ldr	r0, [r7, #12]
 80002f2:	f7ff ff42 	bl	800017a <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2102      	movs	r1, #2
 80002fa:	68f8      	ldr	r0, [r7, #12]
 80002fc:	f7ff ff3d 	bl	800017a <CLCD_WriteI2C>
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	4a06      	ldr	r2, [pc, #24]	@ (8000330 <vApplicationGetIdleTaskMemory+0x28>)
 8000318:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	4a05      	ldr	r2, [pc, #20]	@ (8000334 <vApplicationGetIdleTaskMemory+0x2c>)
 800031e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2280      	movs	r2, #128	@ 0x80
 8000324:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000326:	bf00      	nop
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	20000030 	.word	0x20000030
 8000334:	20000084 	.word	0x20000084

08000338 <Init_Sys>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void Init_Sys (void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(L_ERR_GPIO_Port, L_ERR_Pin, GPIO_PIN_SET);
 800033c:	2201      	movs	r2, #1
 800033e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000342:	480b      	ldr	r0, [pc, #44]	@ (8000370 <Init_Sys+0x38>)
 8000344:	f001 fa4c 	bl	80017e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_USR_GPIO_Port, L_USR_Pin, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800034e:	4808      	ldr	r0, [pc, #32]	@ (8000370 <Init_Sys+0x38>)
 8000350:	f001 fa46 	bl	80017e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L_DBG_GPIO_Port, L_DBG_Pin, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800035a:	4806      	ldr	r0, [pc, #24]	@ (8000374 <Init_Sys+0x3c>)
 800035c:	f001 fa40 	bl	80017e0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_CTR_GPIO_Port, LCD_CTR_Pin, GPIO_PIN_SET);
 8000360:	2201      	movs	r2, #1
 8000362:	2180      	movs	r1, #128	@ 0x80
 8000364:	4804      	ldr	r0, [pc, #16]	@ (8000378 <Init_Sys+0x40>)
 8000366:	f001 fa3b 	bl	80017e0 <HAL_GPIO_WritePin>
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40010800 	.word	0x40010800
 8000374:	40011000 	.word	0x40011000
 8000378:	40010c00 	.word	0x40010c00

0800037c <HAL_UART_RxCpltCallback>:
uint8_t rxData = 0;;
uint8_t rxArray[20] = {};
uint8_t rxCounter = 1;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	if(&huart1 == huart)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a3e      	ldr	r2, [pc, #248]	@ (8000480 <HAL_UART_RxCpltCallback+0x104>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d138      	bne.n	80003fe <HAL_UART_RxCpltCallback+0x82>
	{

		if(rxData == '\r')
 800038c:	4b3d      	ldr	r3, [pc, #244]	@ (8000484 <HAL_UART_RxCpltCallback+0x108>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b0d      	cmp	r3, #13
 8000392:	d11a      	bne.n	80003ca <HAL_UART_RxCpltCallback+0x4e>
		{
			HAL_UART_Transmit(&huart1, rxArray, strlen((const char *)rxArray), 100);
 8000394:	483c      	ldr	r0, [pc, #240]	@ (8000488 <HAL_UART_RxCpltCallback+0x10c>)
 8000396:	f7ff fedb 	bl	8000150 <strlen>
 800039a:	4603      	mov	r3, r0
 800039c:	b29a      	uxth	r2, r3
 800039e:	2364      	movs	r3, #100	@ 0x64
 80003a0:	4939      	ldr	r1, [pc, #228]	@ (8000488 <HAL_UART_RxCpltCallback+0x10c>)
 80003a2:	4837      	ldr	r0, [pc, #220]	@ (8000480 <HAL_UART_RxCpltCallback+0x104>)
 80003a4:	f003 f8a6 	bl	80034f4 <HAL_UART_Transmit>
			for(uint8_t i = 0; i < 20; i++)
 80003a8:	2300      	movs	r3, #0
 80003aa:	73fb      	strb	r3, [r7, #15]
 80003ac:	e009      	b.n	80003c2 <HAL_UART_RxCpltCallback+0x46>
			{
				rxArray[i] = 0;
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
 80003b0:	4a35      	ldr	r2, [pc, #212]	@ (8000488 <HAL_UART_RxCpltCallback+0x10c>)
 80003b2:	2100      	movs	r1, #0
 80003b4:	54d1      	strb	r1, [r2, r3]
				rxCounter = 0;
 80003b6:	4b35      	ldr	r3, [pc, #212]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 20; i++)
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	3301      	adds	r3, #1
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	2b13      	cmp	r3, #19
 80003c6:	d9f2      	bls.n	80003ae <HAL_UART_RxCpltCallback+0x32>
 80003c8:	e00c      	b.n	80003e4 <HAL_UART_RxCpltCallback+0x68>
			}
		}
		else
		{
			rxArray[rxCounter] = rxData;
 80003ca:	4b30      	ldr	r3, [pc, #192]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	461a      	mov	r2, r3
 80003d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000484 <HAL_UART_RxCpltCallback+0x108>)
 80003d2:	7819      	ldrb	r1, [r3, #0]
 80003d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000488 <HAL_UART_RxCpltCallback+0x10c>)
 80003d6:	5499      	strb	r1, [r3, r2]
			rxCounter++;
 80003d8:	4b2c      	ldr	r3, [pc, #176]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	3301      	adds	r3, #1
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4b2a      	ldr	r3, [pc, #168]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 80003e2:	701a      	strb	r2, [r3, #0]
		}
		if(rxCounter >= 20)
 80003e4:	4b29      	ldr	r3, [pc, #164]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b13      	cmp	r3, #19
 80003ea:	d902      	bls.n	80003f2 <HAL_UART_RxCpltCallback+0x76>
		{
			rxCounter = 0;
 80003ec:	4b27      	ldr	r3, [pc, #156]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80003f2:	2201      	movs	r2, #1
 80003f4:	4923      	ldr	r1, [pc, #140]	@ (8000484 <HAL_UART_RxCpltCallback+0x108>)
 80003f6:	4822      	ldr	r0, [pc, #136]	@ (8000480 <HAL_UART_RxCpltCallback+0x104>)
 80003f8:	f003 f8ff 	bl	80035fa <HAL_UART_Receive_IT>
			rxCounter = 0;
		}
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
	}

}
 80003fc:	e03b      	b.n	8000476 <HAL_UART_RxCpltCallback+0xfa>
	else if(&huart2 == huart)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a23      	ldr	r2, [pc, #140]	@ (8000490 <HAL_UART_RxCpltCallback+0x114>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d137      	bne.n	8000476 <HAL_UART_RxCpltCallback+0xfa>
		if(rxData == '\r')
 8000406:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <HAL_UART_RxCpltCallback+0x108>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b0d      	cmp	r3, #13
 800040c:	d11a      	bne.n	8000444 <HAL_UART_RxCpltCallback+0xc8>
			HAL_UART_Transmit(&huart2, rxArray, strlen((const char *)rxArray), 100);
 800040e:	481e      	ldr	r0, [pc, #120]	@ (8000488 <HAL_UART_RxCpltCallback+0x10c>)
 8000410:	f7ff fe9e 	bl	8000150 <strlen>
 8000414:	4603      	mov	r3, r0
 8000416:	b29a      	uxth	r2, r3
 8000418:	2364      	movs	r3, #100	@ 0x64
 800041a:	491b      	ldr	r1, [pc, #108]	@ (8000488 <HAL_UART_RxCpltCallback+0x10c>)
 800041c:	481c      	ldr	r0, [pc, #112]	@ (8000490 <HAL_UART_RxCpltCallback+0x114>)
 800041e:	f003 f869 	bl	80034f4 <HAL_UART_Transmit>
			for(uint8_t i = 0; i < 20; i++)
 8000422:	2300      	movs	r3, #0
 8000424:	73bb      	strb	r3, [r7, #14]
 8000426:	e009      	b.n	800043c <HAL_UART_RxCpltCallback+0xc0>
				rxArray[i] = 0;
 8000428:	7bbb      	ldrb	r3, [r7, #14]
 800042a:	4a17      	ldr	r2, [pc, #92]	@ (8000488 <HAL_UART_RxCpltCallback+0x10c>)
 800042c:	2100      	movs	r1, #0
 800042e:	54d1      	strb	r1, [r2, r3]
				rxCounter = 0;
 8000430:	4b16      	ldr	r3, [pc, #88]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 20; i++)
 8000436:	7bbb      	ldrb	r3, [r7, #14]
 8000438:	3301      	adds	r3, #1
 800043a:	73bb      	strb	r3, [r7, #14]
 800043c:	7bbb      	ldrb	r3, [r7, #14]
 800043e:	2b13      	cmp	r3, #19
 8000440:	d9f2      	bls.n	8000428 <HAL_UART_RxCpltCallback+0xac>
 8000442:	e00c      	b.n	800045e <HAL_UART_RxCpltCallback+0xe2>
			rxArray[rxCounter] = rxData;
 8000444:	4b11      	ldr	r3, [pc, #68]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	461a      	mov	r2, r3
 800044a:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <HAL_UART_RxCpltCallback+0x108>)
 800044c:	7819      	ldrb	r1, [r3, #0]
 800044e:	4b0e      	ldr	r3, [pc, #56]	@ (8000488 <HAL_UART_RxCpltCallback+0x10c>)
 8000450:	5499      	strb	r1, [r3, r2]
			rxCounter++;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	b2da      	uxtb	r2, r3
 800045a:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 800045c:	701a      	strb	r2, [r3, #0]
		if(rxCounter >= 20)
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b13      	cmp	r3, #19
 8000464:	d902      	bls.n	800046c <HAL_UART_RxCpltCallback+0xf0>
			rxCounter = 0;
 8000466:	4b09      	ldr	r3, [pc, #36]	@ (800048c <HAL_UART_RxCpltCallback+0x110>)
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &rxData, 1);
 800046c:	2201      	movs	r2, #1
 800046e:	4905      	ldr	r1, [pc, #20]	@ (8000484 <HAL_UART_RxCpltCallback+0x108>)
 8000470:	4807      	ldr	r0, [pc, #28]	@ (8000490 <HAL_UART_RxCpltCallback+0x114>)
 8000472:	f003 f8c2 	bl	80035fa <HAL_UART_Receive_IT>
}
 8000476:	bf00      	nop
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200003c0 	.word	0x200003c0
 8000484:	20000460 	.word	0x20000460
 8000488:	20000464 	.word	0x20000464
 800048c:	20000000 	.word	0x20000000
 8000490:	20000408 	.word	0x20000408

08000494 <Task_action>:

void Task_action(char* sms)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, sms, 1, 100);
 800049c:	2364      	movs	r3, #100	@ 0x64
 800049e:	2201      	movs	r2, #1
 80004a0:	6879      	ldr	r1, [r7, #4]
 80004a2:	4806      	ldr	r0, [pc, #24]	@ (80004bc <Task_action+0x28>)
 80004a4:	f003 f826 	bl	80034f4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "\n", 1, 100);
 80004a8:	2364      	movs	r3, #100	@ 0x64
 80004aa:	2201      	movs	r2, #1
 80004ac:	4904      	ldr	r1, [pc, #16]	@ (80004c0 <Task_action+0x2c>)
 80004ae:	4803      	ldr	r0, [pc, #12]	@ (80004bc <Task_action+0x28>)
 80004b0:	f003 f820 	bl	80034f4 <HAL_UART_Transmit>
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	200003c0 	.word	0x200003c0
 80004c0:	08006618 	.word	0x08006618

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b09e      	sub	sp, #120	@ 0x78
 80004c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fe1d 	bl	8001108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f88d 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 fa2d 	bl	8000930 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d6:	f000 f8fd 	bl	80006d4 <MX_SPI1_Init>
  MX_TIM2_Init();
 80004da:	f000 f981 	bl	80007e0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004de:	f000 f9d3 	bl	8000888 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80004e2:	f000 f92d 	bl	8000740 <MX_TIM1_Init>
  MX_I2C1_Init();
 80004e6:	f000 f8c7 	bl	8000678 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f9f7 	bl	80008dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Init_Sys();
 80004ee:	f7ff ff23 	bl	8000338 <Init_Sys>

  HAL_GPIO_WritePin(LCD_CTR_GPIO_Port, LCD_CTR_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2180      	movs	r1, #128	@ 0x80
 80004f6:	4830      	ldr	r0, [pc, #192]	@ (80005b8 <main+0xf4>)
 80004f8:	f001 f972 	bl	80017e0 <HAL_GPIO_WritePin>

  CLCD_I2C_Init(&LCD1,&hi2c1,ADDR_PCF8574,20,4);
 80004fc:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8000500:	2304      	movs	r3, #4
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	2314      	movs	r3, #20
 8000506:	227e      	movs	r2, #126	@ 0x7e
 8000508:	492c      	ldr	r1, [pc, #176]	@ (80005bc <main+0xf8>)
 800050a:	f7ff fe8d 	bl	8000228 <CLCD_I2C_Init>
//  LCD_I2C_Init();

#if (TEST_UART)
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800050e:	2201      	movs	r2, #1
 8000510:	492b      	ldr	r1, [pc, #172]	@ (80005c0 <main+0xfc>)
 8000512:	482c      	ldr	r0, [pc, #176]	@ (80005c4 <main+0x100>)
 8000514:	f003 f871 	bl	80035fa <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000518:	2201      	movs	r2, #1
 800051a:	4929      	ldr	r1, [pc, #164]	@ (80005c0 <main+0xfc>)
 800051c:	482a      	ldr	r0, [pc, #168]	@ (80005c8 <main+0x104>)
 800051e:	f003 f86c 	bl	80035fa <HAL_UART_Receive_IT>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 8, uint8_t);
 8000522:	4b2a      	ldr	r3, [pc, #168]	@ (80005cc <main+0x108>)
 8000524:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000528:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800052a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 800052e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f003 fe94 	bl	8004262 <osMessageCreate>
 800053a:	4603      	mov	r3, r0
 800053c:	4a24      	ldr	r2, [pc, #144]	@ (80005d0 <main+0x10c>)
 800053e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of sender1 */
  osThreadDef(sender1, StartSender1_Hand, osPriorityNormal, 0, 128);
 8000540:	4b24      	ldr	r3, [pc, #144]	@ (80005d4 <main+0x110>)
 8000542:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000546:	461d      	mov	r5, r3
 8000548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000550:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sender1Handle = osThreadCreate(osThread(sender1), NULL);
 8000554:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f003 fe21 	bl	80041a2 <osThreadCreate>
 8000560:	4603      	mov	r3, r0
 8000562:	4a1d      	ldr	r2, [pc, #116]	@ (80005d8 <main+0x114>)
 8000564:	6013      	str	r3, [r2, #0]

  /* definition and creation of sender2 */
  osThreadDef(sender2, StartSender2_Hand, osPriorityLow, 0, 128);
 8000566:	4b1d      	ldr	r3, [pc, #116]	@ (80005dc <main+0x118>)
 8000568:	f107 041c 	add.w	r4, r7, #28
 800056c:	461d      	mov	r5, r3
 800056e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000572:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000576:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sender2Handle = osThreadCreate(osThread(sender2), NULL);
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f003 fe0e 	bl	80041a2 <osThreadCreate>
 8000586:	4603      	mov	r3, r0
 8000588:	4a15      	ldr	r2, [pc, #84]	@ (80005e0 <main+0x11c>)
 800058a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Receive */
  osThreadDef(Receive, StartReceive_Hand, osPriorityLow, 0, 128);
 800058c:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <main+0x120>)
 800058e:	463c      	mov	r4, r7
 8000590:	461d      	mov	r5, r3
 8000592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000596:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReceiveHandle = osThreadCreate(osThread(Receive), NULL);
 800059e:	463b      	mov	r3, r7
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fdfd 	bl	80041a2 <osThreadCreate>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <main+0x124>)
 80005ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ae:	f003 fdf1 	bl	8004194 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b2:	bf00      	nop
 80005b4:	e7fd      	b.n	80005b2 <main+0xee>
 80005b6:	bf00      	nop
 80005b8:	40010c00 	.word	0x40010c00
 80005bc:	20000284 	.word	0x20000284
 80005c0:	20000460 	.word	0x20000460
 80005c4:	200003c0 	.word	0x200003c0
 80005c8:	20000408 	.word	0x20000408
 80005cc:	0800661c 	.word	0x0800661c
 80005d0:	2000045c 	.word	0x2000045c
 80005d4:	08006634 	.word	0x08006634
 80005d8:	20000450 	.word	0x20000450
 80005dc:	08006658 	.word	0x08006658
 80005e0:	20000454 	.word	0x20000454
 80005e4:	0800667c 	.word	0x0800667c
 80005e8:	20000458 	.word	0x20000458

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	@ 0x40
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0318 	add.w	r3, r7, #24
 80005f6:	2228      	movs	r2, #40	@ 0x28
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f005 ffc6 	bl	800658c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060e:	2301      	movs	r3, #1
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000612:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000624:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000628:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800062a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800062e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0318 	add.w	r3, r7, #24
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fda9 	bl	800218c <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000640:	f000 fa9e 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2302      	movs	r3, #2
 800064a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2102      	movs	r1, #2
 800065e:	4618      	mov	r0, r3
 8000660:	f002 f816 	bl	8002690 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800066a:	f000 fa89 	bl	8000b80 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3740      	adds	r7, #64	@ 0x40
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800067c:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <MX_I2C1_Init+0x50>)
 800067e:	4a13      	ldr	r2, [pc, #76]	@ (80006cc <MX_I2C1_Init+0x54>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_I2C1_Init+0x50>)
 8000684:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <MX_I2C1_Init+0x58>)
 8000686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_I2C1_Init+0x50>)
 8000696:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800069a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a2:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <MX_I2C1_Init+0x50>)
 80006b6:	f001 f8cd 	bl	8001854 <HAL_I2C_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 fa5e 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000284 	.word	0x20000284
 80006cc:	40005400 	.word	0x40005400
 80006d0:	000186a0 	.word	0x000186a0

080006d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d8:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <MX_SPI1_Init+0x64>)
 80006da:	4a18      	ldr	r2, [pc, #96]	@ (800073c <MX_SPI1_Init+0x68>)
 80006dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006de:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <MX_SPI1_Init+0x64>)
 80006e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e6:	4b14      	ldr	r3, [pc, #80]	@ (8000738 <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ec:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f2:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_SPI1_Init+0x64>)
 8000700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000704:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <MX_SPI1_Init+0x64>)
 8000708:	2228      	movs	r2, #40	@ 0x28
 800070a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800070c:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	@ (8000738 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <MX_SPI1_Init+0x64>)
 8000720:	220a      	movs	r2, #10
 8000722:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	@ (8000738 <MX_SPI1_Init+0x64>)
 8000726:	f002 f971 	bl	8002a0c <HAL_SPI_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000730:	f000 fa26 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200002d8 	.word	0x200002d8
 800073c:	40013000 	.word	0x40013000

08000740 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000754:	463b      	mov	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800075c:	4b1e      	ldr	r3, [pc, #120]	@ (80007d8 <MX_TIM1_Init+0x98>)
 800075e:	4a1f      	ldr	r2, [pc, #124]	@ (80007dc <MX_TIM1_Init+0x9c>)
 8000760:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000762:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <MX_TIM1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <MX_TIM1_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_TIM1_Init+0x98>)
 8000770:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000774:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000776:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_TIM1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800077c:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <MX_TIM1_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <MX_TIM1_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000788:	4813      	ldr	r0, [pc, #76]	@ (80007d8 <MX_TIM1_Init+0x98>)
 800078a:	f002 f9c3 	bl	8002b14 <HAL_TIM_Base_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000794:	f000 f9f4 	bl	8000b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800079c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <MX_TIM1_Init+0x98>)
 80007a6:	f002 fc01 	bl	8002fac <HAL_TIM_ConfigClockSource>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80007b0:	f000 f9e6 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_TIM1_Init+0x98>)
 80007c2:	f002 fdd7 	bl	8003374 <HAL_TIMEx_MasterConfigSynchronization>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007cc:	f000 f9d8 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000330 	.word	0x20000330
 80007dc:	40012c00 	.word	0x40012c00

080007e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	@ 0x30
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2224      	movs	r2, #36	@ 0x24
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 fecc 	bl	800658c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007fc:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <MX_TIM2_Init+0xa4>)
 80007fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000802:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000804:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <MX_TIM2_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <MX_TIM2_Init+0xa4>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000810:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <MX_TIM2_Init+0xa4>)
 8000812:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000816:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_TIM2_Init+0xa4>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <MX_TIM2_Init+0xa4>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000824:	2301      	movs	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800082c:	2301      	movs	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800083c:	2301      	movs	r3, #1
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	480d      	ldr	r0, [pc, #52]	@ (8000884 <MX_TIM2_Init+0xa4>)
 8000850:	f002 fa02 	bl	8002c58 <HAL_TIM_Encoder_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800085a:	f000 f991 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	@ (8000884 <MX_TIM2_Init+0xa4>)
 800086c:	f002 fd82 	bl	8003374 <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000876:	f000 f983 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3730      	adds	r7, #48	@ 0x30
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000378 	.word	0x20000378

08000888 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800088c:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <MX_USART1_UART_Init+0x4c>)
 800088e:	4a12      	ldr	r2, [pc, #72]	@ (80008d8 <MX_USART1_UART_Init+0x50>)
 8000890:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <MX_USART1_UART_Init+0x4c>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <MX_USART1_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_USART1_UART_Init+0x4c>)
 80008c0:	f002 fdc8 	bl	8003454 <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ca:	f000 f959 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200003c0 	.word	0x200003c0
 80008d8:	40013800 	.word	0x40013800

080008dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <MX_USART2_UART_Init+0x4c>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	@ (800092c <MX_USART2_UART_Init+0x50>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <MX_USART2_UART_Init+0x4c>)
 80008e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <MX_USART2_UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <MX_USART2_UART_Init+0x4c>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <MX_USART2_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	@ (8000928 <MX_USART2_UART_Init+0x4c>)
 8000914:	f002 fd9e 	bl	8003454 <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800091e:	f000 f92f 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000408 	.word	0x20000408
 800092c:	40004400 	.word	0x40004400

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000944:	4b54      	ldr	r3, [pc, #336]	@ (8000a98 <MX_GPIO_Init+0x168>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a53      	ldr	r2, [pc, #332]	@ (8000a98 <MX_GPIO_Init+0x168>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b51      	ldr	r3, [pc, #324]	@ (8000a98 <MX_GPIO_Init+0x168>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0310 	and.w	r3, r3, #16
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095c:	4b4e      	ldr	r3, [pc, #312]	@ (8000a98 <MX_GPIO_Init+0x168>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a4d      	ldr	r2, [pc, #308]	@ (8000a98 <MX_GPIO_Init+0x168>)
 8000962:	f043 0320 	orr.w	r3, r3, #32
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b4b      	ldr	r3, [pc, #300]	@ (8000a98 <MX_GPIO_Init+0x168>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0320 	and.w	r3, r3, #32
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	4b48      	ldr	r3, [pc, #288]	@ (8000a98 <MX_GPIO_Init+0x168>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a47      	ldr	r2, [pc, #284]	@ (8000a98 <MX_GPIO_Init+0x168>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b45      	ldr	r3, [pc, #276]	@ (8000a98 <MX_GPIO_Init+0x168>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098c:	4b42      	ldr	r3, [pc, #264]	@ (8000a98 <MX_GPIO_Init+0x168>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a41      	ldr	r2, [pc, #260]	@ (8000a98 <MX_GPIO_Init+0x168>)
 8000992:	f043 0308 	orr.w	r3, r3, #8
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b3f      	ldr	r3, [pc, #252]	@ (8000a98 <MX_GPIO_Init+0x168>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0308 	and.w	r3, r3, #8
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_DBG_GPIO_Port, L_DBG_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009aa:	483c      	ldr	r0, [pc, #240]	@ (8000a9c <MX_GPIO_Init+0x16c>)
 80009ac:	f000 ff18 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LCD_CTR_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2181      	movs	r1, #129	@ 0x81
 80009b4:	483a      	ldr	r0, [pc, #232]	@ (8000aa0 <MX_GPIO_Init+0x170>)
 80009b6:	f000 ff13 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_ERR_Pin|L_USR_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80009c0:	4838      	ldr	r0, [pc, #224]	@ (8000aa4 <MX_GPIO_Init+0x174>)
 80009c2:	f000 ff0d 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : L_DBG_Pin */
  GPIO_InitStruct.Pin = L_DBG_Pin;
 80009c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_DBG_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4619      	mov	r1, r3
 80009de:	482f      	ldr	r0, [pc, #188]	@ (8000a9c <MX_GPIO_Init+0x16c>)
 80009e0:	f000 fd7a 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80009e4:	2301      	movs	r3, #1
 80009e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2302      	movs	r3, #2
 80009f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	4619      	mov	r1, r3
 80009fa:	4829      	ldr	r0, [pc, #164]	@ (8000aa0 <MX_GPIO_Init+0x170>)
 80009fc:	f000 fd6c 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_IT12_Pin BTN2_IT13_Pin BTN3_IT14_Pin BTN4_IT15_Pin */
  GPIO_InitStruct.Pin = BTN1_IT12_Pin|BTN2_IT13_Pin|BTN3_IT14_Pin|BTN4_IT15_Pin;
 8000a00:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a06:	4b28      	ldr	r3, [pc, #160]	@ (8000aa8 <MX_GPIO_Init+0x178>)
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	4619      	mov	r1, r3
 8000a14:	4822      	ldr	r0, [pc, #136]	@ (8000aa0 <MX_GPIO_Init+0x170>)
 8000a16:	f000 fd5f 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN5_IT8_Pin */
  GPIO_InitStruct.Pin = BTN5_IT8_Pin;
 8000a1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a20:	4b21      	ldr	r3, [pc, #132]	@ (8000aa8 <MX_GPIO_Init+0x178>)
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN5_IT8_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481d      	ldr	r0, [pc, #116]	@ (8000aa4 <MX_GPIO_Init+0x174>)
 8000a30:	f000 fd52 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_ERR_Pin L_USR_Pin */
  GPIO_InitStruct.Pin = L_ERR_Pin|L_USR_Pin;
 8000a34:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4815      	ldr	r0, [pc, #84]	@ (8000aa4 <MX_GPIO_Init+0x174>)
 8000a4e:	f000 fd43 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CTR_Pin */
  GPIO_InitStruct.Pin = LCD_CTR_Pin;
 8000a52:	2380      	movs	r3, #128	@ 0x80
 8000a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CTR_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 0310 	add.w	r3, r7, #16
 8000a66:	4619      	mov	r1, r3
 8000a68:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <MX_GPIO_Init+0x170>)
 8000a6a:	f000 fd35 	bl	80014d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2105      	movs	r1, #5
 8000a72:	2017      	movs	r0, #23
 8000a74:	f000 fc53 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a78:	2017      	movs	r0, #23
 8000a7a:	f000 fc6c 	bl	8001356 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2105      	movs	r1, #5
 8000a82:	2028      	movs	r0, #40	@ 0x28
 8000a84:	f000 fc4b 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a88:	2028      	movs	r0, #40	@ 0x28
 8000a8a:	f000 fc64 	bl	8001356 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8e:	bf00      	nop
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40011000 	.word	0x40011000
 8000aa0:	40010c00 	.word	0x40010c00
 8000aa4:	40010800 	.word	0x40010800
 8000aa8:	10210000 	.word	0x10210000

08000aac <StartSender1_Hand>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSender1_Hand */
void StartSender1_Hand(void const * argument)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t x = 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  Task_action("s");
 8000ab8:	4807      	ldr	r0, [pc, #28]	@ (8000ad8 <StartSender1_Hand+0x2c>)
 8000aba:	f7ff fceb 	bl	8000494 <Task_action>
	  // osMessageQueuePut(myQueue01Handle, &x, 0, 200);

	  osMessagePut(myQueue01Handle, x, 200);
 8000abe:	4b07      	ldr	r3, [pc, #28]	@ (8000adc <StartSender1_Hand+0x30>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	7bf9      	ldrb	r1, [r7, #15]
 8000ac4:	22c8      	movs	r2, #200	@ 0xc8
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f003 fbf4 	bl	80042b4 <osMessagePut>
	  osDelay(2000);
 8000acc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ad0:	f003 fbb3 	bl	800423a <osDelay>
	  Task_action("s");
 8000ad4:	bf00      	nop
 8000ad6:	e7ef      	b.n	8000ab8 <StartSender1_Hand+0xc>
 8000ad8:	08006698 	.word	0x08006698
 8000adc:	2000045c 	.word	0x2000045c

08000ae0 <StartSender2_Hand>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSender2_Hand */
void StartSender2_Hand(void const * argument)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSender2_Hand */
	uint8_t x = 2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  Task_action("S");
 8000aec:	4807      	ldr	r0, [pc, #28]	@ (8000b0c <StartSender2_Hand+0x2c>)
 8000aee:	f7ff fcd1 	bl	8000494 <Task_action>
	  // osMessageQueuePut(myQueue01Handle, &x, 0, 200);

	  osMessagePut(myQueue01Handle, x, 200);
 8000af2:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <StartSender2_Hand+0x30>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	7bf9      	ldrb	r1, [r7, #15]
 8000af8:	22c8      	movs	r2, #200	@ 0xc8
 8000afa:	4618      	mov	r0, r3
 8000afc:	f003 fbda 	bl	80042b4 <osMessagePut>
	  osDelay(2000);
 8000b00:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b04:	f003 fb99 	bl	800423a <osDelay>
	  Task_action("S");
 8000b08:	bf00      	nop
 8000b0a:	e7ef      	b.n	8000aec <StartSender2_Hand+0xc>
 8000b0c:	0800669c 	.word	0x0800669c
 8000b10:	2000045c 	.word	0x2000045c

08000b14 <StartReceive_Hand>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceive_Hand */
void StartReceive_Hand(void const * argument)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceive_Hand */
	// uint8_t res = 0;
	uint8_t char_send = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	75fb      	strb	r3, [r7, #23]

	osEvent Data_smsQGet;
  /* Infinite loop */
  for(;;)
  {
	  Task_action("R");
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <StartReceive_Hand+0x40>)
 8000b22:	f7ff fcb7 	bl	8000494 <Task_action>
//	  {
//		  char_send = res + 48;
//		  Task_action((char *)(&char_send));
//	  }

	  Data_smsQGet = osMessageGet(myQueue01Handle, osWaitForever);
 8000b26:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <StartReceive_Hand+0x44>)
 8000b28:	6819      	ldr	r1, [r3, #0]
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 fbfe 	bl	8004334 <osMessageGet>

	  if (Data_smsQGet.status == osEventMessage)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	2b10      	cmp	r3, #16
 8000b3c:	d1f0      	bne.n	8000b20 <StartReceive_Hand+0xc>
	  {
		  char_send = Data_smsQGet.value.v + 48;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	3330      	adds	r3, #48	@ 0x30
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	75fb      	strb	r3, [r7, #23]
		  Task_action((char *)(&char_send));
 8000b48:	f107 0317 	add.w	r3, r7, #23
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fca1 	bl	8000494 <Task_action>
	  Task_action("R");
 8000b52:	e7e5      	b.n	8000b20 <StartReceive_Hand+0xc>
 8000b54:	080066a0 	.word	0x080066a0
 8000b58:	2000045c 	.word	0x2000045c

08000b5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d101      	bne.n	8000b72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b6e:	f000 fae1 	bl	8001134 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40000400 	.word	0x40000400

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <Error_Handler+0x8>

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b92:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <HAL_MspInit+0x68>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	4a17      	ldr	r2, [pc, #92]	@ (8000bf4 <HAL_MspInit+0x68>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6193      	str	r3, [r2, #24]
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <HAL_MspInit+0x68>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <HAL_MspInit+0x68>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	4a11      	ldr	r2, [pc, #68]	@ (8000bf4 <HAL_MspInit+0x68>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb4:	61d3      	str	r3, [r2, #28]
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <HAL_MspInit+0x68>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	210f      	movs	r1, #15
 8000bc6:	f06f 0001 	mvn.w	r0, #1
 8000bca:	f000 fba8 	bl	800131e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bce:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <HAL_MspInit+0x6c>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <HAL_MspInit+0x6c>)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010000 	.word	0x40010000

08000bfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a1d      	ldr	r2, [pc, #116]	@ (8000c8c <HAL_I2C_MspInit+0x90>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d132      	bne.n	8000c82 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <HAL_I2C_MspInit+0x94>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a1b      	ldr	r2, [pc, #108]	@ (8000c90 <HAL_I2C_MspInit+0x94>)
 8000c22:	f043 0308 	orr.w	r3, r3, #8
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <HAL_I2C_MspInit+0x94>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c34:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c3a:	2312      	movs	r3, #18
 8000c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4812      	ldr	r0, [pc, #72]	@ (8000c94 <HAL_I2C_MspInit+0x98>)
 8000c4a:	f000 fc45 	bl	80014d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000c4e:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <HAL_I2C_MspInit+0x9c>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c56:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5e:	f043 0302 	orr.w	r3, r3, #2
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c64:	4a0c      	ldr	r2, [pc, #48]	@ (8000c98 <HAL_I2C_MspInit+0x9c>)
 8000c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c68:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <HAL_I2C_MspInit+0x94>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	4a08      	ldr	r2, [pc, #32]	@ (8000c90 <HAL_I2C_MspInit+0x94>)
 8000c70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c74:	61d3      	str	r3, [r2, #28]
 8000c76:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <HAL_I2C_MspInit+0x94>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	@ 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010c00 	.word	0x40010c00
 8000c98:	40010000 	.word	0x40010000

08000c9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d24 <HAL_SPI_MspInit+0x88>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d12f      	bne.n	8000d1c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <HAL_SPI_MspInit+0x8c>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a19      	ldr	r2, [pc, #100]	@ (8000d28 <HAL_SPI_MspInit+0x8c>)
 8000cc2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <HAL_SPI_MspInit+0x8c>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <HAL_SPI_MspInit+0x8c>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a13      	ldr	r2, [pc, #76]	@ (8000d28 <HAL_SPI_MspInit+0x8c>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <HAL_SPI_MspInit+0x8c>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000cec:	23a0      	movs	r3, #160	@ 0xa0
 8000cee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480b      	ldr	r0, [pc, #44]	@ (8000d2c <HAL_SPI_MspInit+0x90>)
 8000d00:	f000 fbea 	bl	80014d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d04:	2340      	movs	r3, #64	@ 0x40
 8000d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4619      	mov	r1, r3
 8000d16:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <HAL_SPI_MspInit+0x90>)
 8000d18:	f000 fbde 	bl	80014d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	3720      	adds	r7, #32
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40013000 	.word	0x40013000
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40010800 	.word	0x40010800

08000d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a09      	ldr	r2, [pc, #36]	@ (8000d64 <HAL_TIM_Base_MspInit+0x34>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d10b      	bne.n	8000d5a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d42:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <HAL_TIM_Base_MspInit+0x38>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	4a08      	ldr	r2, [pc, #32]	@ (8000d68 <HAL_TIM_Base_MspInit+0x38>)
 8000d48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d4c:	6193      	str	r3, [r2, #24]
 8000d4e:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <HAL_TIM_Base_MspInit+0x38>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	40012c00 	.word	0x40012c00
 8000d68:	40021000 	.word	0x40021000

08000d6c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d8a:	d123      	bne.n	8000dd4 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <HAL_TIM_Encoder_MspInit+0x70>)
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	4a12      	ldr	r2, [pc, #72]	@ (8000ddc <HAL_TIM_Encoder_MspInit+0x70>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	61d3      	str	r3, [r2, #28]
 8000d98:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <HAL_TIM_Encoder_MspInit+0x70>)
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <HAL_TIM_Encoder_MspInit+0x70>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a0c      	ldr	r2, [pc, #48]	@ (8000ddc <HAL_TIM_Encoder_MspInit+0x70>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <HAL_TIM_Encoder_MspInit+0x70>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCB_T2C1_Pin|ENCA_T2C2_Pin;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4804      	ldr	r0, [pc, #16]	@ (8000de0 <HAL_TIM_Encoder_MspInit+0x74>)
 8000dd0:	f000 fb82 	bl	80014d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010800 	.word	0x40010800

08000de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	@ 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0318 	add.w	r3, r7, #24
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a3f      	ldr	r2, [pc, #252]	@ (8000efc <HAL_UART_MspInit+0x118>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d13a      	bne.n	8000e7a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e04:	4b3e      	ldr	r3, [pc, #248]	@ (8000f00 <HAL_UART_MspInit+0x11c>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a3d      	ldr	r2, [pc, #244]	@ (8000f00 <HAL_UART_MspInit+0x11c>)
 8000e0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b3b      	ldr	r3, [pc, #236]	@ (8000f00 <HAL_UART_MspInit+0x11c>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b38      	ldr	r3, [pc, #224]	@ (8000f00 <HAL_UART_MspInit+0x11c>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a37      	ldr	r2, [pc, #220]	@ (8000f00 <HAL_UART_MspInit+0x11c>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b35      	ldr	r3, [pc, #212]	@ (8000f00 <HAL_UART_MspInit+0x11c>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0318 	add.w	r3, r7, #24
 8000e46:	4619      	mov	r1, r3
 8000e48:	482e      	ldr	r0, [pc, #184]	@ (8000f04 <HAL_UART_MspInit+0x120>)
 8000e4a:	f000 fb45 	bl	80014d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0318 	add.w	r3, r7, #24
 8000e60:	4619      	mov	r1, r3
 8000e62:	4828      	ldr	r0, [pc, #160]	@ (8000f04 <HAL_UART_MspInit+0x120>)
 8000e64:	f000 fb38 	bl	80014d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2105      	movs	r1, #5
 8000e6c:	2025      	movs	r0, #37	@ 0x25
 8000e6e:	f000 fa56 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e72:	2025      	movs	r0, #37	@ 0x25
 8000e74:	f000 fa6f 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e78:	e03c      	b.n	8000ef4 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a22      	ldr	r2, [pc, #136]	@ (8000f08 <HAL_UART_MspInit+0x124>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d137      	bne.n	8000ef4 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e84:	4b1e      	ldr	r3, [pc, #120]	@ (8000f00 <HAL_UART_MspInit+0x11c>)
 8000e86:	69db      	ldr	r3, [r3, #28]
 8000e88:	4a1d      	ldr	r2, [pc, #116]	@ (8000f00 <HAL_UART_MspInit+0x11c>)
 8000e8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e8e:	61d3      	str	r3, [r2, #28]
 8000e90:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <HAL_UART_MspInit+0x11c>)
 8000e92:	69db      	ldr	r3, [r3, #28]
 8000e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <HAL_UART_MspInit+0x11c>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a17      	ldr	r2, [pc, #92]	@ (8000f00 <HAL_UART_MspInit+0x11c>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <HAL_UART_MspInit+0x11c>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART2_TX_Pin;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(UART2_TX_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0318 	add.w	r3, r7, #24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480f      	ldr	r0, [pc, #60]	@ (8000f04 <HAL_UART_MspInit+0x120>)
 8000ec8:	f000 fb06 	bl	80014d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART2_RX_Pin;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(UART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0318 	add.w	r3, r7, #24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <HAL_UART_MspInit+0x120>)
 8000ee0:	f000 fafa 	bl	80014d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2105      	movs	r1, #5
 8000ee8:	2026      	movs	r0, #38	@ 0x26
 8000eea:	f000 fa18 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eee:	2026      	movs	r0, #38	@ 0x26
 8000ef0:	f000 fa31 	bl	8001356 <HAL_NVIC_EnableIRQ>
}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	@ 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40013800 	.word	0x40013800
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40010800 	.word	0x40010800
 8000f08:	40004400 	.word	0x40004400

08000f0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	@ 0x38
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000f22:	4b34      	ldr	r3, [pc, #208]	@ (8000ff4 <HAL_InitTick+0xe8>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a33      	ldr	r2, [pc, #204]	@ (8000ff4 <HAL_InitTick+0xe8>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b31      	ldr	r3, [pc, #196]	@ (8000ff4 <HAL_InitTick+0xe8>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f3a:	f107 0210 	add.w	r2, r7, #16
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 fd13 	bl	8002970 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d103      	bne.n	8000f5c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f54:	f001 fce4 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8000f58:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f5a:	e004      	b.n	8000f66 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f5c:	f001 fce0 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8000f60:	4603      	mov	r3, r0
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f68:	4a23      	ldr	r2, [pc, #140]	@ (8000ff8 <HAL_InitTick+0xec>)
 8000f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6e:	0c9b      	lsrs	r3, r3, #18
 8000f70:	3b01      	subs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000f74:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <HAL_InitTick+0xf0>)
 8000f76:	4a22      	ldr	r2, [pc, #136]	@ (8001000 <HAL_InitTick+0xf4>)
 8000f78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	@ (8000ffc <HAL_InitTick+0xf0>)
 8000f7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f80:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000f82:	4a1e      	ldr	r2, [pc, #120]	@ (8000ffc <HAL_InitTick+0xf0>)
 8000f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f86:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000f88:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <HAL_InitTick+0xf0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ffc <HAL_InitTick+0xf0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_InitTick+0xf0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000f9a:	4818      	ldr	r0, [pc, #96]	@ (8000ffc <HAL_InitTick+0xf0>)
 8000f9c:	f001 fdba 	bl	8002b14 <HAL_TIM_Base_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000fa6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d11b      	bne.n	8000fe6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000fae:	4813      	ldr	r0, [pc, #76]	@ (8000ffc <HAL_InitTick+0xf0>)
 8000fb0:	f001 fe00 	bl	8002bb4 <HAL_TIM_Base_Start_IT>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000fba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d111      	bne.n	8000fe6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fc2:	201d      	movs	r0, #29
 8000fc4:	f000 f9c7 	bl	8001356 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b0f      	cmp	r3, #15
 8000fcc:	d808      	bhi.n	8000fe0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	201d      	movs	r0, #29
 8000fd4:	f000 f9a3 	bl	800131e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <HAL_InitTick+0xf8>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e002      	b.n	8000fe6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fe6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3738      	adds	r7, #56	@ 0x38
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	431bde83 	.word	0x431bde83
 8000ffc:	20000478 	.word	0x20000478
 8001000:	40000400 	.word	0x40000400
 8001004:	20000008 	.word	0x20000008

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <NMI_Handler+0x4>

08001010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <MemManage_Handler+0x4>

08001020 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <UsageFault_Handler+0x4>

08001030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN5_IT8_Pin);
 8001040:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001044:	f000 fbe4 	bl	8001810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <TIM3_IRQHandler+0x10>)
 8001052:	f001 fea3 	bl	8002d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000478 	.word	0x20000478

08001060 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <USART1_IRQHandler+0x10>)
 8001066:	f002 faed 	bl	8003644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200003c0 	.word	0x200003c0

08001074 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001078:	4802      	ldr	r0, [pc, #8]	@ (8001084 <USART2_IRQHandler+0x10>)
 800107a:	f002 fae3 	bl	8003644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000408 	.word	0x20000408

08001088 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_IT12_Pin);
 800108c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001090:	f000 fbbe 	bl	8001810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_IT13_Pin);
 8001094:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001098:	f000 fbba 	bl	8001810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_IT14_Pin);
 800109c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80010a0:	f000 fbb6 	bl	8001810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN4_IT15_Pin);
 80010a4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80010a8:	f000 fbb2 	bl	8001810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010bc:	f7ff fff8 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c0:	480b      	ldr	r0, [pc, #44]	@ (80010f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010c2:	490c      	ldr	r1, [pc, #48]	@ (80010f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010c4:	4a0c      	ldr	r2, [pc, #48]	@ (80010f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c8:	e002      	b.n	80010d0 <LoopCopyDataInit>

080010ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ce:	3304      	adds	r3, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d4:	d3f9      	bcc.n	80010ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d6:	4a09      	ldr	r2, [pc, #36]	@ (80010fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010d8:	4c09      	ldr	r4, [pc, #36]	@ (8001100 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010dc:	e001      	b.n	80010e2 <LoopFillZerobss>

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e0:	3204      	adds	r2, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e6:	f005 fa59 	bl	800659c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ea:	f7ff f9eb 	bl	80004c4 <main>
  bx lr
 80010ee:	4770      	bx	lr
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80010f8:	080066e8 	.word	0x080066e8
  ldr r2, =_sbss
 80010fc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001100:	20001210 	.word	0x20001210

08001104 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC1_2_IRQHandler>
	...

08001108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <HAL_Init+0x28>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <HAL_Init+0x28>)
 8001112:	f043 0310 	orr.w	r3, r3, #16
 8001116:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001118:	2003      	movs	r0, #3
 800111a:	f000 f8f5 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111e:	200f      	movs	r0, #15
 8001120:	f7ff fef4 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001124:	f7ff fd32 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40022000 	.word	0x40022000

08001134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <HAL_IncTick+0x1c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <HAL_IncTick+0x20>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a03      	ldr	r2, [pc, #12]	@ (8001154 <HAL_IncTick+0x20>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	2000000c 	.word	0x2000000c
 8001154:	200004c0 	.word	0x200004c0

08001158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b02      	ldr	r3, [pc, #8]	@ (8001168 <HAL_GetTick+0x10>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	200004c0 	.word	0x200004c0

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff fff0 	bl	8001158 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_Delay+0x44>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffe0 	bl	8001158 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000000c 	.word	0x2000000c

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4906      	ldr	r1, [pc, #24]	@ (800124c <__NVIC_EnableIRQ+0x34>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	@ (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	@ (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	@ 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	@ 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff4f 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff64 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ffb2 	bl	80012a4 <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff81 	bl	8001250 <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff57 	bl	8001218 <__NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d008      	beq.n	800139c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2204      	movs	r2, #4
 800138e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e020      	b.n	80013de <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 020e 	bic.w	r2, r2, #14
 80013aa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0201 	bic.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013c4:	2101      	movs	r1, #1
 80013c6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d005      	beq.n	800140c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2204      	movs	r2, #4
 8001404:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	e051      	b.n	80014b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 020e 	bic.w	r2, r2, #14
 800141a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0201 	bic.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a22      	ldr	r2, [pc, #136]	@ (80014bc <HAL_DMA_Abort_IT+0xd4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d029      	beq.n	800148a <HAL_DMA_Abort_IT+0xa2>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a21      	ldr	r2, [pc, #132]	@ (80014c0 <HAL_DMA_Abort_IT+0xd8>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d022      	beq.n	8001486 <HAL_DMA_Abort_IT+0x9e>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1f      	ldr	r2, [pc, #124]	@ (80014c4 <HAL_DMA_Abort_IT+0xdc>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d01a      	beq.n	8001480 <HAL_DMA_Abort_IT+0x98>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a1e      	ldr	r2, [pc, #120]	@ (80014c8 <HAL_DMA_Abort_IT+0xe0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d012      	beq.n	800147a <HAL_DMA_Abort_IT+0x92>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1c      	ldr	r2, [pc, #112]	@ (80014cc <HAL_DMA_Abort_IT+0xe4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00a      	beq.n	8001474 <HAL_DMA_Abort_IT+0x8c>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a1b      	ldr	r2, [pc, #108]	@ (80014d0 <HAL_DMA_Abort_IT+0xe8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d102      	bne.n	800146e <HAL_DMA_Abort_IT+0x86>
 8001468:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800146c:	e00e      	b.n	800148c <HAL_DMA_Abort_IT+0xa4>
 800146e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001472:	e00b      	b.n	800148c <HAL_DMA_Abort_IT+0xa4>
 8001474:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001478:	e008      	b.n	800148c <HAL_DMA_Abort_IT+0xa4>
 800147a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147e:	e005      	b.n	800148c <HAL_DMA_Abort_IT+0xa4>
 8001480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001484:	e002      	b.n	800148c <HAL_DMA_Abort_IT+0xa4>
 8001486:	2310      	movs	r3, #16
 8001488:	e000      	b.n	800148c <HAL_DMA_Abort_IT+0xa4>
 800148a:	2301      	movs	r3, #1
 800148c:	4a11      	ldr	r2, [pc, #68]	@ (80014d4 <HAL_DMA_Abort_IT+0xec>)
 800148e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	4798      	blx	r3
    } 
  }
  return status;
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40020008 	.word	0x40020008
 80014c0:	4002001c 	.word	0x4002001c
 80014c4:	40020030 	.word	0x40020030
 80014c8:	40020044 	.word	0x40020044
 80014cc:	40020058 	.word	0x40020058
 80014d0:	4002006c 	.word	0x4002006c
 80014d4:	40020000 	.word	0x40020000

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	b480      	push	{r7}
 80014da:	b08b      	sub	sp, #44	@ 0x2c
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ea:	e169      	b.n	80017c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014ec:	2201      	movs	r2, #1
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	429a      	cmp	r2, r3
 8001506:	f040 8158 	bne.w	80017ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4a9a      	ldr	r2, [pc, #616]	@ (8001778 <HAL_GPIO_Init+0x2a0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d05e      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
 8001514:	4a98      	ldr	r2, [pc, #608]	@ (8001778 <HAL_GPIO_Init+0x2a0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d875      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 800151a:	4a98      	ldr	r2, [pc, #608]	@ (800177c <HAL_GPIO_Init+0x2a4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d058      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
 8001520:	4a96      	ldr	r2, [pc, #600]	@ (800177c <HAL_GPIO_Init+0x2a4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d86f      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 8001526:	4a96      	ldr	r2, [pc, #600]	@ (8001780 <HAL_GPIO_Init+0x2a8>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d052      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
 800152c:	4a94      	ldr	r2, [pc, #592]	@ (8001780 <HAL_GPIO_Init+0x2a8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d869      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 8001532:	4a94      	ldr	r2, [pc, #592]	@ (8001784 <HAL_GPIO_Init+0x2ac>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d04c      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
 8001538:	4a92      	ldr	r2, [pc, #584]	@ (8001784 <HAL_GPIO_Init+0x2ac>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d863      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 800153e:	4a92      	ldr	r2, [pc, #584]	@ (8001788 <HAL_GPIO_Init+0x2b0>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d046      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
 8001544:	4a90      	ldr	r2, [pc, #576]	@ (8001788 <HAL_GPIO_Init+0x2b0>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d85d      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 800154a:	2b12      	cmp	r3, #18
 800154c:	d82a      	bhi.n	80015a4 <HAL_GPIO_Init+0xcc>
 800154e:	2b12      	cmp	r3, #18
 8001550:	d859      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 8001552:	a201      	add	r2, pc, #4	@ (adr r2, 8001558 <HAL_GPIO_Init+0x80>)
 8001554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001558:	080015d3 	.word	0x080015d3
 800155c:	080015ad 	.word	0x080015ad
 8001560:	080015bf 	.word	0x080015bf
 8001564:	08001601 	.word	0x08001601
 8001568:	08001607 	.word	0x08001607
 800156c:	08001607 	.word	0x08001607
 8001570:	08001607 	.word	0x08001607
 8001574:	08001607 	.word	0x08001607
 8001578:	08001607 	.word	0x08001607
 800157c:	08001607 	.word	0x08001607
 8001580:	08001607 	.word	0x08001607
 8001584:	08001607 	.word	0x08001607
 8001588:	08001607 	.word	0x08001607
 800158c:	08001607 	.word	0x08001607
 8001590:	08001607 	.word	0x08001607
 8001594:	08001607 	.word	0x08001607
 8001598:	08001607 	.word	0x08001607
 800159c:	080015b5 	.word	0x080015b5
 80015a0:	080015c9 	.word	0x080015c9
 80015a4:	4a79      	ldr	r2, [pc, #484]	@ (800178c <HAL_GPIO_Init+0x2b4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d013      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015aa:	e02c      	b.n	8001606 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	623b      	str	r3, [r7, #32]
          break;
 80015b2:	e029      	b.n	8001608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	3304      	adds	r3, #4
 80015ba:	623b      	str	r3, [r7, #32]
          break;
 80015bc:	e024      	b.n	8001608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	3308      	adds	r3, #8
 80015c4:	623b      	str	r3, [r7, #32]
          break;
 80015c6:	e01f      	b.n	8001608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	330c      	adds	r3, #12
 80015ce:	623b      	str	r3, [r7, #32]
          break;
 80015d0:	e01a      	b.n	8001608 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015da:	2304      	movs	r3, #4
 80015dc:	623b      	str	r3, [r7, #32]
          break;
 80015de:	e013      	b.n	8001608 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d105      	bne.n	80015f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e8:	2308      	movs	r3, #8
 80015ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	611a      	str	r2, [r3, #16]
          break;
 80015f2:	e009      	b.n	8001608 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f4:	2308      	movs	r3, #8
 80015f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	615a      	str	r2, [r3, #20]
          break;
 80015fe:	e003      	b.n	8001608 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
          break;
 8001604:	e000      	b.n	8001608 <HAL_GPIO_Init+0x130>
          break;
 8001606:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2bff      	cmp	r3, #255	@ 0xff
 800160c:	d801      	bhi.n	8001612 <HAL_GPIO_Init+0x13a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	e001      	b.n	8001616 <HAL_GPIO_Init+0x13e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3304      	adds	r3, #4
 8001616:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2bff      	cmp	r3, #255	@ 0xff
 800161c:	d802      	bhi.n	8001624 <HAL_GPIO_Init+0x14c>
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	e002      	b.n	800162a <HAL_GPIO_Init+0x152>
 8001624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001626:	3b08      	subs	r3, #8
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	210f      	movs	r1, #15
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	401a      	ands	r2, r3
 800163c:	6a39      	ldr	r1, [r7, #32]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	431a      	orrs	r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 80b1 	beq.w	80017ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001658:	4b4d      	ldr	r3, [pc, #308]	@ (8001790 <HAL_GPIO_Init+0x2b8>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a4c      	ldr	r2, [pc, #304]	@ (8001790 <HAL_GPIO_Init+0x2b8>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b4a      	ldr	r3, [pc, #296]	@ (8001790 <HAL_GPIO_Init+0x2b8>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001670:	4a48      	ldr	r2, [pc, #288]	@ (8001794 <HAL_GPIO_Init+0x2bc>)
 8001672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a40      	ldr	r2, [pc, #256]	@ (8001798 <HAL_GPIO_Init+0x2c0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d013      	beq.n	80016c4 <HAL_GPIO_Init+0x1ec>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a3f      	ldr	r2, [pc, #252]	@ (800179c <HAL_GPIO_Init+0x2c4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d00d      	beq.n	80016c0 <HAL_GPIO_Init+0x1e8>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a3e      	ldr	r2, [pc, #248]	@ (80017a0 <HAL_GPIO_Init+0x2c8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d007      	beq.n	80016bc <HAL_GPIO_Init+0x1e4>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a3d      	ldr	r2, [pc, #244]	@ (80017a4 <HAL_GPIO_Init+0x2cc>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d101      	bne.n	80016b8 <HAL_GPIO_Init+0x1e0>
 80016b4:	2303      	movs	r3, #3
 80016b6:	e006      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016b8:	2304      	movs	r3, #4
 80016ba:	e004      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016bc:	2302      	movs	r3, #2
 80016be:	e002      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016c4:	2300      	movs	r3, #0
 80016c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016c8:	f002 0203 	and.w	r2, r2, #3
 80016cc:	0092      	lsls	r2, r2, #2
 80016ce:	4093      	lsls	r3, r2
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016d6:	492f      	ldr	r1, [pc, #188]	@ (8001794 <HAL_GPIO_Init+0x2bc>)
 80016d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	3302      	adds	r3, #2
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016f0:	4b2d      	ldr	r3, [pc, #180]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	492c      	ldr	r1, [pc, #176]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016fe:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	43db      	mvns	r3, r3
 8001706:	4928      	ldr	r1, [pc, #160]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001708:	4013      	ands	r3, r2
 800170a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d006      	beq.n	8001726 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001718:	4b23      	ldr	r3, [pc, #140]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	4922      	ldr	r1, [pc, #136]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	60cb      	str	r3, [r1, #12]
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001726:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	43db      	mvns	r3, r3
 800172e:	491e      	ldr	r1, [pc, #120]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001730:	4013      	ands	r3, r2
 8001732:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d006      	beq.n	800174e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001740:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	4918      	ldr	r1, [pc, #96]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	43db      	mvns	r3, r3
 8001756:	4914      	ldr	r1, [pc, #80]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001758:	4013      	ands	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d021      	beq.n	80017ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	490e      	ldr	r1, [pc, #56]	@ (80017a8 <HAL_GPIO_Init+0x2d0>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
 8001774:	e021      	b.n	80017ba <HAL_GPIO_Init+0x2e2>
 8001776:	bf00      	nop
 8001778:	10320000 	.word	0x10320000
 800177c:	10310000 	.word	0x10310000
 8001780:	10220000 	.word	0x10220000
 8001784:	10210000 	.word	0x10210000
 8001788:	10120000 	.word	0x10120000
 800178c:	10110000 	.word	0x10110000
 8001790:	40021000 	.word	0x40021000
 8001794:	40010000 	.word	0x40010000
 8001798:	40010800 	.word	0x40010800
 800179c:	40010c00 	.word	0x40010c00
 80017a0:	40011000 	.word	0x40011000
 80017a4:	40011400 	.word	0x40011400
 80017a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <HAL_GPIO_Init+0x304>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	4909      	ldr	r1, [pc, #36]	@ (80017dc <HAL_GPIO_Init+0x304>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	3301      	adds	r3, #1
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f47f ae8e 	bne.w	80014ec <HAL_GPIO_Init+0x14>
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	372c      	adds	r7, #44	@ 0x2c
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	40010400 	.word	0x40010400

080017e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
 80017ec:	4613      	mov	r3, r2
 80017ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017f0:	787b      	ldrb	r3, [r7, #1]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017fc:	e003      	b.n	8001806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	041a      	lsls	r2, r3, #16
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	611a      	str	r2, [r3, #16]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800181a:	4b08      	ldr	r3, [pc, #32]	@ (800183c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	4013      	ands	r3, r2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d006      	beq.n	8001834 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001826:	4a05      	ldr	r2, [pc, #20]	@ (800183c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f806 	bl	8001840 <HAL_GPIO_EXTI_Callback>
  }
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40010400 	.word	0x40010400

08001840 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e12b      	b.n	8001abe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d106      	bne.n	8001880 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff f9be 	bl	8000bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2224      	movs	r2, #36	@ 0x24
 8001884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0201 	bic.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018b8:	f001 f832 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 80018bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a81      	ldr	r2, [pc, #516]	@ (8001ac8 <HAL_I2C_Init+0x274>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d807      	bhi.n	80018d8 <HAL_I2C_Init+0x84>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4a80      	ldr	r2, [pc, #512]	@ (8001acc <HAL_I2C_Init+0x278>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	bf94      	ite	ls
 80018d0:	2301      	movls	r3, #1
 80018d2:	2300      	movhi	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	e006      	b.n	80018e6 <HAL_I2C_Init+0x92>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4a7d      	ldr	r2, [pc, #500]	@ (8001ad0 <HAL_I2C_Init+0x27c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	bf94      	ite	ls
 80018e0:	2301      	movls	r3, #1
 80018e2:	2300      	movhi	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e0e7      	b.n	8001abe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4a78      	ldr	r2, [pc, #480]	@ (8001ad4 <HAL_I2C_Init+0x280>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	0c9b      	lsrs	r3, r3, #18
 80018f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	430a      	orrs	r2, r1
 800190c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ac8 <HAL_I2C_Init+0x274>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d802      	bhi.n	8001928 <HAL_I2C_Init+0xd4>
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	3301      	adds	r3, #1
 8001926:	e009      	b.n	800193c <HAL_I2C_Init+0xe8>
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800192e:	fb02 f303 	mul.w	r3, r2, r3
 8001932:	4a69      	ldr	r2, [pc, #420]	@ (8001ad8 <HAL_I2C_Init+0x284>)
 8001934:	fba2 2303 	umull	r2, r3, r2, r3
 8001938:	099b      	lsrs	r3, r3, #6
 800193a:	3301      	adds	r3, #1
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	430b      	orrs	r3, r1
 8001942:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800194e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	495c      	ldr	r1, [pc, #368]	@ (8001ac8 <HAL_I2C_Init+0x274>)
 8001958:	428b      	cmp	r3, r1
 800195a:	d819      	bhi.n	8001990 <HAL_I2C_Init+0x13c>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1e59      	subs	r1, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	fbb1 f3f3 	udiv	r3, r1, r3
 800196a:	1c59      	adds	r1, r3, #1
 800196c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001970:	400b      	ands	r3, r1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00a      	beq.n	800198c <HAL_I2C_Init+0x138>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1e59      	subs	r1, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fbb1 f3f3 	udiv	r3, r1, r3
 8001984:	3301      	adds	r3, #1
 8001986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198a:	e051      	b.n	8001a30 <HAL_I2C_Init+0x1dc>
 800198c:	2304      	movs	r3, #4
 800198e:	e04f      	b.n	8001a30 <HAL_I2C_Init+0x1dc>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d111      	bne.n	80019bc <HAL_I2C_Init+0x168>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1e58      	subs	r0, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6859      	ldr	r1, [r3, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	440b      	add	r3, r1
 80019a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019aa:	3301      	adds	r3, #1
 80019ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	bf0c      	ite	eq
 80019b4:	2301      	moveq	r3, #1
 80019b6:	2300      	movne	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	e012      	b.n	80019e2 <HAL_I2C_Init+0x18e>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1e58      	subs	r0, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	0099      	lsls	r1, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_I2C_Init+0x196>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e022      	b.n	8001a30 <HAL_I2C_Init+0x1dc>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10e      	bne.n	8001a10 <HAL_I2C_Init+0x1bc>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1e58      	subs	r0, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6859      	ldr	r1, [r3, #4]
 80019fa:	460b      	mov	r3, r1
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	440b      	add	r3, r1
 8001a00:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a04:	3301      	adds	r3, #1
 8001a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a0e:	e00f      	b.n	8001a30 <HAL_I2C_Init+0x1dc>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	1e58      	subs	r0, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6859      	ldr	r1, [r3, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	0099      	lsls	r1, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a26:	3301      	adds	r3, #1
 8001a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	6809      	ldr	r1, [r1, #0]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69da      	ldr	r2, [r3, #28]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6911      	ldr	r1, [r2, #16]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68d2      	ldr	r2, [r2, #12]
 8001a6a:	4311      	orrs	r1, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	430b      	orrs	r3, r1
 8001a72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	000186a0 	.word	0x000186a0
 8001acc:	001e847f 	.word	0x001e847f
 8001ad0:	003d08ff 	.word	0x003d08ff
 8001ad4:	431bde83 	.word	0x431bde83
 8001ad8:	10624dd3 	.word	0x10624dd3

08001adc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	460b      	mov	r3, r1
 8001aea:	817b      	strh	r3, [r7, #10]
 8001aec:	4613      	mov	r3, r2
 8001aee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff fb32 	bl	8001158 <HAL_GetTick>
 8001af4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	f040 80e0 	bne.w	8001cc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2319      	movs	r3, #25
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4970      	ldr	r1, [pc, #448]	@ (8001cd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 f964 	bl	8001ddc <I2C_WaitOnFlagUntilTimeout>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e0d3      	b.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_I2C_Master_Transmit+0x50>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e0cc      	b.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ea>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d007      	beq.n	8001b52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 0201 	orr.w	r2, r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2221      	movs	r2, #33	@ 0x21
 8001b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2210      	movs	r2, #16
 8001b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	893a      	ldrh	r2, [r7, #8]
 8001b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4a50      	ldr	r2, [pc, #320]	@ (8001cd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b94:	8979      	ldrh	r1, [r7, #10]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	6a3a      	ldr	r2, [r7, #32]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f89c 	bl	8001cd8 <I2C_MasterRequestWrite>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e08d      	b.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001bc0:	e066      	b.n	8001c90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	6a39      	ldr	r1, [r7, #32]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 fa22 	bl	8002010 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00d      	beq.n	8001bee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d107      	bne.n	8001bea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001be8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e06b      	b.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	781a      	ldrb	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d11b      	bne.n	8001c64 <HAL_I2C_Master_Transmit+0x188>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d017      	beq.n	8001c64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	6a39      	ldr	r1, [r7, #32]
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 fa19 	bl	80020a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00d      	beq.n	8001c90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d107      	bne.n	8001c8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e01a      	b.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d194      	bne.n	8001bc2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e000      	b.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001cc4:	2302      	movs	r3, #2
  }
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	00100002 	.word	0x00100002
 8001cd4:	ffff0000 	.word	0xffff0000

08001cd8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d006      	beq.n	8001d02 <I2C_MasterRequestWrite+0x2a>
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d003      	beq.n	8001d02 <I2C_MasterRequestWrite+0x2a>
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d00:	d108      	bne.n	8001d14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e00b      	b.n	8001d2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d18:	2b12      	cmp	r3, #18
 8001d1a:	d107      	bne.n	8001d2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 f84f 	bl	8001ddc <I2C_WaitOnFlagUntilTimeout>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00d      	beq.n	8001d60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d52:	d103      	bne.n	8001d5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e035      	b.n	8001dcc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d68:	d108      	bne.n	8001d7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d6a:	897b      	ldrh	r3, [r7, #10]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d78:	611a      	str	r2, [r3, #16]
 8001d7a:	e01b      	b.n	8001db4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d7c:	897b      	ldrh	r3, [r7, #10]
 8001d7e:	11db      	asrs	r3, r3, #7
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f003 0306 	and.w	r3, r3, #6
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f063 030f 	orn	r3, r3, #15
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	490e      	ldr	r1, [pc, #56]	@ (8001dd4 <I2C_MasterRequestWrite+0xfc>)
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f898 	bl	8001ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e010      	b.n	8001dcc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001daa:	897b      	ldrh	r3, [r7, #10]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	4907      	ldr	r1, [pc, #28]	@ (8001dd8 <I2C_MasterRequestWrite+0x100>)
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f888 	bl	8001ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	00010008 	.word	0x00010008
 8001dd8:	00010002 	.word	0x00010002

08001ddc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	4613      	mov	r3, r2
 8001dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dec:	e048      	b.n	8001e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d044      	beq.n	8001e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df6:	f7ff f9af 	bl	8001158 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d302      	bcc.n	8001e0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d139      	bne.n	8001e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	0c1b      	lsrs	r3, r3, #16
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d10d      	bne.n	8001e32 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	4013      	ands	r3, r2
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	e00c      	b.n	8001e4c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	43da      	mvns	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf0c      	ite	eq
 8001e44:	2301      	moveq	r3, #1
 8001e46:	2300      	movne	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d116      	bne.n	8001e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	f043 0220 	orr.w	r2, r3, #32
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e023      	b.n	8001ec8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	0c1b      	lsrs	r3, r3, #16
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d10d      	bne.n	8001ea6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	43da      	mvns	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	4013      	ands	r3, r2
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	e00c      	b.n	8001ec0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	43da      	mvns	r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf0c      	ite	eq
 8001eb8:	2301      	moveq	r3, #1
 8001eba:	2300      	movne	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d093      	beq.n	8001dee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ede:	e071      	b.n	8001fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eee:	d123      	bne.n	8001f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001efe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	f043 0204 	orr.w	r2, r3, #4
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e067      	b.n	8002008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3e:	d041      	beq.n	8001fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f40:	f7ff f90a 	bl	8001158 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d302      	bcc.n	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d136      	bne.n	8001fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d10c      	bne.n	8001f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	e00b      	b.n	8001f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	43da      	mvns	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	4013      	ands	r3, r2
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf14      	ite	ne
 8001f8c:	2301      	movne	r3, #1
 8001f8e:	2300      	moveq	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d016      	beq.n	8001fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	f043 0220 	orr.w	r2, r3, #32
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e021      	b.n	8002008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	0c1b      	lsrs	r3, r3, #16
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d10c      	bne.n	8001fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	43da      	mvns	r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bf14      	ite	ne
 8001fe0:	2301      	movne	r3, #1
 8001fe2:	2300      	moveq	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	e00b      	b.n	8002000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	bf14      	ite	ne
 8001ffa:	2301      	movne	r3, #1
 8001ffc:	2300      	moveq	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	f47f af6d 	bne.w	8001ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800201c:	e034      	b.n	8002088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f886 	bl	8002130 <I2C_IsAcknowledgeFailed>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e034      	b.n	8002098 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d028      	beq.n	8002088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002036:	f7ff f88f 	bl	8001158 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	429a      	cmp	r2, r3
 8002044:	d302      	bcc.n	800204c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d11d      	bne.n	8002088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002056:	2b80      	cmp	r3, #128	@ 0x80
 8002058:	d016      	beq.n	8002088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	f043 0220 	orr.w	r2, r3, #32
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e007      	b.n	8002098 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002092:	2b80      	cmp	r3, #128	@ 0x80
 8002094:	d1c3      	bne.n	800201e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020ac:	e034      	b.n	8002118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f83e 	bl	8002130 <I2C_IsAcknowledgeFailed>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e034      	b.n	8002128 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d028      	beq.n	8002118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c6:	f7ff f847 	bl	8001158 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d302      	bcc.n	80020dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d11d      	bne.n	8002118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d016      	beq.n	8002118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	f043 0220 	orr.w	r2, r3, #32
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e007      	b.n	8002128 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b04      	cmp	r3, #4
 8002124:	d1c3      	bne.n	80020ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002146:	d11b      	bne.n	8002180 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002150:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	f043 0204 	orr.w	r2, r3, #4
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e272      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8087 	beq.w	80022ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ac:	4b92      	ldr	r3, [pc, #584]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d00c      	beq.n	80021d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021b8:	4b8f      	ldr	r3, [pc, #572]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d112      	bne.n	80021ea <HAL_RCC_OscConfig+0x5e>
 80021c4:	4b8c      	ldr	r3, [pc, #560]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021d0:	d10b      	bne.n	80021ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d2:	4b89      	ldr	r3, [pc, #548]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d06c      	beq.n	80022b8 <HAL_RCC_OscConfig+0x12c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d168      	bne.n	80022b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e24c      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f2:	d106      	bne.n	8002202 <HAL_RCC_OscConfig+0x76>
 80021f4:	4b80      	ldr	r3, [pc, #512]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a7f      	ldr	r2, [pc, #508]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	e02e      	b.n	8002260 <HAL_RCC_OscConfig+0xd4>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0x98>
 800220a:	4b7b      	ldr	r3, [pc, #492]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a7a      	ldr	r2, [pc, #488]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b78      	ldr	r3, [pc, #480]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a77      	ldr	r2, [pc, #476]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 800221c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e01d      	b.n	8002260 <HAL_RCC_OscConfig+0xd4>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0xbc>
 800222e:	4b72      	ldr	r3, [pc, #456]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a71      	ldr	r2, [pc, #452]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4b6f      	ldr	r3, [pc, #444]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a6e      	ldr	r2, [pc, #440]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e00b      	b.n	8002260 <HAL_RCC_OscConfig+0xd4>
 8002248:	4b6b      	ldr	r3, [pc, #428]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a6a      	ldr	r2, [pc, #424]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 800224e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b68      	ldr	r3, [pc, #416]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a67      	ldr	r2, [pc, #412]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 800225a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800225e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d013      	beq.n	8002290 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe ff76 	bl	8001158 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002270:	f7fe ff72 	bl	8001158 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	@ 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e200      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	4b5d      	ldr	r3, [pc, #372]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0xe4>
 800228e:	e014      	b.n	80022ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe ff62 	bl	8001158 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7fe ff5e 	bl	8001158 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	@ 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e1ec      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022aa:	4b53      	ldr	r3, [pc, #332]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x10c>
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d063      	beq.n	800238e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022c6:	4b4c      	ldr	r3, [pc, #304]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00b      	beq.n	80022ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022d2:	4b49      	ldr	r3, [pc, #292]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d11c      	bne.n	8002318 <HAL_RCC_OscConfig+0x18c>
 80022de:	4b46      	ldr	r3, [pc, #280]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d116      	bne.n	8002318 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	4b43      	ldr	r3, [pc, #268]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_RCC_OscConfig+0x176>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e1c0      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002302:	4b3d      	ldr	r3, [pc, #244]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4939      	ldr	r1, [pc, #228]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	e03a      	b.n	800238e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d020      	beq.n	8002362 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002320:	4b36      	ldr	r3, [pc, #216]	@ (80023fc <HAL_RCC_OscConfig+0x270>)
 8002322:	2201      	movs	r2, #1
 8002324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002326:	f7fe ff17 	bl	8001158 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232e:	f7fe ff13 	bl	8001158 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e1a1      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002340:	4b2d      	ldr	r3, [pc, #180]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234c:	4b2a      	ldr	r3, [pc, #168]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4927      	ldr	r1, [pc, #156]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 800235c:	4313      	orrs	r3, r2
 800235e:	600b      	str	r3, [r1, #0]
 8002360:	e015      	b.n	800238e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002362:	4b26      	ldr	r3, [pc, #152]	@ (80023fc <HAL_RCC_OscConfig+0x270>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7fe fef6 	bl	8001158 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002370:	f7fe fef2 	bl	8001158 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e180      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002382:	4b1d      	ldr	r3, [pc, #116]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d03a      	beq.n	8002410 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d019      	beq.n	80023d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a2:	4b17      	ldr	r3, [pc, #92]	@ (8002400 <HAL_RCC_OscConfig+0x274>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a8:	f7fe fed6 	bl	8001158 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b0:	f7fe fed2 	bl	8001158 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e160      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c2:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023ce:	2001      	movs	r0, #1
 80023d0:	f000 fafe 	bl	80029d0 <RCC_Delay>
 80023d4:	e01c      	b.n	8002410 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <HAL_RCC_OscConfig+0x274>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023dc:	f7fe febc 	bl	8001158 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e2:	e00f      	b.n	8002404 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e4:	f7fe feb8 	bl	8001158 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d908      	bls.n	8002404 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e146      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	42420000 	.word	0x42420000
 8002400:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002404:	4b92      	ldr	r3, [pc, #584]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1e9      	bne.n	80023e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80a6 	beq.w	800256a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002422:	4b8b      	ldr	r3, [pc, #556]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10d      	bne.n	800244a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	4b88      	ldr	r3, [pc, #544]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	4a87      	ldr	r2, [pc, #540]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002438:	61d3      	str	r3, [r2, #28]
 800243a:	4b85      	ldr	r3, [pc, #532]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002446:	2301      	movs	r3, #1
 8002448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244a:	4b82      	ldr	r3, [pc, #520]	@ (8002654 <HAL_RCC_OscConfig+0x4c8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d118      	bne.n	8002488 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002456:	4b7f      	ldr	r3, [pc, #508]	@ (8002654 <HAL_RCC_OscConfig+0x4c8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a7e      	ldr	r2, [pc, #504]	@ (8002654 <HAL_RCC_OscConfig+0x4c8>)
 800245c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002462:	f7fe fe79 	bl	8001158 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246a:	f7fe fe75 	bl	8001158 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b64      	cmp	r3, #100	@ 0x64
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e103      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247c:	4b75      	ldr	r3, [pc, #468]	@ (8002654 <HAL_RCC_OscConfig+0x4c8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d106      	bne.n	800249e <HAL_RCC_OscConfig+0x312>
 8002490:	4b6f      	ldr	r3, [pc, #444]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4a6e      	ldr	r2, [pc, #440]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6213      	str	r3, [r2, #32]
 800249c:	e02d      	b.n	80024fa <HAL_RCC_OscConfig+0x36e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x334>
 80024a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4a69      	ldr	r2, [pc, #420]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	6213      	str	r3, [r2, #32]
 80024b2:	4b67      	ldr	r3, [pc, #412]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4a66      	ldr	r2, [pc, #408]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	f023 0304 	bic.w	r3, r3, #4
 80024bc:	6213      	str	r3, [r2, #32]
 80024be:	e01c      	b.n	80024fa <HAL_RCC_OscConfig+0x36e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b05      	cmp	r3, #5
 80024c6:	d10c      	bne.n	80024e2 <HAL_RCC_OscConfig+0x356>
 80024c8:	4b61      	ldr	r3, [pc, #388]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4a60      	ldr	r2, [pc, #384]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	f043 0304 	orr.w	r3, r3, #4
 80024d2:	6213      	str	r3, [r2, #32]
 80024d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4a5d      	ldr	r2, [pc, #372]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6213      	str	r3, [r2, #32]
 80024e0:	e00b      	b.n	80024fa <HAL_RCC_OscConfig+0x36e>
 80024e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a5a      	ldr	r2, [pc, #360]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	6213      	str	r3, [r2, #32]
 80024ee:	4b58      	ldr	r3, [pc, #352]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	4a57      	ldr	r2, [pc, #348]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d015      	beq.n	800252e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002502:	f7fe fe29 	bl	8001158 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002508:	e00a      	b.n	8002520 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250a:	f7fe fe25 	bl	8001158 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002518:	4293      	cmp	r3, r2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e0b1      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002520:	4b4b      	ldr	r3, [pc, #300]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0ee      	beq.n	800250a <HAL_RCC_OscConfig+0x37e>
 800252c:	e014      	b.n	8002558 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252e:	f7fe fe13 	bl	8001158 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7fe fe0f 	bl	8001158 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e09b      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254c:	4b40      	ldr	r3, [pc, #256]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1ee      	bne.n	8002536 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002558:	7dfb      	ldrb	r3, [r7, #23]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d105      	bne.n	800256a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255e:	4b3c      	ldr	r3, [pc, #240]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	4a3b      	ldr	r2, [pc, #236]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002568:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8087 	beq.w	8002682 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002574:	4b36      	ldr	r3, [pc, #216]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b08      	cmp	r3, #8
 800257e:	d061      	beq.n	8002644 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d146      	bne.n	8002616 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002588:	4b33      	ldr	r3, [pc, #204]	@ (8002658 <HAL_RCC_OscConfig+0x4cc>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe fde3 	bl	8001158 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002596:	f7fe fddf 	bl	8001158 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e06d      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a8:	4b29      	ldr	r3, [pc, #164]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f0      	bne.n	8002596 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025bc:	d108      	bne.n	80025d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025be:	4b24      	ldr	r3, [pc, #144]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	4921      	ldr	r1, [pc, #132]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a19      	ldr	r1, [r3, #32]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	430b      	orrs	r3, r1
 80025e2:	491b      	ldr	r1, [pc, #108]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002658 <HAL_RCC_OscConfig+0x4cc>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe fdb3 	bl	8001158 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe fdaf 	bl	8001158 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e03d      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002608:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x46a>
 8002614:	e035      	b.n	8002682 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	4b10      	ldr	r3, [pc, #64]	@ (8002658 <HAL_RCC_OscConfig+0x4cc>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe fd9c 	bl	8001158 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002624:	f7fe fd98 	bl	8001158 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e026      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002636:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x498>
 8002642:	e01e      	b.n	8002682 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d107      	bne.n	800265c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e019      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
 8002650:	40021000 	.word	0x40021000
 8002654:	40007000 	.word	0x40007000
 8002658:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800265c:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <HAL_RCC_OscConfig+0x500>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	429a      	cmp	r2, r3
 800266e:	d106      	bne.n	800267e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d001      	beq.n	8002682 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0d0      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d910      	bls.n	80026d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b67      	ldr	r3, [pc, #412]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 0207 	bic.w	r2, r3, #7
 80026ba:	4965      	ldr	r1, [pc, #404]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b63      	ldr	r3, [pc, #396]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0b8      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026ec:	4b59      	ldr	r3, [pc, #356]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a58      	ldr	r2, [pc, #352]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002704:	4b53      	ldr	r3, [pc, #332]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a52      	ldr	r2, [pc, #328]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800270e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002710:	4b50      	ldr	r3, [pc, #320]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	494d      	ldr	r1, [pc, #308]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d040      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	4b47      	ldr	r3, [pc, #284]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d115      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e07f      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	4b41      	ldr	r3, [pc, #260]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e073      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275e:	4b3d      	ldr	r3, [pc, #244]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e06b      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276e:	4b39      	ldr	r3, [pc, #228]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f023 0203 	bic.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4936      	ldr	r1, [pc, #216]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002780:	f7fe fcea 	bl	8001158 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	e00a      	b.n	800279e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002788:	f7fe fce6 	bl	8001158 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e053      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	4b2d      	ldr	r3, [pc, #180]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 020c 	and.w	r2, r3, #12
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1eb      	bne.n	8002788 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b0:	4b27      	ldr	r3, [pc, #156]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d210      	bcs.n	80027e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b24      	ldr	r3, [pc, #144]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 0207 	bic.w	r2, r3, #7
 80027c6:	4922      	ldr	r1, [pc, #136]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ce:	4b20      	ldr	r3, [pc, #128]	@ (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e032      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ec:	4b19      	ldr	r3, [pc, #100]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	4916      	ldr	r1, [pc, #88]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800280a:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	490e      	ldr	r1, [pc, #56]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800281e:	f000 f821 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 8002822:	4602      	mov	r2, r0
 8002824:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	490a      	ldr	r1, [pc, #40]	@ (8002858 <HAL_RCC_ClockConfig+0x1c8>)
 8002830:	5ccb      	ldrb	r3, [r1, r3]
 8002832:	fa22 f303 	lsr.w	r3, r2, r3
 8002836:	4a09      	ldr	r2, [pc, #36]	@ (800285c <HAL_RCC_ClockConfig+0x1cc>)
 8002838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800283a:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <HAL_RCC_ClockConfig+0x1d0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fb64 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40022000 	.word	0x40022000
 8002854:	40021000 	.word	0x40021000
 8002858:	080066ac 	.word	0x080066ac
 800285c:	20000004 	.word	0x20000004
 8002860:	20000008 	.word	0x20000008

08002864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800287e:	4b1e      	ldr	r3, [pc, #120]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b04      	cmp	r3, #4
 800288c:	d002      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x30>
 800288e:	2b08      	cmp	r3, #8
 8002890:	d003      	beq.n	800289a <HAL_RCC_GetSysClockFreq+0x36>
 8002892:	e027      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002894:	4b19      	ldr	r3, [pc, #100]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002896:	613b      	str	r3, [r7, #16]
      break;
 8002898:	e027      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	0c9b      	lsrs	r3, r3, #18
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	4a17      	ldr	r2, [pc, #92]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028a4:	5cd3      	ldrb	r3, [r2, r3]
 80028a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d010      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028b2:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	0c5b      	lsrs	r3, r3, #17
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	4a11      	ldr	r2, [pc, #68]	@ (8002904 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028be:	5cd3      	ldrb	r3, [r2, r3]
 80028c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a0d      	ldr	r2, [pc, #52]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x98>)
 80028c6:	fb03 f202 	mul.w	r2, r3, r2
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e004      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002908 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	613b      	str	r3, [r7, #16]
      break;
 80028e2:	e002      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028e4:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x98>)
 80028e6:	613b      	str	r3, [r7, #16]
      break;
 80028e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ea:	693b      	ldr	r3, [r7, #16]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	371c      	adds	r7, #28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000
 80028fc:	007a1200 	.word	0x007a1200
 8002900:	080066c4 	.word	0x080066c4
 8002904:	080066d4 	.word	0x080066d4
 8002908:	003d0900 	.word	0x003d0900

0800290c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002910:	4b02      	ldr	r3, [pc, #8]	@ (800291c <HAL_RCC_GetHCLKFreq+0x10>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	20000004 	.word	0x20000004

08002920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002924:	f7ff fff2 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4903      	ldr	r1, [pc, #12]	@ (8002944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	080066bc 	.word	0x080066bc

08002948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800294c:	f7ff ffde 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002950:	4602      	mov	r2, r0
 8002952:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	0adb      	lsrs	r3, r3, #11
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	4903      	ldr	r1, [pc, #12]	@ (800296c <HAL_RCC_GetPCLK2Freq+0x24>)
 800295e:	5ccb      	ldrb	r3, [r1, r3]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002964:	4618      	mov	r0, r3
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40021000 	.word	0x40021000
 800296c:	080066bc 	.word	0x080066bc

08002970 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	220f      	movs	r2, #15
 800297e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002980:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <HAL_RCC_GetClockConfig+0x58>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0203 	and.w	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800298c:	4b0e      	ldr	r3, [pc, #56]	@ (80029c8 <HAL_RCC_GetClockConfig+0x58>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002998:	4b0b      	ldr	r3, [pc, #44]	@ (80029c8 <HAL_RCC_GetClockConfig+0x58>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80029a4:	4b08      	ldr	r3, [pc, #32]	@ (80029c8 <HAL_RCC_GetClockConfig+0x58>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	08db      	lsrs	r3, r3, #3
 80029aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_RCC_GetClockConfig+0x5c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0207 	and.w	r2, r3, #7
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40022000 	.word	0x40022000

080029d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <RCC_Delay+0x34>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002a08 <RCC_Delay+0x38>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0a5b      	lsrs	r3, r3, #9
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029ec:	bf00      	nop
  }
  while (Delay --);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1e5a      	subs	r2, r3, #1
 80029f2:	60fa      	str	r2, [r7, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f9      	bne.n	80029ec <RCC_Delay+0x1c>
}
 80029f8:	bf00      	nop
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	20000004 	.word	0x20000004
 8002a08:	10624dd3 	.word	0x10624dd3

08002a0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e076      	b.n	8002b0c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d108      	bne.n	8002a38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a2e:	d009      	beq.n	8002a44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	61da      	str	r2, [r3, #28]
 8002a36:	e005      	b.n	8002a44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d106      	bne.n	8002a64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe f91c 	bl	8000c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac8:	ea42 0103 	orr.w	r1, r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	0c1a      	lsrs	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f002 0204 	and.w	r2, r2, #4
 8002aea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002afa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e041      	b.n	8002baa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fe f8f8 	bl	8000d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	4619      	mov	r1, r3
 8002b52:	4610      	mov	r0, r2
 8002b54:	f000 fb16 	bl	8003184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d001      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e03a      	b.n	8002c42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a18      	ldr	r2, [pc, #96]	@ (8002c4c <HAL_TIM_Base_Start_IT+0x98>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00e      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x58>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf6:	d009      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x58>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a14      	ldr	r2, [pc, #80]	@ (8002c50 <HAL_TIM_Base_Start_IT+0x9c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x58>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a13      	ldr	r2, [pc, #76]	@ (8002c54 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d111      	bne.n	8002c30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d010      	beq.n	8002c40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2e:	e007      	b.n	8002c40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	40012c00 	.word	0x40012c00
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40000800 	.word	0x40000800

08002c58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e093      	b.n	8002d94 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d106      	bne.n	8002c86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7fe f873 	bl	8000d6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c9c:	f023 0307 	bic.w	r3, r3, #7
 8002ca0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	4619      	mov	r1, r3
 8002cac:	4610      	mov	r0, r2
 8002cae:	f000 fa69 	bl	8003184 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cda:	f023 0303 	bic.w	r3, r3, #3
 8002cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	4313      	orrs	r3, r2
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002cf8:	f023 030c 	bic.w	r3, r3, #12
 8002cfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	4313      	orrs	r3, r2
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	011a      	lsls	r2, r3, #4
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	031b      	lsls	r3, r3, #12
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002d36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	4313      	orrs	r3, r2
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d122      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d11b      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0202 	mvn.w	r2, #2
 8002dc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f9b4 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8002de4:	e005      	b.n	8002df2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f9a7 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f9b6 	bl	800315e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d122      	bne.n	8002e4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d11b      	bne.n	8002e4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0204 	mvn.w	r2, #4
 8002e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2202      	movs	r2, #2
 8002e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f98a 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8002e38:	e005      	b.n	8002e46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f97d 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f98c 	bl	800315e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d122      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d11b      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0208 	mvn.w	r2, #8
 8002e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2204      	movs	r2, #4
 8002e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f960 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8002e8c:	e005      	b.n	8002e9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f953 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f962 	bl	800315e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	d122      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d11b      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0210 	mvn.w	r2, #16
 8002ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2208      	movs	r2, #8
 8002eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f936 	bl	800314c <HAL_TIM_IC_CaptureCallback>
 8002ee0:	e005      	b.n	8002eee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f929 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f938 	bl	800315e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d10e      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d107      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0201 	mvn.w	r2, #1
 8002f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fd fe1e 	bl	8000b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2a:	2b80      	cmp	r3, #128	@ 0x80
 8002f2c:	d10e      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f38:	2b80      	cmp	r3, #128	@ 0x80
 8002f3a:	d107      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fa7b 	bl	8003442 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f56:	2b40      	cmp	r3, #64	@ 0x40
 8002f58:	d10e      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f64:	2b40      	cmp	r3, #64	@ 0x40
 8002f66:	d107      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f8fc 	bl	8003170 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d10e      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d107      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0220 	mvn.w	r2, #32
 8002f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fa46 	bl	8003430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_TIM_ConfigClockSource+0x1c>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e0b4      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x186>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003000:	d03e      	beq.n	8003080 <HAL_TIM_ConfigClockSource+0xd4>
 8003002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003006:	f200 8087 	bhi.w	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 800300a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300e:	f000 8086 	beq.w	800311e <HAL_TIM_ConfigClockSource+0x172>
 8003012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003016:	d87f      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b70      	cmp	r3, #112	@ 0x70
 800301a:	d01a      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0xa6>
 800301c:	2b70      	cmp	r3, #112	@ 0x70
 800301e:	d87b      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b60      	cmp	r3, #96	@ 0x60
 8003022:	d050      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003024:	2b60      	cmp	r3, #96	@ 0x60
 8003026:	d877      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b50      	cmp	r3, #80	@ 0x50
 800302a:	d03c      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0xfa>
 800302c:	2b50      	cmp	r3, #80	@ 0x50
 800302e:	d873      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b40      	cmp	r3, #64	@ 0x40
 8003032:	d058      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003034:	2b40      	cmp	r3, #64	@ 0x40
 8003036:	d86f      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003038:	2b30      	cmp	r3, #48	@ 0x30
 800303a:	d064      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15a>
 800303c:	2b30      	cmp	r3, #48	@ 0x30
 800303e:	d86b      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003040:	2b20      	cmp	r3, #32
 8003042:	d060      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15a>
 8003044:	2b20      	cmp	r3, #32
 8003046:	d867      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d05c      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15a>
 800304c:	2b10      	cmp	r3, #16
 800304e:	d05a      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15a>
 8003050:	e062      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003062:	f000 f968 	bl	8003336 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003074:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	609a      	str	r2, [r3, #8]
      break;
 800307e:	e04f      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003090:	f000 f951 	bl	8003336 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030a2:	609a      	str	r2, [r3, #8]
      break;
 80030a4:	e03c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b2:	461a      	mov	r2, r3
 80030b4:	f000 f8c8 	bl	8003248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2150      	movs	r1, #80	@ 0x50
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f91f 	bl	8003302 <TIM_ITRx_SetConfig>
      break;
 80030c4:	e02c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d2:	461a      	mov	r2, r3
 80030d4:	f000 f8e6 	bl	80032a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2160      	movs	r1, #96	@ 0x60
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f90f 	bl	8003302 <TIM_ITRx_SetConfig>
      break;
 80030e4:	e01c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f2:	461a      	mov	r2, r3
 80030f4:	f000 f8a8 	bl	8003248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2140      	movs	r1, #64	@ 0x40
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f8ff 	bl	8003302 <TIM_ITRx_SetConfig>
      break;
 8003104:	e00c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4619      	mov	r1, r3
 8003110:	4610      	mov	r0, r2
 8003112:	f000 f8f6 	bl	8003302 <TIM_ITRx_SetConfig>
      break;
 8003116:	e003      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      break;
 800311c:	e000      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800311e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
	...

08003184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a29      	ldr	r2, [pc, #164]	@ (800323c <TIM_Base_SetConfig+0xb8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00b      	beq.n	80031b4 <TIM_Base_SetConfig+0x30>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a2:	d007      	beq.n	80031b4 <TIM_Base_SetConfig+0x30>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a26      	ldr	r2, [pc, #152]	@ (8003240 <TIM_Base_SetConfig+0xbc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <TIM_Base_SetConfig+0x30>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a25      	ldr	r2, [pc, #148]	@ (8003244 <TIM_Base_SetConfig+0xc0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d108      	bne.n	80031c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a1c      	ldr	r2, [pc, #112]	@ (800323c <TIM_Base_SetConfig+0xb8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00b      	beq.n	80031e6 <TIM_Base_SetConfig+0x62>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d4:	d007      	beq.n	80031e6 <TIM_Base_SetConfig+0x62>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a19      	ldr	r2, [pc, #100]	@ (8003240 <TIM_Base_SetConfig+0xbc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d003      	beq.n	80031e6 <TIM_Base_SetConfig+0x62>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a18      	ldr	r2, [pc, #96]	@ (8003244 <TIM_Base_SetConfig+0xc0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d108      	bne.n	80031f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a07      	ldr	r2, [pc, #28]	@ (800323c <TIM_Base_SetConfig+0xb8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d103      	bne.n	800322c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	615a      	str	r2, [r3, #20]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40000400 	.word	0x40000400
 8003244:	40000800 	.word	0x40000800

08003248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f023 0201 	bic.w	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f023 030a 	bic.w	r3, r3, #10
 8003284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	621a      	str	r2, [r3, #32]
}
 800329a:	bf00      	nop
 800329c:	371c      	adds	r7, #28
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	f023 0210 	bic.w	r2, r3, #16
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80032ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	031b      	lsls	r3, r3, #12
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	621a      	str	r2, [r3, #32]
}
 80032f8:	bf00      	nop
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	f043 0307 	orr.w	r3, r3, #7
 8003324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	609a      	str	r2, [r3, #8]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr

08003336 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003336:	b480      	push	{r7}
 8003338:	b087      	sub	sp, #28
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003350:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	021a      	lsls	r2, r3, #8
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	431a      	orrs	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4313      	orrs	r3, r2
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	609a      	str	r2, [r3, #8]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003388:	2302      	movs	r3, #2
 800338a:	e046      	b.n	800341a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a16      	ldr	r2, [pc, #88]	@ (8003424 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00e      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d8:	d009      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a12      	ldr	r2, [pc, #72]	@ (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d004      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a10      	ldr	r2, [pc, #64]	@ (800342c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d10c      	bne.n	8003408 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	40012c00 	.word	0x40012c00
 8003428:	40000400 	.word	0x40000400
 800342c:	40000800 	.word	0x40000800

08003430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e042      	b.n	80034ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd fcb2 	bl	8000de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2224      	movs	r2, #36	@ 0x24
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fdc5 	bl	8004028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	@ 0x28
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b20      	cmp	r3, #32
 8003512:	d16d      	bne.n	80035f0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <HAL_UART_Transmit+0x2c>
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e066      	b.n	80035f2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2221      	movs	r2, #33	@ 0x21
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003532:	f7fd fe11 	bl	8001158 <HAL_GetTick>
 8003536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	88fa      	ldrh	r2, [r7, #6]
 800353c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	88fa      	ldrh	r2, [r7, #6]
 8003542:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800354c:	d108      	bne.n	8003560 <HAL_UART_Transmit+0x6c>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d104      	bne.n	8003560 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	e003      	b.n	8003568 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003564:	2300      	movs	r3, #0
 8003566:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003568:	e02a      	b.n	80035c0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2200      	movs	r2, #0
 8003572:	2180      	movs	r1, #128	@ 0x80
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fb14 	bl	8003ba2 <UART_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e036      	b.n	80035f2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10b      	bne.n	80035a2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003598:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	3302      	adds	r3, #2
 800359e:	61bb      	str	r3, [r7, #24]
 80035a0:	e007      	b.n	80035b2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	3301      	adds	r3, #1
 80035b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1cf      	bne.n	800356a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2200      	movs	r2, #0
 80035d2:	2140      	movs	r1, #64	@ 0x40
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 fae4 	bl	8003ba2 <UART_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e006      	b.n	80035f2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	e000      	b.n	80035f2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80035f0:	2302      	movs	r3, #2
  }
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3720      	adds	r7, #32
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	4613      	mov	r3, r2
 8003606:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b20      	cmp	r3, #32
 8003612:	d112      	bne.n	800363a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_UART_Receive_IT+0x26>
 800361a:	88fb      	ldrh	r3, [r7, #6]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e00b      	b.n	800363c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	461a      	mov	r2, r3
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fb24 	bl	8003c7e <UART_Start_Receive_IT>
 8003636:	4603      	mov	r3, r0
 8003638:	e000      	b.n	800363c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800363a:	2302      	movs	r3, #2
  }
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b0ba      	sub	sp, #232	@ 0xe8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800366a:	2300      	movs	r3, #0
 800366c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003670:	2300      	movs	r3, #0
 8003672:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10f      	bne.n	80036aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800368a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <HAL_UART_IRQHandler+0x66>
 8003696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fc01 	bl	8003eaa <UART_Receive_IT>
      return;
 80036a8:	e25b      	b.n	8003b62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80de 	beq.w	8003870 <HAL_UART_IRQHandler+0x22c>
 80036b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d106      	bne.n	80036ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80d1 	beq.w	8003870 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00b      	beq.n	80036f2 <HAL_UART_IRQHandler+0xae>
 80036da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ea:	f043 0201 	orr.w	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <HAL_UART_IRQHandler+0xd2>
 80036fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370e:	f043 0202 	orr.w	r2, r3, #2
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <HAL_UART_IRQHandler+0xf6>
 8003722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003732:	f043 0204 	orr.w	r2, r3, #4
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800373a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d011      	beq.n	800376a <HAL_UART_IRQHandler+0x126>
 8003746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d105      	bne.n	800375e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003762:	f043 0208 	orr.w	r2, r3, #8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 81f2 	beq.w	8003b58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_UART_IRQHandler+0x14e>
 8003780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fb8c 	bl	8003eaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d103      	bne.n	80037be <HAL_UART_IRQHandler+0x17a>
 80037b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d04f      	beq.n	800385e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fa96 	bl	8003cf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d041      	beq.n	8003856 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3314      	adds	r3, #20
 80037d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3314      	adds	r3, #20
 80037fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003802:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003806:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800380a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1d9      	bne.n	80037d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d013      	beq.n	800384e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a24 <HAL_UART_IRQHandler+0x3e0>)
 800382c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003832:	4618      	mov	r0, r3
 8003834:	f7fd fdd8 	bl	80013e8 <HAL_DMA_Abort_IT>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d016      	beq.n	800386c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003848:	4610      	mov	r0, r2
 800384a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384c:	e00e      	b.n	800386c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f993 	bl	8003b7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003854:	e00a      	b.n	800386c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f98f 	bl	8003b7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385c:	e006      	b.n	800386c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f98b 	bl	8003b7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800386a:	e175      	b.n	8003b58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386c:	bf00      	nop
    return;
 800386e:	e173      	b.n	8003b58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003874:	2b01      	cmp	r3, #1
 8003876:	f040 814f 	bne.w	8003b18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800387a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800387e:	f003 0310 	and.w	r3, r3, #16
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 8148 	beq.w	8003b18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8141 	beq.w	8003b18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 80b6 	beq.w	8003a28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 8145 	beq.w	8003b5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038da:	429a      	cmp	r2, r3
 80038dc:	f080 813e 	bcs.w	8003b5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	f000 8088 	beq.w	8003a04 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	330c      	adds	r3, #12
 80038fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800390a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800390e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003912:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	330c      	adds	r3, #12
 800391c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003920:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003924:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003928:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800392c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003938:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1d9      	bne.n	80038f4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3314      	adds	r3, #20
 8003946:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800394a:	e853 3f00 	ldrex	r3, [r3]
 800394e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003950:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003952:	f023 0301 	bic.w	r3, r3, #1
 8003956:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3314      	adds	r3, #20
 8003960:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003964:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003968:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800396c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003970:	e841 2300 	strex	r3, r2, [r1]
 8003974:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003976:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e1      	bne.n	8003940 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3314      	adds	r3, #20
 8003982:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003984:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003986:	e853 3f00 	ldrex	r3, [r3]
 800398a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800398c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800398e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003992:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3314      	adds	r3, #20
 800399c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e3      	bne.n	800397c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	330c      	adds	r3, #12
 80039c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039cc:	e853 3f00 	ldrex	r3, [r3]
 80039d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039d4:	f023 0310 	bic.w	r3, r3, #16
 80039d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	330c      	adds	r3, #12
 80039e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039e8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039ee:	e841 2300 	strex	r3, r2, [r1]
 80039f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e3      	bne.n	80039c2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd fcb7 	bl	8001372 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	4619      	mov	r1, r3
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f8b6 	bl	8003b8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a20:	e09c      	b.n	8003b5c <HAL_UART_IRQHandler+0x518>
 8003a22:	bf00      	nop
 8003a24:	08003db5 	.word	0x08003db5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 808e 	beq.w	8003b60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8089 	beq.w	8003b60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	330c      	adds	r3, #12
 8003a54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a72:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a7a:	e841 2300 	strex	r3, r2, [r1]
 8003a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1e3      	bne.n	8003a4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3314      	adds	r3, #20
 8003a8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	623b      	str	r3, [r7, #32]
   return(result);
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3314      	adds	r3, #20
 8003aa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003aaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8003aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e3      	bne.n	8003a86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	330c      	adds	r3, #12
 8003ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	e853 3f00 	ldrex	r3, [r3]
 8003ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0310 	bic.w	r3, r3, #16
 8003ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	330c      	adds	r3, #12
 8003aec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003af0:	61fa      	str	r2, [r7, #28]
 8003af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	69b9      	ldr	r1, [r7, #24]
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	617b      	str	r3, [r7, #20]
   return(result);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e3      	bne.n	8003acc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f83b 	bl	8003b8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b16:	e023      	b.n	8003b60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d009      	beq.n	8003b38 <HAL_UART_IRQHandler+0x4f4>
 8003b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f953 	bl	8003ddc <UART_Transmit_IT>
    return;
 8003b36:	e014      	b.n	8003b62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00e      	beq.n	8003b62 <HAL_UART_IRQHandler+0x51e>
 8003b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f992 	bl	8003e7a <UART_EndTransmit_IT>
    return;
 8003b56:	e004      	b.n	8003b62 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b58:	bf00      	nop
 8003b5a:	e002      	b.n	8003b62 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b5c:	bf00      	nop
 8003b5e:	e000      	b.n	8003b62 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b60:	bf00      	nop
  }
}
 8003b62:	37e8      	adds	r7, #232	@ 0xe8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr

08003b8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr

08003ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b090      	sub	sp, #64	@ 0x40
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	603b      	str	r3, [r7, #0]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb2:	e050      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d04c      	beq.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bc2:	f7fd fac9 	bl	8001158 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d241      	bcs.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	330c      	adds	r3, #12
 8003bf0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bf2:	637a      	str	r2, [r7, #52]	@ 0x34
 8003bf4:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e5      	bne.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3314      	adds	r3, #20
 8003c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	613b      	str	r3, [r7, #16]
   return(result);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3314      	adds	r3, #20
 8003c24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c26:	623a      	str	r2, [r7, #32]
 8003c28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	69f9      	ldr	r1, [r7, #28]
 8003c2c:	6a3a      	ldr	r2, [r7, #32]
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e5      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e00f      	b.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	bf0c      	ite	eq
 8003c66:	2301      	moveq	r3, #1
 8003c68:	2300      	movne	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d09f      	beq.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3740      	adds	r7, #64	@ 0x40
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	88fa      	ldrh	r2, [r7, #6]
 8003c96:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	88fa      	ldrh	r2, [r7, #6]
 8003c9c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2222      	movs	r2, #34	@ 0x22
 8003ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d007      	beq.n	8003cc4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cc2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0220 	orr.w	r2, r2, #32
 8003ce2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr

08003cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b095      	sub	sp, #84	@ 0x54
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	330c      	adds	r3, #12
 8003d16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d18:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3314      	adds	r3, #20
 8003d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3314      	adds	r3, #20
 8003d4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e5      	bne.n	8003d2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d119      	bne.n	8003d9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f023 0310 	bic.w	r3, r3, #16
 8003d7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	330c      	adds	r3, #12
 8003d86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d88:	61ba      	str	r2, [r7, #24]
 8003d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6979      	ldr	r1, [r7, #20]
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	613b      	str	r3, [r7, #16]
   return(result);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e5      	bne.n	8003d68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003daa:	bf00      	nop
 8003dac:	3754      	adds	r7, #84	@ 0x54
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f7ff fed3 	bl	8003b7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dd4:	bf00      	nop
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b21      	cmp	r3, #33	@ 0x21
 8003dee:	d13e      	bne.n	8003e6e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003df8:	d114      	bne.n	8003e24 <UART_Transmit_IT+0x48>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d110      	bne.n	8003e24 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e16:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	1c9a      	adds	r2, r3, #2
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	621a      	str	r2, [r3, #32]
 8003e22:	e008      	b.n	8003e36 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	1c59      	adds	r1, r3, #1
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6211      	str	r1, [r2, #32]
 8003e2e:	781a      	ldrb	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4619      	mov	r1, r3
 8003e44:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10f      	bne.n	8003e6a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e000      	b.n	8003e70 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
  }
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr

08003e7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fe64 	bl	8003b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b08c      	sub	sp, #48	@ 0x30
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b22      	cmp	r3, #34	@ 0x22
 8003ebc:	f040 80ae 	bne.w	800401c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec8:	d117      	bne.n	8003efa <UART_Receive_IT+0x50>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d113      	bne.n	8003efa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eda:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef2:	1c9a      	adds	r2, r3, #2
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ef8:	e026      	b.n	8003f48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0c:	d007      	beq.n	8003f1e <UART_Receive_IT+0x74>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <UART_Receive_IT+0x82>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	e008      	b.n	8003f3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	4619      	mov	r1, r3
 8003f56:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d15d      	bne.n	8004018 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0220 	bic.w	r2, r2, #32
 8003f6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695a      	ldr	r2, [r3, #20]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0201 	bic.w	r2, r2, #1
 8003f8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d135      	bne.n	800400e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f023 0310 	bic.w	r3, r3, #16
 8003fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc8:	623a      	str	r2, [r7, #32]
 8003fca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	69f9      	ldr	r1, [r7, #28]
 8003fce:	6a3a      	ldr	r2, [r7, #32]
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e5      	bne.n	8003fa8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d10a      	bne.n	8004000 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff fdc0 	bl	8003b8c <HAL_UARTEx_RxEventCallback>
 800400c:	e002      	b.n	8004014 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fc f9b4 	bl	800037c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	e002      	b.n	800401e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	e000      	b.n	800401e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800401c:	2302      	movs	r3, #2
  }
}
 800401e:	4618      	mov	r0, r3
 8004020:	3730      	adds	r7, #48	@ 0x30
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004062:	f023 030c 	bic.w	r3, r3, #12
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	430b      	orrs	r3, r1
 800406e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a2c      	ldr	r2, [pc, #176]	@ (800413c <UART_SetConfig+0x114>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d103      	bne.n	8004098 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004090:	f7fe fc5a 	bl	8002948 <HAL_RCC_GetPCLK2Freq>
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	e002      	b.n	800409e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004098:	f7fe fc42 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 800409c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009a      	lsls	r2, r3, #2
 80040a8:	441a      	add	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	4a22      	ldr	r2, [pc, #136]	@ (8004140 <UART_SetConfig+0x118>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	0119      	lsls	r1, r3, #4
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	009a      	lsls	r2, r3, #2
 80040c8:	441a      	add	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004140 <UART_SetConfig+0x118>)
 80040d6:	fba3 0302 	umull	r0, r3, r3, r2
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	2064      	movs	r0, #100	@ 0x64
 80040de:	fb00 f303 	mul.w	r3, r0, r3
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	3332      	adds	r3, #50	@ 0x32
 80040e8:	4a15      	ldr	r2, [pc, #84]	@ (8004140 <UART_SetConfig+0x118>)
 80040ea:	fba2 2303 	umull	r2, r3, r2, r3
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040f4:	4419      	add	r1, r3
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	009a      	lsls	r2, r3, #2
 8004100:	441a      	add	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	fbb2 f2f3 	udiv	r2, r2, r3
 800410c:	4b0c      	ldr	r3, [pc, #48]	@ (8004140 <UART_SetConfig+0x118>)
 800410e:	fba3 0302 	umull	r0, r3, r3, r2
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	2064      	movs	r0, #100	@ 0x64
 8004116:	fb00 f303 	mul.w	r3, r0, r3
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	3332      	adds	r3, #50	@ 0x32
 8004120:	4a07      	ldr	r2, [pc, #28]	@ (8004140 <UART_SetConfig+0x118>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	f003 020f 	and.w	r2, r3, #15
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	440a      	add	r2, r1
 8004132:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40013800 	.word	0x40013800
 8004140:	51eb851f 	.word	0x51eb851f

08004144 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004156:	2b84      	cmp	r3, #132	@ 0x84
 8004158:	d005      	beq.n	8004166 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800415a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	3303      	adds	r3, #3
 8004164:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004166:	68fb      	ldr	r3, [r7, #12]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004178:	f3ef 8305 	mrs	r3, IPSR
 800417c:	607b      	str	r3, [r7, #4]
  return(result);
 800417e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf14      	ite	ne
 8004184:	2301      	movne	r3, #1
 8004186:	2300      	moveq	r3, #0
 8004188:	b2db      	uxtb	r3, r3
}
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004198:	f001 f90a 	bl	80053b0 <vTaskStartScheduler>
  
  return osOK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80041a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041a4:	b089      	sub	sp, #36	@ 0x24
 80041a6:	af04      	add	r7, sp, #16
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d020      	beq.n	80041f6 <osThreadCreate+0x54>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01c      	beq.n	80041f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685c      	ldr	r4, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691e      	ldr	r6, [r3, #16]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff ffb8 	bl	8004144 <makeFreeRtosPriority>
 80041d4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041de:	9202      	str	r2, [sp, #8]
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	9100      	str	r1, [sp, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	4632      	mov	r2, r6
 80041e8:	4629      	mov	r1, r5
 80041ea:	4620      	mov	r0, r4
 80041ec:	f000 ff1c 	bl	8005028 <xTaskCreateStatic>
 80041f0:	4603      	mov	r3, r0
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	e01c      	b.n	8004230 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685c      	ldr	r4, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004202:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff ff9a 	bl	8004144 <makeFreeRtosPriority>
 8004210:	4602      	mov	r2, r0
 8004212:	f107 030c 	add.w	r3, r7, #12
 8004216:	9301      	str	r3, [sp, #4]
 8004218:	9200      	str	r2, [sp, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	4632      	mov	r2, r6
 800421e:	4629      	mov	r1, r5
 8004220:	4620      	mov	r0, r4
 8004222:	f000 ff60 	bl	80050e6 <xTaskCreate>
 8004226:	4603      	mov	r3, r0
 8004228:	2b01      	cmp	r3, #1
 800422a:	d001      	beq.n	8004230 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800422c:	2300      	movs	r3, #0
 800422e:	e000      	b.n	8004232 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004230:	68fb      	ldr	r3, [r7, #12]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800423a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <osDelay+0x16>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	e000      	b.n	8004252 <osDelay+0x18>
 8004250:	2301      	movs	r3, #1
 8004252:	4618      	mov	r0, r3
 8004254:	f001 f876 	bl	8005344 <vTaskDelay>
  
  return osOK;
 8004258:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004262:	b590      	push	{r4, r7, lr}
 8004264:	b085      	sub	sp, #20
 8004266:	af02      	add	r7, sp, #8
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d011      	beq.n	8004298 <osMessageCreate+0x36>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00d      	beq.n	8004298 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6859      	ldr	r1, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	2400      	movs	r4, #0
 800428e:	9400      	str	r4, [sp, #0]
 8004290:	f000 f9de 	bl	8004650 <xQueueGenericCreateStatic>
 8004294:	4603      	mov	r3, r0
 8004296:	e008      	b.n	80042aa <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	4619      	mov	r1, r3
 80042a4:	f000 fa50 	bl	8004748 <xQueueGenericCreate>
 80042a8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd90      	pop	{r4, r7, pc}
	...

080042b4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <osMessagePut+0x1e>
    ticks = 1;
 80042ce:	2301      	movs	r3, #1
 80042d0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80042d2:	f7ff ff4e 	bl	8004172 <inHandlerMode>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d018      	beq.n	800430e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80042dc:	f107 0210 	add.w	r2, r7, #16
 80042e0:	f107 0108 	add.w	r1, r7, #8
 80042e4:	2300      	movs	r3, #0
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 fb8e 	bl	8004a08 <xQueueGenericSendFromISR>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d001      	beq.n	80042f6 <osMessagePut+0x42>
      return osErrorOS;
 80042f2:	23ff      	movs	r3, #255	@ 0xff
 80042f4:	e018      	b.n	8004328 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d014      	beq.n	8004326 <osMessagePut+0x72>
 80042fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004330 <osMessagePut+0x7c>)
 80042fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	e00b      	b.n	8004326 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800430e:	f107 0108 	add.w	r1, r7, #8
 8004312:	2300      	movs	r3, #0
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fa74 	bl	8004804 <xQueueGenericSend>
 800431c:	4603      	mov	r3, r0
 800431e:	2b01      	cmp	r3, #1
 8004320:	d001      	beq.n	8004326 <osMessagePut+0x72>
      return osErrorOS;
 8004322:	23ff      	movs	r3, #255	@ 0xff
 8004324:	e000      	b.n	8004328 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	e000ed04 	.word	0xe000ed04

08004334 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004334:	b590      	push	{r4, r7, lr}
 8004336:	b08b      	sub	sp, #44	@ 0x2c
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10a      	bne.n	8004364 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800434e:	2380      	movs	r3, #128	@ 0x80
 8004350:	617b      	str	r3, [r7, #20]
    return event;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	461c      	mov	r4, r3
 8004356:	f107 0314 	add.w	r3, r7, #20
 800435a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800435e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004362:	e054      	b.n	800440e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004364:	2300      	movs	r3, #0
 8004366:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004372:	d103      	bne.n	800437c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004374:	f04f 33ff 	mov.w	r3, #4294967295
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
 800437a:	e009      	b.n	8004390 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d006      	beq.n	8004390 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <osMessageGet+0x5c>
      ticks = 1;
 800438c:	2301      	movs	r3, #1
 800438e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004390:	f7ff feef 	bl	8004172 <inHandlerMode>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d01c      	beq.n	80043d4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800439a:	f107 0220 	add.w	r2, r7, #32
 800439e:	f107 0314 	add.w	r3, r7, #20
 80043a2:	3304      	adds	r3, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	68b8      	ldr	r0, [r7, #8]
 80043a8:	f000 fcac 	bl	8004d04 <xQueueReceiveFromISR>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d102      	bne.n	80043b8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80043b2:	2310      	movs	r3, #16
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	e001      	b.n	80043bc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01d      	beq.n	80043fe <osMessageGet+0xca>
 80043c2:	4b15      	ldr	r3, [pc, #84]	@ (8004418 <osMessageGet+0xe4>)
 80043c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	e014      	b.n	80043fe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80043d4:	f107 0314 	add.w	r3, r7, #20
 80043d8:	3304      	adds	r3, #4
 80043da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043dc:	4619      	mov	r1, r3
 80043de:	68b8      	ldr	r0, [r7, #8]
 80043e0:	f000 fbae 	bl	8004b40 <xQueueReceive>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d102      	bne.n	80043f0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80043ea:	2310      	movs	r3, #16
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	e006      	b.n	80043fe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <osMessageGet+0xc6>
 80043f6:	2300      	movs	r3, #0
 80043f8:	e000      	b.n	80043fc <osMessageGet+0xc8>
 80043fa:	2340      	movs	r3, #64	@ 0x40
 80043fc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	461c      	mov	r4, r3
 8004402:	f107 0314 	add.w	r3, r7, #20
 8004406:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800440a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	372c      	adds	r7, #44	@ 0x2c
 8004412:	46bd      	mov	sp, r7
 8004414:	bd90      	pop	{r4, r7, pc}
 8004416:	bf00      	nop
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f103 0208 	add.w	r2, r3, #8
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f04f 32ff 	mov.w	r2, #4294967295
 8004434:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f103 0208 	add.w	r2, r3, #8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f103 0208 	add.w	r2, r3, #8
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr

0800445a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004472:	b480      	push	{r7}
 8004474:	b085      	sub	sp, #20
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	601a      	str	r2, [r3, #0]
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ce:	d103      	bne.n	80044d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	e00c      	b.n	80044f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3308      	adds	r3, #8
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	e002      	b.n	80044e6 <vListInsert+0x2e>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d2f6      	bcs.n	80044e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	601a      	str	r2, [r3, #0]
}
 800451e:	bf00      	nop
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6892      	ldr	r2, [r2, #8]
 800453e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6852      	ldr	r2, [r2, #4]
 8004548:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	429a      	cmp	r2, r3
 8004552:	d103      	bne.n	800455c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	1e5a      	subs	r2, r3, #1
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr
	...

0800457c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
 80045a6:	e7fd      	b.n	80045a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80045a8:	f001 fd10 	bl	8005fcc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b4:	68f9      	ldr	r1, [r7, #12]
 80045b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	441a      	add	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d8:	3b01      	subs	r3, #1
 80045da:	68f9      	ldr	r1, [r7, #12]
 80045dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	441a      	add	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	22ff      	movs	r2, #255	@ 0xff
 80045ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	22ff      	movs	r2, #255	@ 0xff
 80045f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d114      	bne.n	8004628 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01a      	beq.n	800463c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3310      	adds	r3, #16
 800460a:	4618      	mov	r0, r3
 800460c:	f001 f91e 	bl	800584c <xTaskRemoveFromEventList>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d012      	beq.n	800463c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004616:	4b0d      	ldr	r3, [pc, #52]	@ (800464c <xQueueGenericReset+0xd0>)
 8004618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	e009      	b.n	800463c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3310      	adds	r3, #16
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fef5 	bl	800441c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3324      	adds	r3, #36	@ 0x24
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fef0 	bl	800441c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800463c:	f001 fcf6 	bl	800602c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004640:	2301      	movs	r3, #1
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	e000ed04 	.word	0xe000ed04

08004650 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08e      	sub	sp, #56	@ 0x38
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10b      	bne.n	800467c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004676:	bf00      	nop
 8004678:	bf00      	nop
 800467a:	e7fd      	b.n	8004678 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10b      	bne.n	800469a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop
 8004698:	e7fd      	b.n	8004696 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <xQueueGenericCreateStatic+0x56>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <xQueueGenericCreateStatic+0x5a>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <xQueueGenericCreateStatic+0x5c>
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10b      	bne.n	80046c8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	623b      	str	r3, [r7, #32]
}
 80046c2:	bf00      	nop
 80046c4:	bf00      	nop
 80046c6:	e7fd      	b.n	80046c4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d102      	bne.n	80046d4 <xQueueGenericCreateStatic+0x84>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <xQueueGenericCreateStatic+0x88>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <xQueueGenericCreateStatic+0x8a>
 80046d8:	2300      	movs	r3, #0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10b      	bne.n	80046f6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	61fb      	str	r3, [r7, #28]
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	e7fd      	b.n	80046f2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046f6:	2348      	movs	r3, #72	@ 0x48
 80046f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b48      	cmp	r3, #72	@ 0x48
 80046fe:	d00b      	beq.n	8004718 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	61bb      	str	r3, [r7, #24]
}
 8004712:	bf00      	nop
 8004714:	bf00      	nop
 8004716:	e7fd      	b.n	8004714 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800471c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00d      	beq.n	800473e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800472a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800472e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	4613      	mov	r3, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f844 	bl	80047c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800473e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004740:	4618      	mov	r0, r3
 8004742:	3730      	adds	r7, #48	@ 0x30
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	@ 0x28
 800474c:	af02      	add	r7, sp, #8
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	4613      	mov	r3, r2
 8004754:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10b      	bne.n	8004774 <xQueueGenericCreate+0x2c>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	613b      	str	r3, [r7, #16]
}
 800476e:	bf00      	nop
 8004770:	bf00      	nop
 8004772:	e7fd      	b.n	8004770 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d102      	bne.n	8004780 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	e004      	b.n	800478a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	fb02 f303 	mul.w	r3, r2, r3
 8004788:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	3348      	adds	r3, #72	@ 0x48
 800478e:	4618      	mov	r0, r3
 8004790:	f001 fd1e 	bl	80061d0 <pvPortMalloc>
 8004794:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00f      	beq.n	80047bc <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	3348      	adds	r3, #72	@ 0x48
 80047a0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047aa:	79fa      	ldrb	r2, [r7, #7]
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	4613      	mov	r3, r2
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f805 	bl	80047c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80047bc:	69bb      	ldr	r3, [r7, #24]
	}
 80047be:	4618      	mov	r0, r3
 80047c0:	3720      	adds	r7, #32
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	e002      	b.n	80047e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047f4:	2101      	movs	r1, #1
 80047f6:	69b8      	ldr	r0, [r7, #24]
 80047f8:	f7ff fec0 	bl	800457c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047fc:	bf00      	nop
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08e      	sub	sp, #56	@ 0x38
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004812:	2300      	movs	r3, #0
 8004814:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800481a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10b      	bne.n	8004838 <xQueueGenericSend+0x34>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004832:	bf00      	nop
 8004834:	bf00      	nop
 8004836:	e7fd      	b.n	8004834 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d103      	bne.n	8004846 <xQueueGenericSend+0x42>
 800483e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <xQueueGenericSend+0x46>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <xQueueGenericSend+0x48>
 800484a:	2300      	movs	r3, #0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10b      	bne.n	8004868 <xQueueGenericSend+0x64>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004862:	bf00      	nop
 8004864:	bf00      	nop
 8004866:	e7fd      	b.n	8004864 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d103      	bne.n	8004876 <xQueueGenericSend+0x72>
 800486e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <xQueueGenericSend+0x76>
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <xQueueGenericSend+0x78>
 800487a:	2300      	movs	r3, #0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10b      	bne.n	8004898 <xQueueGenericSend+0x94>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	623b      	str	r3, [r7, #32]
}
 8004892:	bf00      	nop
 8004894:	bf00      	nop
 8004896:	e7fd      	b.n	8004894 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004898:	f001 f99c 	bl	8005bd4 <xTaskGetSchedulerState>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d102      	bne.n	80048a8 <xQueueGenericSend+0xa4>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <xQueueGenericSend+0xa8>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <xQueueGenericSend+0xaa>
 80048ac:	2300      	movs	r3, #0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10b      	bne.n	80048ca <xQueueGenericSend+0xc6>
	__asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	61fb      	str	r3, [r7, #28]
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop
 80048c8:	e7fd      	b.n	80048c6 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048ca:	f001 fb7f 	bl	8005fcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d302      	bcc.n	80048e0 <xQueueGenericSend+0xdc>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d129      	bne.n	8004934 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048e6:	f000 fa8f 	bl	8004e08 <prvCopyDataToQueue>
 80048ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d010      	beq.n	8004916 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f6:	3324      	adds	r3, #36	@ 0x24
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 ffa7 	bl	800584c <xTaskRemoveFromEventList>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d013      	beq.n	800492c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004904:	4b3f      	ldr	r3, [pc, #252]	@ (8004a04 <xQueueGenericSend+0x200>)
 8004906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	e00a      	b.n	800492c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d007      	beq.n	800492c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800491c:	4b39      	ldr	r3, [pc, #228]	@ (8004a04 <xQueueGenericSend+0x200>)
 800491e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800492c:	f001 fb7e 	bl	800602c <vPortExitCritical>
				return pdPASS;
 8004930:	2301      	movs	r3, #1
 8004932:	e063      	b.n	80049fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d103      	bne.n	8004942 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800493a:	f001 fb77 	bl	800602c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800493e:	2300      	movs	r3, #0
 8004940:	e05c      	b.n	80049fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004944:	2b00      	cmp	r3, #0
 8004946:	d106      	bne.n	8004956 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004948:	f107 0314 	add.w	r3, r7, #20
 800494c:	4618      	mov	r0, r3
 800494e:	f000 ffe1 	bl	8005914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004952:	2301      	movs	r3, #1
 8004954:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004956:	f001 fb69 	bl	800602c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800495a:	f000 fd8b 	bl	8005474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800495e:	f001 fb35 	bl	8005fcc <vPortEnterCritical>
 8004962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004964:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004968:	b25b      	sxtb	r3, r3
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d103      	bne.n	8004978 <xQueueGenericSend+0x174>
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800497e:	b25b      	sxtb	r3, r3
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004984:	d103      	bne.n	800498e <xQueueGenericSend+0x18a>
 8004986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800498e:	f001 fb4d 	bl	800602c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004992:	1d3a      	adds	r2, r7, #4
 8004994:	f107 0314 	add.w	r3, r7, #20
 8004998:	4611      	mov	r1, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f000 ffd0 	bl	8005940 <xTaskCheckForTimeOut>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d124      	bne.n	80049f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049a8:	f000 fb26 	bl	8004ff8 <prvIsQueueFull>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d018      	beq.n	80049e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b4:	3310      	adds	r3, #16
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	4611      	mov	r1, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 ff20 	bl	8005800 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049c2:	f000 fab1 	bl	8004f28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049c6:	f000 fd63 	bl	8005490 <xTaskResumeAll>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f47f af7c 	bne.w	80048ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80049d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004a04 <xQueueGenericSend+0x200>)
 80049d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	e772      	b.n	80048ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049e6:	f000 fa9f 	bl	8004f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049ea:	f000 fd51 	bl	8005490 <xTaskResumeAll>
 80049ee:	e76c      	b.n	80048ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049f2:	f000 fa99 	bl	8004f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049f6:	f000 fd4b 	bl	8005490 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049fa:	2300      	movs	r3, #0
		}
	}
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3738      	adds	r7, #56	@ 0x38
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	e000ed04 	.word	0xe000ed04

08004a08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08e      	sub	sp, #56	@ 0x38
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d103      	bne.n	8004a46 <xQueueGenericSendFromISR+0x3e>
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <xQueueGenericSendFromISR+0x42>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <xQueueGenericSendFromISR+0x44>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10b      	bne.n	8004a68 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	623b      	str	r3, [r7, #32]
}
 8004a62:	bf00      	nop
 8004a64:	bf00      	nop
 8004a66:	e7fd      	b.n	8004a64 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d103      	bne.n	8004a76 <xQueueGenericSendFromISR+0x6e>
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <xQueueGenericSendFromISR+0x72>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <xQueueGenericSendFromISR+0x74>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10b      	bne.n	8004a98 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	61fb      	str	r3, [r7, #28]
}
 8004a92:	bf00      	nop
 8004a94:	bf00      	nop
 8004a96:	e7fd      	b.n	8004a94 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a98:	f001 fb5a 	bl	8006150 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a9c:	f3ef 8211 	mrs	r2, BASEPRI
 8004aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	61ba      	str	r2, [r7, #24]
 8004ab2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ab4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d302      	bcc.n	8004aca <xQueueGenericSendFromISR+0xc2>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d12c      	bne.n	8004b24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004acc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ad0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ada:	f000 f995 	bl	8004e08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ade:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	d112      	bne.n	8004b0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d016      	beq.n	8004b1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af2:	3324      	adds	r3, #36	@ 0x24
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fea9 	bl	800584c <xTaskRemoveFromEventList>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00e      	beq.n	8004b1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	e007      	b.n	8004b1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b12:	3301      	adds	r3, #1
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	b25a      	sxtb	r2, r3
 8004b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004b22:	e001      	b.n	8004b28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b2a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3738      	adds	r7, #56	@ 0x38
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08c      	sub	sp, #48	@ 0x30
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10b      	bne.n	8004b72 <xQueueReceive+0x32>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	623b      	str	r3, [r7, #32]
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	e7fd      	b.n	8004b6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d103      	bne.n	8004b80 <xQueueReceive+0x40>
 8004b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <xQueueReceive+0x44>
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <xQueueReceive+0x46>
 8004b84:	2300      	movs	r3, #0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10b      	bne.n	8004ba2 <xQueueReceive+0x62>
	__asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	61fb      	str	r3, [r7, #28]
}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	e7fd      	b.n	8004b9e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ba2:	f001 f817 	bl	8005bd4 <xTaskGetSchedulerState>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <xQueueReceive+0x72>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <xQueueReceive+0x76>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <xQueueReceive+0x78>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10b      	bne.n	8004bd4 <xQueueReceive+0x94>
	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	61bb      	str	r3, [r7, #24]
}
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
 8004bd2:	e7fd      	b.n	8004bd0 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bd4:	f001 f9fa 	bl	8005fcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bdc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01f      	beq.n	8004c24 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004be8:	f000 f978 	bl	8004edc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bee:	1e5a      	subs	r2, r3, #1
 8004bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00f      	beq.n	8004c1c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfe:	3310      	adds	r3, #16
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 fe23 	bl	800584c <xTaskRemoveFromEventList>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c0c:	4b3c      	ldr	r3, [pc, #240]	@ (8004d00 <xQueueReceive+0x1c0>)
 8004c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c1c:	f001 fa06 	bl	800602c <vPortExitCritical>
				return pdPASS;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e069      	b.n	8004cf8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d103      	bne.n	8004c32 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c2a:	f001 f9ff 	bl	800602c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	e062      	b.n	8004cf8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d106      	bne.n	8004c46 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c38:	f107 0310 	add.w	r3, r7, #16
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fe69 	bl	8005914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c42:	2301      	movs	r3, #1
 8004c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c46:	f001 f9f1 	bl	800602c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c4a:	f000 fc13 	bl	8005474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c4e:	f001 f9bd 	bl	8005fcc <vPortEnterCritical>
 8004c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c58:	b25b      	sxtb	r3, r3
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5e:	d103      	bne.n	8004c68 <xQueueReceive+0x128>
 8004c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c6e:	b25b      	sxtb	r3, r3
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d103      	bne.n	8004c7e <xQueueReceive+0x13e>
 8004c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c7e:	f001 f9d5 	bl	800602c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c82:	1d3a      	adds	r2, r7, #4
 8004c84:	f107 0310 	add.w	r3, r7, #16
 8004c88:	4611      	mov	r1, r2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fe58 	bl	8005940 <xTaskCheckForTimeOut>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d123      	bne.n	8004cde <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c98:	f000 f998 	bl	8004fcc <prvIsQueueEmpty>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d017      	beq.n	8004cd2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca4:	3324      	adds	r3, #36	@ 0x24
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	4611      	mov	r1, r2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fda8 	bl	8005800 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cb2:	f000 f939 	bl	8004f28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cb6:	f000 fbeb 	bl	8005490 <xTaskResumeAll>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d189      	bne.n	8004bd4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8004d00 <xQueueReceive+0x1c0>)
 8004cc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	e780      	b.n	8004bd4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cd4:	f000 f928 	bl	8004f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cd8:	f000 fbda 	bl	8005490 <xTaskResumeAll>
 8004cdc:	e77a      	b.n	8004bd4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ce0:	f000 f922 	bl	8004f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ce4:	f000 fbd4 	bl	8005490 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ce8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cea:	f000 f96f 	bl	8004fcc <prvIsQueueEmpty>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f43f af6f 	beq.w	8004bd4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cf6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3730      	adds	r7, #48	@ 0x30
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	e000ed04 	.word	0xe000ed04

08004d04 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08e      	sub	sp, #56	@ 0x38
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	623b      	str	r3, [r7, #32]
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d103      	bne.n	8004d40 <xQueueReceiveFromISR+0x3c>
 8004d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <xQueueReceiveFromISR+0x40>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <xQueueReceiveFromISR+0x42>
 8004d44:	2300      	movs	r3, #0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10b      	bne.n	8004d62 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	61fb      	str	r3, [r7, #28]
}
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	e7fd      	b.n	8004d5e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d62:	f001 f9f5 	bl	8006150 <vPortValidateInterruptPriority>
	__asm volatile
 8004d66:	f3ef 8211 	mrs	r2, BASEPRI
 8004d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	61ba      	str	r2, [r7, #24]
 8004d7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004d7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d86:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d02f      	beq.n	8004dee <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d9c:	f000 f89e 	bl	8004edc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da2:	1e5a      	subs	r2, r3, #1
 8004da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004da8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db0:	d112      	bne.n	8004dd8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d016      	beq.n	8004de8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbc:	3310      	adds	r3, #16
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fd44 	bl	800584c <xTaskRemoveFromEventList>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00e      	beq.n	8004de8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00b      	beq.n	8004de8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	e007      	b.n	8004de8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ddc:	3301      	adds	r3, #1
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	b25a      	sxtb	r2, r3
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004de8:	2301      	movs	r3, #1
 8004dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dec:	e001      	b.n	8004df2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f383 8811 	msr	BASEPRI, r3
}
 8004dfc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3738      	adds	r7, #56	@ 0x38
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10d      	bne.n	8004e42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d14d      	bne.n	8004eca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 feec 	bl	8005c10 <xTaskPriorityDisinherit>
 8004e38:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	605a      	str	r2, [r3, #4]
 8004e40:	e043      	b.n	8004eca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d119      	bne.n	8004e7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6898      	ldr	r0, [r3, #8]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e50:	461a      	mov	r2, r3
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	f001 fbc6 	bl	80065e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e60:	441a      	add	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d32b      	bcc.n	8004eca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	609a      	str	r2, [r3, #8]
 8004e7a:	e026      	b.n	8004eca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	68d8      	ldr	r0, [r3, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e84:	461a      	mov	r2, r3
 8004e86:	68b9      	ldr	r1, [r7, #8]
 8004e88:	f001 fbac 	bl	80065e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e94:	425b      	negs	r3, r3
 8004e96:	441a      	add	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d207      	bcs.n	8004eb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb0:	425b      	negs	r3, r3
 8004eb2:	441a      	add	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d105      	bne.n	8004eca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004ed2:	697b      	ldr	r3, [r7, #20]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d018      	beq.n	8004f20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	441a      	add	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d303      	bcc.n	8004f10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68d9      	ldr	r1, [r3, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f18:	461a      	mov	r2, r3
 8004f1a:	6838      	ldr	r0, [r7, #0]
 8004f1c:	f001 fb62 	bl	80065e4 <memcpy>
	}
}
 8004f20:	bf00      	nop
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f30:	f001 f84c 	bl	8005fcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f3c:	e011      	b.n	8004f62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d012      	beq.n	8004f6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3324      	adds	r3, #36	@ 0x24
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fc7e 	bl	800584c <xTaskRemoveFromEventList>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f56:	f000 fd57 	bl	8005a08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	dce9      	bgt.n	8004f3e <prvUnlockQueue+0x16>
 8004f6a:	e000      	b.n	8004f6e <prvUnlockQueue+0x46>
					break;
 8004f6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	22ff      	movs	r2, #255	@ 0xff
 8004f72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f76:	f001 f859 	bl	800602c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f7a:	f001 f827 	bl	8005fcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f86:	e011      	b.n	8004fac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d012      	beq.n	8004fb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3310      	adds	r3, #16
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fc59 	bl	800584c <xTaskRemoveFromEventList>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fa0:	f000 fd32 	bl	8005a08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fa4:	7bbb      	ldrb	r3, [r7, #14]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	dce9      	bgt.n	8004f88 <prvUnlockQueue+0x60>
 8004fb4:	e000      	b.n	8004fb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	22ff      	movs	r2, #255	@ 0xff
 8004fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004fc0:	f001 f834 	bl	800602c <vPortExitCritical>
}
 8004fc4:	bf00      	nop
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fd4:	f000 fffa 	bl	8005fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d102      	bne.n	8004fe6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e001      	b.n	8004fea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fea:	f001 f81f 	bl	800602c <vPortExitCritical>

	return xReturn;
 8004fee:	68fb      	ldr	r3, [r7, #12]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005000:	f000 ffe4 	bl	8005fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500c:	429a      	cmp	r2, r3
 800500e:	d102      	bne.n	8005016 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005010:	2301      	movs	r3, #1
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	e001      	b.n	800501a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800501a:	f001 f807 	bl	800602c <vPortExitCritical>

	return xReturn;
 800501e:	68fb      	ldr	r3, [r7, #12]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08e      	sub	sp, #56	@ 0x38
 800502c:	af04      	add	r7, sp, #16
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10b      	bne.n	8005054 <xTaskCreateStatic+0x2c>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	623b      	str	r3, [r7, #32]
}
 800504e:	bf00      	nop
 8005050:	bf00      	nop
 8005052:	e7fd      	b.n	8005050 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10b      	bne.n	8005072 <xTaskCreateStatic+0x4a>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	61fb      	str	r3, [r7, #28]
}
 800506c:	bf00      	nop
 800506e:	bf00      	nop
 8005070:	e7fd      	b.n	800506e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005072:	2354      	movs	r3, #84	@ 0x54
 8005074:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b54      	cmp	r3, #84	@ 0x54
 800507a:	d00b      	beq.n	8005094 <xTaskCreateStatic+0x6c>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	61bb      	str	r3, [r7, #24]
}
 800508e:	bf00      	nop
 8005090:	bf00      	nop
 8005092:	e7fd      	b.n	8005090 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01e      	beq.n	80050d8 <xTaskCreateStatic+0xb0>
 800509a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01b      	beq.n	80050d8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050a8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050b2:	2300      	movs	r3, #0
 80050b4:	9303      	str	r3, [sp, #12]
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	9302      	str	r3, [sp, #8]
 80050ba:	f107 0314 	add.w	r3, r7, #20
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 f850 	bl	8005170 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050d2:	f000 f8cd 	bl	8005270 <prvAddNewTaskToReadyList>
 80050d6:	e001      	b.n	80050dc <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050dc:	697b      	ldr	r3, [r7, #20]
	}
 80050de:	4618      	mov	r0, r3
 80050e0:	3728      	adds	r7, #40	@ 0x28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b08c      	sub	sp, #48	@ 0x30
 80050ea:	af04      	add	r7, sp, #16
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	603b      	str	r3, [r7, #0]
 80050f2:	4613      	mov	r3, r2
 80050f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050f6:	88fb      	ldrh	r3, [r7, #6]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f001 f868 	bl	80061d0 <pvPortMalloc>
 8005100:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00e      	beq.n	8005126 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005108:	2054      	movs	r0, #84	@ 0x54
 800510a:	f001 f861 	bl	80061d0 <pvPortMalloc>
 800510e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	631a      	str	r2, [r3, #48]	@ 0x30
 800511c:	e005      	b.n	800512a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800511e:	6978      	ldr	r0, [r7, #20]
 8005120:	f001 f91e 	bl	8006360 <vPortFree>
 8005124:	e001      	b.n	800512a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d017      	beq.n	8005160 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005138:	88fa      	ldrh	r2, [r7, #6]
 800513a:	2300      	movs	r3, #0
 800513c:	9303      	str	r3, [sp, #12]
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	9302      	str	r3, [sp, #8]
 8005142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005144:	9301      	str	r3, [sp, #4]
 8005146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f80e 	bl	8005170 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005154:	69f8      	ldr	r0, [r7, #28]
 8005156:	f000 f88b 	bl	8005270 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800515a:	2301      	movs	r3, #1
 800515c:	61bb      	str	r3, [r7, #24]
 800515e:	e002      	b.n	8005166 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005160:	f04f 33ff 	mov.w	r3, #4294967295
 8005164:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005166:	69bb      	ldr	r3, [r7, #24]
	}
 8005168:	4618      	mov	r0, r3
 800516a:	3720      	adds	r7, #32
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800517e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005180:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005188:	3b01      	subs	r3, #1
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f023 0307 	bic.w	r3, r3, #7
 8005196:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00b      	beq.n	80051ba <prvInitialiseNewTask+0x4a>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	617b      	str	r3, [r7, #20]
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	e7fd      	b.n	80051b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051ba:	2300      	movs	r3, #0
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	e012      	b.n	80051e6 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	7819      	ldrb	r1, [r3, #0]
 80051c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	3334      	adds	r3, #52	@ 0x34
 80051d0:	460a      	mov	r2, r1
 80051d2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d006      	beq.n	80051ee <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	3301      	adds	r3, #1
 80051e4:	61fb      	str	r3, [r7, #28]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	2b0f      	cmp	r3, #15
 80051ea:	d9e9      	bls.n	80051c0 <prvInitialiseNewTask+0x50>
 80051ec:	e000      	b.n	80051f0 <prvInitialiseNewTask+0x80>
		{
			break;
 80051ee:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fa:	2b06      	cmp	r3, #6
 80051fc:	d901      	bls.n	8005202 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051fe:	2306      	movs	r3, #6
 8005200:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005204:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005206:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800520c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005210:	2200      	movs	r2, #0
 8005212:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005216:	3304      	adds	r3, #4
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff f91e 	bl	800445a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005220:	3318      	adds	r3, #24
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff f919 	bl	800445a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800522c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800522e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005230:	f1c3 0207 	rsb	r2, r3, #7
 8005234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005236:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800523c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800523e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005240:	2200      	movs	r2, #0
 8005242:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	68f9      	ldr	r1, [r7, #12]
 8005250:	69b8      	ldr	r0, [r7, #24]
 8005252:	f000 fdcb 	bl	8005dec <pxPortInitialiseStack>
 8005256:	4602      	mov	r2, r0
 8005258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800525c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005266:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005268:	bf00      	nop
 800526a:	3720      	adds	r7, #32
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005278:	f000 fea8 	bl	8005fcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800527c:	4b2a      	ldr	r3, [pc, #168]	@ (8005328 <prvAddNewTaskToReadyList+0xb8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3301      	adds	r3, #1
 8005282:	4a29      	ldr	r2, [pc, #164]	@ (8005328 <prvAddNewTaskToReadyList+0xb8>)
 8005284:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005286:	4b29      	ldr	r3, [pc, #164]	@ (800532c <prvAddNewTaskToReadyList+0xbc>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800528e:	4a27      	ldr	r2, [pc, #156]	@ (800532c <prvAddNewTaskToReadyList+0xbc>)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005294:	4b24      	ldr	r3, [pc, #144]	@ (8005328 <prvAddNewTaskToReadyList+0xb8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d110      	bne.n	80052be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800529c:	f000 fbd8 	bl	8005a50 <prvInitialiseTaskLists>
 80052a0:	e00d      	b.n	80052be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052a2:	4b23      	ldr	r3, [pc, #140]	@ (8005330 <prvAddNewTaskToReadyList+0xc0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d109      	bne.n	80052be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052aa:	4b20      	ldr	r3, [pc, #128]	@ (800532c <prvAddNewTaskToReadyList+0xbc>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d802      	bhi.n	80052be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052b8:	4a1c      	ldr	r2, [pc, #112]	@ (800532c <prvAddNewTaskToReadyList+0xbc>)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052be:	4b1d      	ldr	r3, [pc, #116]	@ (8005334 <prvAddNewTaskToReadyList+0xc4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3301      	adds	r3, #1
 80052c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005334 <prvAddNewTaskToReadyList+0xc4>)
 80052c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052cc:	2201      	movs	r2, #1
 80052ce:	409a      	lsls	r2, r3
 80052d0:	4b19      	ldr	r3, [pc, #100]	@ (8005338 <prvAddNewTaskToReadyList+0xc8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	4a18      	ldr	r2, [pc, #96]	@ (8005338 <prvAddNewTaskToReadyList+0xc8>)
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4a15      	ldr	r2, [pc, #84]	@ (800533c <prvAddNewTaskToReadyList+0xcc>)
 80052e8:	441a      	add	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3304      	adds	r3, #4
 80052ee:	4619      	mov	r1, r3
 80052f0:	4610      	mov	r0, r2
 80052f2:	f7ff f8be 	bl	8004472 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052f6:	f000 fe99 	bl	800602c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005330 <prvAddNewTaskToReadyList+0xc0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00e      	beq.n	8005320 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005302:	4b0a      	ldr	r3, [pc, #40]	@ (800532c <prvAddNewTaskToReadyList+0xbc>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530c:	429a      	cmp	r2, r3
 800530e:	d207      	bcs.n	8005320 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005310:	4b0b      	ldr	r3, [pc, #44]	@ (8005340 <prvAddNewTaskToReadyList+0xd0>)
 8005312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	200005c4 	.word	0x200005c4
 800532c:	200004c4 	.word	0x200004c4
 8005330:	200005d0 	.word	0x200005d0
 8005334:	200005e0 	.word	0x200005e0
 8005338:	200005cc 	.word	0x200005cc
 800533c:	200004c8 	.word	0x200004c8
 8005340:	e000ed04 	.word	0xe000ed04

08005344 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d018      	beq.n	8005388 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005356:	4b14      	ldr	r3, [pc, #80]	@ (80053a8 <vTaskDelay+0x64>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00b      	beq.n	8005376 <vTaskDelay+0x32>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	60bb      	str	r3, [r7, #8]
}
 8005370:	bf00      	nop
 8005372:	bf00      	nop
 8005374:	e7fd      	b.n	8005372 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005376:	f000 f87d 	bl	8005474 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800537a:	2100      	movs	r1, #0
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fccf 	bl	8005d20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005382:	f000 f885 	bl	8005490 <xTaskResumeAll>
 8005386:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d107      	bne.n	800539e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800538e:	4b07      	ldr	r3, [pc, #28]	@ (80053ac <vTaskDelay+0x68>)
 8005390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800539e:	bf00      	nop
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	200005ec 	.word	0x200005ec
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08a      	sub	sp, #40	@ 0x28
 80053b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053be:	463a      	mov	r2, r7
 80053c0:	1d39      	adds	r1, r7, #4
 80053c2:	f107 0308 	add.w	r3, r7, #8
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fa ff9e 	bl	8000308 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053cc:	6839      	ldr	r1, [r7, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	9202      	str	r2, [sp, #8]
 80053d4:	9301      	str	r3, [sp, #4]
 80053d6:	2300      	movs	r3, #0
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	2300      	movs	r3, #0
 80053dc:	460a      	mov	r2, r1
 80053de:	491f      	ldr	r1, [pc, #124]	@ (800545c <vTaskStartScheduler+0xac>)
 80053e0:	481f      	ldr	r0, [pc, #124]	@ (8005460 <vTaskStartScheduler+0xb0>)
 80053e2:	f7ff fe21 	bl	8005028 <xTaskCreateStatic>
 80053e6:	4603      	mov	r3, r0
 80053e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005464 <vTaskStartScheduler+0xb4>)
 80053ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005464 <vTaskStartScheduler+0xb4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053f4:	2301      	movs	r3, #1
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	e001      	b.n	80053fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d116      	bne.n	8005432 <vTaskStartScheduler+0x82>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	613b      	str	r3, [r7, #16]
}
 8005416:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005418:	4b13      	ldr	r3, [pc, #76]	@ (8005468 <vTaskStartScheduler+0xb8>)
 800541a:	f04f 32ff 	mov.w	r2, #4294967295
 800541e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005420:	4b12      	ldr	r3, [pc, #72]	@ (800546c <vTaskStartScheduler+0xbc>)
 8005422:	2201      	movs	r2, #1
 8005424:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005426:	4b12      	ldr	r3, [pc, #72]	@ (8005470 <vTaskStartScheduler+0xc0>)
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800542c:	f000 fd5c 	bl	8005ee8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005430:	e00f      	b.n	8005452 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d10b      	bne.n	8005452 <vTaskStartScheduler+0xa2>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	60fb      	str	r3, [r7, #12]
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	e7fd      	b.n	800544e <vTaskStartScheduler+0x9e>
}
 8005452:	bf00      	nop
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	080066a4 	.word	0x080066a4
 8005460:	08005a21 	.word	0x08005a21
 8005464:	200005e8 	.word	0x200005e8
 8005468:	200005e4 	.word	0x200005e4
 800546c:	200005d0 	.word	0x200005d0
 8005470:	200005c8 	.word	0x200005c8

08005474 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005478:	4b04      	ldr	r3, [pc, #16]	@ (800548c <vTaskSuspendAll+0x18>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3301      	adds	r3, #1
 800547e:	4a03      	ldr	r2, [pc, #12]	@ (800548c <vTaskSuspendAll+0x18>)
 8005480:	6013      	str	r3, [r2, #0]
}
 8005482:	bf00      	nop
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	200005ec 	.word	0x200005ec

08005490 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800549a:	2300      	movs	r3, #0
 800549c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800549e:	4b42      	ldr	r3, [pc, #264]	@ (80055a8 <xTaskResumeAll+0x118>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10b      	bne.n	80054be <xTaskResumeAll+0x2e>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	603b      	str	r3, [r7, #0]
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	e7fd      	b.n	80054ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80054be:	f000 fd85 	bl	8005fcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80054c2:	4b39      	ldr	r3, [pc, #228]	@ (80055a8 <xTaskResumeAll+0x118>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	4a37      	ldr	r2, [pc, #220]	@ (80055a8 <xTaskResumeAll+0x118>)
 80054ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054cc:	4b36      	ldr	r3, [pc, #216]	@ (80055a8 <xTaskResumeAll+0x118>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d161      	bne.n	8005598 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054d4:	4b35      	ldr	r3, [pc, #212]	@ (80055ac <xTaskResumeAll+0x11c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d05d      	beq.n	8005598 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054dc:	e02e      	b.n	800553c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80054de:	4b34      	ldr	r3, [pc, #208]	@ (80055b0 <xTaskResumeAll+0x120>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3318      	adds	r3, #24
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff f81c 	bl	8004528 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff f817 	bl	8004528 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fe:	2201      	movs	r2, #1
 8005500:	409a      	lsls	r2, r3
 8005502:	4b2c      	ldr	r3, [pc, #176]	@ (80055b4 <xTaskResumeAll+0x124>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4313      	orrs	r3, r2
 8005508:	4a2a      	ldr	r2, [pc, #168]	@ (80055b4 <xTaskResumeAll+0x124>)
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005510:	4613      	mov	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4a27      	ldr	r2, [pc, #156]	@ (80055b8 <xTaskResumeAll+0x128>)
 800551a:	441a      	add	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3304      	adds	r3, #4
 8005520:	4619      	mov	r1, r3
 8005522:	4610      	mov	r0, r2
 8005524:	f7fe ffa5 	bl	8004472 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552c:	4b23      	ldr	r3, [pc, #140]	@ (80055bc <xTaskResumeAll+0x12c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005532:	429a      	cmp	r2, r3
 8005534:	d302      	bcc.n	800553c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005536:	4b22      	ldr	r3, [pc, #136]	@ (80055c0 <xTaskResumeAll+0x130>)
 8005538:	2201      	movs	r2, #1
 800553a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800553c:	4b1c      	ldr	r3, [pc, #112]	@ (80055b0 <xTaskResumeAll+0x120>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1cc      	bne.n	80054de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800554a:	f000 fb1f 	bl	8005b8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800554e:	4b1d      	ldr	r3, [pc, #116]	@ (80055c4 <xTaskResumeAll+0x134>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d010      	beq.n	800557c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800555a:	f000 f837 	bl	80055cc <xTaskIncrementTick>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005564:	4b16      	ldr	r3, [pc, #88]	@ (80055c0 <xTaskResumeAll+0x130>)
 8005566:	2201      	movs	r2, #1
 8005568:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3b01      	subs	r3, #1
 800556e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f1      	bne.n	800555a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005576:	4b13      	ldr	r3, [pc, #76]	@ (80055c4 <xTaskResumeAll+0x134>)
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800557c:	4b10      	ldr	r3, [pc, #64]	@ (80055c0 <xTaskResumeAll+0x130>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d009      	beq.n	8005598 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005584:	2301      	movs	r3, #1
 8005586:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005588:	4b0f      	ldr	r3, [pc, #60]	@ (80055c8 <xTaskResumeAll+0x138>)
 800558a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005598:	f000 fd48 	bl	800602c <vPortExitCritical>

	return xAlreadyYielded;
 800559c:	68bb      	ldr	r3, [r7, #8]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	200005ec 	.word	0x200005ec
 80055ac:	200005c4 	.word	0x200005c4
 80055b0:	20000584 	.word	0x20000584
 80055b4:	200005cc 	.word	0x200005cc
 80055b8:	200004c8 	.word	0x200004c8
 80055bc:	200004c4 	.word	0x200004c4
 80055c0:	200005d8 	.word	0x200005d8
 80055c4:	200005d4 	.word	0x200005d4
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055d6:	4b51      	ldr	r3, [pc, #324]	@ (800571c <xTaskIncrementTick+0x150>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f040 808e 	bne.w	80056fc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055e0:	4b4f      	ldr	r3, [pc, #316]	@ (8005720 <xTaskIncrementTick+0x154>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3301      	adds	r3, #1
 80055e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055e8:	4a4d      	ldr	r2, [pc, #308]	@ (8005720 <xTaskIncrementTick+0x154>)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d121      	bne.n	8005638 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80055f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005724 <xTaskIncrementTick+0x158>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00b      	beq.n	8005616 <xTaskIncrementTick+0x4a>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	603b      	str	r3, [r7, #0]
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	e7fd      	b.n	8005612 <xTaskIncrementTick+0x46>
 8005616:	4b43      	ldr	r3, [pc, #268]	@ (8005724 <xTaskIncrementTick+0x158>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	4b42      	ldr	r3, [pc, #264]	@ (8005728 <xTaskIncrementTick+0x15c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a40      	ldr	r2, [pc, #256]	@ (8005724 <xTaskIncrementTick+0x158>)
 8005622:	6013      	str	r3, [r2, #0]
 8005624:	4a40      	ldr	r2, [pc, #256]	@ (8005728 <xTaskIncrementTick+0x15c>)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	4b40      	ldr	r3, [pc, #256]	@ (800572c <xTaskIncrementTick+0x160>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3301      	adds	r3, #1
 8005630:	4a3e      	ldr	r2, [pc, #248]	@ (800572c <xTaskIncrementTick+0x160>)
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	f000 faaa 	bl	8005b8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005638:	4b3d      	ldr	r3, [pc, #244]	@ (8005730 <xTaskIncrementTick+0x164>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	429a      	cmp	r2, r3
 8005640:	d34d      	bcc.n	80056de <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005642:	4b38      	ldr	r3, [pc, #224]	@ (8005724 <xTaskIncrementTick+0x158>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <xTaskIncrementTick+0x84>
 800564c:	2301      	movs	r3, #1
 800564e:	e000      	b.n	8005652 <xTaskIncrementTick+0x86>
 8005650:	2300      	movs	r3, #0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005656:	4b36      	ldr	r3, [pc, #216]	@ (8005730 <xTaskIncrementTick+0x164>)
 8005658:	f04f 32ff 	mov.w	r2, #4294967295
 800565c:	601a      	str	r2, [r3, #0]
					break;
 800565e:	e03e      	b.n	80056de <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005660:	4b30      	ldr	r3, [pc, #192]	@ (8005724 <xTaskIncrementTick+0x158>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	429a      	cmp	r2, r3
 8005676:	d203      	bcs.n	8005680 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005678:	4a2d      	ldr	r2, [pc, #180]	@ (8005730 <xTaskIncrementTick+0x164>)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6013      	str	r3, [r2, #0]
						break;
 800567e:	e02e      	b.n	80056de <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	3304      	adds	r3, #4
 8005684:	4618      	mov	r0, r3
 8005686:	f7fe ff4f 	bl	8004528 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	d004      	beq.n	800569c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	3318      	adds	r3, #24
 8005696:	4618      	mov	r0, r3
 8005698:	f7fe ff46 	bl	8004528 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a0:	2201      	movs	r2, #1
 80056a2:	409a      	lsls	r2, r3
 80056a4:	4b23      	ldr	r3, [pc, #140]	@ (8005734 <xTaskIncrementTick+0x168>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	4a22      	ldr	r2, [pc, #136]	@ (8005734 <xTaskIncrementTick+0x168>)
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005738 <xTaskIncrementTick+0x16c>)
 80056bc:	441a      	add	r2, r3
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f7fe fed4 	bl	8004472 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ce:	4b1b      	ldr	r3, [pc, #108]	@ (800573c <xTaskIncrementTick+0x170>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d3b4      	bcc.n	8005642 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80056d8:	2301      	movs	r3, #1
 80056da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056dc:	e7b1      	b.n	8005642 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056de:	4b17      	ldr	r3, [pc, #92]	@ (800573c <xTaskIncrementTick+0x170>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e4:	4914      	ldr	r1, [pc, #80]	@ (8005738 <xTaskIncrementTick+0x16c>)
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	440b      	add	r3, r1
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d907      	bls.n	8005706 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80056f6:	2301      	movs	r3, #1
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	e004      	b.n	8005706 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056fc:	4b10      	ldr	r3, [pc, #64]	@ (8005740 <xTaskIncrementTick+0x174>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3301      	adds	r3, #1
 8005702:	4a0f      	ldr	r2, [pc, #60]	@ (8005740 <xTaskIncrementTick+0x174>)
 8005704:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005706:	4b0f      	ldr	r3, [pc, #60]	@ (8005744 <xTaskIncrementTick+0x178>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800570e:	2301      	movs	r3, #1
 8005710:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005712:	697b      	ldr	r3, [r7, #20]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	200005ec 	.word	0x200005ec
 8005720:	200005c8 	.word	0x200005c8
 8005724:	2000057c 	.word	0x2000057c
 8005728:	20000580 	.word	0x20000580
 800572c:	200005dc 	.word	0x200005dc
 8005730:	200005e4 	.word	0x200005e4
 8005734:	200005cc 	.word	0x200005cc
 8005738:	200004c8 	.word	0x200004c8
 800573c:	200004c4 	.word	0x200004c4
 8005740:	200005d4 	.word	0x200005d4
 8005744:	200005d8 	.word	0x200005d8

08005748 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800574e:	4b27      	ldr	r3, [pc, #156]	@ (80057ec <vTaskSwitchContext+0xa4>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005756:	4b26      	ldr	r3, [pc, #152]	@ (80057f0 <vTaskSwitchContext+0xa8>)
 8005758:	2201      	movs	r2, #1
 800575a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800575c:	e040      	b.n	80057e0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800575e:	4b24      	ldr	r3, [pc, #144]	@ (80057f0 <vTaskSwitchContext+0xa8>)
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005764:	4b23      	ldr	r3, [pc, #140]	@ (80057f4 <vTaskSwitchContext+0xac>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	fab3 f383 	clz	r3, r3
 8005770:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005772:	7afb      	ldrb	r3, [r7, #11]
 8005774:	f1c3 031f 	rsb	r3, r3, #31
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	491f      	ldr	r1, [pc, #124]	@ (80057f8 <vTaskSwitchContext+0xb0>)
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10b      	bne.n	80057a6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	607b      	str	r3, [r7, #4]
}
 80057a0:	bf00      	nop
 80057a2:	bf00      	nop
 80057a4:	e7fd      	b.n	80057a2 <vTaskSwitchContext+0x5a>
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4a11      	ldr	r2, [pc, #68]	@ (80057f8 <vTaskSwitchContext+0xb0>)
 80057b2:	4413      	add	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	605a      	str	r2, [r3, #4]
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	3308      	adds	r3, #8
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d104      	bne.n	80057d6 <vTaskSwitchContext+0x8e>
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	605a      	str	r2, [r3, #4]
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	4a07      	ldr	r2, [pc, #28]	@ (80057fc <vTaskSwitchContext+0xb4>)
 80057de:	6013      	str	r3, [r2, #0]
}
 80057e0:	bf00      	nop
 80057e2:	371c      	adds	r7, #28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bc80      	pop	{r7}
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	200005ec 	.word	0x200005ec
 80057f0:	200005d8 	.word	0x200005d8
 80057f4:	200005cc 	.word	0x200005cc
 80057f8:	200004c8 	.word	0x200004c8
 80057fc:	200004c4 	.word	0x200004c4

08005800 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10b      	bne.n	8005828 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	60fb      	str	r3, [r7, #12]
}
 8005822:	bf00      	nop
 8005824:	bf00      	nop
 8005826:	e7fd      	b.n	8005824 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005828:	4b07      	ldr	r3, [pc, #28]	@ (8005848 <vTaskPlaceOnEventList+0x48>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3318      	adds	r3, #24
 800582e:	4619      	mov	r1, r3
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7fe fe41 	bl	80044b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005836:	2101      	movs	r1, #1
 8005838:	6838      	ldr	r0, [r7, #0]
 800583a:	f000 fa71 	bl	8005d20 <prvAddCurrentTaskToDelayedList>
}
 800583e:	bf00      	nop
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	200004c4 	.word	0x200004c4

0800584c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	60fb      	str	r3, [r7, #12]
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	e7fd      	b.n	8005876 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	3318      	adds	r3, #24
 800587e:	4618      	mov	r0, r3
 8005880:	f7fe fe52 	bl	8004528 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005884:	4b1d      	ldr	r3, [pc, #116]	@ (80058fc <xTaskRemoveFromEventList+0xb0>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d11c      	bne.n	80058c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	3304      	adds	r3, #4
 8005890:	4618      	mov	r0, r3
 8005892:	f7fe fe49 	bl	8004528 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	2201      	movs	r2, #1
 800589c:	409a      	lsls	r2, r3
 800589e:	4b18      	ldr	r3, [pc, #96]	@ (8005900 <xTaskRemoveFromEventList+0xb4>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	4a16      	ldr	r2, [pc, #88]	@ (8005900 <xTaskRemoveFromEventList+0xb4>)
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4a13      	ldr	r2, [pc, #76]	@ (8005904 <xTaskRemoveFromEventList+0xb8>)
 80058b6:	441a      	add	r2, r3
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f7fe fdd7 	bl	8004472 <vListInsertEnd>
 80058c4:	e005      	b.n	80058d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	3318      	adds	r3, #24
 80058ca:	4619      	mov	r1, r3
 80058cc:	480e      	ldr	r0, [pc, #56]	@ (8005908 <xTaskRemoveFromEventList+0xbc>)
 80058ce:	f7fe fdd0 	bl	8004472 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d6:	4b0d      	ldr	r3, [pc, #52]	@ (800590c <xTaskRemoveFromEventList+0xc0>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058dc:	429a      	cmp	r2, r3
 80058de:	d905      	bls.n	80058ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058e0:	2301      	movs	r3, #1
 80058e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005910 <xTaskRemoveFromEventList+0xc4>)
 80058e6:	2201      	movs	r2, #1
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	e001      	b.n	80058f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80058f0:	697b      	ldr	r3, [r7, #20]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	200005ec 	.word	0x200005ec
 8005900:	200005cc 	.word	0x200005cc
 8005904:	200004c8 	.word	0x200004c8
 8005908:	20000584 	.word	0x20000584
 800590c:	200004c4 	.word	0x200004c4
 8005910:	200005d8 	.word	0x200005d8

08005914 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800591c:	4b06      	ldr	r3, [pc, #24]	@ (8005938 <vTaskInternalSetTimeOutState+0x24>)
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005924:	4b05      	ldr	r3, [pc, #20]	@ (800593c <vTaskInternalSetTimeOutState+0x28>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	605a      	str	r2, [r3, #4]
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	200005dc 	.word	0x200005dc
 800593c:	200005c8 	.word	0x200005c8

08005940 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10b      	bne.n	8005968 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	613b      	str	r3, [r7, #16]
}
 8005962:	bf00      	nop
 8005964:	bf00      	nop
 8005966:	e7fd      	b.n	8005964 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10b      	bne.n	8005986 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	60fb      	str	r3, [r7, #12]
}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	e7fd      	b.n	8005982 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005986:	f000 fb21 	bl	8005fcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800598a:	4b1d      	ldr	r3, [pc, #116]	@ (8005a00 <xTaskCheckForTimeOut+0xc0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a2:	d102      	bne.n	80059aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059a4:	2300      	movs	r3, #0
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	e023      	b.n	80059f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4b15      	ldr	r3, [pc, #84]	@ (8005a04 <xTaskCheckForTimeOut+0xc4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d007      	beq.n	80059c6 <xTaskCheckForTimeOut+0x86>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d302      	bcc.n	80059c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80059c0:	2301      	movs	r3, #1
 80059c2:	61fb      	str	r3, [r7, #28]
 80059c4:	e015      	b.n	80059f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d20b      	bcs.n	80059e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	1ad2      	subs	r2, r2, r3
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff ff99 	bl	8005914 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80059e2:	2300      	movs	r3, #0
 80059e4:	61fb      	str	r3, [r7, #28]
 80059e6:	e004      	b.n	80059f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059ee:	2301      	movs	r3, #1
 80059f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059f2:	f000 fb1b 	bl	800602c <vPortExitCritical>

	return xReturn;
 80059f6:	69fb      	ldr	r3, [r7, #28]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3720      	adds	r7, #32
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	200005c8 	.word	0x200005c8
 8005a04:	200005dc 	.word	0x200005dc

08005a08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a0c:	4b03      	ldr	r3, [pc, #12]	@ (8005a1c <vTaskMissedYield+0x14>)
 8005a0e:	2201      	movs	r2, #1
 8005a10:	601a      	str	r2, [r3, #0]
}
 8005a12:	bf00      	nop
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	200005d8 	.word	0x200005d8

08005a20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a28:	f000 f852 	bl	8005ad0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a2c:	4b06      	ldr	r3, [pc, #24]	@ (8005a48 <prvIdleTask+0x28>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d9f9      	bls.n	8005a28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a34:	4b05      	ldr	r3, [pc, #20]	@ (8005a4c <prvIdleTask+0x2c>)
 8005a36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a44:	e7f0      	b.n	8005a28 <prvIdleTask+0x8>
 8005a46:	bf00      	nop
 8005a48:	200004c8 	.word	0x200004c8
 8005a4c:	e000ed04 	.word	0xe000ed04

08005a50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a56:	2300      	movs	r3, #0
 8005a58:	607b      	str	r3, [r7, #4]
 8005a5a:	e00c      	b.n	8005a76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4a12      	ldr	r2, [pc, #72]	@ (8005ab0 <prvInitialiseTaskLists+0x60>)
 8005a68:	4413      	add	r3, r2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe fcd6 	bl	800441c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3301      	adds	r3, #1
 8005a74:	607b      	str	r3, [r7, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b06      	cmp	r3, #6
 8005a7a:	d9ef      	bls.n	8005a5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a7c:	480d      	ldr	r0, [pc, #52]	@ (8005ab4 <prvInitialiseTaskLists+0x64>)
 8005a7e:	f7fe fccd 	bl	800441c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a82:	480d      	ldr	r0, [pc, #52]	@ (8005ab8 <prvInitialiseTaskLists+0x68>)
 8005a84:	f7fe fcca 	bl	800441c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a88:	480c      	ldr	r0, [pc, #48]	@ (8005abc <prvInitialiseTaskLists+0x6c>)
 8005a8a:	f7fe fcc7 	bl	800441c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a8e:	480c      	ldr	r0, [pc, #48]	@ (8005ac0 <prvInitialiseTaskLists+0x70>)
 8005a90:	f7fe fcc4 	bl	800441c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a94:	480b      	ldr	r0, [pc, #44]	@ (8005ac4 <prvInitialiseTaskLists+0x74>)
 8005a96:	f7fe fcc1 	bl	800441c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac8 <prvInitialiseTaskLists+0x78>)
 8005a9c:	4a05      	ldr	r2, [pc, #20]	@ (8005ab4 <prvInitialiseTaskLists+0x64>)
 8005a9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8005acc <prvInitialiseTaskLists+0x7c>)
 8005aa2:	4a05      	ldr	r2, [pc, #20]	@ (8005ab8 <prvInitialiseTaskLists+0x68>)
 8005aa4:	601a      	str	r2, [r3, #0]
}
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	200004c8 	.word	0x200004c8
 8005ab4:	20000554 	.word	0x20000554
 8005ab8:	20000568 	.word	0x20000568
 8005abc:	20000584 	.word	0x20000584
 8005ac0:	20000598 	.word	0x20000598
 8005ac4:	200005b0 	.word	0x200005b0
 8005ac8:	2000057c 	.word	0x2000057c
 8005acc:	20000580 	.word	0x20000580

08005ad0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ad6:	e019      	b.n	8005b0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ad8:	f000 fa78 	bl	8005fcc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005adc:	4b10      	ldr	r3, [pc, #64]	@ (8005b20 <prvCheckTasksWaitingTermination+0x50>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fe fd1d 	bl	8004528 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005aee:	4b0d      	ldr	r3, [pc, #52]	@ (8005b24 <prvCheckTasksWaitingTermination+0x54>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	4a0b      	ldr	r2, [pc, #44]	@ (8005b24 <prvCheckTasksWaitingTermination+0x54>)
 8005af6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005af8:	4b0b      	ldr	r3, [pc, #44]	@ (8005b28 <prvCheckTasksWaitingTermination+0x58>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	4a0a      	ldr	r2, [pc, #40]	@ (8005b28 <prvCheckTasksWaitingTermination+0x58>)
 8005b00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b02:	f000 fa93 	bl	800602c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f810 	bl	8005b2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b0c:	4b06      	ldr	r3, [pc, #24]	@ (8005b28 <prvCheckTasksWaitingTermination+0x58>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e1      	bne.n	8005ad8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	20000598 	.word	0x20000598
 8005b24:	200005c4 	.word	0x200005c4
 8005b28:	200005ac 	.word	0x200005ac

08005b2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d108      	bne.n	8005b50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fc0c 	bl	8006360 <vPortFree>
				vPortFree( pxTCB );
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fc09 	bl	8006360 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b4e:	e019      	b.n	8005b84 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d103      	bne.n	8005b62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fc00 	bl	8006360 <vPortFree>
	}
 8005b60:	e010      	b.n	8005b84 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d00b      	beq.n	8005b84 <prvDeleteTCB+0x58>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	60fb      	str	r3, [r7, #12]
}
 8005b7e:	bf00      	nop
 8005b80:	bf00      	nop
 8005b82:	e7fd      	b.n	8005b80 <prvDeleteTCB+0x54>
	}
 8005b84:	bf00      	nop
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b92:	4b0e      	ldr	r3, [pc, #56]	@ (8005bcc <prvResetNextTaskUnblockTime+0x40>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <prvResetNextTaskUnblockTime+0x14>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <prvResetNextTaskUnblockTime+0x16>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d004      	beq.n	8005bb0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd0 <prvResetNextTaskUnblockTime+0x44>)
 8005ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005bae:	e008      	b.n	8005bc2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005bb0:	4b06      	ldr	r3, [pc, #24]	@ (8005bcc <prvResetNextTaskUnblockTime+0x40>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	4a04      	ldr	r2, [pc, #16]	@ (8005bd0 <prvResetNextTaskUnblockTime+0x44>)
 8005bc0:	6013      	str	r3, [r2, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr
 8005bcc:	2000057c 	.word	0x2000057c
 8005bd0:	200005e4 	.word	0x200005e4

08005bd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005bda:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <xTaskGetSchedulerState+0x34>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d102      	bne.n	8005be8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005be2:	2301      	movs	r3, #1
 8005be4:	607b      	str	r3, [r7, #4]
 8005be6:	e008      	b.n	8005bfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005be8:	4b08      	ldr	r3, [pc, #32]	@ (8005c0c <xTaskGetSchedulerState+0x38>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d102      	bne.n	8005bf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	607b      	str	r3, [r7, #4]
 8005bf4:	e001      	b.n	8005bfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bfa:	687b      	ldr	r3, [r7, #4]
	}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	200005d0 	.word	0x200005d0
 8005c0c:	200005ec 	.word	0x200005ec

08005c10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d070      	beq.n	8005d08 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c26:	4b3b      	ldr	r3, [pc, #236]	@ (8005d14 <xTaskPriorityDisinherit+0x104>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d00b      	beq.n	8005c48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	60fb      	str	r3, [r7, #12]
}
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	e7fd      	b.n	8005c44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10b      	bne.n	8005c68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	60bb      	str	r3, [r7, #8]
}
 8005c62:	bf00      	nop
 8005c64:	bf00      	nop
 8005c66:	e7fd      	b.n	8005c64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c6c:	1e5a      	subs	r2, r3, #1
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d044      	beq.n	8005d08 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d140      	bne.n	8005d08 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe fc4c 	bl	8004528 <uxListRemove>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d115      	bne.n	8005cc2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c9a:	491f      	ldr	r1, [pc, #124]	@ (8005d18 <xTaskPriorityDisinherit+0x108>)
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10a      	bne.n	8005cc2 <xTaskPriorityDisinherit+0xb2>
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	43da      	mvns	r2, r3
 8005cb8:	4b18      	ldr	r3, [pc, #96]	@ (8005d1c <xTaskPriorityDisinherit+0x10c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	4a17      	ldr	r2, [pc, #92]	@ (8005d1c <xTaskPriorityDisinherit+0x10c>)
 8005cc0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cce:	f1c3 0207 	rsb	r2, r3, #7
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cda:	2201      	movs	r2, #1
 8005cdc:	409a      	lsls	r2, r3
 8005cde:	4b0f      	ldr	r3, [pc, #60]	@ (8005d1c <xTaskPriorityDisinherit+0x10c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8005d1c <xTaskPriorityDisinherit+0x10c>)
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4a08      	ldr	r2, [pc, #32]	@ (8005d18 <xTaskPriorityDisinherit+0x108>)
 8005cf6:	441a      	add	r2, r3
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4610      	mov	r0, r2
 8005d00:	f7fe fbb7 	bl	8004472 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d04:	2301      	movs	r3, #1
 8005d06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d08:	697b      	ldr	r3, [r7, #20]
	}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	200004c4 	.word	0x200004c4
 8005d18:	200004c8 	.word	0x200004c8
 8005d1c:	200005cc 	.word	0x200005cc

08005d20 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d2a:	4b29      	ldr	r3, [pc, #164]	@ (8005dd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d30:	4b28      	ldr	r3, [pc, #160]	@ (8005dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3304      	adds	r3, #4
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fbf6 	bl	8004528 <uxListRemove>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10b      	bne.n	8005d5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005d42:	4b24      	ldr	r3, [pc, #144]	@ (8005dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d48:	2201      	movs	r2, #1
 8005d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4e:	43da      	mvns	r2, r3
 8005d50:	4b21      	ldr	r3, [pc, #132]	@ (8005dd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4013      	ands	r3, r2
 8005d56:	4a20      	ldr	r2, [pc, #128]	@ (8005dd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d60:	d10a      	bne.n	8005d78 <prvAddCurrentTaskToDelayedList+0x58>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d007      	beq.n	8005d78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d68:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	4619      	mov	r1, r3
 8005d70:	481a      	ldr	r0, [pc, #104]	@ (8005ddc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d72:	f7fe fb7e 	bl	8004472 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d76:	e026      	b.n	8005dc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d80:	4b14      	ldr	r3, [pc, #80]	@ (8005dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d209      	bcs.n	8005da4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d90:	4b13      	ldr	r3, [pc, #76]	@ (8005de0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	4b0f      	ldr	r3, [pc, #60]	@ (8005dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3304      	adds	r3, #4
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	f7fe fb8b 	bl	80044b8 <vListInsert>
}
 8005da2:	e010      	b.n	8005dc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005da4:	4b0f      	ldr	r3, [pc, #60]	@ (8005de4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3304      	adds	r3, #4
 8005dae:	4619      	mov	r1, r3
 8005db0:	4610      	mov	r0, r2
 8005db2:	f7fe fb81 	bl	80044b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005db6:	4b0c      	ldr	r3, [pc, #48]	@ (8005de8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d202      	bcs.n	8005dc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005dc0:	4a09      	ldr	r2, [pc, #36]	@ (8005de8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	6013      	str	r3, [r2, #0]
}
 8005dc6:	bf00      	nop
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	200005c8 	.word	0x200005c8
 8005dd4:	200004c4 	.word	0x200004c4
 8005dd8:	200005cc 	.word	0x200005cc
 8005ddc:	200005b0 	.word	0x200005b0
 8005de0:	20000580 	.word	0x20000580
 8005de4:	2000057c 	.word	0x2000057c
 8005de8:	200005e4 	.word	0x200005e4

08005dec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3b04      	subs	r3, #4
 8005dfc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	3b04      	subs	r3, #4
 8005e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f023 0201 	bic.w	r2, r3, #1
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3b04      	subs	r3, #4
 8005e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e1c:	4a08      	ldr	r2, [pc, #32]	@ (8005e40 <pxPortInitialiseStack+0x54>)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3b14      	subs	r3, #20
 8005e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3b20      	subs	r3, #32
 8005e32:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e34:	68fb      	ldr	r3, [r7, #12]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr
 8005e40:	08005e45 	.word	0x08005e45

08005e44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e4e:	4b12      	ldr	r3, [pc, #72]	@ (8005e98 <prvTaskExitError+0x54>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e56:	d00b      	beq.n	8005e70 <prvTaskExitError+0x2c>
	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	60fb      	str	r3, [r7, #12]
}
 8005e6a:	bf00      	nop
 8005e6c:	bf00      	nop
 8005e6e:	e7fd      	b.n	8005e6c <prvTaskExitError+0x28>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	60bb      	str	r3, [r7, #8]
}
 8005e82:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e84:	bf00      	nop
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0fc      	beq.n	8005e86 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr
 8005e98:	20000010 	.word	0x20000010
 8005e9c:	00000000 	.word	0x00000000

08005ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ea0:	4b07      	ldr	r3, [pc, #28]	@ (8005ec0 <pxCurrentTCBConst2>)
 8005ea2:	6819      	ldr	r1, [r3, #0]
 8005ea4:	6808      	ldr	r0, [r1, #0]
 8005ea6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005eaa:	f380 8809 	msr	PSP, r0
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f04f 0000 	mov.w	r0, #0
 8005eb6:	f380 8811 	msr	BASEPRI, r0
 8005eba:	f04e 0e0d 	orr.w	lr, lr, #13
 8005ebe:	4770      	bx	lr

08005ec0 <pxCurrentTCBConst2>:
 8005ec0:	200004c4 	.word	0x200004c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop

08005ec8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005ec8:	4806      	ldr	r0, [pc, #24]	@ (8005ee4 <prvPortStartFirstTask+0x1c>)
 8005eca:	6800      	ldr	r0, [r0, #0]
 8005ecc:	6800      	ldr	r0, [r0, #0]
 8005ece:	f380 8808 	msr	MSP, r0
 8005ed2:	b662      	cpsie	i
 8005ed4:	b661      	cpsie	f
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	df00      	svc	0
 8005ee0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ee2:	bf00      	nop
 8005ee4:	e000ed08 	.word	0xe000ed08

08005ee8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005eee:	4b32      	ldr	r3, [pc, #200]	@ (8005fb8 <xPortStartScheduler+0xd0>)
 8005ef0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	22ff      	movs	r2, #255	@ 0xff
 8005efe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	4b2a      	ldr	r3, [pc, #168]	@ (8005fbc <xPortStartScheduler+0xd4>)
 8005f14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f16:	4b2a      	ldr	r3, [pc, #168]	@ (8005fc0 <xPortStartScheduler+0xd8>)
 8005f18:	2207      	movs	r2, #7
 8005f1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f1c:	e009      	b.n	8005f32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005f1e:	4b28      	ldr	r3, [pc, #160]	@ (8005fc0 <xPortStartScheduler+0xd8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	4a26      	ldr	r2, [pc, #152]	@ (8005fc0 <xPortStartScheduler+0xd8>)
 8005f26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f32:	78fb      	ldrb	r3, [r7, #3]
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f3a:	2b80      	cmp	r3, #128	@ 0x80
 8005f3c:	d0ef      	beq.n	8005f1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f3e:	4b20      	ldr	r3, [pc, #128]	@ (8005fc0 <xPortStartScheduler+0xd8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f1c3 0307 	rsb	r3, r3, #7
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d00b      	beq.n	8005f62 <xPortStartScheduler+0x7a>
	__asm volatile
 8005f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	60bb      	str	r3, [r7, #8]
}
 8005f5c:	bf00      	nop
 8005f5e:	bf00      	nop
 8005f60:	e7fd      	b.n	8005f5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f62:	4b17      	ldr	r3, [pc, #92]	@ (8005fc0 <xPortStartScheduler+0xd8>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	021b      	lsls	r3, r3, #8
 8005f68:	4a15      	ldr	r2, [pc, #84]	@ (8005fc0 <xPortStartScheduler+0xd8>)
 8005f6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f6c:	4b14      	ldr	r3, [pc, #80]	@ (8005fc0 <xPortStartScheduler+0xd8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f74:	4a12      	ldr	r2, [pc, #72]	@ (8005fc0 <xPortStartScheduler+0xd8>)
 8005f76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f80:	4b10      	ldr	r3, [pc, #64]	@ (8005fc4 <xPortStartScheduler+0xdc>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a0f      	ldr	r2, [pc, #60]	@ (8005fc4 <xPortStartScheduler+0xdc>)
 8005f86:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc4 <xPortStartScheduler+0xdc>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a0c      	ldr	r2, [pc, #48]	@ (8005fc4 <xPortStartScheduler+0xdc>)
 8005f92:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005f96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f98:	f000 f8b8 	bl	800610c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc8 <xPortStartScheduler+0xe0>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005fa2:	f7ff ff91 	bl	8005ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fa6:	f7ff fbcf 	bl	8005748 <vTaskSwitchContext>
	prvTaskExitError();
 8005faa:	f7ff ff4b 	bl	8005e44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	e000e400 	.word	0xe000e400
 8005fbc:	200005f0 	.word	0x200005f0
 8005fc0:	200005f4 	.word	0x200005f4
 8005fc4:	e000ed20 	.word	0xe000ed20
 8005fc8:	20000010 	.word	0x20000010

08005fcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	607b      	str	r3, [r7, #4]
}
 8005fe4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8006024 <vPortEnterCritical+0x58>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3301      	adds	r3, #1
 8005fec:	4a0d      	ldr	r2, [pc, #52]	@ (8006024 <vPortEnterCritical+0x58>)
 8005fee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8006024 <vPortEnterCritical+0x58>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d110      	bne.n	800601a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8006028 <vPortEnterCritical+0x5c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00b      	beq.n	800601a <vPortEnterCritical+0x4e>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	603b      	str	r3, [r7, #0]
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop
 8006018:	e7fd      	b.n	8006016 <vPortEnterCritical+0x4a>
	}
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	bc80      	pop	{r7}
 8006022:	4770      	bx	lr
 8006024:	20000010 	.word	0x20000010
 8006028:	e000ed04 	.word	0xe000ed04

0800602c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006032:	4b12      	ldr	r3, [pc, #72]	@ (800607c <vPortExitCritical+0x50>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <vPortExitCritical+0x26>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	607b      	str	r3, [r7, #4]
}
 800604c:	bf00      	nop
 800604e:	bf00      	nop
 8006050:	e7fd      	b.n	800604e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006052:	4b0a      	ldr	r3, [pc, #40]	@ (800607c <vPortExitCritical+0x50>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3b01      	subs	r3, #1
 8006058:	4a08      	ldr	r2, [pc, #32]	@ (800607c <vPortExitCritical+0x50>)
 800605a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800605c:	4b07      	ldr	r3, [pc, #28]	@ (800607c <vPortExitCritical+0x50>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d105      	bne.n	8006070 <vPortExitCritical+0x44>
 8006064:	2300      	movs	r3, #0
 8006066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	f383 8811 	msr	BASEPRI, r3
}
 800606e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	bc80      	pop	{r7}
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	20000010 	.word	0x20000010

08006080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006080:	f3ef 8009 	mrs	r0, PSP
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	4b0d      	ldr	r3, [pc, #52]	@ (80060c0 <pxCurrentTCBConst>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006090:	6010      	str	r0, [r2, #0]
 8006092:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006096:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800609a:	f380 8811 	msr	BASEPRI, r0
 800609e:	f7ff fb53 	bl	8005748 <vTaskSwitchContext>
 80060a2:	f04f 0000 	mov.w	r0, #0
 80060a6:	f380 8811 	msr	BASEPRI, r0
 80060aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80060ae:	6819      	ldr	r1, [r3, #0]
 80060b0:	6808      	ldr	r0, [r1, #0]
 80060b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060b6:	f380 8809 	msr	PSP, r0
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	4770      	bx	lr

080060c0 <pxCurrentTCBConst>:
 80060c0:	200004c4 	.word	0x200004c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop

080060c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	607b      	str	r3, [r7, #4]
}
 80060e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060e2:	f7ff fa73 	bl	80055cc <xTaskIncrementTick>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060ec:	4b06      	ldr	r3, [pc, #24]	@ (8006108 <SysTick_Handler+0x40>)
 80060ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	2300      	movs	r3, #0
 80060f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	f383 8811 	msr	BASEPRI, r3
}
 80060fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006110:	4b0a      	ldr	r3, [pc, #40]	@ (800613c <vPortSetupTimerInterrupt+0x30>)
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006116:	4b0a      	ldr	r3, [pc, #40]	@ (8006140 <vPortSetupTimerInterrupt+0x34>)
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800611c:	4b09      	ldr	r3, [pc, #36]	@ (8006144 <vPortSetupTimerInterrupt+0x38>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a09      	ldr	r2, [pc, #36]	@ (8006148 <vPortSetupTimerInterrupt+0x3c>)
 8006122:	fba2 2303 	umull	r2, r3, r2, r3
 8006126:	099b      	lsrs	r3, r3, #6
 8006128:	4a08      	ldr	r2, [pc, #32]	@ (800614c <vPortSetupTimerInterrupt+0x40>)
 800612a:	3b01      	subs	r3, #1
 800612c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800612e:	4b03      	ldr	r3, [pc, #12]	@ (800613c <vPortSetupTimerInterrupt+0x30>)
 8006130:	2207      	movs	r2, #7
 8006132:	601a      	str	r2, [r3, #0]
}
 8006134:	bf00      	nop
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr
 800613c:	e000e010 	.word	0xe000e010
 8006140:	e000e018 	.word	0xe000e018
 8006144:	20000004 	.word	0x20000004
 8006148:	10624dd3 	.word	0x10624dd3
 800614c:	e000e014 	.word	0xe000e014

08006150 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006156:	f3ef 8305 	mrs	r3, IPSR
 800615a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b0f      	cmp	r3, #15
 8006160:	d915      	bls.n	800618e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006162:	4a17      	ldr	r2, [pc, #92]	@ (80061c0 <vPortValidateInterruptPriority+0x70>)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800616c:	4b15      	ldr	r3, [pc, #84]	@ (80061c4 <vPortValidateInterruptPriority+0x74>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	7afa      	ldrb	r2, [r7, #11]
 8006172:	429a      	cmp	r2, r3
 8006174:	d20b      	bcs.n	800618e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	607b      	str	r3, [r7, #4]
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	e7fd      	b.n	800618a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800618e:	4b0e      	ldr	r3, [pc, #56]	@ (80061c8 <vPortValidateInterruptPriority+0x78>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006196:	4b0d      	ldr	r3, [pc, #52]	@ (80061cc <vPortValidateInterruptPriority+0x7c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d90b      	bls.n	80061b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	603b      	str	r3, [r7, #0]
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop
 80061b4:	e7fd      	b.n	80061b2 <vPortValidateInterruptPriority+0x62>
	}
 80061b6:	bf00      	nop
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr
 80061c0:	e000e3f0 	.word	0xe000e3f0
 80061c4:	200005f0 	.word	0x200005f0
 80061c8:	e000ed0c 	.word	0xe000ed0c
 80061cc:	200005f4 	.word	0x200005f4

080061d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08a      	sub	sp, #40	@ 0x28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061dc:	f7ff f94a 	bl	8005474 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061e0:	4b5a      	ldr	r3, [pc, #360]	@ (800634c <pvPortMalloc+0x17c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061e8:	f000 f916 	bl	8006418 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061ec:	4b58      	ldr	r3, [pc, #352]	@ (8006350 <pvPortMalloc+0x180>)
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4013      	ands	r3, r2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f040 8090 	bne.w	800631a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01e      	beq.n	800623e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006200:	2208      	movs	r2, #8
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4413      	add	r3, r2
 8006206:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	2b00      	cmp	r3, #0
 8006210:	d015      	beq.n	800623e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f023 0307 	bic.w	r3, r3, #7
 8006218:	3308      	adds	r3, #8
 800621a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f003 0307 	and.w	r3, r3, #7
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00b      	beq.n	800623e <pvPortMalloc+0x6e>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	617b      	str	r3, [r7, #20]
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	e7fd      	b.n	800623a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d06a      	beq.n	800631a <pvPortMalloc+0x14a>
 8006244:	4b43      	ldr	r3, [pc, #268]	@ (8006354 <pvPortMalloc+0x184>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	429a      	cmp	r2, r3
 800624c:	d865      	bhi.n	800631a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800624e:	4b42      	ldr	r3, [pc, #264]	@ (8006358 <pvPortMalloc+0x188>)
 8006250:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006252:	4b41      	ldr	r3, [pc, #260]	@ (8006358 <pvPortMalloc+0x188>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006258:	e004      	b.n	8006264 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800625e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	429a      	cmp	r2, r3
 800626c:	d903      	bls.n	8006276 <pvPortMalloc+0xa6>
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1f1      	bne.n	800625a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006276:	4b35      	ldr	r3, [pc, #212]	@ (800634c <pvPortMalloc+0x17c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800627c:	429a      	cmp	r2, r3
 800627e:	d04c      	beq.n	800631a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2208      	movs	r2, #8
 8006286:	4413      	add	r3, r2
 8006288:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	1ad2      	subs	r2, r2, r3
 800629a:	2308      	movs	r3, #8
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	429a      	cmp	r2, r3
 80062a0:	d920      	bls.n	80062e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4413      	add	r3, r2
 80062a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <pvPortMalloc+0xfc>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	613b      	str	r3, [r7, #16]
}
 80062c6:	bf00      	nop
 80062c8:	bf00      	nop
 80062ca:	e7fd      	b.n	80062c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	1ad2      	subs	r2, r2, r3
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062de:	69b8      	ldr	r0, [r7, #24]
 80062e0:	f000 f8fc 	bl	80064dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006354 <pvPortMalloc+0x184>)
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	4a19      	ldr	r2, [pc, #100]	@ (8006354 <pvPortMalloc+0x184>)
 80062f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062f2:	4b18      	ldr	r3, [pc, #96]	@ (8006354 <pvPortMalloc+0x184>)
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	4b19      	ldr	r3, [pc, #100]	@ (800635c <pvPortMalloc+0x18c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d203      	bcs.n	8006306 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062fe:	4b15      	ldr	r3, [pc, #84]	@ (8006354 <pvPortMalloc+0x184>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a16      	ldr	r2, [pc, #88]	@ (800635c <pvPortMalloc+0x18c>)
 8006304:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	4b11      	ldr	r3, [pc, #68]	@ (8006350 <pvPortMalloc+0x180>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	431a      	orrs	r2, r3
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800631a:	f7ff f8b9 	bl	8005490 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00b      	beq.n	8006340 <pvPortMalloc+0x170>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	60fb      	str	r3, [r7, #12]
}
 800633a:	bf00      	nop
 800633c:	bf00      	nop
 800633e:	e7fd      	b.n	800633c <pvPortMalloc+0x16c>
	return pvReturn;
 8006340:	69fb      	ldr	r3, [r7, #28]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3728      	adds	r7, #40	@ 0x28
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20001200 	.word	0x20001200
 8006350:	2000120c 	.word	0x2000120c
 8006354:	20001204 	.word	0x20001204
 8006358:	200011f8 	.word	0x200011f8
 800635c:	20001208 	.word	0x20001208

08006360 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d04a      	beq.n	8006408 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006372:	2308      	movs	r3, #8
 8006374:	425b      	negs	r3, r3
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4413      	add	r3, r2
 800637a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	4b22      	ldr	r3, [pc, #136]	@ (8006410 <vPortFree+0xb0>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4013      	ands	r3, r2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10b      	bne.n	80063a6 <vPortFree+0x46>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	60fb      	str	r3, [r7, #12]
}
 80063a0:	bf00      	nop
 80063a2:	bf00      	nop
 80063a4:	e7fd      	b.n	80063a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00b      	beq.n	80063c6 <vPortFree+0x66>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	60bb      	str	r3, [r7, #8]
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	e7fd      	b.n	80063c2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	4b11      	ldr	r3, [pc, #68]	@ (8006410 <vPortFree+0xb0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4013      	ands	r3, r2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d019      	beq.n	8006408 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d115      	bne.n	8006408 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006410 <vPortFree+0xb0>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	43db      	mvns	r3, r3
 80063e6:	401a      	ands	r2, r3
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063ec:	f7ff f842 	bl	8005474 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	4b07      	ldr	r3, [pc, #28]	@ (8006414 <vPortFree+0xb4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4413      	add	r3, r2
 80063fa:	4a06      	ldr	r2, [pc, #24]	@ (8006414 <vPortFree+0xb4>)
 80063fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063fe:	6938      	ldr	r0, [r7, #16]
 8006400:	f000 f86c 	bl	80064dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006404:	f7ff f844 	bl	8005490 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006408:	bf00      	nop
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	2000120c 	.word	0x2000120c
 8006414:	20001204 	.word	0x20001204

08006418 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800641e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006422:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006424:	4b27      	ldr	r3, [pc, #156]	@ (80064c4 <prvHeapInit+0xac>)
 8006426:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f003 0307 	and.w	r3, r3, #7
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00c      	beq.n	800644c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3307      	adds	r3, #7
 8006436:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0307 	bic.w	r3, r3, #7
 800643e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	4a1f      	ldr	r2, [pc, #124]	@ (80064c4 <prvHeapInit+0xac>)
 8006448:	4413      	add	r3, r2
 800644a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006450:	4a1d      	ldr	r2, [pc, #116]	@ (80064c8 <prvHeapInit+0xb0>)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006456:	4b1c      	ldr	r3, [pc, #112]	@ (80064c8 <prvHeapInit+0xb0>)
 8006458:	2200      	movs	r2, #0
 800645a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	4413      	add	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006464:	2208      	movs	r2, #8
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1a9b      	subs	r3, r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0307 	bic.w	r3, r3, #7
 8006472:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4a15      	ldr	r2, [pc, #84]	@ (80064cc <prvHeapInit+0xb4>)
 8006478:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800647a:	4b14      	ldr	r3, [pc, #80]	@ (80064cc <prvHeapInit+0xb4>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2200      	movs	r2, #0
 8006480:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006482:	4b12      	ldr	r3, [pc, #72]	@ (80064cc <prvHeapInit+0xb4>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	1ad2      	subs	r2, r2, r3
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006498:	4b0c      	ldr	r3, [pc, #48]	@ (80064cc <prvHeapInit+0xb4>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	4a0a      	ldr	r2, [pc, #40]	@ (80064d0 <prvHeapInit+0xb8>)
 80064a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	4a09      	ldr	r2, [pc, #36]	@ (80064d4 <prvHeapInit+0xbc>)
 80064ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064b0:	4b09      	ldr	r3, [pc, #36]	@ (80064d8 <prvHeapInit+0xc0>)
 80064b2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80064b6:	601a      	str	r2, [r3, #0]
}
 80064b8:	bf00      	nop
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	200005f8 	.word	0x200005f8
 80064c8:	200011f8 	.word	0x200011f8
 80064cc:	20001200 	.word	0x20001200
 80064d0:	20001208 	.word	0x20001208
 80064d4:	20001204 	.word	0x20001204
 80064d8:	2000120c 	.word	0x2000120c

080064dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064e4:	4b27      	ldr	r3, [pc, #156]	@ (8006584 <prvInsertBlockIntoFreeList+0xa8>)
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	e002      	b.n	80064f0 <prvInsertBlockIntoFreeList+0x14>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d8f7      	bhi.n	80064ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	4413      	add	r3, r2
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	429a      	cmp	r2, r3
 800650a:	d108      	bne.n	800651e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	441a      	add	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	441a      	add	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d118      	bne.n	8006564 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	4b14      	ldr	r3, [pc, #80]	@ (8006588 <prvInsertBlockIntoFreeList+0xac>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d00d      	beq.n	800655a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	441a      	add	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	e008      	b.n	800656c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800655a:	4b0b      	ldr	r3, [pc, #44]	@ (8006588 <prvInsertBlockIntoFreeList+0xac>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	e003      	b.n	800656c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	429a      	cmp	r2, r3
 8006572:	d002      	beq.n	800657a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	bc80      	pop	{r7}
 8006582:	4770      	bx	lr
 8006584:	200011f8 	.word	0x200011f8
 8006588:	20001200 	.word	0x20001200

0800658c <memset>:
 800658c:	4603      	mov	r3, r0
 800658e:	4402      	add	r2, r0
 8006590:	4293      	cmp	r3, r2
 8006592:	d100      	bne.n	8006596 <memset+0xa>
 8006594:	4770      	bx	lr
 8006596:	f803 1b01 	strb.w	r1, [r3], #1
 800659a:	e7f9      	b.n	8006590 <memset+0x4>

0800659c <__libc_init_array>:
 800659c:	b570      	push	{r4, r5, r6, lr}
 800659e:	2600      	movs	r6, #0
 80065a0:	4d0c      	ldr	r5, [pc, #48]	@ (80065d4 <__libc_init_array+0x38>)
 80065a2:	4c0d      	ldr	r4, [pc, #52]	@ (80065d8 <__libc_init_array+0x3c>)
 80065a4:	1b64      	subs	r4, r4, r5
 80065a6:	10a4      	asrs	r4, r4, #2
 80065a8:	42a6      	cmp	r6, r4
 80065aa:	d109      	bne.n	80065c0 <__libc_init_array+0x24>
 80065ac:	f000 f828 	bl	8006600 <_init>
 80065b0:	2600      	movs	r6, #0
 80065b2:	4d0a      	ldr	r5, [pc, #40]	@ (80065dc <__libc_init_array+0x40>)
 80065b4:	4c0a      	ldr	r4, [pc, #40]	@ (80065e0 <__libc_init_array+0x44>)
 80065b6:	1b64      	subs	r4, r4, r5
 80065b8:	10a4      	asrs	r4, r4, #2
 80065ba:	42a6      	cmp	r6, r4
 80065bc:	d105      	bne.n	80065ca <__libc_init_array+0x2e>
 80065be:	bd70      	pop	{r4, r5, r6, pc}
 80065c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c4:	4798      	blx	r3
 80065c6:	3601      	adds	r6, #1
 80065c8:	e7ee      	b.n	80065a8 <__libc_init_array+0xc>
 80065ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ce:	4798      	blx	r3
 80065d0:	3601      	adds	r6, #1
 80065d2:	e7f2      	b.n	80065ba <__libc_init_array+0x1e>
 80065d4:	080066e0 	.word	0x080066e0
 80065d8:	080066e0 	.word	0x080066e0
 80065dc:	080066e0 	.word	0x080066e0
 80065e0:	080066e4 	.word	0x080066e4

080065e4 <memcpy>:
 80065e4:	440a      	add	r2, r1
 80065e6:	4291      	cmp	r1, r2
 80065e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80065ec:	d100      	bne.n	80065f0 <memcpy+0xc>
 80065ee:	4770      	bx	lr
 80065f0:	b510      	push	{r4, lr}
 80065f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065f6:	4291      	cmp	r1, r2
 80065f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065fc:	d1f9      	bne.n	80065f2 <memcpy+0xe>
 80065fe:	bd10      	pop	{r4, pc}

08006600 <_init>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	bf00      	nop
 8006604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006606:	bc08      	pop	{r3}
 8006608:	469e      	mov	lr, r3
 800660a:	4770      	bx	lr

0800660c <_fini>:
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660e:	bf00      	nop
 8006610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006612:	bc08      	pop	{r3}
 8006614:	469e      	mov	lr, r3
 8006616:	4770      	bx	lr
