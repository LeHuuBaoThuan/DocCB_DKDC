
1_testADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d084  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0800d198  0800d198  0000e198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d588  0800d588  0000f344  2**0
                  CONTENTS
  4 .ARM          00000008  0800d588  0800d588  0000e588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d590  0800d590  0000f344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d590  0800d590  0000e590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d594  0800d594  0000e594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  0800d598  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d50  20000344  0800d8dc  0000f344  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001094  0800d8dc  00010094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f344  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170cb  00000000  00000000  0000f36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b58  00000000  00000000  00026438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  00029f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0002b478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c30f  00000000  00000000  0002c788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1df  00000000  00000000  00048a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095d1d  00000000  00000000  00064c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa993  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065c4  00000000  00000000  000fa9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000344 	.word	0x20000344
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d17c 	.word	0x0800d17c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000348 	.word	0x20000348
 800014c:	0800d17c 	.word	0x0800d17c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <strPrc_strcpy_pos>:
}



void strPrc_strcpy_pos(char* dest, uint16_t adc, uint8_t pos, char* src)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	460b      	mov	r3, r1
 8000a94:	817b      	strh	r3, [r7, #10]
 8000a96:	4613      	mov	r3, r2
 8000a98:	727b      	strb	r3, [r7, #9]
	uint8_t i = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	75fb      	strb	r3, [r7, #23]


	*src 		= adc & 0x00FF;
 8000a9e:	897b      	ldrh	r3, [r7, #10]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	701a      	strb	r2, [r3, #0]
	*(src + 1) 	= (adc >> 8) & 0x00FF;
 8000aa6:	897b      	ldrh	r3, [r7, #10]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	701a      	strb	r2, [r3, #0]

	dest = dest + pos;	// Dich den vi tri muon coppy src
 8000ab4:	7a7b      	ldrb	r3, [r7, #9]
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	4413      	add	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]

	while(i <= 1)			// Coppy src -> des
 8000abc:	e00a      	b.n	8000ad4 <strPrc_strcpy_pos+0x4c>
	{
		*(dest++) = *(src++);
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	1c53      	adds	r3, r2, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	1c59      	adds	r1, r3, #1
 8000ac8:	60f9      	str	r1, [r7, #12]
 8000aca:	7812      	ldrb	r2, [r2, #0]
 8000acc:	701a      	strb	r2, [r3, #0]
		i++;
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	75fb      	strb	r3, [r7, #23]
	while(i <= 1)			// Coppy src -> des
 8000ad4:	7dfb      	ldrb	r3, [r7, #23]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d9f1      	bls.n	8000abe <strPrc_strcpy_pos+0x36>
	}
}
 8000ada:	bf00      	nop
 8000adc:	bf00      	nop
 8000ade:	371c      	adds	r7, #28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr

08000ae6 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
	strPrc_strcpy_pos(strFrNum, strPrc_conv32B216B(strPrc_num2str(nadc[2], strADC)), 4);
	strPrc_strcpy_pos(strFrNum, strPrc_conv32B216B(strPrc_num2str(nadc[3], strADC)), 6);

	flat_ADC ++;
#endif
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	// 100us = 0.1ms
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a09      	ldr	r2, [pc, #36]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d109      	bne.n	8000b1c <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		flagTmr2.flat_1s ++;
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	4a07      	ldr	r2, [pc, #28]	@ (8000b2c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b10:	6053      	str	r3, [r2, #4]
		flagTmr2.flag_1us ++;
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	3301      	adds	r3, #1
 8000b18:	4a04      	ldr	r2, [pc, #16]	@ (8000b2c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b1a:	6013      	str	r3, [r2, #0]
	}
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	2000042c 	.word	0x2000042c
 8000b2c:	200004cc 	.word	0x200004cc

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b34:	f000 fd82 	bl	800163c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b38:	f000 f894 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3c:	f000 fa6c 	bl	8001018 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b40:	f000 fa4c 	bl	8000fdc <MX_DMA_Init>
  MX_ADC1_Init();
 8000b44:	f000 f8ec 	bl	8000d20 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000b48:	f000 f9d6 	bl	8000ef8 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000b4c:	f009 f9a8 	bl	8009ea0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000b50:	f000 f950 	bl	8000df4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000b54:	f000 f984 	bl	8000e60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Calculator ADC
  HAL_GPIO_WritePin(GPIOB, LRED_Pin | LGRE_Pin | LBLU_Pin, LED_LOW);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	21e0      	movs	r1, #224	@ 0xe0
 8000b5c:	4837      	ldr	r0, [pc, #220]	@ (8000c3c <main+0x10c>)
 8000b5e:	f001 ffa8 	bl	8002ab2 <HAL_GPIO_WritePin>

  if(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 8000b62:	4837      	ldr	r0, [pc, #220]	@ (8000c40 <main+0x110>)
 8000b64:	f001 fa56 	bl	8002014 <HAL_ADCEx_Calibration_Start>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <main+0x42>
	  Error_Handler();
 8000b6e:	f000 fae1 	bl	8001134 <Error_Handler>
  // start pwm generation
  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8000b72:	2100      	movs	r1, #0
 8000b74:	4833      	ldr	r0, [pc, #204]	@ (8000c44 <main+0x114>)
 8000b76:	f004 fc21 	bl	80053bc <HAL_TIM_PWM_Start>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <main+0x54>
	  Error_Handler();
 8000b80:	f000 fad8 	bl	8001134 <Error_Handler>

  if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8000b84:	4830      	ldr	r0, [pc, #192]	@ (8000c48 <main+0x118>)
 8000b86:	f004 fb6f 	bl	8005268 <HAL_TIM_Base_Start_IT>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <main+0x64>
	  Error_Handler();
 8000b90:	f000 fad0 	bl	8001134 <Error_Handler>

  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)nadc, sizeof(nadc) / sizeof(uint16_t)) != HAL_OK)
 8000b94:	2204      	movs	r2, #4
 8000b96:	492d      	ldr	r1, [pc, #180]	@ (8000c4c <main+0x11c>)
 8000b98:	4829      	ldr	r0, [pc, #164]	@ (8000c40 <main+0x110>)
 8000b9a:	f000 fe89 	bl	80018b0 <HAL_ADC_Start_DMA>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <main+0x78>
	  Error_Handler();
 8000ba4:	f000 fac6 	bl	8001134 <Error_Handler>

	 while(HAL_GPIO_ReadPin(BTN3_IT8_GPIO_Port, BTN3_IT8_Pin) == GPIO_PIN_SET){}
 8000ba8:	bf00      	nop
 8000baa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bae:	4823      	ldr	r0, [pc, #140]	@ (8000c3c <main+0x10c>)
 8000bb0:	f001 ff68 	bl	8002a84 <HAL_GPIO_ReadPin>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d0f7      	beq.n	8000baa <main+0x7a>
	 * 1 Tick = 100us
	 * 1000 : 100ms
	 * 100  : 10ms
	 * 1-   : 1ms
	 * */
	if(flagTmr2.flag_1us >= 10)
 8000bba:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <main+0x120>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b09      	cmp	r3, #9
 8000bc0:	d9fb      	bls.n	8000bba <main+0x8a>
	{
		flagTmr2.flag_1us = 0;
 8000bc2:	4b23      	ldr	r3, [pc, #140]	@ (8000c50 <main+0x120>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
//		strPrc_strcpy_pos(strFrNum, strPrc_conv32B216B(strPrc_num2str(tesst[0], str4bADC) , str2bADC), 0);
//		strPrc_strcpy_pos(strFrNum, strPrc_conv32B216B(strPrc_num2str(tesst[1], str4bADC) , str2bADC), 2);
//		strPrc_strcpy_pos(strFrNum, strPrc_conv32B216B(strPrc_num2str(tesst[2], str4bADC) , str2bADC), 4);
//		strPrc_strcpy_pos(strFrNum, strPrc_conv32B216B(strPrc_num2str(tesst[3], str4bADC) , str2bADC), 6);

		memset(strFrNum, '\0', LENGTH);
 8000bc8:	2207      	movs	r2, #7
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4821      	ldr	r0, [pc, #132]	@ (8000c54 <main+0x124>)
 8000bce:	f00a fbaa 	bl	800b326 <memset>

		strPrc_strcpy_pos(strFrNum, nadc[0], 0, str2bADC);
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c4c <main+0x11c>)
 8000bd4:	8819      	ldrh	r1, [r3, #0]
 8000bd6:	4b20      	ldr	r3, [pc, #128]	@ (8000c58 <main+0x128>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	481e      	ldr	r0, [pc, #120]	@ (8000c54 <main+0x124>)
 8000bdc:	f7ff ff54 	bl	8000a88 <strPrc_strcpy_pos>
		strPrc_strcpy_pos(strFrNum, nadc[1], 2, str2bADC);
 8000be0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c4c <main+0x11c>)
 8000be2:	8859      	ldrh	r1, [r3, #2]
 8000be4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <main+0x128>)
 8000be6:	2202      	movs	r2, #2
 8000be8:	481a      	ldr	r0, [pc, #104]	@ (8000c54 <main+0x124>)
 8000bea:	f7ff ff4d 	bl	8000a88 <strPrc_strcpy_pos>
		strPrc_strcpy_pos(strFrNum, nadc[2], 4, str2bADC);
 8000bee:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <main+0x11c>)
 8000bf0:	8899      	ldrh	r1, [r3, #4]
 8000bf2:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <main+0x128>)
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	4817      	ldr	r0, [pc, #92]	@ (8000c54 <main+0x124>)
 8000bf8:	f7ff ff46 	bl	8000a88 <strPrc_strcpy_pos>
		strPrc_strcpy_pos(strFrNum, nadc[3], 6, str2bADC);
 8000bfc:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <main+0x11c>)
 8000bfe:	88d9      	ldrh	r1, [r3, #6]
 8000c00:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <main+0x128>)
 8000c02:	2206      	movs	r2, #6
 8000c04:	4813      	ldr	r0, [pc, #76]	@ (8000c54 <main+0x124>)
 8000c06:	f7ff ff3f 	bl	8000a88 <strPrc_strcpy_pos>

		HAL_GPIO_TogglePin(LRED_GPIO_Port, LRED_Pin);
 8000c0a:	2180      	movs	r1, #128	@ 0x80
 8000c0c:	480b      	ldr	r0, [pc, #44]	@ (8000c3c <main+0x10c>)
 8000c0e:	f001 ff68 	bl	8002ae2 <HAL_GPIO_TogglePin>

		if(CDC_Transmit_FS((uint8_t*)strFrNum, LENGTH) == USBD_OK)
 8000c12:	2107      	movs	r1, #7
 8000c14:	480f      	ldr	r0, [pc, #60]	@ (8000c54 <main+0x124>)
 8000c16:	f009 fa57 	bl	800a0c8 <CDC_Transmit_FS>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1cc      	bne.n	8000bba <main+0x8a>
		{
			flat_ADC = 0;
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <main+0x12c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
			counter_done++;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <main+0x130>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c60 <main+0x130>)
 8000c2e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LGRE_GPIO_Port, LGRE_Pin);
 8000c30:	2120      	movs	r1, #32
 8000c32:	4802      	ldr	r0, [pc, #8]	@ (8000c3c <main+0x10c>)
 8000c34:	f001 ff55 	bl	8002ae2 <HAL_GPIO_TogglePin>
	if(flagTmr2.flag_1us >= 10)
 8000c38:	e7bf      	b.n	8000bba <main+0x8a>
 8000c3a:	bf00      	nop
 8000c3c:	40010c00 	.word	0x40010c00
 8000c40:	20000360 	.word	0x20000360
 8000c44:	20000474 	.word	0x20000474
 8000c48:	2000042c 	.word	0x2000042c
 8000c4c:	200004c0 	.word	0x200004c0
 8000c50:	200004cc 	.word	0x200004cc
 8000c54:	200004d4 	.word	0x200004d4
 8000c58:	200004dc 	.word	0x200004dc
 8000c5c:	200004c8 	.word	0x200004c8
 8000c60:	200004bc 	.word	0x200004bc

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b094      	sub	sp, #80	@ 0x50
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c6e:	2228      	movs	r2, #40	@ 0x28
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f00a fb57 	bl	800b326 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c94:	2301      	movs	r3, #1
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000caa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cb0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 fc98 	bl	80045f0 <HAL_RCC_OscConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cc6:	f000 fa35 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cca:	230f      	movs	r3, #15
 8000ccc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f003 ff04 	bl	8004af4 <HAL_RCC_ClockConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cf2:	f000 fa1f 	bl	8001134 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000cf6:	2312      	movs	r3, #18
 8000cf8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cfe:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4618      	mov	r0, r3
 8000d08:	f004 f86e 	bl	8004de8 <HAL_RCCEx_PeriphCLKConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d12:	f000 fa0f 	bl	8001134 <Error_Handler>
  }
}
 8000d16:	bf00      	nop
 8000d18:	3750      	adds	r7, #80	@ 0x50
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d30:	4b2e      	ldr	r3, [pc, #184]	@ (8000dec <MX_ADC1_Init+0xcc>)
 8000d32:	4a2f      	ldr	r2, [pc, #188]	@ (8000df0 <MX_ADC1_Init+0xd0>)
 8000d34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d36:	4b2d      	ldr	r3, [pc, #180]	@ (8000dec <MX_ADC1_Init+0xcc>)
 8000d38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dec <MX_ADC1_Init+0xcc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d44:	4b29      	ldr	r3, [pc, #164]	@ (8000dec <MX_ADC1_Init+0xcc>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000d4a:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <MX_ADC1_Init+0xcc>)
 8000d4c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d52:	4b26      	ldr	r3, [pc, #152]	@ (8000dec <MX_ADC1_Init+0xcc>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000d58:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <MX_ADC1_Init+0xcc>)
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d5e:	4823      	ldr	r0, [pc, #140]	@ (8000dec <MX_ADC1_Init+0xcc>)
 8000d60:	f000 fcce 	bl	8001700 <HAL_ADC_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000d6a:	f000 f9e3 	bl	8001134 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	481b      	ldr	r0, [pc, #108]	@ (8000dec <MX_ADC1_Init+0xcc>)
 8000d80:	f000 ff4e 	bl	8001c20 <HAL_ADC_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d8a:	f000 f9d3 	bl	8001134 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4814      	ldr	r0, [pc, #80]	@ (8000dec <MX_ADC1_Init+0xcc>)
 8000d9c:	f000 ff40 	bl	8001c20 <HAL_ADC_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000da6:	f000 f9c5 	bl	8001134 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000daa:	2302      	movs	r3, #2
 8000dac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000dae:	2303      	movs	r3, #3
 8000db0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	480d      	ldr	r0, [pc, #52]	@ (8000dec <MX_ADC1_Init+0xcc>)
 8000db8:	f000 ff32 	bl	8001c20 <HAL_ADC_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000dc2:	f000 f9b7 	bl	8001134 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	@ (8000dec <MX_ADC1_Init+0xcc>)
 8000dd4:	f000 ff24 	bl	8001c20 <HAL_ADC_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000dde:	f000 f9a9 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000360 	.word	0x20000360
 8000df0:	40012400 	.word	0x40012400

08000df4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000df8:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000dfa:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <MX_SPI1_Init+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e26:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e28:	2210      	movs	r2, #16
 8000e2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e38:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e40:	220a      	movs	r2, #10
 8000e42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e46:	f004 f93b 	bl	80050c0 <HAL_SPI_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e50:	f000 f970 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200003d4 	.word	0x200003d4
 8000e5c:	40013000 	.word	0x40013000

08000e60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	463b      	mov	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000e7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000e86:	2247      	movs	r2, #71	@ 0x47
 8000e88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000e92:	2263      	movs	r2, #99	@ 0x63
 8000e94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e96:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ea2:	4814      	ldr	r0, [pc, #80]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000ea4:	f004 f990 	bl	80051c8 <HAL_TIM_Base_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000eae:	f000 f941 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480d      	ldr	r0, [pc, #52]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000ec0:	f004 fce8 	bl	8005894 <HAL_TIM_ConfigClockSource>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000eca:	f000 f933 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	@ (8000ef4 <MX_TIM2_Init+0x94>)
 8000edc:	f005 f86a 	bl	8005fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000ee6:	f000 f925 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000042c 	.word	0x2000042c

08000ef8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08e      	sub	sp, #56	@ 0x38
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
 8000f24:	615a      	str	r2, [r3, #20]
 8000f26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f28:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd4 <MX_TIM3_Init+0xdc>)
 8000f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8000fd8 <MX_TIM3_Init+0xe0>)
 8000f2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000f2e:	4b29      	ldr	r3, [pc, #164]	@ (8000fd4 <MX_TIM3_Init+0xdc>)
 8000f30:	2247      	movs	r2, #71	@ 0x47
 8000f32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f34:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <MX_TIM3_Init+0xdc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000f3a:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <MX_TIM3_Init+0xdc>)
 8000f3c:	2263      	movs	r2, #99	@ 0x63
 8000f3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f40:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <MX_TIM3_Init+0xdc>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f46:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <MX_TIM3_Init+0xdc>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f4c:	4821      	ldr	r0, [pc, #132]	@ (8000fd4 <MX_TIM3_Init+0xdc>)
 8000f4e:	f004 f93b 	bl	80051c8 <HAL_TIM_Base_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000f58:	f000 f8ec 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f66:	4619      	mov	r1, r3
 8000f68:	481a      	ldr	r0, [pc, #104]	@ (8000fd4 <MX_TIM3_Init+0xdc>)
 8000f6a:	f004 fc93 	bl	8005894 <HAL_TIM_ConfigClockSource>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000f74:	f000 f8de 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f78:	4816      	ldr	r0, [pc, #88]	@ (8000fd4 <MX_TIM3_Init+0xdc>)
 8000f7a:	f004 f9c7 	bl	800530c <HAL_TIM_PWM_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000f84:	f000 f8d6 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f88:	2320      	movs	r3, #32
 8000f8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f90:	f107 0320 	add.w	r3, r7, #32
 8000f94:	4619      	mov	r1, r3
 8000f96:	480f      	ldr	r0, [pc, #60]	@ (8000fd4 <MX_TIM3_Init+0xdc>)
 8000f98:	f005 f80c 	bl	8005fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000fa2:	f000 f8c7 	bl	8001134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa6:	2360      	movs	r3, #96	@ 0x60
 8000fa8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_TIM3_Init+0xdc>)
 8000fbe:	f004 fba7 	bl	8005710 <HAL_TIM_PWM_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000fc8:	f000 f8b4 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	3738      	adds	r7, #56	@ 0x38
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000474 	.word	0x20000474
 8000fd8:	40000400 	.word	0x40000400

08000fdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <MX_DMA_Init+0x38>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8001014 <MX_DMA_Init+0x38>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6153      	str	r3, [r2, #20]
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_DMA_Init+0x38>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	200b      	movs	r0, #11
 8001000:	f001 f997 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001004:	200b      	movs	r0, #11
 8001006:	f001 f9b0 	bl	800236a <HAL_NVIC_EnableIRQ>

}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000

08001018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102c:	4b3c      	ldr	r3, [pc, #240]	@ (8001120 <MX_GPIO_Init+0x108>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a3b      	ldr	r2, [pc, #236]	@ (8001120 <MX_GPIO_Init+0x108>)
 8001032:	f043 0310 	orr.w	r3, r3, #16
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b39      	ldr	r3, [pc, #228]	@ (8001120 <MX_GPIO_Init+0x108>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0310 	and.w	r3, r3, #16
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001044:	4b36      	ldr	r3, [pc, #216]	@ (8001120 <MX_GPIO_Init+0x108>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a35      	ldr	r2, [pc, #212]	@ (8001120 <MX_GPIO_Init+0x108>)
 800104a:	f043 0320 	orr.w	r3, r3, #32
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b33      	ldr	r3, [pc, #204]	@ (8001120 <MX_GPIO_Init+0x108>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0320 	and.w	r3, r3, #32
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b30      	ldr	r3, [pc, #192]	@ (8001120 <MX_GPIO_Init+0x108>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a2f      	ldr	r2, [pc, #188]	@ (8001120 <MX_GPIO_Init+0x108>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <MX_GPIO_Init+0x108>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001074:	4b2a      	ldr	r3, [pc, #168]	@ (8001120 <MX_GPIO_Init+0x108>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a29      	ldr	r2, [pc, #164]	@ (8001120 <MX_GPIO_Init+0x108>)
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b27      	ldr	r3, [pc, #156]	@ (8001120 <MX_GPIO_Init+0x108>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LGRE_Pin|LBLU_Pin|LRED_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	21e0      	movs	r1, #224	@ 0xe0
 8001090:	4824      	ldr	r0, [pc, #144]	@ (8001124 <MX_GPIO_Init+0x10c>)
 8001092:	f001 fd0e 	bl	8002ab2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN1_IT13_Pin */
  GPIO_InitStruct.Pin = BTN1_IT13_Pin;
 8001096:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800109a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800109c:	4b22      	ldr	r3, [pc, #136]	@ (8001128 <MX_GPIO_Init+0x110>)
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN1_IT13_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4619      	mov	r1, r3
 80010aa:	4820      	ldr	r0, [pc, #128]	@ (800112c <MX_GPIO_Init+0x114>)
 80010ac:	f001 fb66 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010b0:	2301      	movs	r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	4619      	mov	r1, r3
 80010c2:	4818      	ldr	r0, [pc, #96]	@ (8001124 <MX_GPIO_Init+0x10c>)
 80010c4:	f001 fb5a 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : SENS_DIG_IT12_Pin */
  GPIO_InitStruct.Pin = SENS_DIG_IT12_Pin;
 80010c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <MX_GPIO_Init+0x118>)
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SENS_DIG_IT12_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	4619      	mov	r1, r3
 80010dc:	4811      	ldr	r0, [pc, #68]	@ (8001124 <MX_GPIO_Init+0x10c>)
 80010de:	f001 fb4d 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : LGRE_Pin LBLU_Pin LRED_Pin */
  GPIO_InitStruct.Pin = LGRE_Pin|LBLU_Pin|LRED_Pin;
 80010e2:	23e0      	movs	r3, #224	@ 0xe0
 80010e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	f107 0310 	add.w	r3, r7, #16
 80010f6:	4619      	mov	r1, r3
 80010f8:	480a      	ldr	r0, [pc, #40]	@ (8001124 <MX_GPIO_Init+0x10c>)
 80010fa:	f001 fb3f 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_IT8_Pin BTN2_IT9_Pin */
  GPIO_InitStruct.Pin = BTN3_IT8_Pin|BTN2_IT9_Pin;
 80010fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <MX_GPIO_Init+0x110>)
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4619      	mov	r1, r3
 8001112:	4804      	ldr	r0, [pc, #16]	@ (8001124 <MX_GPIO_Init+0x10c>)
 8001114:	f001 fb32 	bl	800277c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001118:	bf00      	nop
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40021000 	.word	0x40021000
 8001124:	40010c00 	.word	0x40010c00
 8001128:	10210000 	.word	0x10210000
 800112c:	40011000 	.word	0x40011000
 8001130:	10110000 	.word	0x10110000

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop

//  HAL_GPIO_WritePin(L_B_GPIO_Port, L_B_Pin, GPIO_PIN_RESET);

  while (1)
  {
	  HAL_GPIO_WritePin(LRED_GPIO_Port, LRED_Pin, LED_HIG);
 800113c:	2200      	movs	r2, #0
 800113e:	2180      	movs	r1, #128	@ 0x80
 8001140:	4801      	ldr	r0, [pc, #4]	@ (8001148 <Error_Handler+0x14>)
 8001142:	f001 fcb6 	bl	8002ab2 <HAL_GPIO_WritePin>
 8001146:	e7f9      	b.n	800113c <Error_Handler+0x8>
 8001148:	40010c00 	.word	0x40010c00

0800114c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <HAL_MspInit+0x5c>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	4a14      	ldr	r2, [pc, #80]	@ (80011a8 <HAL_MspInit+0x5c>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6193      	str	r3, [r2, #24]
 800115e:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <HAL_MspInit+0x5c>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <HAL_MspInit+0x5c>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a0e      	ldr	r2, [pc, #56]	@ (80011a8 <HAL_MspInit+0x5c>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <HAL_MspInit+0x5c>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001182:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <HAL_MspInit+0x60>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <HAL_MspInit+0x60>)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000

080011b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a2c      	ldr	r2, [pc, #176]	@ (800127c <HAL_ADC_MspInit+0xcc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d151      	bne.n	8001274 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001280 <HAL_ADC_MspInit+0xd0>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001280 <HAL_ADC_MspInit+0xd0>)
 80011d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b28      	ldr	r3, [pc, #160]	@ (8001280 <HAL_ADC_MspInit+0xd0>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b25      	ldr	r3, [pc, #148]	@ (8001280 <HAL_ADC_MspInit+0xd0>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a24      	ldr	r2, [pc, #144]	@ (8001280 <HAL_ADC_MspInit+0xd0>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <HAL_ADC_MspInit+0xd0>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001200:	230f      	movs	r3, #15
 8001202:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001204:	2303      	movs	r3, #3
 8001206:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	4619      	mov	r1, r3
 800120e:	481d      	ldr	r0, [pc, #116]	@ (8001284 <HAL_ADC_MspInit+0xd4>)
 8001210:	f001 fab4 	bl	800277c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001214:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <HAL_ADC_MspInit+0xd8>)
 8001216:	4a1d      	ldr	r2, [pc, #116]	@ (800128c <HAL_ADC_MspInit+0xdc>)
 8001218:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800121a:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <HAL_ADC_MspInit+0xd8>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001220:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <HAL_ADC_MspInit+0xd8>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <HAL_ADC_MspInit+0xd8>)
 8001228:	2280      	movs	r2, #128	@ 0x80
 800122a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800122c:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <HAL_ADC_MspInit+0xd8>)
 800122e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001232:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <HAL_ADC_MspInit+0xd8>)
 8001236:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800123a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800123c:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <HAL_ADC_MspInit+0xd8>)
 800123e:	2220      	movs	r2, #32
 8001240:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001242:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <HAL_ADC_MspInit+0xd8>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001248:	480f      	ldr	r0, [pc, #60]	@ (8001288 <HAL_ADC_MspInit+0xd8>)
 800124a:	f001 f8a9 	bl	80023a0 <HAL_DMA_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001254:	f7ff ff6e 	bl	8001134 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a0b      	ldr	r2, [pc, #44]	@ (8001288 <HAL_ADC_MspInit+0xd8>)
 800125c:	621a      	str	r2, [r3, #32]
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <HAL_ADC_MspInit+0xd8>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	2012      	movs	r0, #18
 800126a:	f001 f862 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800126e:	2012      	movs	r0, #18
 8001270:	f001 f87b 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40012400 	.word	0x40012400
 8001280:	40021000 	.word	0x40021000
 8001284:	40010800 	.word	0x40010800
 8001288:	20000390 	.word	0x20000390
 800128c:	40020008 	.word	0x40020008

08001290 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001318 <HAL_SPI_MspInit+0x88>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d12f      	bne.n	8001310 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012b0:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <HAL_SPI_MspInit+0x8c>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a19      	ldr	r2, [pc, #100]	@ (800131c <HAL_SPI_MspInit+0x8c>)
 80012b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b17      	ldr	r3, [pc, #92]	@ (800131c <HAL_SPI_MspInit+0x8c>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b14      	ldr	r3, [pc, #80]	@ (800131c <HAL_SPI_MspInit+0x8c>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a13      	ldr	r2, [pc, #76]	@ (800131c <HAL_SPI_MspInit+0x8c>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <HAL_SPI_MspInit+0x8c>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012e0:	23a0      	movs	r3, #160	@ 0xa0
 80012e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	480b      	ldr	r0, [pc, #44]	@ (8001320 <HAL_SPI_MspInit+0x90>)
 80012f4:	f001 fa42 	bl	800277c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012f8:	2340      	movs	r3, #64	@ 0x40
 80012fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <HAL_SPI_MspInit+0x90>)
 800130c:	f001 fa36 	bl	800277c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001310:	bf00      	nop
 8001312:	3720      	adds	r7, #32
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40013000 	.word	0x40013000
 800131c:	40021000 	.word	0x40021000
 8001320:	40010800 	.word	0x40010800

08001324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001334:	d114      	bne.n	8001360 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001336:	4b19      	ldr	r3, [pc, #100]	@ (800139c <HAL_TIM_Base_MspInit+0x78>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a18      	ldr	r2, [pc, #96]	@ (800139c <HAL_TIM_Base_MspInit+0x78>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	61d3      	str	r3, [r2, #28]
 8001342:	4b16      	ldr	r3, [pc, #88]	@ (800139c <HAL_TIM_Base_MspInit+0x78>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	201c      	movs	r0, #28
 8001354:	f000 ffed 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001358:	201c      	movs	r0, #28
 800135a:	f001 f806 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800135e:	e018      	b.n	8001392 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0e      	ldr	r2, [pc, #56]	@ (80013a0 <HAL_TIM_Base_MspInit+0x7c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d113      	bne.n	8001392 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800136a:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <HAL_TIM_Base_MspInit+0x78>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a0b      	ldr	r2, [pc, #44]	@ (800139c <HAL_TIM_Base_MspInit+0x78>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	61d3      	str	r3, [r2, #28]
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <HAL_TIM_Base_MspInit+0x78>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	201d      	movs	r0, #29
 8001388:	f000 ffd3 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800138c:	201d      	movs	r0, #29
 800138e:	f000 ffec 	bl	800236a <HAL_NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	40000400 	.word	0x40000400

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <NMI_Handler+0x4>

080013ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <MemManage_Handler+0x4>

080013bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <BusFault_Handler+0x4>

080013c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <UsageFault_Handler+0x4>

080013cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 f968 	bl	80016c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <DMA1_Channel1_IRQHandler+0x10>)
 8001402:	f001 f887 	bl	8002514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000390 	.word	0x20000390

08001410 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <ADC1_2_IRQHandler+0x10>)
 8001416:	f000 fb29 	bl	8001a6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000360 	.word	0x20000360

08001424 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800142a:	f001 fc98 	bl	8002d5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000a38 	.word	0x20000a38

08001438 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <TIM2_IRQHandler+0x10>)
 800143e:	f004 f85f 	bl	8005500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000042c 	.word	0x2000042c

0800144c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <TIM3_IRQHandler+0x10>)
 8001452:	f004 f855 	bl	8005500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000474 	.word	0x20000474

08001460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return 1;
 8001464:	2301      	movs	r3, #1
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <_kill>:

int _kill(int pid, int sig)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001478:	f009 ffa8 	bl	800b3cc <__errno>
 800147c:	4603      	mov	r3, r0
 800147e:	2216      	movs	r2, #22
 8001480:	601a      	str	r2, [r3, #0]
  return -1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <_exit>:

void _exit (int status)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001496:	f04f 31ff 	mov.w	r1, #4294967295
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ffe7 	bl	800146e <_kill>
  while (1) {}    /* Make sure we hang here */
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <_exit+0x12>

080014a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	e00a      	b.n	80014cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014b6:	f3af 8000 	nop.w
 80014ba:	4601      	mov	r1, r0
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	60ba      	str	r2, [r7, #8]
 80014c2:	b2ca      	uxtb	r2, r1
 80014c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbf0      	blt.n	80014b6 <_read+0x12>
  }

  return len;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e009      	b.n	8001504 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	60ba      	str	r2, [r7, #8]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	429a      	cmp	r2, r3
 800150a:	dbf1      	blt.n	80014f0 <_write+0x12>
  }
  return len;
 800150c:	687b      	ldr	r3, [r7, #4]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <_close>:

int _close(int file)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800153c:	605a      	str	r2, [r3, #4]
  return 0;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <_isatty>:

int _isatty(int file)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800155e:	b480      	push	{r7}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
	...

08001578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001580:	4a14      	ldr	r2, [pc, #80]	@ (80015d4 <_sbrk+0x5c>)
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <_sbrk+0x60>)
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <_sbrk+0x64>)
 8001596:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <_sbrk+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d207      	bcs.n	80015b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a8:	f009 ff10 	bl	800b3cc <__errno>
 80015ac:	4603      	mov	r3, r0
 80015ae:	220c      	movs	r2, #12
 80015b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e009      	b.n	80015cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015be:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a05      	ldr	r2, [pc, #20]	@ (80015dc <_sbrk+0x64>)
 80015c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20005000 	.word	0x20005000
 80015d8:	00000400 	.word	0x00000400
 80015dc:	200004e0 	.word	0x200004e0
 80015e0:	20001098 	.word	0x20001098

080015e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015f0:	f7ff fff8 	bl	80015e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f4:	480b      	ldr	r0, [pc, #44]	@ (8001624 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015f6:	490c      	ldr	r1, [pc, #48]	@ (8001628 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015f8:	4a0c      	ldr	r2, [pc, #48]	@ (800162c <LoopFillZerobss+0x16>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160a:	4a09      	ldr	r2, [pc, #36]	@ (8001630 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800160c:	4c09      	ldr	r4, [pc, #36]	@ (8001634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800161a:	f009 fedd 	bl	800b3d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800161e:	f7ff fa87 	bl	8000b30 <main>
  bx lr
 8001622:	4770      	bx	lr
  ldr r0, =_sdata
 8001624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001628:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 800162c:	0800d598 	.word	0x0800d598
  ldr r2, =_sbss
 8001630:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8001634:	20001094 	.word	0x20001094

08001638 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001638:	e7fe      	b.n	8001638 <CAN1_RX1_IRQHandler>
	...

0800163c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <HAL_Init+0x28>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a07      	ldr	r2, [pc, #28]	@ (8001664 <HAL_Init+0x28>)
 8001646:	f043 0310 	orr.w	r3, r3, #16
 800164a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164c:	2003      	movs	r0, #3
 800164e:	f000 fe65 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001652:	200f      	movs	r0, #15
 8001654:	f000 f808 	bl	8001668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001658:	f7ff fd78 	bl	800114c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40022000 	.word	0x40022000

08001668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001670:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <HAL_InitTick+0x54>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <HAL_InitTick+0x58>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800167e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fe7d 	bl	8002386 <HAL_SYSTICK_Config>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e00e      	b.n	80016b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b0f      	cmp	r3, #15
 800169a:	d80a      	bhi.n	80016b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f000 fe45 	bl	8002332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a8:	4a06      	ldr	r2, [pc, #24]	@ (80016c4 <HAL_InitTick+0x5c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e000      	b.n	80016b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000008 	.word	0x20000008
 80016c4:	20000004 	.word	0x20000004

080016c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016cc:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <HAL_IncTick+0x1c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <HAL_IncTick+0x20>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a03      	ldr	r2, [pc, #12]	@ (80016e8 <HAL_IncTick+0x20>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	20000008 	.word	0x20000008
 80016e8:	200004e4 	.word	0x200004e4

080016ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b02      	ldr	r3, [pc, #8]	@ (80016fc <HAL_GetTick+0x10>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	200004e4 	.word	0x200004e4

08001700 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0be      	b.n	80018a0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172c:	2b00      	cmp	r3, #0
 800172e:	d109      	bne.n	8001744 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fd36 	bl	80011b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 fbbd 	bl	8001ec4 <ADC_ConversionStop_Disable>
 800174a:	4603      	mov	r3, r0
 800174c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	2b00      	cmp	r3, #0
 8001758:	f040 8099 	bne.w	800188e <HAL_ADC_Init+0x18e>
 800175c:	7dfb      	ldrb	r3, [r7, #23]
 800175e:	2b00      	cmp	r3, #0
 8001760:	f040 8095 	bne.w	800188e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001768:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800176c:	f023 0302 	bic.w	r3, r3, #2
 8001770:	f043 0202 	orr.w	r2, r3, #2
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001780:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7b1b      	ldrb	r3, [r3, #12]
 8001786:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001788:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	4313      	orrs	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001798:	d003      	beq.n	80017a2 <HAL_ADC_Init+0xa2>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d102      	bne.n	80017a8 <HAL_ADC_Init+0xa8>
 80017a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017a6:	e000      	b.n	80017aa <HAL_ADC_Init+0xaa>
 80017a8:	2300      	movs	r3, #0
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7d1b      	ldrb	r3, [r3, #20]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d119      	bne.n	80017ec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7b1b      	ldrb	r3, [r3, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d109      	bne.n	80017d4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	035a      	lsls	r2, r3, #13
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	e00b      	b.n	80017ec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d8:	f043 0220 	orr.w	r2, r3, #32
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	4b28      	ldr	r3, [pc, #160]	@ (80018a8 <HAL_ADC_Init+0x1a8>)
 8001808:	4013      	ands	r3, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	68b9      	ldr	r1, [r7, #8]
 8001810:	430b      	orrs	r3, r1
 8001812:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800181c:	d003      	beq.n	8001826 <HAL_ADC_Init+0x126>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d104      	bne.n	8001830 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	3b01      	subs	r3, #1
 800182c:	051b      	lsls	r3, r3, #20
 800182e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001836:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	430a      	orrs	r2, r1
 8001842:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <HAL_ADC_Init+0x1ac>)
 800184c:	4013      	ands	r3, r2
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	429a      	cmp	r2, r3
 8001852:	d10b      	bne.n	800186c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185e:	f023 0303 	bic.w	r3, r3, #3
 8001862:	f043 0201 	orr.w	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800186a:	e018      	b.n	800189e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001870:	f023 0312 	bic.w	r3, r3, #18
 8001874:	f043 0210 	orr.w	r2, r3, #16
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001880:	f043 0201 	orr.w	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800188c:	e007      	b.n	800189e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001892:	f043 0210 	orr.w	r2, r3, #16
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800189e:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	ffe1f7fd 	.word	0xffe1f7fd
 80018ac:	ff1f0efe 	.word	0xff1f0efe

080018b0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a64      	ldr	r2, [pc, #400]	@ (8001a58 <HAL_ADC_Start_DMA+0x1a8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d004      	beq.n	80018d4 <HAL_ADC_Start_DMA+0x24>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a63      	ldr	r2, [pc, #396]	@ (8001a5c <HAL_ADC_Start_DMA+0x1ac>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d106      	bne.n	80018e2 <HAL_ADC_Start_DMA+0x32>
 80018d4:	4b60      	ldr	r3, [pc, #384]	@ (8001a58 <HAL_ADC_Start_DMA+0x1a8>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f040 80b3 	bne.w	8001a48 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <HAL_ADC_Start_DMA+0x40>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e0ae      	b.n	8001a4e <HAL_ADC_Start_DMA+0x19e>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 fa89 	bl	8001e10 <ADC_Enable>
 80018fe:	4603      	mov	r3, r0
 8001900:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001902:	7dfb      	ldrb	r3, [r7, #23]
 8001904:	2b00      	cmp	r3, #0
 8001906:	f040 809a 	bne.w	8001a3e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a4e      	ldr	r2, [pc, #312]	@ (8001a5c <HAL_ADC_Start_DMA+0x1ac>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d105      	bne.n	8001934 <HAL_ADC_Start_DMA+0x84>
 8001928:	4b4b      	ldr	r3, [pc, #300]	@ (8001a58 <HAL_ADC_Start_DMA+0x1a8>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d115      	bne.n	8001960 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001938:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800194a:	2b00      	cmp	r3, #0
 800194c:	d026      	beq.n	800199c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001952:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001956:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800195e:	e01d      	b.n	800199c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001964:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a39      	ldr	r2, [pc, #228]	@ (8001a58 <HAL_ADC_Start_DMA+0x1a8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d004      	beq.n	8001980 <HAL_ADC_Start_DMA+0xd0>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a38      	ldr	r2, [pc, #224]	@ (8001a5c <HAL_ADC_Start_DMA+0x1ac>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d10d      	bne.n	800199c <HAL_ADC_Start_DMA+0xec>
 8001980:	4b35      	ldr	r3, [pc, #212]	@ (8001a58 <HAL_ADC_Start_DMA+0x1a8>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d007      	beq.n	800199c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001990:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001994:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ac:	f023 0206 	bic.w	r2, r3, #6
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019b4:	e002      	b.n	80019bc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4a25      	ldr	r2, [pc, #148]	@ (8001a60 <HAL_ADC_Start_DMA+0x1b0>)
 80019ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a24      	ldr	r2, [pc, #144]	@ (8001a64 <HAL_ADC_Start_DMA+0x1b4>)
 80019d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4a23      	ldr	r2, [pc, #140]	@ (8001a68 <HAL_ADC_Start_DMA+0x1b8>)
 80019da:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f06f 0202 	mvn.w	r2, #2
 80019e4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019f4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a18      	ldr	r0, [r3, #32]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	334c      	adds	r3, #76	@ 0x4c
 8001a00:	4619      	mov	r1, r3
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f000 fd25 	bl	8002454 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a14:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a18:	d108      	bne.n	8001a2c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001a28:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a2a:	e00f      	b.n	8001a4c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001a3a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a3c:	e006      	b.n	8001a4c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001a46:	e001      	b.n	8001a4c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40012400 	.word	0x40012400
 8001a5c:	40012800 	.word	0x40012800
 8001a60:	08001f47 	.word	0x08001f47
 8001a64:	08001fc3 	.word	0x08001fc3
 8001a68:	08001fdf 	.word	0x08001fdf

08001a6c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f003 0320 	and.w	r3, r3, #32
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d03e      	beq.n	8001b0c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d039      	beq.n	8001b0c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001aba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001abe:	d11d      	bne.n	8001afc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d119      	bne.n	8001afc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0220 	bic.w	r2, r2, #32
 8001ad6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001adc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af4:	f043 0201 	orr.w	r2, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7fe fff2 	bl	8000ae6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f06f 0212 	mvn.w	r2, #18
 8001b0a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d04d      	beq.n	8001bb2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d048      	beq.n	8001bb2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d105      	bne.n	8001b38 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b30:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001b42:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001b46:	d012      	beq.n	8001b6e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d125      	bne.n	8001ba2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001b60:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001b64:	d11d      	bne.n	8001ba2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d119      	bne.n	8001ba2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b7c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d105      	bne.n	8001ba2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9a:	f043 0201 	orr.w	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fae4 	bl	8002170 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 020c 	mvn.w	r2, #12
 8001bb0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d012      	beq.n	8001be2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00d      	beq.n	8001be2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f812 	bl	8001bfc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0201 	mvn.w	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x20>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e0dc      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x1da>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b06      	cmp	r3, #6
 8001c4e:	d81c      	bhi.n	8001c8a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b05      	subs	r3, #5
 8001c62:	221f      	movs	r2, #31
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4019      	ands	r1, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3b05      	subs	r3, #5
 8001c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c88:	e03c      	b.n	8001d04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d81c      	bhi.n	8001ccc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b23      	subs	r3, #35	@ 0x23
 8001ca4:	221f      	movs	r2, #31
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	4019      	ands	r1, r3
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	3b23      	subs	r3, #35	@ 0x23
 8001cbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cca:	e01b      	b.n	8001d04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	3b41      	subs	r3, #65	@ 0x41
 8001cde:	221f      	movs	r2, #31
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	4019      	ands	r1, r3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3b41      	subs	r3, #65	@ 0x41
 8001cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b09      	cmp	r3, #9
 8001d0a:	d91c      	bls.n	8001d46 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68d9      	ldr	r1, [r3, #12]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3b1e      	subs	r3, #30
 8001d1e:	2207      	movs	r2, #7
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	4019      	ands	r1, r3
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	6898      	ldr	r0, [r3, #8]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	3b1e      	subs	r3, #30
 8001d38:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	e019      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6919      	ldr	r1, [r3, #16]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4613      	mov	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	2207      	movs	r2, #7
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	4019      	ands	r1, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6898      	ldr	r0, [r3, #8]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b10      	cmp	r3, #16
 8001d80:	d003      	beq.n	8001d8a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d86:	2b11      	cmp	r3, #17
 8001d88:	d132      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8001e04 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d125      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d126      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001db0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d11a      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dba:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <HAL_ADC_ConfigChannel+0x1e8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a13      	ldr	r2, [pc, #76]	@ (8001e0c <HAL_ADC_ConfigChannel+0x1ec>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	0c9a      	lsrs	r2, r3, #18
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dd0:	e002      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f9      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x1b2>
 8001dde:	e007      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de4:	f043 0220 	orr.w	r2, r3, #32
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	40012400 	.word	0x40012400
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	431bde83 	.word	0x431bde83

08001e10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d040      	beq.n	8001eb0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ebc <ADC_Enable+0xac>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec0 <ADC_Enable+0xb0>)
 8001e44:	fba2 2303 	umull	r2, r3, r2, r3
 8001e48:	0c9b      	lsrs	r3, r3, #18
 8001e4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e4c:	e002      	b.n	8001e54 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f9      	bne.n	8001e4e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e5a:	f7ff fc47 	bl	80016ec <HAL_GetTick>
 8001e5e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e60:	e01f      	b.n	8001ea2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e62:	f7ff fc43 	bl	80016ec <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d918      	bls.n	8001ea2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d011      	beq.n	8001ea2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e82:	f043 0210 	orr.w	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8e:	f043 0201 	orr.w	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e007      	b.n	8001eb2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d1d8      	bne.n	8001e62 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	431bde83 	.word	0x431bde83

08001ec4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d12e      	bne.n	8001f3c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0201 	bic.w	r2, r2, #1
 8001eec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eee:	f7ff fbfd 	bl	80016ec <HAL_GetTick>
 8001ef2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ef4:	e01b      	b.n	8001f2e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ef6:	f7ff fbf9 	bl	80016ec <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d914      	bls.n	8001f2e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d10d      	bne.n	8001f2e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f16:	f043 0210 	orr.w	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f22:	f043 0201 	orr.w	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e007      	b.n	8001f3e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d0dc      	beq.n	8001ef6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d127      	bne.n	8001fb0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f76:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f7a:	d115      	bne.n	8001fa8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d111      	bne.n	8001fa8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d105      	bne.n	8001fa8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7fe fd9c 	bl	8000ae6 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001fae:	e004      	b.n	8001fba <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	4798      	blx	r3
}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f7ff fe0a 	bl	8001bea <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffc:	f043 0204 	orr.w	r2, r3, #4
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f7ff fe02 	bl	8001c0e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_ADCEx_Calibration_Start+0x1e>
 800202e:	2302      	movs	r3, #2
 8002030:	e097      	b.n	8002162 <HAL_ADCEx_Calibration_Start+0x14e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ff42 	bl	8001ec4 <ADC_ConversionStop_Disable>
 8002040:	4603      	mov	r3, r0
 8002042:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff fee3 	bl	8001e10 <ADC_Enable>
 800204a:	4603      	mov	r3, r0
 800204c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800204e:	7dfb      	ldrb	r3, [r7, #23]
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 8081 	bne.w	8002158 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800205e:	f023 0302 	bic.w	r3, r3, #2
 8002062:	f043 0202 	orr.w	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800206a:	4b40      	ldr	r3, [pc, #256]	@ (800216c <HAL_ADCEx_Calibration_Start+0x158>)
 800206c:	681c      	ldr	r4, [r3, #0]
 800206e:	2002      	movs	r0, #2
 8002070:	f002 ff70 	bl	8004f54 <HAL_RCCEx_GetPeriphCLKFreq>
 8002074:	4603      	mov	r3, r0
 8002076:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800207a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800207c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800207e:	e002      	b.n	8002086 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3b01      	subs	r3, #1
 8002084:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f9      	bne.n	8002080 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0208 	orr.w	r2, r2, #8
 800209a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800209c:	f7ff fb26 	bl	80016ec <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020a2:	e01b      	b.n	80020dc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80020a4:	f7ff fb22 	bl	80016ec <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b0a      	cmp	r3, #10
 80020b0:	d914      	bls.n	80020dc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00d      	beq.n	80020dc <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c4:	f023 0312 	bic.w	r3, r3, #18
 80020c8:	f043 0210 	orr.w	r2, r3, #16
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e042      	b.n	8002162 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1dc      	bne.n	80020a4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0204 	orr.w	r2, r2, #4
 80020f8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80020fa:	f7ff faf7 	bl	80016ec <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002100:	e01b      	b.n	800213a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002102:	f7ff faf3 	bl	80016ec <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b0a      	cmp	r3, #10
 800210e:	d914      	bls.n	800213a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00d      	beq.n	800213a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002122:	f023 0312 	bic.w	r3, r3, #18
 8002126:	f043 0210 	orr.w	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e013      	b.n	8002162 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1dc      	bne.n	8002102 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	f023 0303 	bic.w	r3, r3, #3
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002160:	7dfb      	ldrb	r3, [r7, #23]
}
 8002162:	4618      	mov	r0, r3
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd90      	pop	{r4, r7, pc}
 800216a:	bf00      	nop
 800216c:	20000000 	.word	0x20000000

08002170 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
	...

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	@ (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	@ (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0b      	blt.n	8002212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4906      	ldr	r1, [pc, #24]	@ (800221c <__NVIC_EnableIRQ+0x34>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2001      	movs	r0, #1
 800220a:	fa00 f202 	lsl.w	r2, r0, r2
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db0a      	blt.n	800224a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	490c      	ldr	r1, [pc, #48]	@ (800226c <__NVIC_SetPriority+0x4c>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	440b      	add	r3, r1
 8002244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002248:	e00a      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4908      	ldr	r1, [pc, #32]	@ (8002270 <__NVIC_SetPriority+0x50>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e100 	.word	0xe000e100
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	@ 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f1c3 0307 	rsb	r3, r3, #7
 800228e:	2b04      	cmp	r3, #4
 8002290:	bf28      	it	cs
 8002292:	2304      	movcs	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3304      	adds	r3, #4
 800229a:	2b06      	cmp	r3, #6
 800229c:	d902      	bls.n	80022a4 <NVIC_EncodePriority+0x30>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3b03      	subs	r3, #3
 80022a2:	e000      	b.n	80022a6 <NVIC_EncodePriority+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	4313      	orrs	r3, r2
         );
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	@ 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff90 	bl	8002220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff2d 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff42 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff90 	bl	8002274 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5f 	bl	8002220 <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff35 	bl	80021e8 <__NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffa2 	bl	80022d8 <SysTick_Config>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e043      	b.n	800243e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b22      	ldr	r3, [pc, #136]	@ (8002448 <HAL_DMA_Init+0xa8>)
 80023be:	4413      	add	r3, r2
 80023c0:	4a22      	ldr	r2, [pc, #136]	@ (800244c <HAL_DMA_Init+0xac>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	009a      	lsls	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002450 <HAL_DMA_Init+0xb0>)
 80023d2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023ea:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80023ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002404:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002410:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	bffdfff8 	.word	0xbffdfff8
 800244c:	cccccccd 	.word	0xcccccccd
 8002450:	40020000 	.word	0x40020000

08002454 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_DMA_Start_IT+0x20>
 8002470:	2302      	movs	r3, #2
 8002472:	e04b      	b.n	800250c <HAL_DMA_Start_IT+0xb8>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b01      	cmp	r3, #1
 8002486:	d13a      	bne.n	80024fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0201 	bic.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f937 	bl	8002720 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 020e 	orr.w	r2, r2, #14
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e00f      	b.n	80024ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0204 	bic.w	r2, r2, #4
 80024da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 020a 	orr.w	r2, r2, #10
 80024ea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	e005      	b.n	800250a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002506:	2302      	movs	r3, #2
 8002508:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800250a:	7dfb      	ldrb	r3, [r7, #23]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	2204      	movs	r2, #4
 8002532:	409a      	lsls	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d04f      	beq.n	80025dc <HAL_DMA_IRQHandler+0xc8>
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d04a      	beq.n	80025dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d107      	bne.n	8002564 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0204 	bic.w	r2, r2, #4
 8002562:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a66      	ldr	r2, [pc, #408]	@ (8002704 <HAL_DMA_IRQHandler+0x1f0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d029      	beq.n	80025c2 <HAL_DMA_IRQHandler+0xae>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a65      	ldr	r2, [pc, #404]	@ (8002708 <HAL_DMA_IRQHandler+0x1f4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d022      	beq.n	80025be <HAL_DMA_IRQHandler+0xaa>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a63      	ldr	r2, [pc, #396]	@ (800270c <HAL_DMA_IRQHandler+0x1f8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01a      	beq.n	80025b8 <HAL_DMA_IRQHandler+0xa4>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a62      	ldr	r2, [pc, #392]	@ (8002710 <HAL_DMA_IRQHandler+0x1fc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d012      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x9e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a60      	ldr	r2, [pc, #384]	@ (8002714 <HAL_DMA_IRQHandler+0x200>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00a      	beq.n	80025ac <HAL_DMA_IRQHandler+0x98>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a5f      	ldr	r2, [pc, #380]	@ (8002718 <HAL_DMA_IRQHandler+0x204>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d102      	bne.n	80025a6 <HAL_DMA_IRQHandler+0x92>
 80025a0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025a4:	e00e      	b.n	80025c4 <HAL_DMA_IRQHandler+0xb0>
 80025a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80025aa:	e00b      	b.n	80025c4 <HAL_DMA_IRQHandler+0xb0>
 80025ac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80025b0:	e008      	b.n	80025c4 <HAL_DMA_IRQHandler+0xb0>
 80025b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025b6:	e005      	b.n	80025c4 <HAL_DMA_IRQHandler+0xb0>
 80025b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025bc:	e002      	b.n	80025c4 <HAL_DMA_IRQHandler+0xb0>
 80025be:	2340      	movs	r3, #64	@ 0x40
 80025c0:	e000      	b.n	80025c4 <HAL_DMA_IRQHandler+0xb0>
 80025c2:	2304      	movs	r3, #4
 80025c4:	4a55      	ldr	r2, [pc, #340]	@ (800271c <HAL_DMA_IRQHandler+0x208>)
 80025c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 8094 	beq.w	80026fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025da:	e08e      	b.n	80026fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e0:	2202      	movs	r2, #2
 80025e2:	409a      	lsls	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d056      	beq.n	800269a <HAL_DMA_IRQHandler+0x186>
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d051      	beq.n	800269a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10b      	bne.n	800261c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 020a 	bic.w	r2, r2, #10
 8002612:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a38      	ldr	r2, [pc, #224]	@ (8002704 <HAL_DMA_IRQHandler+0x1f0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d029      	beq.n	800267a <HAL_DMA_IRQHandler+0x166>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a37      	ldr	r2, [pc, #220]	@ (8002708 <HAL_DMA_IRQHandler+0x1f4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d022      	beq.n	8002676 <HAL_DMA_IRQHandler+0x162>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a35      	ldr	r2, [pc, #212]	@ (800270c <HAL_DMA_IRQHandler+0x1f8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01a      	beq.n	8002670 <HAL_DMA_IRQHandler+0x15c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a34      	ldr	r2, [pc, #208]	@ (8002710 <HAL_DMA_IRQHandler+0x1fc>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d012      	beq.n	800266a <HAL_DMA_IRQHandler+0x156>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a32      	ldr	r2, [pc, #200]	@ (8002714 <HAL_DMA_IRQHandler+0x200>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00a      	beq.n	8002664 <HAL_DMA_IRQHandler+0x150>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a31      	ldr	r2, [pc, #196]	@ (8002718 <HAL_DMA_IRQHandler+0x204>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d102      	bne.n	800265e <HAL_DMA_IRQHandler+0x14a>
 8002658:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800265c:	e00e      	b.n	800267c <HAL_DMA_IRQHandler+0x168>
 800265e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002662:	e00b      	b.n	800267c <HAL_DMA_IRQHandler+0x168>
 8002664:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002668:	e008      	b.n	800267c <HAL_DMA_IRQHandler+0x168>
 800266a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800266e:	e005      	b.n	800267c <HAL_DMA_IRQHandler+0x168>
 8002670:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002674:	e002      	b.n	800267c <HAL_DMA_IRQHandler+0x168>
 8002676:	2320      	movs	r3, #32
 8002678:	e000      	b.n	800267c <HAL_DMA_IRQHandler+0x168>
 800267a:	2302      	movs	r3, #2
 800267c:	4a27      	ldr	r2, [pc, #156]	@ (800271c <HAL_DMA_IRQHandler+0x208>)
 800267e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268c:	2b00      	cmp	r3, #0
 800268e:	d034      	beq.n	80026fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002698:	e02f      	b.n	80026fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	2208      	movs	r2, #8
 80026a0:	409a      	lsls	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d028      	beq.n	80026fc <HAL_DMA_IRQHandler+0x1e8>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d023      	beq.n	80026fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 020e 	bic.w	r2, r2, #14
 80026c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026cc:	2101      	movs	r1, #1
 80026ce:	fa01 f202 	lsl.w	r2, r1, r2
 80026d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d004      	beq.n	80026fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	4798      	blx	r3
    }
  }
  return;
 80026fa:	bf00      	nop
 80026fc:	bf00      	nop
}
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40020008 	.word	0x40020008
 8002708:	4002001c 	.word	0x4002001c
 800270c:	40020030 	.word	0x40020030
 8002710:	40020044 	.word	0x40020044
 8002714:	40020058 	.word	0x40020058
 8002718:	4002006c 	.word	0x4002006c
 800271c:	40020000 	.word	0x40020000

08002720 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002736:	2101      	movs	r1, #1
 8002738:	fa01 f202 	lsl.w	r2, r1, r2
 800273c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b10      	cmp	r3, #16
 800274c:	d108      	bne.n	8002760 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800275e:	e007      	b.n	8002770 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	60da      	str	r2, [r3, #12]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
	...

0800277c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800277c:	b480      	push	{r7}
 800277e:	b08b      	sub	sp, #44	@ 0x2c
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002786:	2300      	movs	r3, #0
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800278a:	2300      	movs	r3, #0
 800278c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800278e:	e169      	b.n	8002a64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002790:	2201      	movs	r2, #1
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	f040 8158 	bne.w	8002a5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4a9a      	ldr	r2, [pc, #616]	@ (8002a1c <HAL_GPIO_Init+0x2a0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d05e      	beq.n	8002876 <HAL_GPIO_Init+0xfa>
 80027b8:	4a98      	ldr	r2, [pc, #608]	@ (8002a1c <HAL_GPIO_Init+0x2a0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d875      	bhi.n	80028aa <HAL_GPIO_Init+0x12e>
 80027be:	4a98      	ldr	r2, [pc, #608]	@ (8002a20 <HAL_GPIO_Init+0x2a4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d058      	beq.n	8002876 <HAL_GPIO_Init+0xfa>
 80027c4:	4a96      	ldr	r2, [pc, #600]	@ (8002a20 <HAL_GPIO_Init+0x2a4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d86f      	bhi.n	80028aa <HAL_GPIO_Init+0x12e>
 80027ca:	4a96      	ldr	r2, [pc, #600]	@ (8002a24 <HAL_GPIO_Init+0x2a8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d052      	beq.n	8002876 <HAL_GPIO_Init+0xfa>
 80027d0:	4a94      	ldr	r2, [pc, #592]	@ (8002a24 <HAL_GPIO_Init+0x2a8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d869      	bhi.n	80028aa <HAL_GPIO_Init+0x12e>
 80027d6:	4a94      	ldr	r2, [pc, #592]	@ (8002a28 <HAL_GPIO_Init+0x2ac>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d04c      	beq.n	8002876 <HAL_GPIO_Init+0xfa>
 80027dc:	4a92      	ldr	r2, [pc, #584]	@ (8002a28 <HAL_GPIO_Init+0x2ac>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d863      	bhi.n	80028aa <HAL_GPIO_Init+0x12e>
 80027e2:	4a92      	ldr	r2, [pc, #584]	@ (8002a2c <HAL_GPIO_Init+0x2b0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d046      	beq.n	8002876 <HAL_GPIO_Init+0xfa>
 80027e8:	4a90      	ldr	r2, [pc, #576]	@ (8002a2c <HAL_GPIO_Init+0x2b0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d85d      	bhi.n	80028aa <HAL_GPIO_Init+0x12e>
 80027ee:	2b12      	cmp	r3, #18
 80027f0:	d82a      	bhi.n	8002848 <HAL_GPIO_Init+0xcc>
 80027f2:	2b12      	cmp	r3, #18
 80027f4:	d859      	bhi.n	80028aa <HAL_GPIO_Init+0x12e>
 80027f6:	a201      	add	r2, pc, #4	@ (adr r2, 80027fc <HAL_GPIO_Init+0x80>)
 80027f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fc:	08002877 	.word	0x08002877
 8002800:	08002851 	.word	0x08002851
 8002804:	08002863 	.word	0x08002863
 8002808:	080028a5 	.word	0x080028a5
 800280c:	080028ab 	.word	0x080028ab
 8002810:	080028ab 	.word	0x080028ab
 8002814:	080028ab 	.word	0x080028ab
 8002818:	080028ab 	.word	0x080028ab
 800281c:	080028ab 	.word	0x080028ab
 8002820:	080028ab 	.word	0x080028ab
 8002824:	080028ab 	.word	0x080028ab
 8002828:	080028ab 	.word	0x080028ab
 800282c:	080028ab 	.word	0x080028ab
 8002830:	080028ab 	.word	0x080028ab
 8002834:	080028ab 	.word	0x080028ab
 8002838:	080028ab 	.word	0x080028ab
 800283c:	080028ab 	.word	0x080028ab
 8002840:	08002859 	.word	0x08002859
 8002844:	0800286d 	.word	0x0800286d
 8002848:	4a79      	ldr	r2, [pc, #484]	@ (8002a30 <HAL_GPIO_Init+0x2b4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800284e:	e02c      	b.n	80028aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	623b      	str	r3, [r7, #32]
          break;
 8002856:	e029      	b.n	80028ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	3304      	adds	r3, #4
 800285e:	623b      	str	r3, [r7, #32]
          break;
 8002860:	e024      	b.n	80028ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	3308      	adds	r3, #8
 8002868:	623b      	str	r3, [r7, #32]
          break;
 800286a:	e01f      	b.n	80028ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	330c      	adds	r3, #12
 8002872:	623b      	str	r3, [r7, #32]
          break;
 8002874:	e01a      	b.n	80028ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d102      	bne.n	8002884 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800287e:	2304      	movs	r3, #4
 8002880:	623b      	str	r3, [r7, #32]
          break;
 8002882:	e013      	b.n	80028ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800288c:	2308      	movs	r3, #8
 800288e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	611a      	str	r2, [r3, #16]
          break;
 8002896:	e009      	b.n	80028ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002898:	2308      	movs	r3, #8
 800289a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	615a      	str	r2, [r3, #20]
          break;
 80028a2:	e003      	b.n	80028ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028a4:	2300      	movs	r3, #0
 80028a6:	623b      	str	r3, [r7, #32]
          break;
 80028a8:	e000      	b.n	80028ac <HAL_GPIO_Init+0x130>
          break;
 80028aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2bff      	cmp	r3, #255	@ 0xff
 80028b0:	d801      	bhi.n	80028b6 <HAL_GPIO_Init+0x13a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	e001      	b.n	80028ba <HAL_GPIO_Init+0x13e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3304      	adds	r3, #4
 80028ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2bff      	cmp	r3, #255	@ 0xff
 80028c0:	d802      	bhi.n	80028c8 <HAL_GPIO_Init+0x14c>
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	e002      	b.n	80028ce <HAL_GPIO_Init+0x152>
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	3b08      	subs	r3, #8
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	210f      	movs	r1, #15
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	401a      	ands	r2, r3
 80028e0:	6a39      	ldr	r1, [r7, #32]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	431a      	orrs	r2, r3
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80b1 	beq.w	8002a5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002a34 <HAL_GPIO_Init+0x2b8>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	4a4c      	ldr	r2, [pc, #304]	@ (8002a34 <HAL_GPIO_Init+0x2b8>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6193      	str	r3, [r2, #24]
 8002908:	4b4a      	ldr	r3, [pc, #296]	@ (8002a34 <HAL_GPIO_Init+0x2b8>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002914:	4a48      	ldr	r2, [pc, #288]	@ (8002a38 <HAL_GPIO_Init+0x2bc>)
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	3302      	adds	r3, #2
 800291c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002920:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	220f      	movs	r2, #15
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4013      	ands	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a40      	ldr	r2, [pc, #256]	@ (8002a3c <HAL_GPIO_Init+0x2c0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d013      	beq.n	8002968 <HAL_GPIO_Init+0x1ec>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a3f      	ldr	r2, [pc, #252]	@ (8002a40 <HAL_GPIO_Init+0x2c4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00d      	beq.n	8002964 <HAL_GPIO_Init+0x1e8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a3e      	ldr	r2, [pc, #248]	@ (8002a44 <HAL_GPIO_Init+0x2c8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d007      	beq.n	8002960 <HAL_GPIO_Init+0x1e4>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a3d      	ldr	r2, [pc, #244]	@ (8002a48 <HAL_GPIO_Init+0x2cc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d101      	bne.n	800295c <HAL_GPIO_Init+0x1e0>
 8002958:	2303      	movs	r3, #3
 800295a:	e006      	b.n	800296a <HAL_GPIO_Init+0x1ee>
 800295c:	2304      	movs	r3, #4
 800295e:	e004      	b.n	800296a <HAL_GPIO_Init+0x1ee>
 8002960:	2302      	movs	r3, #2
 8002962:	e002      	b.n	800296a <HAL_GPIO_Init+0x1ee>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_GPIO_Init+0x1ee>
 8002968:	2300      	movs	r3, #0
 800296a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800296c:	f002 0203 	and.w	r2, r2, #3
 8002970:	0092      	lsls	r2, r2, #2
 8002972:	4093      	lsls	r3, r2
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800297a:	492f      	ldr	r1, [pc, #188]	@ (8002a38 <HAL_GPIO_Init+0x2bc>)
 800297c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297e:	089b      	lsrs	r3, r3, #2
 8002980:	3302      	adds	r3, #2
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d006      	beq.n	80029a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002994:	4b2d      	ldr	r3, [pc, #180]	@ (8002a4c <HAL_GPIO_Init+0x2d0>)
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	492c      	ldr	r1, [pc, #176]	@ (8002a4c <HAL_GPIO_Init+0x2d0>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	608b      	str	r3, [r1, #8]
 80029a0:	e006      	b.n	80029b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029a2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	4928      	ldr	r1, [pc, #160]	@ (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d006      	beq.n	80029ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029bc:	4b23      	ldr	r3, [pc, #140]	@ (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	4922      	ldr	r1, [pc, #136]	@ (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60cb      	str	r3, [r1, #12]
 80029c8:	e006      	b.n	80029d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029ca:	4b20      	ldr	r3, [pc, #128]	@ (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	491e      	ldr	r1, [pc, #120]	@ (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d006      	beq.n	80029f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029e4:	4b19      	ldr	r3, [pc, #100]	@ (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	4918      	ldr	r1, [pc, #96]	@ (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
 80029f0:	e006      	b.n	8002a00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029f2:	4b16      	ldr	r3, [pc, #88]	@ (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	4914      	ldr	r1, [pc, #80]	@ (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d021      	beq.n	8002a50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a4c <HAL_GPIO_Init+0x2d0>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	490e      	ldr	r1, [pc, #56]	@ (8002a4c <HAL_GPIO_Init+0x2d0>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]
 8002a18:	e021      	b.n	8002a5e <HAL_GPIO_Init+0x2e2>
 8002a1a:	bf00      	nop
 8002a1c:	10320000 	.word	0x10320000
 8002a20:	10310000 	.word	0x10310000
 8002a24:	10220000 	.word	0x10220000
 8002a28:	10210000 	.word	0x10210000
 8002a2c:	10120000 	.word	0x10120000
 8002a30:	10110000 	.word	0x10110000
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	40010800 	.word	0x40010800
 8002a40:	40010c00 	.word	0x40010c00
 8002a44:	40011000 	.word	0x40011000
 8002a48:	40011400 	.word	0x40011400
 8002a4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a50:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <HAL_GPIO_Init+0x304>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	4909      	ldr	r1, [pc, #36]	@ (8002a80 <HAL_GPIO_Init+0x304>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	3301      	adds	r3, #1
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f47f ae8e 	bne.w	8002790 <HAL_GPIO_Init+0x14>
  }
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	372c      	adds	r7, #44	@ 0x2c
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	40010400 	.word	0x40010400

08002a84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	887b      	ldrh	r3, [r7, #2]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
 8002aa0:	e001      	b.n	8002aa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	807b      	strh	r3, [r7, #2]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac2:	787b      	ldrb	r3, [r7, #1]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac8:	887a      	ldrh	r2, [r7, #2]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ace:	e003      	b.n	8002ad8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ad0:	887b      	ldrh	r3, [r7, #2]
 8002ad2:	041a      	lsls	r2, r3, #16
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	611a      	str	r2, [r3, #16]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002af4:	887a      	ldrh	r2, [r7, #2]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4013      	ands	r3, r2
 8002afa:	041a      	lsls	r2, r3, #16
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	43d9      	mvns	r1, r3
 8002b00:	887b      	ldrh	r3, [r7, #2]
 8002b02:	400b      	ands	r3, r1
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	611a      	str	r2, [r3, #16]
}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b16:	b08b      	sub	sp, #44	@ 0x2c
 8002b18:	af06      	add	r7, sp, #24
 8002b1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e0f1      	b.n	8002d0a <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f007 fbe8 	bl	800a310 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2203      	movs	r2, #3
 8002b44:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f003 fac7 	bl	80060e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	687e      	ldr	r6, [r7, #4]
 8002b5a:	466d      	mov	r5, sp
 8002b5c:	f106 0410 	add.w	r4, r6, #16
 8002b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	602b      	str	r3, [r5, #0]
 8002b68:	1d33      	adds	r3, r6, #4
 8002b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b6c:	6838      	ldr	r0, [r7, #0]
 8002b6e:	f003 fa91 	bl	8006094 <USB_CoreInit>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0c2      	b.n	8002d0a <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f003 fac2 	bl	8006114 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	e040      	b.n	8002c18 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	3303      	adds	r3, #3
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	3338      	adds	r3, #56	@ 0x38
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	333c      	adds	r3, #60	@ 0x3c
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3340      	adds	r3, #64	@ 0x40
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	3301      	adds	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d3b9      	bcc.n	8002b96 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	73fb      	strb	r3, [r7, #15]
 8002c26:	e044      	b.n	8002cb2 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	440b      	add	r3, r1
 8002c36:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	440b      	add	r3, r1
 8002c78:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d3b5      	bcc.n	8002c28 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	687e      	ldr	r6, [r7, #4]
 8002cc4:	466d      	mov	r5, sp
 8002cc6:	f106 0410 	add.w	r4, r6, #16
 8002cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	602b      	str	r3, [r5, #0]
 8002cd2:	1d33      	adds	r3, r6, #4
 8002cd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cd6:	6838      	ldr	r0, [r7, #0]
 8002cd8:	f003 fa28 	bl	800612c <USB_DevInit>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00d      	b.n	8002d0a <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f005 fca9 	bl	800865a <USB_DevDisconnect>

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d12 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_PCD_Start+0x16>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e016      	b.n	8002d56 <HAL_PCD_Start+0x44>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 f9bd 	bl	80060b4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f007 fd5a 	bl	800a7f6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f005 fc7d 	bl	8008646 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b088      	sub	sp, #32
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f005 fc7f 	bl	800866e <USB_ReadInterrupts>
 8002d70:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fb1b 	bl	80033b8 <PCD_EP_ISR_Handler>

    return;
 8002d82:	e119      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d013      	beq.n	8002db6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002da0:	b292      	uxth	r2, r2
 8002da2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f007 fb2d 	bl	800a406 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002dac:	2100      	movs	r1, #0
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f905 	bl	8002fbe <HAL_PCD_SetAddress>

    return;
 8002db4:	e100      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00c      	beq.n	8002dda <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002dd2:	b292      	uxth	r2, r2
 8002dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002dd8:	e0ee      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00c      	beq.n	8002dfe <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002df6:	b292      	uxth	r2, r2
 8002df8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002dfc:	e0dc      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d027      	beq.n	8002e58 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0204 	bic.w	r2, r2, #4
 8002e1a:	b292      	uxth	r2, r2
 8002e1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0208 	bic.w	r2, r2, #8
 8002e32:	b292      	uxth	r2, r2
 8002e34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f007 fb1d 	bl	800a478 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e50:	b292      	uxth	r2, r2
 8002e52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e56:	e0af      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 8083 	beq.w	8002f6a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	77fb      	strb	r3, [r7, #31]
 8002e68:	e010      	b.n	8002e8c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	7ffb      	ldrb	r3, [r7, #31]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	441a      	add	r2, r3
 8002e76:	7ffb      	ldrb	r3, [r7, #31]
 8002e78:	8812      	ldrh	r2, [r2, #0]
 8002e7a:	b292      	uxth	r2, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	3320      	adds	r3, #32
 8002e80:	443b      	add	r3, r7
 8002e82:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002e86:	7ffb      	ldrb	r3, [r7, #31]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	77fb      	strb	r3, [r7, #31]
 8002e8c:	7ffb      	ldrb	r3, [r7, #31]
 8002e8e:	2b07      	cmp	r3, #7
 8002e90:	d9eb      	bls.n	8002e6a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0201 	orr.w	r2, r2, #1
 8002ea4:	b292      	uxth	r2, r2
 8002ea6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0201 	bic.w	r2, r2, #1
 8002ebc:	b292      	uxth	r2, r2
 8002ebe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002ec2:	bf00      	nop
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f6      	beq.n	8002ec4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ee8:	b292      	uxth	r2, r2
 8002eea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	77fb      	strb	r3, [r7, #31]
 8002ef2:	e00f      	b.n	8002f14 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002ef4:	7ffb      	ldrb	r3, [r7, #31]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	4611      	mov	r1, r2
 8002efc:	7ffa      	ldrb	r2, [r7, #31]
 8002efe:	0092      	lsls	r2, r2, #2
 8002f00:	440a      	add	r2, r1
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	3320      	adds	r3, #32
 8002f06:	443b      	add	r3, r7
 8002f08:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002f0c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002f0e:	7ffb      	ldrb	r3, [r7, #31]
 8002f10:	3301      	adds	r3, #1
 8002f12:	77fb      	strb	r3, [r7, #31]
 8002f14:	7ffb      	ldrb	r3, [r7, #31]
 8002f16:	2b07      	cmp	r3, #7
 8002f18:	d9ec      	bls.n	8002ef4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0208 	orr.w	r2, r2, #8
 8002f2c:	b292      	uxth	r2, r2
 8002f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f44:	b292      	uxth	r2, r2
 8002f46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0204 	orr.w	r2, r2, #4
 8002f5c:	b292      	uxth	r2, r2
 8002f5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f007 fa6e 	bl	800a444 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f68:	e026      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00f      	beq.n	8002f94 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f86:	b292      	uxth	r2, r2
 8002f88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f007 fa2c 	bl	800a3ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002f92:	e011      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fb0:	b292      	uxth	r2, r2
 8002fb2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002fb6:	bf00      	nop
  }
}
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_PCD_SetAddress+0x1a>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e013      	b.n	8003000 <HAL_PCD_SetAddress+0x42>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f005 fb15 	bl	8008620 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	4608      	mov	r0, r1
 8003012:	4611      	mov	r1, r2
 8003014:	461a      	mov	r2, r3
 8003016:	4603      	mov	r3, r0
 8003018:	70fb      	strb	r3, [r7, #3]
 800301a:	460b      	mov	r3, r1
 800301c:	803b      	strh	r3, [r7, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003026:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800302a:	2b00      	cmp	r3, #0
 800302c:	da0e      	bge.n	800304c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	705a      	strb	r2, [r3, #1]
 800304a:	e00e      	b.n	800306a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	f003 0207 	and.w	r2, r3, #7
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	b2da      	uxtb	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003076:	883a      	ldrh	r2, [r7, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	78ba      	ldrb	r2, [r7, #2]
 8003080:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003082:	78bb      	ldrb	r3, [r7, #2]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d102      	bne.n	800308e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_PCD_EP_Open+0x94>
 8003098:	2302      	movs	r3, #2
 800309a:	e00e      	b.n	80030ba <HAL_PCD_EP_Open+0xb2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68f9      	ldr	r1, [r7, #12]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 f85e 	bl	800616c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80030b8:	7afb      	ldrb	r3, [r7, #11]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	460b      	mov	r3, r1
 80030cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	da0e      	bge.n	80030f4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	705a      	strb	r2, [r3, #1]
 80030f2:	e00e      	b.n	8003112 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	f003 0207 	and.w	r2, r3, #7
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	4413      	add	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	b2da      	uxtb	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_PCD_EP_Close+0x6a>
 8003128:	2302      	movs	r3, #2
 800312a:	e00e      	b.n	800314a <HAL_PCD_EP_Close+0x88>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68f9      	ldr	r1, [r7, #12]
 800313a:	4618      	mov	r0, r3
 800313c:	f003 fbd6 	bl	80068ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b086      	sub	sp, #24
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	603b      	str	r3, [r7, #0]
 800315e:	460b      	mov	r3, r1
 8003160:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003162:	7afb      	ldrb	r3, [r7, #11]
 8003164:	f003 0207 	and.w	r2, r3, #7
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2200      	movs	r2, #0
 800318a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2200      	movs	r2, #0
 8003190:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003192:	7afb      	ldrb	r3, [r7, #11]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	b2da      	uxtb	r2, r3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6979      	ldr	r1, [r7, #20]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f003 fd8d 	bl	8006cc4 <USB_EPStartXfer>

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	f003 0207 	and.w	r2, r3, #7
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	460b      	mov	r3, r1
 80031f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f2:	7afb      	ldrb	r3, [r7, #11]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2200      	movs	r2, #0
 8003226:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2201      	movs	r2, #1
 800322c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800322e:	7afb      	ldrb	r3, [r7, #11]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	b2da      	uxtb	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6979      	ldr	r1, [r7, #20]
 8003240:	4618      	mov	r0, r3
 8003242:	f003 fd3f 	bl	8006cc4 <USB_EPStartXfer>

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	f003 0207 	and.w	r2, r3, #7
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	429a      	cmp	r2, r3
 8003268:	d901      	bls.n	800326e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e04c      	b.n	8003308 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800326e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003272:	2b00      	cmp	r3, #0
 8003274:	da0e      	bge.n	8003294 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	705a      	strb	r2, [r3, #1]
 8003292:	e00c      	b.n	80032ae <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	4413      	add	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_PCD_EP_SetStall+0x7e>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e01c      	b.n	8003308 <HAL_PCD_EP_SetStall+0xb8>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68f9      	ldr	r1, [r7, #12]
 80032dc:	4618      	mov	r0, r3
 80032de:	f005 f8a2 	bl	8008426 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d108      	bne.n	80032fe <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 80032f6:	4619      	mov	r1, r3
 80032f8:	4610      	mov	r0, r2
 80032fa:	f005 f9c7 	bl	800868c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	f003 020f 	and.w	r2, r3, #15
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	429a      	cmp	r2, r3
 8003328:	d901      	bls.n	800332e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e040      	b.n	80033b0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800332e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003332:	2b00      	cmp	r3, #0
 8003334:	da0e      	bge.n	8003354 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003336:	78fb      	ldrb	r3, [r7, #3]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	705a      	strb	r2, [r3, #1]
 8003352:	e00e      	b.n	8003372 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	f003 0207 	and.w	r2, r3, #7
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	4413      	add	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	b2da      	uxtb	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_PCD_EP_ClrStall+0x82>
 800338e:	2302      	movs	r3, #2
 8003390:	e00e      	b.n	80033b0 <HAL_PCD_EP_ClrStall+0xa0>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68f9      	ldr	r1, [r7, #12]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f005 f890 	bl	80084c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b096      	sub	sp, #88	@ 0x58
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033c0:	e3be      	b.n	8003b40 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033ca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80033ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80033dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 8178 	bne.w	80036d6 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80033e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d151      	bne.n	8003496 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80033fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003402:	81fb      	strh	r3, [r7, #14]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	89fb      	ldrh	r3, [r7, #14]
 800340a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800340e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003412:	b29b      	uxth	r3, r3
 8003414:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3328      	adds	r3, #40	@ 0x28
 800341a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003424:	b29b      	uxth	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	3302      	adds	r3, #2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003446:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	441a      	add	r2, r3
 8003452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003454:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003456:	2100      	movs	r1, #0
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f006 ffac 	bl	800a3b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 836a 	beq.w	8003b40 <PCD_EP_ISR_Handler+0x788>
 800346c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f040 8365 	bne.w	8003b40 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003482:	b2da      	uxtb	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003494:	e354      	b.n	8003b40 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800349c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80034a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d034      	beq.n	800351e <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034bc:	b29b      	uxth	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	3306      	adds	r3, #6
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034de:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 80034ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80034ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f005 f91a 	bl	800872c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29a      	uxth	r2, r3
 8003500:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003504:	4013      	ands	r3, r2
 8003506:	823b      	strh	r3, [r7, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	8a3a      	ldrh	r2, [r7, #16]
 800350e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003512:	b292      	uxth	r2, r2
 8003514:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f006 ff20 	bl	800a35c <HAL_PCD_SetupStageCallback>
 800351c:	e310      	b.n	8003b40 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800351e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003522:	2b00      	cmp	r3, #0
 8003524:	f280 830c 	bge.w	8003b40 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29a      	uxth	r2, r3
 8003530:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003534:	4013      	ands	r3, r2
 8003536:	83fb      	strh	r3, [r7, #30]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	8bfa      	ldrh	r2, [r7, #30]
 800353e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003542:	b292      	uxth	r2, r2
 8003544:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800354e:	b29b      	uxth	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4413      	add	r3, r2
 800355a:	3306      	adds	r3, #6
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800356e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003570:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d019      	beq.n	80035ae <PCD_EP_ISR_Handler+0x1f6>
 800357a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d015      	beq.n	80035ae <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003588:	6959      	ldr	r1, [r3, #20]
 800358a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800358c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800358e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003590:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003592:	b29b      	uxth	r3, r3
 8003594:	f005 f8ca 	bl	800872c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359a:	695a      	ldr	r2, [r3, #20]
 800359c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	441a      	add	r2, r3
 80035a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80035a6:	2100      	movs	r1, #0
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f006 fee9 	bl	800a380 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80035b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80035bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f040 82bd 	bne.w	8003b40 <PCD_EP_ISR_Handler+0x788>
 80035c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80035ca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80035ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035d2:	f000 82b5 	beq.w	8003b40 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	4413      	add	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003600:	b29a      	uxth	r2, r3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	801a      	strh	r2, [r3, #0]
 8003606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b3e      	cmp	r3, #62	@ 0x3e
 800360c:	d91d      	bls.n	800364a <PCD_EP_ISR_Handler+0x292>
 800360e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	647b      	str	r3, [r7, #68]	@ 0x44
 8003616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	2b00      	cmp	r3, #0
 8003620:	d102      	bne.n	8003628 <PCD_EP_ISR_Handler+0x270>
 8003622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003624:	3b01      	subs	r3, #1
 8003626:	647b      	str	r3, [r7, #68]	@ 0x44
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29a      	uxth	r2, r3
 800362e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003630:	b29b      	uxth	r3, r3
 8003632:	029b      	lsls	r3, r3, #10
 8003634:	b29b      	uxth	r3, r3
 8003636:	4313      	orrs	r3, r2
 8003638:	b29b      	uxth	r3, r3
 800363a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800363e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003642:	b29a      	uxth	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	801a      	strh	r2, [r3, #0]
 8003648:	e026      	b.n	8003698 <PCD_EP_ISR_Handler+0x2e0>
 800364a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10a      	bne.n	8003668 <PCD_EP_ISR_Handler+0x2b0>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800365c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003660:	b29a      	uxth	r2, r3
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	e017      	b.n	8003698 <PCD_EP_ISR_Handler+0x2e0>
 8003668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <PCD_EP_ISR_Handler+0x2ca>
 800367c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800367e:	3301      	adds	r3, #1
 8003680:	647b      	str	r3, [r7, #68]	@ 0x44
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b29a      	uxth	r2, r3
 8003688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800368a:	b29b      	uxth	r3, r3
 800368c:	029b      	lsls	r3, r3, #10
 800368e:	b29b      	uxth	r3, r3
 8003690:	4313      	orrs	r3, r2
 8003692:	b29a      	uxth	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a8:	827b      	strh	r3, [r7, #18]
 80036aa:	8a7b      	ldrh	r3, [r7, #18]
 80036ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80036b0:	827b      	strh	r3, [r7, #18]
 80036b2:	8a7b      	ldrh	r3, [r7, #18]
 80036b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80036b8:	827b      	strh	r3, [r7, #18]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	8a7b      	ldrh	r3, [r7, #18]
 80036c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	8013      	strh	r3, [r2, #0]
 80036d4:	e234      	b.n	8003b40 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036ea:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f280 80fc 	bge.w	80038ec <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	b29a      	uxth	r2, r3
 8003706:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800370a:	4013      	ands	r3, r2
 800370c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003722:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003726:	b292      	uxth	r2, r2
 8003728:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800372a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003742:	7b1b      	ldrb	r3, [r3, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d125      	bne.n	8003794 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003750:	b29b      	uxth	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	3306      	adds	r3, #6
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003770:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003774:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8092 	beq.w	80038a2 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003784:	6959      	ldr	r1, [r3, #20]
 8003786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003788:	88da      	ldrh	r2, [r3, #6]
 800378a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800378e:	f004 ffcd 	bl	800872c <USB_ReadPMA>
 8003792:	e086      	b.n	80038a2 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003796:	78db      	ldrb	r3, [r3, #3]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d10a      	bne.n	80037b2 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800379c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037a0:	461a      	mov	r2, r3
 80037a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f9d9 	bl	8003b5c <HAL_PCD_EP_DB_Receive>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80037b0:	e077      	b.n	80038a2 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037cc:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	441a      	add	r2, r3
 80037de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80037e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	b29b      	uxth	r3, r3
 8003808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d024      	beq.n	800385a <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003818:	b29b      	uxth	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	3302      	adds	r3, #2
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003838:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800383c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003840:	2b00      	cmp	r3, #0
 8003842:	d02e      	beq.n	80038a2 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384a:	6959      	ldr	r1, [r3, #20]
 800384c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384e:	891a      	ldrh	r2, [r3, #8]
 8003850:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003854:	f004 ff6a 	bl	800872c <USB_ReadPMA>
 8003858:	e023      	b.n	80038a2 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003862:	b29b      	uxth	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	3306      	adds	r3, #6
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003882:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003886:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003894:	6959      	ldr	r1, [r3, #20]
 8003896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003898:	895a      	ldrh	r2, [r3, #10]
 800389a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800389e:	f004 ff45 	bl	800872c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80038a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038aa:	441a      	add	r2, r3
 80038ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80038b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038b8:	441a      	add	r2, r3
 80038ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038bc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <PCD_EP_ISR_Handler+0x51a>
 80038c6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80038ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d206      	bcs.n	80038e0 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80038d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	4619      	mov	r1, r3
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f006 fd51 	bl	800a380 <HAL_PCD_DataOutStageCallback>
 80038de:	e005      	b.n	80038ec <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038e6:	4618      	mov	r0, r3
 80038e8:	f003 f9ec 	bl	8006cc4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80038ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80038f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8123 	beq.w	8003b40 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 80038fa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4413      	add	r3, r2
 800390c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	b29b      	uxth	r3, r3
 8003920:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003928:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	441a      	add	r2, r3
 800393a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800393e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003946:	b29b      	uxth	r3, r3
 8003948:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800394a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394c:	78db      	ldrb	r3, [r3, #3]
 800394e:	2b01      	cmp	r3, #1
 8003950:	f040 80a2 	bne.w	8003a98 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8003954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003956:	2200      	movs	r2, #0
 8003958:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800395a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395c:	7b1b      	ldrb	r3, [r3, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8093 	beq.w	8003a8a <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003964:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	d046      	beq.n	80039fe <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003972:	785b      	ldrb	r3, [r3, #1]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d126      	bne.n	80039c6 <PCD_EP_ISR_Handler+0x60e>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	627b      	str	r3, [r7, #36]	@ 0x24
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003986:	b29b      	uxth	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	4413      	add	r3, r2
 800398e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	011a      	lsls	r2, r3, #4
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	4413      	add	r3, r2
 800399a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800399e:	623b      	str	r3, [r7, #32]
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	801a      	strh	r2, [r3, #0]
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039be:	b29a      	uxth	r2, r3
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	801a      	strh	r2, [r3, #0]
 80039c4:	e061      	b.n	8003a8a <PCD_EP_ISR_Handler+0x6d2>
 80039c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c8:	785b      	ldrb	r3, [r3, #1]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d15d      	bne.n	8003a8a <PCD_EP_ISR_Handler+0x6d2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039dc:	b29b      	uxth	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e2:	4413      	add	r3, r2
 80039e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	011a      	lsls	r2, r3, #4
 80039ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ee:	4413      	add	r3, r2
 80039f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80039f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f8:	2200      	movs	r2, #0
 80039fa:	801a      	strh	r2, [r3, #0]
 80039fc:	e045      	b.n	8003a8a <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a06:	785b      	ldrb	r3, [r3, #1]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d126      	bne.n	8003a5a <PCD_EP_ISR_Handler+0x6a2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a20:	4413      	add	r3, r2
 8003a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	011a      	lsls	r2, r3, #4
 8003a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a32:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a42:	801a      	strh	r2, [r3, #0]
 8003a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a56:	801a      	strh	r2, [r3, #0]
 8003a58:	e017      	b.n	8003a8a <PCD_EP_ISR_Handler+0x6d2>
 8003a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a5c:	785b      	ldrb	r3, [r3, #1]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d113      	bne.n	8003a8a <PCD_EP_ISR_Handler+0x6d2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a70:	4413      	add	r3, r2
 8003a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	011a      	lsls	r2, r3, #4
 8003a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a86:	2200      	movs	r2, #0
 8003a88:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f006 fc90 	bl	800a3b6 <HAL_PCD_DataInStageCallback>
 8003a96:	e053      	b.n	8003b40 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003a98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d146      	bne.n	8003b32 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3302      	adds	r3, #2
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003acc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d907      	bls.n	8003aec <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8003adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ade:	699a      	ldr	r2, [r3, #24]
 8003ae0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ae4:	1ad2      	subs	r2, r2, r3
 8003ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ae8:	619a      	str	r2, [r3, #24]
 8003aea:	e002      	b.n	8003af2 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aee:	2200      	movs	r2, #0
 8003af0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	4619      	mov	r1, r3
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f006 fc58 	bl	800a3b6 <HAL_PCD_DataInStageCallback>
 8003b06:	e01b      	b.n	8003b40 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003b10:	441a      	add	r2, r3
 8003b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b14:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003b1e:	441a      	add	r2, r3
 8003b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b22:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f003 f8ca 	bl	8006cc4 <USB_EPStartXfer>
 8003b30:	e006      	b.n	8003b40 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b32:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b36:	461a      	mov	r2, r3
 8003b38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f91b 	bl	8003d76 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	b21b      	sxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f6ff ac38 	blt.w	80033c2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3758      	adds	r7, #88	@ 0x58
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	4613      	mov	r3, r2
 8003b68:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d07e      	beq.n	8003c72 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	3302      	adds	r3, #2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b9c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	8b7b      	ldrh	r3, [r7, #26]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d306      	bcc.n	8003bb6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	699a      	ldr	r2, [r3, #24]
 8003bac:	8b7b      	ldrh	r3, [r7, #26]
 8003bae:	1ad2      	subs	r2, r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	619a      	str	r2, [r3, #24]
 8003bb4:	e002      	b.n	8003bbc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d123      	bne.n	8003c0c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bde:	833b      	strh	r3, [r7, #24]
 8003be0:	8b3b      	ldrh	r3, [r7, #24]
 8003be2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003be6:	833b      	strh	r3, [r7, #24]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	461a      	mov	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	441a      	add	r2, r3
 8003bf6:	8b3b      	ldrh	r3, [r7, #24]
 8003bf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01f      	beq.n	8003c56 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c30:	82fb      	strh	r3, [r7, #22]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	441a      	add	r2, r3
 8003c40:	8afb      	ldrh	r3, [r7, #22]
 8003c42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c56:	8b7b      	ldrh	r3, [r7, #26]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8087 	beq.w	8003d6c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	6959      	ldr	r1, [r3, #20]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	891a      	ldrh	r2, [r3, #8]
 8003c6a:	8b7b      	ldrh	r3, [r7, #26]
 8003c6c:	f004 fd5e 	bl	800872c <USB_ReadPMA>
 8003c70:	e07c      	b.n	8003d6c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4413      	add	r3, r2
 8003c86:	3306      	adds	r3, #6
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c9a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	699a      	ldr	r2, [r3, #24]
 8003ca0:	8b7b      	ldrh	r3, [r7, #26]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d306      	bcc.n	8003cb4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	8b7b      	ldrh	r3, [r7, #26]
 8003cac:	1ad2      	subs	r2, r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	619a      	str	r2, [r3, #24]
 8003cb2:	e002      	b.n	8003cba <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d123      	bne.n	8003d0a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cdc:	83fb      	strh	r3, [r7, #30]
 8003cde:	8bfb      	ldrh	r3, [r7, #30]
 8003ce0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ce4:	83fb      	strh	r3, [r7, #30]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	441a      	add	r2, r3
 8003cf4:	8bfb      	ldrh	r3, [r7, #30]
 8003cf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d11f      	bne.n	8003d54 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2e:	83bb      	strh	r3, [r7, #28]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	441a      	add	r2, r3
 8003d3e:	8bbb      	ldrh	r3, [r7, #28]
 8003d40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d54:	8b7b      	ldrh	r3, [r7, #26]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	6959      	ldr	r1, [r3, #20]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	895a      	ldrh	r2, [r3, #10]
 8003d66:	8b7b      	ldrh	r3, [r7, #26]
 8003d68:	f004 fce0 	bl	800872c <USB_ReadPMA>
    }
  }

  return count;
 8003d6c:	8b7b      	ldrh	r3, [r7, #26]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b0a4      	sub	sp, #144	@ 0x90
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	4613      	mov	r3, r2
 8003d82:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 81dd 	beq.w	800414a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	3302      	adds	r3, #2
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d907      	bls.n	8003dd8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	699a      	ldr	r2, [r3, #24]
 8003dcc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003dd0:	1ad2      	subs	r2, r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	619a      	str	r2, [r3, #24]
 8003dd6:	e002      	b.n	8003dde <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f040 80b9 	bne.w	8003f5a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	785b      	ldrb	r3, [r3, #1]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d126      	bne.n	8003e3e <HAL_PCD_EP_DB_Transmit+0xc8>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	461a      	mov	r2, r3
 8003e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e04:	4413      	add	r3, r2
 8003e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	011a      	lsls	r2, r3, #4
 8003e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e10:	4413      	add	r3, r2
 8003e12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e26:	801a      	strh	r2, [r3, #0]
 8003e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3a:	801a      	strh	r2, [r3, #0]
 8003e3c:	e01a      	b.n	8003e74 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	785b      	ldrb	r3, [r3, #1]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d116      	bne.n	8003e74 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5a:	4413      	add	r3, r2
 8003e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	011a      	lsls	r2, r3, #4
 8003e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e66:	4413      	add	r3, r2
 8003e68:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e70:	2200      	movs	r2, #0
 8003e72:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	785b      	ldrb	r3, [r3, #1]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d126      	bne.n	8003ed0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	4413      	add	r3, r2
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	011a      	lsls	r2, r3, #4
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	801a      	strh	r2, [r3, #0]
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	801a      	strh	r2, [r3, #0]
 8003ece:	e017      	b.n	8003f00 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	785b      	ldrb	r3, [r3, #1]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d113      	bne.n	8003f00 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	4413      	add	r3, r2
 8003ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	011a      	lsls	r2, r3, #4
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ef8:	623b      	str	r3, [r7, #32]
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	2200      	movs	r2, #0
 8003efe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	4619      	mov	r1, r3
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f006 fa55 	bl	800a3b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 82fc 	beq.w	8004510 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f32:	82fb      	strh	r3, [r7, #22]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	441a      	add	r2, r3
 8003f42:	8afb      	ldrh	r3, [r7, #22]
 8003f44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	8013      	strh	r3, [r2, #0]
 8003f58:	e2da      	b.n	8004510 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d021      	beq.n	8003fa8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f7e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	441a      	add	r2, r3
 8003f90:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003f94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	f040 82ae 	bne.w	8004510 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	695a      	ldr	r2, [r3, #20]
 8003fb8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003fbc:	441a      	add	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	69da      	ldr	r2, [r3, #28]
 8003fc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003fca:	441a      	add	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	6a1a      	ldr	r2, [r3, #32]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d30b      	bcc.n	8003ff4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	6a1a      	ldr	r2, [r3, #32]
 8003fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fec:	1ad2      	subs	r2, r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	621a      	str	r2, [r3, #32]
 8003ff2:	e017      	b.n	8004024 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d108      	bne.n	800400e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003ffc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004000:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800400c:	e00a      	b.n	8004024 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2200      	movs	r2, #0
 8004022:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d165      	bne.n	80040f8 <HAL_PCD_EP_DB_Transmit+0x382>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800403a:	b29b      	uxth	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004040:	4413      	add	r3, r2
 8004042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	011a      	lsls	r2, r3, #4
 800404a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404c:	4413      	add	r3, r2
 800404e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004052:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800405e:	b29a      	uxth	r2, r3
 8004060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004062:	801a      	strh	r2, [r3, #0]
 8004064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004068:	2b3e      	cmp	r3, #62	@ 0x3e
 800406a:	d91d      	bls.n	80040a8 <HAL_PCD_EP_DB_Transmit+0x332>
 800406c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004074:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <HAL_PCD_EP_DB_Transmit+0x310>
 8004080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004082:	3b01      	subs	r3, #1
 8004084:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	b29a      	uxth	r2, r3
 800408c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800408e:	b29b      	uxth	r3, r3
 8004090:	029b      	lsls	r3, r3, #10
 8004092:	b29b      	uxth	r3, r3
 8004094:	4313      	orrs	r3, r2
 8004096:	b29b      	uxth	r3, r3
 8004098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800409c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a4:	801a      	strh	r2, [r3, #0]
 80040a6:	e044      	b.n	8004132 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <HAL_PCD_EP_DB_Transmit+0x350>
 80040b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040be:	b29a      	uxth	r2, r3
 80040c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c2:	801a      	strh	r2, [r3, #0]
 80040c4:	e035      	b.n	8004132 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ca:	085b      	lsrs	r3, r3, #1
 80040cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <HAL_PCD_EP_DB_Transmit+0x36a>
 80040da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040dc:	3301      	adds	r3, #1
 80040de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	029b      	lsls	r3, r3, #10
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	4313      	orrs	r3, r2
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f4:	801a      	strh	r2, [r3, #0]
 80040f6:	e01c      	b.n	8004132 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	785b      	ldrb	r3, [r3, #1]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d118      	bne.n	8004132 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	647b      	str	r3, [r7, #68]	@ 0x44
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800410e:	b29b      	uxth	r3, r3
 8004110:	461a      	mov	r2, r3
 8004112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004114:	4413      	add	r3, r2
 8004116:	647b      	str	r3, [r7, #68]	@ 0x44
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	011a      	lsls	r2, r3, #4
 800411e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004120:	4413      	add	r3, r2
 8004122:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004126:	643b      	str	r3, [r7, #64]	@ 0x40
 8004128:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800412c:	b29a      	uxth	r2, r3
 800412e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004130:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	6959      	ldr	r1, [r3, #20]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	891a      	ldrh	r2, [r3, #8]
 800413e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004142:	b29b      	uxth	r3, r3
 8004144:	f004 faad 	bl	80086a2 <USB_WritePMA>
 8004148:	e1e2      	b.n	8004510 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004152:	b29b      	uxth	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	3306      	adds	r3, #6
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004172:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800417e:	429a      	cmp	r2, r3
 8004180:	d307      	bcc.n	8004192 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800418a:	1ad2      	subs	r2, r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	619a      	str	r2, [r3, #24]
 8004190:	e002      	b.n	8004198 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2200      	movs	r2, #0
 8004196:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	f040 80c0 	bne.w	8004322 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d126      	bne.n	80041f8 <HAL_PCD_EP_DB_Transmit+0x482>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041be:	4413      	add	r3, r2
 80041c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	011a      	lsls	r2, r3, #4
 80041c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041ca:	4413      	add	r3, r2
 80041cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041dc:	b29a      	uxth	r2, r3
 80041de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041e0:	801a      	strh	r2, [r3, #0]
 80041e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041f4:	801a      	strh	r2, [r3, #0]
 80041f6:	e01a      	b.n	800422e <HAL_PCD_EP_DB_Transmit+0x4b8>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	785b      	ldrb	r3, [r3, #1]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d116      	bne.n	800422e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	667b      	str	r3, [r7, #100]	@ 0x64
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800420e:	b29b      	uxth	r3, r3
 8004210:	461a      	mov	r2, r3
 8004212:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004214:	4413      	add	r3, r2
 8004216:	667b      	str	r3, [r7, #100]	@ 0x64
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	011a      	lsls	r2, r3, #4
 800421e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004220:	4413      	add	r3, r2
 8004222:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004226:	663b      	str	r3, [r7, #96]	@ 0x60
 8004228:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800422a:	2200      	movs	r2, #0
 800422c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	677b      	str	r3, [r7, #116]	@ 0x74
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	785b      	ldrb	r3, [r3, #1]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d12b      	bne.n	8004294 <HAL_PCD_EP_DB_Transmit+0x51e>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800424a:	b29b      	uxth	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004250:	4413      	add	r3, r2
 8004252:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	011a      	lsls	r2, r3, #4
 800425a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800425c:	4413      	add	r3, r2
 800425e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004262:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004266:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	b29b      	uxth	r3, r3
 800426e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004272:	b29a      	uxth	r2, r3
 8004274:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004278:	801a      	strh	r2, [r3, #0]
 800427a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	b29b      	uxth	r3, r3
 8004282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800428a:	b29a      	uxth	r2, r3
 800428c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004290:	801a      	strh	r2, [r3, #0]
 8004292:	e017      	b.n	80042c4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	785b      	ldrb	r3, [r3, #1]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d113      	bne.n	80042c4 <HAL_PCD_EP_DB_Transmit+0x54e>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042aa:	4413      	add	r3, r2
 80042ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	011a      	lsls	r2, r3, #4
 80042b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042b6:	4413      	add	r3, r2
 80042b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80042be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042c0:	2200      	movs	r2, #0
 80042c2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	4619      	mov	r1, r3
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f006 f873 	bl	800a3b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042d0:	88fb      	ldrh	r3, [r7, #6]
 80042d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f040 811a 	bne.w	8004510 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	441a      	add	r2, r3
 8004308:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800430c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004310:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004314:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800431c:	b29b      	uxth	r3, r3
 800431e:	8013      	strh	r3, [r2, #0]
 8004320:	e0f6      	b.n	8004510 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d121      	bne.n	8004370 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004346:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	441a      	add	r2, r3
 8004358:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800435c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004360:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004364:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800436c:	b29b      	uxth	r3, r3
 800436e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004376:	2b01      	cmp	r3, #1
 8004378:	f040 80ca 	bne.w	8004510 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004384:	441a      	add	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004392:	441a      	add	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	6a1a      	ldr	r2, [r3, #32]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d30b      	bcc.n	80043bc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	6a1a      	ldr	r2, [r3, #32]
 80043b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043b4:	1ad2      	subs	r2, r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	621a      	str	r2, [r3, #32]
 80043ba:	e017      	b.n	80043ec <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d108      	bne.n	80043d6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80043c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80043d4:	e00a      	b.n	80043ec <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2200      	movs	r2, #0
 80043e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d165      	bne.n	80044c6 <HAL_PCD_EP_DB_Transmit+0x750>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004408:	b29b      	uxth	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800440e:	4413      	add	r3, r2
 8004410:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	011a      	lsls	r2, r3, #4
 8004418:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800441a:	4413      	add	r3, r2
 800441c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004420:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004422:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800442c:	b29a      	uxth	r2, r3
 800442e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004430:	801a      	strh	r2, [r3, #0]
 8004432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004436:	2b3e      	cmp	r3, #62	@ 0x3e
 8004438:	d91d      	bls.n	8004476 <HAL_PCD_EP_DB_Transmit+0x700>
 800443a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004442:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <HAL_PCD_EP_DB_Transmit+0x6de>
 800444e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004450:	3b01      	subs	r3, #1
 8004452:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004454:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	b29a      	uxth	r2, r3
 800445a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800445c:	b29b      	uxth	r3, r3
 800445e:	029b      	lsls	r3, r3, #10
 8004460:	b29b      	uxth	r3, r3
 8004462:	4313      	orrs	r3, r2
 8004464:	b29b      	uxth	r3, r3
 8004466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800446a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800446e:	b29a      	uxth	r2, r3
 8004470:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004472:	801a      	strh	r2, [r3, #0]
 8004474:	e041      	b.n	80044fa <HAL_PCD_EP_DB_Transmit+0x784>
 8004476:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <HAL_PCD_EP_DB_Transmit+0x71e>
 800447e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29b      	uxth	r3, r3
 8004484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800448c:	b29a      	uxth	r2, r3
 800448e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004490:	801a      	strh	r2, [r3, #0]
 8004492:	e032      	b.n	80044fa <HAL_PCD_EP_DB_Transmit+0x784>
 8004494:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800449c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_PCD_EP_DB_Transmit+0x738>
 80044a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044aa:	3301      	adds	r3, #1
 80044ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	029b      	lsls	r3, r3, #10
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	4313      	orrs	r3, r2
 80044be:	b29a      	uxth	r2, r3
 80044c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044c2:	801a      	strh	r2, [r3, #0]
 80044c4:	e019      	b.n	80044fa <HAL_PCD_EP_DB_Transmit+0x784>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	785b      	ldrb	r3, [r3, #1]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d115      	bne.n	80044fa <HAL_PCD_EP_DB_Transmit+0x784>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	461a      	mov	r2, r3
 80044da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044dc:	4413      	add	r3, r2
 80044de:	657b      	str	r3, [r7, #84]	@ 0x54
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	011a      	lsls	r2, r3, #4
 80044e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044e8:	4413      	add	r3, r2
 80044ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80044ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80044f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044f8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	6959      	ldr	r1, [r3, #20]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	895a      	ldrh	r2, [r3, #10]
 8004506:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800450a:	b29b      	uxth	r3, r3
 800450c:	f004 f8c9 	bl	80086a2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	b29b      	uxth	r3, r3
 8004522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004526:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800452a:	82bb      	strh	r3, [r7, #20]
 800452c:	8abb      	ldrh	r3, [r7, #20]
 800452e:	f083 0310 	eor.w	r3, r3, #16
 8004532:	82bb      	strh	r3, [r7, #20]
 8004534:	8abb      	ldrh	r3, [r7, #20]
 8004536:	f083 0320 	eor.w	r3, r3, #32
 800453a:	82bb      	strh	r3, [r7, #20]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	441a      	add	r2, r3
 800454a:	8abb      	ldrh	r3, [r7, #20]
 800454c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004550:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800455c:	b29b      	uxth	r3, r3
 800455e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3790      	adds	r7, #144	@ 0x90
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800456a:	b480      	push	{r7}
 800456c:	b087      	sub	sp, #28
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	607b      	str	r3, [r7, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	817b      	strh	r3, [r7, #10]
 8004578:	4613      	mov	r3, r2
 800457a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800457c:	897b      	ldrh	r3, [r7, #10]
 800457e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00b      	beq.n	80045a0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004588:	897b      	ldrh	r3, [r7, #10]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	e009      	b.n	80045b4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045a0:	897a      	ldrh	r2, [r7, #10]
 80045a2:	4613      	mov	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4413      	add	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80045b4:	893b      	ldrh	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d107      	bne.n	80045ca <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2200      	movs	r2, #0
 80045be:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	80da      	strh	r2, [r3, #6]
 80045c8:	e00b      	b.n	80045e2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2201      	movs	r2, #1
 80045ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	0c1b      	lsrs	r3, r3, #16
 80045dc:	b29a      	uxth	r2, r3
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	371c      	adds	r7, #28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr
	...

080045f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e272      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8087 	beq.w	800471e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004610:	4b92      	ldr	r3, [pc, #584]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 030c 	and.w	r3, r3, #12
 8004618:	2b04      	cmp	r3, #4
 800461a:	d00c      	beq.n	8004636 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800461c:	4b8f      	ldr	r3, [pc, #572]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 030c 	and.w	r3, r3, #12
 8004624:	2b08      	cmp	r3, #8
 8004626:	d112      	bne.n	800464e <HAL_RCC_OscConfig+0x5e>
 8004628:	4b8c      	ldr	r3, [pc, #560]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004634:	d10b      	bne.n	800464e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004636:	4b89      	ldr	r3, [pc, #548]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d06c      	beq.n	800471c <HAL_RCC_OscConfig+0x12c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d168      	bne.n	800471c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e24c      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004656:	d106      	bne.n	8004666 <HAL_RCC_OscConfig+0x76>
 8004658:	4b80      	ldr	r3, [pc, #512]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a7f      	ldr	r2, [pc, #508]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 800465e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	e02e      	b.n	80046c4 <HAL_RCC_OscConfig+0xd4>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10c      	bne.n	8004688 <HAL_RCC_OscConfig+0x98>
 800466e:	4b7b      	ldr	r3, [pc, #492]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a7a      	ldr	r2, [pc, #488]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	4b78      	ldr	r3, [pc, #480]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a77      	ldr	r2, [pc, #476]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004680:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e01d      	b.n	80046c4 <HAL_RCC_OscConfig+0xd4>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004690:	d10c      	bne.n	80046ac <HAL_RCC_OscConfig+0xbc>
 8004692:	4b72      	ldr	r3, [pc, #456]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a71      	ldr	r2, [pc, #452]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004698:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	4b6f      	ldr	r3, [pc, #444]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a6e      	ldr	r2, [pc, #440]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80046a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e00b      	b.n	80046c4 <HAL_RCC_OscConfig+0xd4>
 80046ac:	4b6b      	ldr	r3, [pc, #428]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a6a      	ldr	r2, [pc, #424]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	4b68      	ldr	r3, [pc, #416]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a67      	ldr	r2, [pc, #412]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80046be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d013      	beq.n	80046f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fd f80e 	bl	80016ec <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d4:	f7fd f80a 	bl	80016ec <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	@ 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e200      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	4b5d      	ldr	r3, [pc, #372]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0xe4>
 80046f2:	e014      	b.n	800471e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fc fffa 	bl	80016ec <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046fc:	f7fc fff6 	bl	80016ec <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b64      	cmp	r3, #100	@ 0x64
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e1ec      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470e:	4b53      	ldr	r3, [pc, #332]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x10c>
 800471a:	e000      	b.n	800471e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d063      	beq.n	80047f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800472a:	4b4c      	ldr	r3, [pc, #304]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 030c 	and.w	r3, r3, #12
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00b      	beq.n	800474e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004736:	4b49      	ldr	r3, [pc, #292]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b08      	cmp	r3, #8
 8004740:	d11c      	bne.n	800477c <HAL_RCC_OscConfig+0x18c>
 8004742:	4b46      	ldr	r3, [pc, #280]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d116      	bne.n	800477c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474e:	4b43      	ldr	r3, [pc, #268]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_RCC_OscConfig+0x176>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d001      	beq.n	8004766 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e1c0      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004766:	4b3d      	ldr	r3, [pc, #244]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4939      	ldr	r1, [pc, #228]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004776:	4313      	orrs	r3, r2
 8004778:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477a:	e03a      	b.n	80047f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d020      	beq.n	80047c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004784:	4b36      	ldr	r3, [pc, #216]	@ (8004860 <HAL_RCC_OscConfig+0x270>)
 8004786:	2201      	movs	r2, #1
 8004788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478a:	f7fc ffaf 	bl	80016ec <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004792:	f7fc ffab 	bl	80016ec <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e1a1      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a4:	4b2d      	ldr	r3, [pc, #180]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b0:	4b2a      	ldr	r3, [pc, #168]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4927      	ldr	r1, [pc, #156]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	600b      	str	r3, [r1, #0]
 80047c4:	e015      	b.n	80047f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047c6:	4b26      	ldr	r3, [pc, #152]	@ (8004860 <HAL_RCC_OscConfig+0x270>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7fc ff8e 	bl	80016ec <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d4:	f7fc ff8a 	bl	80016ec <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e180      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e6:	4b1d      	ldr	r3, [pc, #116]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d03a      	beq.n	8004874 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d019      	beq.n	800483a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004806:	4b17      	ldr	r3, [pc, #92]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004808:	2201      	movs	r2, #1
 800480a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480c:	f7fc ff6e 	bl	80016ec <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004814:	f7fc ff6a 	bl	80016ec <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e160      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004826:	4b0d      	ldr	r3, [pc, #52]	@ (800485c <HAL_RCC_OscConfig+0x26c>)
 8004828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004832:	2001      	movs	r0, #1
 8004834:	f000 faba 	bl	8004dac <RCC_Delay>
 8004838:	e01c      	b.n	8004874 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800483a:	4b0a      	ldr	r3, [pc, #40]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004840:	f7fc ff54 	bl	80016ec <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004846:	e00f      	b.n	8004868 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004848:	f7fc ff50 	bl	80016ec <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d908      	bls.n	8004868 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e146      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
 8004860:	42420000 	.word	0x42420000
 8004864:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004868:	4b92      	ldr	r3, [pc, #584]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e9      	bne.n	8004848 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80a6 	beq.w	80049ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004882:	2300      	movs	r3, #0
 8004884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004886:	4b8b      	ldr	r3, [pc, #556]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10d      	bne.n	80048ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	4b88      	ldr	r3, [pc, #544]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	4a87      	ldr	r2, [pc, #540]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800489c:	61d3      	str	r3, [r2, #28]
 800489e:	4b85      	ldr	r3, [pc, #532]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048aa:	2301      	movs	r3, #1
 80048ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ae:	4b82      	ldr	r3, [pc, #520]	@ (8004ab8 <HAL_RCC_OscConfig+0x4c8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d118      	bne.n	80048ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ba:	4b7f      	ldr	r3, [pc, #508]	@ (8004ab8 <HAL_RCC_OscConfig+0x4c8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a7e      	ldr	r2, [pc, #504]	@ (8004ab8 <HAL_RCC_OscConfig+0x4c8>)
 80048c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048c6:	f7fc ff11 	bl	80016ec <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ce:	f7fc ff0d 	bl	80016ec <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b64      	cmp	r3, #100	@ 0x64
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e103      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e0:	4b75      	ldr	r3, [pc, #468]	@ (8004ab8 <HAL_RCC_OscConfig+0x4c8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d106      	bne.n	8004902 <HAL_RCC_OscConfig+0x312>
 80048f4:	4b6f      	ldr	r3, [pc, #444]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	4a6e      	ldr	r2, [pc, #440]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	6213      	str	r3, [r2, #32]
 8004900:	e02d      	b.n	800495e <HAL_RCC_OscConfig+0x36e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10c      	bne.n	8004924 <HAL_RCC_OscConfig+0x334>
 800490a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	4a69      	ldr	r2, [pc, #420]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	6213      	str	r3, [r2, #32]
 8004916:	4b67      	ldr	r3, [pc, #412]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	4a66      	ldr	r2, [pc, #408]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800491c:	f023 0304 	bic.w	r3, r3, #4
 8004920:	6213      	str	r3, [r2, #32]
 8004922:	e01c      	b.n	800495e <HAL_RCC_OscConfig+0x36e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	2b05      	cmp	r3, #5
 800492a:	d10c      	bne.n	8004946 <HAL_RCC_OscConfig+0x356>
 800492c:	4b61      	ldr	r3, [pc, #388]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	4a60      	ldr	r2, [pc, #384]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004932:	f043 0304 	orr.w	r3, r3, #4
 8004936:	6213      	str	r3, [r2, #32]
 8004938:	4b5e      	ldr	r3, [pc, #376]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6213      	str	r3, [r2, #32]
 8004944:	e00b      	b.n	800495e <HAL_RCC_OscConfig+0x36e>
 8004946:	4b5b      	ldr	r3, [pc, #364]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	4a5a      	ldr	r2, [pc, #360]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	6213      	str	r3, [r2, #32]
 8004952:	4b58      	ldr	r3, [pc, #352]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	4a57      	ldr	r2, [pc, #348]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004958:	f023 0304 	bic.w	r3, r3, #4
 800495c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d015      	beq.n	8004992 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004966:	f7fc fec1 	bl	80016ec <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496c:	e00a      	b.n	8004984 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496e:	f7fc febd 	bl	80016ec <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497c:	4293      	cmp	r3, r2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e0b1      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004984:	4b4b      	ldr	r3, [pc, #300]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0ee      	beq.n	800496e <HAL_RCC_OscConfig+0x37e>
 8004990:	e014      	b.n	80049bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004992:	f7fc feab 	bl	80016ec <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004998:	e00a      	b.n	80049b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499a:	f7fc fea7 	bl	80016ec <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e09b      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b0:	4b40      	ldr	r3, [pc, #256]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1ee      	bne.n	800499a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d105      	bne.n	80049ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049c2:	4b3c      	ldr	r3, [pc, #240]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	4a3b      	ldr	r2, [pc, #236]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80049c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 8087 	beq.w	8004ae6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049d8:	4b36      	ldr	r3, [pc, #216]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f003 030c 	and.w	r3, r3, #12
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d061      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d146      	bne.n	8004a7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ec:	4b33      	ldr	r3, [pc, #204]	@ (8004abc <HAL_RCC_OscConfig+0x4cc>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f2:	f7fc fe7b 	bl	80016ec <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049fa:	f7fc fe77 	bl	80016ec <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e06d      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a0c:	4b29      	ldr	r3, [pc, #164]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f0      	bne.n	80049fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a20:	d108      	bne.n	8004a34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a22:	4b24      	ldr	r3, [pc, #144]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	4921      	ldr	r1, [pc, #132]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a34:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a19      	ldr	r1, [r3, #32]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a44:	430b      	orrs	r3, r1
 8004a46:	491b      	ldr	r1, [pc, #108]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004abc <HAL_RCC_OscConfig+0x4cc>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a52:	f7fc fe4b 	bl	80016ec <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5a:	f7fc fe47 	bl	80016ec <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e03d      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a6c:	4b11      	ldr	r3, [pc, #68]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0f0      	beq.n	8004a5a <HAL_RCC_OscConfig+0x46a>
 8004a78:	e035      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7a:	4b10      	ldr	r3, [pc, #64]	@ (8004abc <HAL_RCC_OscConfig+0x4cc>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fc fe34 	bl	80016ec <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a88:	f7fc fe30 	bl	80016ec <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e026      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a9a:	4b06      	ldr	r3, [pc, #24]	@ (8004ab4 <HAL_RCC_OscConfig+0x4c4>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x498>
 8004aa6:	e01e      	b.n	8004ae6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d107      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e019      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40007000 	.word	0x40007000
 8004abc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8004af0 <HAL_RCC_OscConfig+0x500>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d106      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d001      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40021000 	.word	0x40021000

08004af4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0d0      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b08:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d910      	bls.n	8004b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	4b67      	ldr	r3, [pc, #412]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 0207 	bic.w	r2, r3, #7
 8004b1e:	4965      	ldr	r1, [pc, #404]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b26:	4b63      	ldr	r3, [pc, #396]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0b8      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d020      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b50:	4b59      	ldr	r3, [pc, #356]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4a58      	ldr	r2, [pc, #352]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b68:	4b53      	ldr	r3, [pc, #332]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4a52      	ldr	r2, [pc, #328]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004b72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b74:	4b50      	ldr	r3, [pc, #320]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	494d      	ldr	r1, [pc, #308]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d040      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d107      	bne.n	8004baa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b47      	ldr	r3, [pc, #284]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d115      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e07f      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb2:	4b41      	ldr	r3, [pc, #260]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e073      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e06b      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bd2:	4b39      	ldr	r3, [pc, #228]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f023 0203 	bic.w	r2, r3, #3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4936      	ldr	r1, [pc, #216]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004be4:	f7fc fd82 	bl	80016ec <HAL_GetTick>
 8004be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bea:	e00a      	b.n	8004c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bec:	f7fc fd7e 	bl	80016ec <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e053      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c02:	4b2d      	ldr	r3, [pc, #180]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f003 020c 	and.w	r2, r3, #12
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d1eb      	bne.n	8004bec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c14:	4b27      	ldr	r3, [pc, #156]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d210      	bcs.n	8004c44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c22:	4b24      	ldr	r3, [pc, #144]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 0207 	bic.w	r2, r3, #7
 8004c2a:	4922      	ldr	r1, [pc, #136]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	4b20      	ldr	r3, [pc, #128]	@ (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e032      	b.n	8004caa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c50:	4b19      	ldr	r3, [pc, #100]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4916      	ldr	r1, [pc, #88]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c6e:	4b12      	ldr	r3, [pc, #72]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	490e      	ldr	r1, [pc, #56]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c82:	f000 f821 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004c86:	4602      	mov	r2, r0
 8004c88:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	490a      	ldr	r1, [pc, #40]	@ (8004cbc <HAL_RCC_ClockConfig+0x1c8>)
 8004c94:	5ccb      	ldrb	r3, [r1, r3]
 8004c96:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9a:	4a09      	ldr	r2, [pc, #36]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1cc>)
 8004c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c9e:	4b09      	ldr	r3, [pc, #36]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1d0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fc fce0 	bl	8001668 <HAL_InitTick>

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40022000 	.word	0x40022000
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	0800d1d8 	.word	0x0800d1d8
 8004cc0:	20000000 	.word	0x20000000
 8004cc4:	20000004 	.word	0x20000004

08004cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x94>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 030c 	and.w	r3, r3, #12
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d002      	beq.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x30>
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d003      	beq.n	8004cfe <HAL_RCC_GetSysClockFreq+0x36>
 8004cf6:	e027      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cf8:	4b19      	ldr	r3, [pc, #100]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cfa:	613b      	str	r3, [r7, #16]
      break;
 8004cfc:	e027      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	0c9b      	lsrs	r3, r3, #18
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	4a17      	ldr	r2, [pc, #92]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d08:	5cd3      	ldrb	r3, [r2, r3]
 8004d0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d010      	beq.n	8004d38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d16:	4b11      	ldr	r3, [pc, #68]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x94>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	0c5b      	lsrs	r3, r3, #17
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	4a11      	ldr	r2, [pc, #68]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d22:	5cd3      	ldrb	r3, [r2, r3]
 8004d24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a0d      	ldr	r2, [pc, #52]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d2a:	fb03 f202 	mul.w	r2, r3, r2
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e004      	b.n	8004d42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d3c:	fb02 f303 	mul.w	r3, r2, r3
 8004d40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	613b      	str	r3, [r7, #16]
      break;
 8004d46:	e002      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d4a:	613b      	str	r3, [r7, #16]
      break;
 8004d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d4e:	693b      	ldr	r3, [r7, #16]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	371c      	adds	r7, #28
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bc80      	pop	{r7}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	007a1200 	.word	0x007a1200
 8004d64:	0800d1f0 	.word	0x0800d1f0
 8004d68:	0800d200 	.word	0x0800d200
 8004d6c:	003d0900 	.word	0x003d0900

08004d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d74:	4b02      	ldr	r3, [pc, #8]	@ (8004d80 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d76:	681b      	ldr	r3, [r3, #0]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr
 8004d80:	20000000 	.word	0x20000000

08004d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d88:	f7ff fff2 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	4b05      	ldr	r3, [pc, #20]	@ (8004da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	0adb      	lsrs	r3, r3, #11
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	4903      	ldr	r1, [pc, #12]	@ (8004da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d9a:	5ccb      	ldrb	r3, [r1, r3]
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40021000 	.word	0x40021000
 8004da8:	0800d1e8 	.word	0x0800d1e8

08004dac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004db4:	4b0a      	ldr	r3, [pc, #40]	@ (8004de0 <RCC_Delay+0x34>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a0a      	ldr	r2, [pc, #40]	@ (8004de4 <RCC_Delay+0x38>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	0a5b      	lsrs	r3, r3, #9
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	fb02 f303 	mul.w	r3, r2, r3
 8004dc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004dc8:	bf00      	nop
  }
  while (Delay --);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1e5a      	subs	r2, r3, #1
 8004dce:	60fa      	str	r2, [r7, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1f9      	bne.n	8004dc8 <RCC_Delay+0x1c>
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr
 8004de0:	20000000 	.word	0x20000000
 8004de4:	10624dd3 	.word	0x10624dd3

08004de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d07d      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e04:	2300      	movs	r3, #0
 8004e06:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e08:	4b4f      	ldr	r3, [pc, #316]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10d      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e14:	4b4c      	ldr	r3, [pc, #304]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	4a4b      	ldr	r2, [pc, #300]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e1e:	61d3      	str	r3, [r2, #28]
 8004e20:	4b49      	ldr	r3, [pc, #292]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e30:	4b46      	ldr	r3, [pc, #280]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d118      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e3c:	4b43      	ldr	r3, [pc, #268]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a42      	ldr	r2, [pc, #264]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e48:	f7fc fc50 	bl	80016ec <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4e:	e008      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e50:	f7fc fc4c 	bl	80016ec <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	@ 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e06d      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e62:	4b3a      	ldr	r3, [pc, #232]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e6e:	4b36      	ldr	r3, [pc, #216]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d02e      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d027      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e96:	4b2e      	ldr	r3, [pc, #184]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ea2:	4a29      	ldr	r2, [pc, #164]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d014      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb2:	f7fc fc1b 	bl	80016ec <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fc fc17 	bl	80016ec <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e036      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0ee      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004edc:	4b1a      	ldr	r3, [pc, #104]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	4917      	ldr	r1, [pc, #92]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d105      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef4:	4b14      	ldr	r3, [pc, #80]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	4a13      	ldr	r2, [pc, #76]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004efe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	490b      	ldr	r1, [pc, #44]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0310 	and.w	r3, r3, #16
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f2a:	4b07      	ldr	r3, [pc, #28]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	4904      	ldr	r1, [pc, #16]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	40007000 	.word	0x40007000
 8004f50:	42420440 	.word	0x42420440

08004f54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	2300      	movs	r3, #0
 8004f62:	61fb      	str	r3, [r7, #28]
 8004f64:	2300      	movs	r3, #0
 8004f66:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d00a      	beq.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	f200 808a 	bhi.w	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d045      	beq.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d075      	beq.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004f8a:	e082      	b.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004f8c:	4b46      	ldr	r3, [pc, #280]	@ (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004f92:	4b45      	ldr	r3, [pc, #276]	@ (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d07b      	beq.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	0c9b      	lsrs	r3, r3, #18
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	4a41      	ldr	r2, [pc, #260]	@ (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004fa8:	5cd3      	ldrb	r3, [r2, r3]
 8004faa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d015      	beq.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	0c5b      	lsrs	r3, r3, #17
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	4a3b      	ldr	r2, [pc, #236]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004fc2:	5cd3      	ldrb	r3, [r2, r3]
 8004fc4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00d      	beq.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004fd0:	4a38      	ldr	r2, [pc, #224]	@ (80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	61fb      	str	r3, [r7, #28]
 8004fe0:	e004      	b.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	4a34      	ldr	r2, [pc, #208]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004fec:	4b2e      	ldr	r3, [pc, #184]	@ (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ff4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ff8:	d102      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	61bb      	str	r3, [r7, #24]
      break;
 8004ffe:	e04a      	b.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	4a2d      	ldr	r2, [pc, #180]	@ (80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	085b      	lsrs	r3, r3, #1
 800500c:	61bb      	str	r3, [r7, #24]
      break;
 800500e:	e042      	b.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005010:	4b25      	ldr	r3, [pc, #148]	@ (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800501c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005020:	d108      	bne.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800502c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005030:	61bb      	str	r3, [r7, #24]
 8005032:	e01f      	b.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800503a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800503e:	d109      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005040:	4b19      	ldr	r3, [pc, #100]	@ (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800504c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005050:	61bb      	str	r3, [r7, #24]
 8005052:	e00f      	b.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800505a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800505e:	d11c      	bne.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005060:	4b11      	ldr	r3, [pc, #68]	@ (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d016      	beq.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800506c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005070:	61bb      	str	r3, [r7, #24]
      break;
 8005072:	e012      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005074:	e011      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005076:	f7ff fe85 	bl	8004d84 <HAL_RCC_GetPCLK2Freq>
 800507a:	4602      	mov	r2, r0
 800507c:	4b0a      	ldr	r3, [pc, #40]	@ (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	0b9b      	lsrs	r3, r3, #14
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	3301      	adds	r3, #1
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	fbb2 f3f3 	udiv	r3, r2, r3
 800508e:	61bb      	str	r3, [r7, #24]
      break;
 8005090:	e004      	b.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005092:	bf00      	nop
 8005094:	e002      	b.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005096:	bf00      	nop
 8005098:	e000      	b.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800509a:	bf00      	nop
    }
  }
  return (frequency);
 800509c:	69bb      	ldr	r3, [r7, #24]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3720      	adds	r7, #32
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40021000 	.word	0x40021000
 80050ac:	0800d204 	.word	0x0800d204
 80050b0:	0800d214 	.word	0x0800d214
 80050b4:	007a1200 	.word	0x007a1200
 80050b8:	003d0900 	.word	0x003d0900
 80050bc:	aaaaaaab 	.word	0xaaaaaaab

080050c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e076      	b.n	80051c0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d108      	bne.n	80050ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050e2:	d009      	beq.n	80050f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	61da      	str	r2, [r3, #28]
 80050ea:	e005      	b.n	80050f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fc f8bc 	bl	8001290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800512e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800517c:	ea42 0103 	orr.w	r1, r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005184:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	0c1a      	lsrs	r2, r3, #16
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f002 0204 	and.w	r2, r2, #4
 800519e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	69da      	ldr	r2, [r3, #28]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e041      	b.n	800525e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fc f898 	bl	8001324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	4619      	mov	r1, r3
 8005206:	4610      	mov	r0, r2
 8005208:	f000 fc30 	bl	8005a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	d001      	beq.n	8005280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e03a      	b.n	80052f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a18      	ldr	r2, [pc, #96]	@ (8005300 <HAL_TIM_Base_Start_IT+0x98>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00e      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0x58>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052aa:	d009      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0x58>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a14      	ldr	r2, [pc, #80]	@ (8005304 <HAL_TIM_Base_Start_IT+0x9c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d004      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0x58>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a13      	ldr	r2, [pc, #76]	@ (8005308 <HAL_TIM_Base_Start_IT+0xa0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d111      	bne.n	80052e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b06      	cmp	r3, #6
 80052d0:	d010      	beq.n	80052f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0201 	orr.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e2:	e007      	b.n	80052f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800

0800530c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e041      	b.n	80053a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d106      	bne.n	8005338 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f839 	bl	80053aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3304      	adds	r3, #4
 8005348:	4619      	mov	r1, r3
 800534a:	4610      	mov	r0, r2
 800534c:	f000 fb8e 	bl	8005a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <HAL_TIM_PWM_Start+0x24>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	bf14      	ite	ne
 80053d8:	2301      	movne	r3, #1
 80053da:	2300      	moveq	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	e022      	b.n	8005426 <HAL_TIM_PWM_Start+0x6a>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d109      	bne.n	80053fa <HAL_TIM_PWM_Start+0x3e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	bf14      	ite	ne
 80053f2:	2301      	movne	r3, #1
 80053f4:	2300      	moveq	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	e015      	b.n	8005426 <HAL_TIM_PWM_Start+0x6a>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d109      	bne.n	8005414 <HAL_TIM_PWM_Start+0x58>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	bf14      	ite	ne
 800540c:	2301      	movne	r3, #1
 800540e:	2300      	moveq	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	e008      	b.n	8005426 <HAL_TIM_PWM_Start+0x6a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b01      	cmp	r3, #1
 800541e:	bf14      	ite	ne
 8005420:	2301      	movne	r3, #1
 8005422:	2300      	moveq	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e05e      	b.n	80054ec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <HAL_TIM_PWM_Start+0x82>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800543c:	e013      	b.n	8005466 <HAL_TIM_PWM_Start+0xaa>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b04      	cmp	r3, #4
 8005442:	d104      	bne.n	800544e <HAL_TIM_PWM_Start+0x92>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800544c:	e00b      	b.n	8005466 <HAL_TIM_PWM_Start+0xaa>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b08      	cmp	r3, #8
 8005452:	d104      	bne.n	800545e <HAL_TIM_PWM_Start+0xa2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800545c:	e003      	b.n	8005466 <HAL_TIM_PWM_Start+0xaa>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2202      	movs	r2, #2
 8005462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2201      	movs	r2, #1
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fd7c 	bl	8005f6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1e      	ldr	r2, [pc, #120]	@ (80054f4 <HAL_TIM_PWM_Start+0x138>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d107      	bne.n	800548e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800548c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a18      	ldr	r2, [pc, #96]	@ (80054f4 <HAL_TIM_PWM_Start+0x138>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00e      	beq.n	80054b6 <HAL_TIM_PWM_Start+0xfa>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a0:	d009      	beq.n	80054b6 <HAL_TIM_PWM_Start+0xfa>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a14      	ldr	r2, [pc, #80]	@ (80054f8 <HAL_TIM_PWM_Start+0x13c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d004      	beq.n	80054b6 <HAL_TIM_PWM_Start+0xfa>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a12      	ldr	r2, [pc, #72]	@ (80054fc <HAL_TIM_PWM_Start+0x140>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d111      	bne.n	80054da <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b06      	cmp	r3, #6
 80054c6:	d010      	beq.n	80054ea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d8:	e007      	b.n	80054ea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f042 0201 	orr.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800

08005500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b02      	cmp	r3, #2
 8005514:	d122      	bne.n	800555c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b02      	cmp	r3, #2
 8005522:	d11b      	bne.n	800555c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0202 	mvn.w	r2, #2
 800552c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fa76 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 8005548:	e005      	b.n	8005556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fa69 	bl	8005a22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fa78 	bl	8005a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b04      	cmp	r3, #4
 8005568:	d122      	bne.n	80055b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b04      	cmp	r3, #4
 8005576:	d11b      	bne.n	80055b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0204 	mvn.w	r2, #4
 8005580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2202      	movs	r2, #2
 8005586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fa4c 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 800559c:	e005      	b.n	80055aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fa3f 	bl	8005a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fa4e 	bl	8005a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d122      	bne.n	8005604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0308 	and.w	r3, r3, #8
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d11b      	bne.n	8005604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0208 	mvn.w	r2, #8
 80055d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2204      	movs	r2, #4
 80055da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fa22 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 80055f0:	e005      	b.n	80055fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fa15 	bl	8005a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fa24 	bl	8005a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f003 0310 	and.w	r3, r3, #16
 800560e:	2b10      	cmp	r3, #16
 8005610:	d122      	bne.n	8005658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b10      	cmp	r3, #16
 800561e:	d11b      	bne.n	8005658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 0210 	mvn.w	r2, #16
 8005628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2208      	movs	r2, #8
 800562e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f9f8 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 8005644:	e005      	b.n	8005652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f9eb 	bl	8005a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f9fa 	bl	8005a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b01      	cmp	r3, #1
 8005664:	d10e      	bne.n	8005684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b01      	cmp	r3, #1
 8005672:	d107      	bne.n	8005684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0201 	mvn.w	r2, #1
 800567c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fb fa3a 	bl	8000af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800568e:	2b80      	cmp	r3, #128	@ 0x80
 8005690:	d10e      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800569c:	2b80      	cmp	r3, #128	@ 0x80
 800569e:	d107      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fce9 	bl	8006082 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ba:	2b40      	cmp	r3, #64	@ 0x40
 80056bc:	d10e      	bne.n	80056dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056c8:	2b40      	cmp	r3, #64	@ 0x40
 80056ca:	d107      	bne.n	80056dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f9be 	bl	8005a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d10e      	bne.n	8005708 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0320 	and.w	r3, r3, #32
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d107      	bne.n	8005708 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0220 	mvn.w	r2, #32
 8005700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fcb4 	bl	8006070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005708:	bf00      	nop
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800572a:	2302      	movs	r3, #2
 800572c:	e0ae      	b.n	800588c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b0c      	cmp	r3, #12
 800573a:	f200 809f 	bhi.w	800587c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800573e:	a201      	add	r2, pc, #4	@ (adr r2, 8005744 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	08005779 	.word	0x08005779
 8005748:	0800587d 	.word	0x0800587d
 800574c:	0800587d 	.word	0x0800587d
 8005750:	0800587d 	.word	0x0800587d
 8005754:	080057b9 	.word	0x080057b9
 8005758:	0800587d 	.word	0x0800587d
 800575c:	0800587d 	.word	0x0800587d
 8005760:	0800587d 	.word	0x0800587d
 8005764:	080057fb 	.word	0x080057fb
 8005768:	0800587d 	.word	0x0800587d
 800576c:	0800587d 	.word	0x0800587d
 8005770:	0800587d 	.word	0x0800587d
 8005774:	0800583b 	.word	0x0800583b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	4618      	mov	r0, r3
 8005780:	f000 f9d6 	bl	8005b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0208 	orr.w	r2, r2, #8
 8005792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0204 	bic.w	r2, r2, #4
 80057a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6999      	ldr	r1, [r3, #24]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	619a      	str	r2, [r3, #24]
      break;
 80057b6:	e064      	b.n	8005882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fa1c 	bl	8005bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6999      	ldr	r1, [r3, #24]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	021a      	lsls	r2, r3, #8
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	619a      	str	r2, [r3, #24]
      break;
 80057f8:	e043      	b.n	8005882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	4618      	mov	r0, r3
 8005802:	f000 fa65 	bl	8005cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69da      	ldr	r2, [r3, #28]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f042 0208 	orr.w	r2, r2, #8
 8005814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69da      	ldr	r2, [r3, #28]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0204 	bic.w	r2, r2, #4
 8005824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69d9      	ldr	r1, [r3, #28]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	61da      	str	r2, [r3, #28]
      break;
 8005838:	e023      	b.n	8005882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	4618      	mov	r0, r3
 8005842:	f000 faaf 	bl	8005da4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69da      	ldr	r2, [r3, #28]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69d9      	ldr	r1, [r3, #28]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	021a      	lsls	r2, r3, #8
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	61da      	str	r2, [r3, #28]
      break;
 800587a:	e002      	b.n	8005882 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	75fb      	strb	r3, [r7, #23]
      break;
 8005880:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800588a:	7dfb      	ldrb	r3, [r7, #23]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_TIM_ConfigClockSource+0x1c>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e0b4      	b.n	8005a1a <HAL_TIM_ConfigClockSource+0x186>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058e8:	d03e      	beq.n	8005968 <HAL_TIM_ConfigClockSource+0xd4>
 80058ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ee:	f200 8087 	bhi.w	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
 80058f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058f6:	f000 8086 	beq.w	8005a06 <HAL_TIM_ConfigClockSource+0x172>
 80058fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058fe:	d87f      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
 8005900:	2b70      	cmp	r3, #112	@ 0x70
 8005902:	d01a      	beq.n	800593a <HAL_TIM_ConfigClockSource+0xa6>
 8005904:	2b70      	cmp	r3, #112	@ 0x70
 8005906:	d87b      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
 8005908:	2b60      	cmp	r3, #96	@ 0x60
 800590a:	d050      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0x11a>
 800590c:	2b60      	cmp	r3, #96	@ 0x60
 800590e:	d877      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
 8005910:	2b50      	cmp	r3, #80	@ 0x50
 8005912:	d03c      	beq.n	800598e <HAL_TIM_ConfigClockSource+0xfa>
 8005914:	2b50      	cmp	r3, #80	@ 0x50
 8005916:	d873      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
 8005918:	2b40      	cmp	r3, #64	@ 0x40
 800591a:	d058      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x13a>
 800591c:	2b40      	cmp	r3, #64	@ 0x40
 800591e:	d86f      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
 8005920:	2b30      	cmp	r3, #48	@ 0x30
 8005922:	d064      	beq.n	80059ee <HAL_TIM_ConfigClockSource+0x15a>
 8005924:	2b30      	cmp	r3, #48	@ 0x30
 8005926:	d86b      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
 8005928:	2b20      	cmp	r3, #32
 800592a:	d060      	beq.n	80059ee <HAL_TIM_ConfigClockSource+0x15a>
 800592c:	2b20      	cmp	r3, #32
 800592e:	d867      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
 8005930:	2b00      	cmp	r3, #0
 8005932:	d05c      	beq.n	80059ee <HAL_TIM_ConfigClockSource+0x15a>
 8005934:	2b10      	cmp	r3, #16
 8005936:	d05a      	beq.n	80059ee <HAL_TIM_ConfigClockSource+0x15a>
 8005938:	e062      	b.n	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800594a:	f000 faf0 	bl	8005f2e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800595c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	609a      	str	r2, [r3, #8]
      break;
 8005966:	e04f      	b.n	8005a08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005978:	f000 fad9 	bl	8005f2e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800598a:	609a      	str	r2, [r3, #8]
      break;
 800598c:	e03c      	b.n	8005a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800599a:	461a      	mov	r2, r3
 800599c:	f000 fa50 	bl	8005e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2150      	movs	r1, #80	@ 0x50
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 faa7 	bl	8005efa <TIM_ITRx_SetConfig>
      break;
 80059ac:	e02c      	b.n	8005a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ba:	461a      	mov	r2, r3
 80059bc:	f000 fa6e 	bl	8005e9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2160      	movs	r1, #96	@ 0x60
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fa97 	bl	8005efa <TIM_ITRx_SetConfig>
      break;
 80059cc:	e01c      	b.n	8005a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059da:	461a      	mov	r2, r3
 80059dc:	f000 fa30 	bl	8005e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2140      	movs	r1, #64	@ 0x40
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fa87 	bl	8005efa <TIM_ITRx_SetConfig>
      break;
 80059ec:	e00c      	b.n	8005a08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4619      	mov	r1, r3
 80059f8:	4610      	mov	r0, r2
 80059fa:	f000 fa7e 	bl	8005efa <TIM_ITRx_SetConfig>
      break;
 80059fe:	e003      	b.n	8005a08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	73fb      	strb	r3, [r7, #15]
      break;
 8005a04:	e000      	b.n	8005a08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr

08005a46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc80      	pop	{r7}
 8005a56:	4770      	bx	lr

08005a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr
	...

08005a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a29      	ldr	r2, [pc, #164]	@ (8005b24 <TIM_Base_SetConfig+0xb8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00b      	beq.n	8005a9c <TIM_Base_SetConfig+0x30>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a8a:	d007      	beq.n	8005a9c <TIM_Base_SetConfig+0x30>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a26      	ldr	r2, [pc, #152]	@ (8005b28 <TIM_Base_SetConfig+0xbc>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d003      	beq.n	8005a9c <TIM_Base_SetConfig+0x30>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a25      	ldr	r2, [pc, #148]	@ (8005b2c <TIM_Base_SetConfig+0xc0>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d108      	bne.n	8005aae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8005b24 <TIM_Base_SetConfig+0xb8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00b      	beq.n	8005ace <TIM_Base_SetConfig+0x62>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005abc:	d007      	beq.n	8005ace <TIM_Base_SetConfig+0x62>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a19      	ldr	r2, [pc, #100]	@ (8005b28 <TIM_Base_SetConfig+0xbc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_Base_SetConfig+0x62>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a18      	ldr	r2, [pc, #96]	@ (8005b2c <TIM_Base_SetConfig+0xc0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d108      	bne.n	8005ae0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a07      	ldr	r2, [pc, #28]	@ (8005b24 <TIM_Base_SetConfig+0xb8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d103      	bne.n	8005b14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	691a      	ldr	r2, [r3, #16]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	615a      	str	r2, [r3, #20]
}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr
 8005b24:	40012c00 	.word	0x40012c00
 8005b28:	40000400 	.word	0x40000400
 8005b2c:	40000800 	.word	0x40000800

08005b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	f023 0201 	bic.w	r2, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0303 	bic.w	r3, r3, #3
 8005b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f023 0302 	bic.w	r3, r3, #2
 8005b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a1c      	ldr	r2, [pc, #112]	@ (8005bf8 <TIM_OC1_SetConfig+0xc8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d10c      	bne.n	8005ba6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f023 0308 	bic.w	r3, r3, #8
 8005b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f023 0304 	bic.w	r3, r3, #4
 8005ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a13      	ldr	r2, [pc, #76]	@ (8005bf8 <TIM_OC1_SetConfig+0xc8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d111      	bne.n	8005bd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	621a      	str	r2, [r3, #32]
}
 8005bec:	bf00      	nop
 8005bee:	371c      	adds	r7, #28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40012c00 	.word	0x40012c00

08005bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	f023 0210 	bic.w	r2, r3, #16
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	021b      	lsls	r3, r3, #8
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f023 0320 	bic.w	r3, r3, #32
 8005c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a1d      	ldr	r2, [pc, #116]	@ (8005ccc <TIM_OC2_SetConfig+0xd0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d10d      	bne.n	8005c78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a14      	ldr	r2, [pc, #80]	@ (8005ccc <TIM_OC2_SetConfig+0xd0>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d113      	bne.n	8005ca8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	621a      	str	r2, [r3, #32]
}
 8005cc2:	bf00      	nop
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr
 8005ccc:	40012c00 	.word	0x40012c00

08005cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	021b      	lsls	r3, r3, #8
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a1d      	ldr	r2, [pc, #116]	@ (8005da0 <TIM_OC3_SetConfig+0xd0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d10d      	bne.n	8005d4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	021b      	lsls	r3, r3, #8
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a14      	ldr	r2, [pc, #80]	@ (8005da0 <TIM_OC3_SetConfig+0xd0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d113      	bne.n	8005d7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	621a      	str	r2, [r3, #32]
}
 8005d94:	bf00      	nop
 8005d96:	371c      	adds	r7, #28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40012c00 	.word	0x40012c00

08005da4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	021b      	lsls	r3, r3, #8
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	031b      	lsls	r3, r3, #12
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8005e3c <TIM_OC4_SetConfig+0x98>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d109      	bne.n	8005e18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	019b      	lsls	r3, r3, #6
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	621a      	str	r2, [r3, #32]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc80      	pop	{r7}
 8005e3a:	4770      	bx	lr
 8005e3c:	40012c00 	.word	0x40012c00

08005e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	f023 0201 	bic.w	r2, r3, #1
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	011b      	lsls	r3, r3, #4
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f023 030a 	bic.w	r3, r3, #10
 8005e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	621a      	str	r2, [r3, #32]
}
 8005e92:	bf00      	nop
 8005e94:	371c      	adds	r7, #28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr

08005e9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	f023 0210 	bic.w	r2, r3, #16
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	031b      	lsls	r3, r3, #12
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	621a      	str	r2, [r3, #32]
}
 8005ef0:	bf00      	nop
 8005ef2:	371c      	adds	r7, #28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bc80      	pop	{r7}
 8005ef8:	4770      	bx	lr

08005efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f043 0307 	orr.w	r3, r3, #7
 8005f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	609a      	str	r2, [r3, #8]
}
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bc80      	pop	{r7}
 8005f2c:	4770      	bx	lr

08005f2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b087      	sub	sp, #28
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
 8005f3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	021a      	lsls	r2, r3, #8
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	431a      	orrs	r2, r3
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	609a      	str	r2, [r3, #8]
}
 8005f62:	bf00      	nop
 8005f64:	371c      	adds	r7, #28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr

08005f6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f003 031f 	and.w	r3, r3, #31
 8005f7e:	2201      	movs	r2, #1
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a1a      	ldr	r2, [r3, #32]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	43db      	mvns	r3, r3
 8005f8e:	401a      	ands	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a1a      	ldr	r2, [r3, #32]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f003 031f 	and.w	r3, r3, #31
 8005f9e:	6879      	ldr	r1, [r7, #4]
 8005fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	621a      	str	r2, [r3, #32]
}
 8005faa:	bf00      	nop
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e046      	b.n	800605a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a16      	ldr	r2, [pc, #88]	@ (8006064 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00e      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006018:	d009      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a12      	ldr	r2, [pc, #72]	@ (8006068 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d004      	beq.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a10      	ldr	r2, [pc, #64]	@ (800606c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d10c      	bne.n	8006048 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	4313      	orrs	r3, r2
 800603e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr
 8006064:	40012c00 	.word	0x40012c00
 8006068:	40000400 	.word	0x40000400
 800606c:	40000800 	.word	0x40000800

08006070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	bc80      	pop	{r7}
 8006080:	4770      	bx	lr

08006082 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr

08006094 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006094:	b084      	sub	sp, #16
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	f107 0014 	add.w	r0, r7, #20
 80060a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc80      	pop	{r7}
 80060b0:	b004      	add	sp, #16
 80060b2:	4770      	bx	lr

080060b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80060c4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80060c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	bc80      	pop	{r7}
 80060de:	4770      	bx	lr

080060e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80060e8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80060ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	4013      	ands	r3, r2
 8006100:	b29a      	uxth	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr

08006114 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr

0800612c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800612c:	b084      	sub	sp, #16
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	f107 0014 	add.w	r0, r7, #20
 800613a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	bc80      	pop	{r7}
 8006168:	b004      	add	sp, #16
 800616a:	4770      	bx	lr

0800616c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800616c:	b480      	push	{r7}
 800616e:	b09d      	sub	sp, #116	@ 0x74
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29b      	uxth	r3, r3
 800618a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800618e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006192:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	78db      	ldrb	r3, [r3, #3]
 800619a:	2b03      	cmp	r3, #3
 800619c:	d81f      	bhi.n	80061de <USB_ActivateEndpoint+0x72>
 800619e:	a201      	add	r2, pc, #4	@ (adr r2, 80061a4 <USB_ActivateEndpoint+0x38>)
 80061a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a4:	080061b5 	.word	0x080061b5
 80061a8:	080061d1 	.word	0x080061d1
 80061ac:	080061e7 	.word	0x080061e7
 80061b0:	080061c3 	.word	0x080061c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80061b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80061b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80061c0:	e012      	b.n	80061e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80061c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80061c6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80061ca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80061ce:	e00b      	b.n	80061e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80061d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80061d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80061d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80061dc:	e004      	b.n	80061e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80061e4:	e000      	b.n	80061e8 <USB_ActivateEndpoint+0x7c>
      break;
 80061e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	441a      	add	r2, r3
 80061f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80061f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006206:	b29b      	uxth	r3, r3
 8006208:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800621c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006220:	b29b      	uxth	r3, r3
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	7812      	ldrb	r2, [r2, #0]
 8006226:	4313      	orrs	r3, r2
 8006228:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	441a      	add	r2, r3
 8006236:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800623a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800623e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800624a:	b29b      	uxth	r3, r3
 800624c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	7b1b      	ldrb	r3, [r3, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	f040 8178 	bne.w	8006548 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	785b      	ldrb	r3, [r3, #1]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 8084 	beq.w	800636a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800626c:	b29b      	uxth	r3, r3
 800626e:	461a      	mov	r2, r3
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	4413      	add	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	011a      	lsls	r2, r3, #4
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	88db      	ldrh	r3, [r3, #6]
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	b29b      	uxth	r3, r3
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	827b      	strh	r3, [r7, #18]
 80062a4:	8a7b      	ldrh	r3, [r7, #18]
 80062a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d01b      	beq.n	80062e6 <USB_ActivateEndpoint+0x17a>
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c4:	823b      	strh	r3, [r7, #16]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	441a      	add	r2, r3
 80062d0:	8a3b      	ldrh	r3, [r7, #16]
 80062d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	78db      	ldrb	r3, [r3, #3]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d020      	beq.n	8006330 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006304:	81bb      	strh	r3, [r7, #12]
 8006306:	89bb      	ldrh	r3, [r7, #12]
 8006308:	f083 0320 	eor.w	r3, r3, #32
 800630c:	81bb      	strh	r3, [r7, #12]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	441a      	add	r2, r3
 8006318:	89bb      	ldrh	r3, [r7, #12]
 800631a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800631e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006322:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800632a:	b29b      	uxth	r3, r3
 800632c:	8013      	strh	r3, [r2, #0]
 800632e:	e2d5      	b.n	80068dc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006346:	81fb      	strh	r3, [r7, #14]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	441a      	add	r2, r3
 8006352:	89fb      	ldrh	r3, [r7, #14]
 8006354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800635c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006364:	b29b      	uxth	r3, r3
 8006366:	8013      	strh	r3, [r2, #0]
 8006368:	e2b8      	b.n	80068dc <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	633b      	str	r3, [r7, #48]	@ 0x30
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006374:	b29b      	uxth	r3, r3
 8006376:	461a      	mov	r2, r3
 8006378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637a:	4413      	add	r3, r2
 800637c:	633b      	str	r3, [r7, #48]	@ 0x30
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	011a      	lsls	r2, r3, #4
 8006384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006386:	4413      	add	r3, r2
 8006388:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800638c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	88db      	ldrh	r3, [r3, #6]
 8006392:	085b      	lsrs	r3, r3, #1
 8006394:	b29b      	uxth	r3, r3
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800639c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ae:	4413      	add	r3, r2
 80063b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	011a      	lsls	r2, r3, #4
 80063b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ba:	4413      	add	r3, r2
 80063bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d0:	801a      	strh	r2, [r3, #0]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80063d8:	d91d      	bls.n	8006416 <USB_ActivateEndpoint+0x2aa>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f003 031f 	and.w	r3, r3, #31
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <USB_ActivateEndpoint+0x288>
 80063ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063f0:	3b01      	subs	r3, #1
 80063f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	029b      	lsls	r3, r3, #10
 8006400:	b29b      	uxth	r3, r3
 8006402:	4313      	orrs	r3, r2
 8006404:	b29b      	uxth	r3, r3
 8006406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800640a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800640e:	b29a      	uxth	r2, r3
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	801a      	strh	r2, [r3, #0]
 8006414:	e026      	b.n	8006464 <USB_ActivateEndpoint+0x2f8>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10a      	bne.n	8006434 <USB_ActivateEndpoint+0x2c8>
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	b29b      	uxth	r3, r3
 8006424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800642c:	b29a      	uxth	r2, r3
 800642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006430:	801a      	strh	r2, [r3, #0]
 8006432:	e017      	b.n	8006464 <USB_ActivateEndpoint+0x2f8>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	085b      	lsrs	r3, r3, #1
 800643a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <USB_ActivateEndpoint+0x2e2>
 8006448:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800644a:	3301      	adds	r3, #1
 800644c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	b29a      	uxth	r2, r3
 8006454:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006456:	b29b      	uxth	r3, r3
 8006458:	029b      	lsls	r3, r3, #10
 800645a:	b29b      	uxth	r3, r3
 800645c:	4313      	orrs	r3, r2
 800645e:	b29a      	uxth	r2, r3
 8006460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006462:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006472:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006474:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d01b      	beq.n	80064b4 <USB_ActivateEndpoint+0x348>
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	b29b      	uxth	r3, r3
 800648a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800648e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006492:	843b      	strh	r3, [r7, #32]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	441a      	add	r2, r3
 800649e:	8c3b      	ldrh	r3, [r7, #32]
 80064a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d124      	bne.n	8006506 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d2:	83bb      	strh	r3, [r7, #28]
 80064d4:	8bbb      	ldrh	r3, [r7, #28]
 80064d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80064da:	83bb      	strh	r3, [r7, #28]
 80064dc:	8bbb      	ldrh	r3, [r7, #28]
 80064de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80064e2:	83bb      	strh	r3, [r7, #28]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	441a      	add	r2, r3
 80064ee:	8bbb      	ldrh	r3, [r7, #28]
 80064f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006500:	b29b      	uxth	r3, r3
 8006502:	8013      	strh	r3, [r2, #0]
 8006504:	e1ea      	b.n	80068dc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800651c:	83fb      	strh	r3, [r7, #30]
 800651e:	8bfb      	ldrh	r3, [r7, #30]
 8006520:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006524:	83fb      	strh	r3, [r7, #30]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	441a      	add	r2, r3
 8006530:	8bfb      	ldrh	r3, [r7, #30]
 8006532:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006536:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800653a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800653e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006542:	b29b      	uxth	r3, r3
 8006544:	8013      	strh	r3, [r2, #0]
 8006546:	e1c9      	b.n	80068dc <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	78db      	ldrb	r3, [r3, #3]
 800654c:	2b02      	cmp	r3, #2
 800654e:	d11e      	bne.n	800658e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006566:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	441a      	add	r2, r3
 8006574:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006578:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800657c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006580:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006588:	b29b      	uxth	r3, r3
 800658a:	8013      	strh	r3, [r2, #0]
 800658c:	e01d      	b.n	80065ca <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	b29b      	uxth	r3, r3
 800659c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80065a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	441a      	add	r2, r3
 80065b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80065b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	461a      	mov	r2, r3
 80065d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065da:	4413      	add	r3, r2
 80065dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	011a      	lsls	r2, r3, #4
 80065e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	891b      	ldrh	r3, [r3, #8]
 80065f2:	085b      	lsrs	r3, r3, #1
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	657b      	str	r3, [r7, #84]	@ 0x54
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006608:	b29b      	uxth	r3, r3
 800660a:	461a      	mov	r2, r3
 800660c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800660e:	4413      	add	r3, r2
 8006610:	657b      	str	r3, [r7, #84]	@ 0x54
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	011a      	lsls	r2, r3, #4
 8006618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800661a:	4413      	add	r3, r2
 800661c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006620:	653b      	str	r3, [r7, #80]	@ 0x50
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	895b      	ldrh	r3, [r3, #10]
 8006626:	085b      	lsrs	r3, r3, #1
 8006628:	b29b      	uxth	r3, r3
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006630:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	785b      	ldrb	r3, [r3, #1]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f040 8093 	bne.w	8006762 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800664c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d01b      	beq.n	8006690 <USB_ActivateEndpoint+0x524>
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800666a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800666e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	441a      	add	r2, r3
 800667a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800667c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006680:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006684:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668c:	b29b      	uxth	r3, r3
 800668e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800669e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80066a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01b      	beq.n	80066e0 <USB_ActivateEndpoint+0x574>
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066be:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	441a      	add	r2, r3
 80066ca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80066cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066dc:	b29b      	uxth	r3, r3
 80066de:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066f6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80066f8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80066fa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80066fe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006700:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006702:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006706:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	441a      	add	r2, r3
 8006712:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006714:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006718:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800671c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006724:	b29b      	uxth	r3, r3
 8006726:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800673a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800673e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	441a      	add	r2, r3
 800674a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800674c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006750:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800675c:	b29b      	uxth	r3, r3
 800675e:	8013      	strh	r3, [r2, #0]
 8006760:	e0bc      	b.n	80068dc <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006772:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d01d      	beq.n	80067ba <USB_ActivateEndpoint+0x64e>
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006794:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	441a      	add	r2, r3
 80067a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80067a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80067ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80067ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d01d      	beq.n	8006812 <USB_ActivateEndpoint+0x6a6>
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ec:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	441a      	add	r2, r3
 80067fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80067fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800680a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800680e:	b29b      	uxth	r3, r3
 8006810:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	78db      	ldrb	r3, [r3, #3]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d024      	beq.n	8006864 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800682c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006830:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006834:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006838:	f083 0320 	eor.w	r3, r3, #32
 800683c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	441a      	add	r2, r3
 800684a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800684e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006852:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800685a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800685e:	b29b      	uxth	r3, r3
 8006860:	8013      	strh	r3, [r2, #0]
 8006862:	e01d      	b.n	80068a0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	b29b      	uxth	r3, r3
 8006872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006876:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800687a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	441a      	add	r2, r3
 8006888:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800688c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006890:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800689c:	b29b      	uxth	r3, r3
 800689e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	441a      	add	r2, r3
 80068c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80068c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d8:	b29b      	uxth	r3, r3
 80068da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80068dc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3774      	adds	r7, #116	@ 0x74
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc80      	pop	{r7}
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop

080068ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b08d      	sub	sp, #52	@ 0x34
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	7b1b      	ldrb	r3, [r3, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f040 808e 	bne.w	8006a1c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d044      	beq.n	8006992 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	81bb      	strh	r3, [r7, #12]
 8006916:	89bb      	ldrh	r3, [r7, #12]
 8006918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01b      	beq.n	8006958 <USB_DeactivateEndpoint+0x6c>
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29b      	uxth	r3, r3
 800692e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006936:	817b      	strh	r3, [r7, #10]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	441a      	add	r2, r3
 8006942:	897b      	ldrh	r3, [r7, #10]
 8006944:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006948:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800694c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006950:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006954:	b29b      	uxth	r3, r3
 8006956:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	b29b      	uxth	r3, r3
 8006966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800696a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800696e:	813b      	strh	r3, [r7, #8]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	441a      	add	r2, r3
 800697a:	893b      	ldrh	r3, [r7, #8]
 800697c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006980:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800698c:	b29b      	uxth	r3, r3
 800698e:	8013      	strh	r3, [r2, #0]
 8006990:	e192      	b.n	8006cb8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	827b      	strh	r3, [r7, #18]
 80069a0:	8a7b      	ldrh	r3, [r7, #18]
 80069a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d01b      	beq.n	80069e2 <USB_DeactivateEndpoint+0xf6>
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c0:	823b      	strh	r3, [r7, #16]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	441a      	add	r2, r3
 80069cc:	8a3b      	ldrh	r3, [r7, #16]
 80069ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069de:	b29b      	uxth	r3, r3
 80069e0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f8:	81fb      	strh	r3, [r7, #14]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	441a      	add	r2, r3
 8006a04:	89fb      	ldrh	r3, [r7, #14]
 8006a06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	8013      	strh	r3, [r2, #0]
 8006a1a:	e14d      	b.n	8006cb8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	785b      	ldrb	r3, [r3, #1]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f040 80a5 	bne.w	8006b70 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	843b      	strh	r3, [r7, #32]
 8006a34:	8c3b      	ldrh	r3, [r7, #32]
 8006a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d01b      	beq.n	8006a76 <USB_DeactivateEndpoint+0x18a>
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a54:	83fb      	strh	r3, [r7, #30]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	441a      	add	r2, r3
 8006a60:	8bfb      	ldrh	r3, [r7, #30]
 8006a62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	83bb      	strh	r3, [r7, #28]
 8006a84:	8bbb      	ldrh	r3, [r7, #28]
 8006a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d01b      	beq.n	8006ac6 <USB_DeactivateEndpoint+0x1da>
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa4:	837b      	strh	r3, [r7, #26]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	441a      	add	r2, r3
 8006ab0:	8b7b      	ldrh	r3, [r7, #26]
 8006ab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006abe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	881b      	ldrh	r3, [r3, #0]
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006adc:	833b      	strh	r3, [r7, #24]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	441a      	add	r2, r3
 8006ae8:	8b3b      	ldrh	r3, [r7, #24]
 8006aea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006af6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b14:	82fb      	strh	r3, [r7, #22]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	441a      	add	r2, r3
 8006b20:	8afb      	ldrh	r3, [r7, #22]
 8006b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b4c:	82bb      	strh	r3, [r7, #20]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	441a      	add	r2, r3
 8006b58:	8abb      	ldrh	r3, [r7, #20]
 8006b5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	8013      	strh	r3, [r2, #0]
 8006b6e:	e0a3      	b.n	8006cb8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006b7e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006b80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d01b      	beq.n	8006bc0 <USB_DeactivateEndpoint+0x2d4>
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b9e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	441a      	add	r2, r3
 8006baa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006bac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006bce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01b      	beq.n	8006c10 <USB_DeactivateEndpoint+0x324>
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bee:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	441a      	add	r2, r3
 8006bfa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006bfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c26:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	441a      	add	r2, r3
 8006c32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	441a      	add	r2, r3
 8006c6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c96:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	441a      	add	r2, r3
 8006ca2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ca4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ca8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3734      	adds	r7, #52	@ 0x34
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bc80      	pop	{r7}
 8006cc2:	4770      	bx	lr

08006cc4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b0c2      	sub	sp, #264	@ 0x108
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cd2:	6018      	str	r0, [r3, #0]
 8006cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cdc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	785b      	ldrb	r3, [r3, #1]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	f040 86b7 	bne.w	8007a5e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	699a      	ldr	r2, [r3, #24]
 8006cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d908      	bls.n	8006d1e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006d1c:	e007      	b.n	8006d2e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	7b1b      	ldrb	r3, [r3, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d13a      	bne.n	8006db4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6959      	ldr	r1, [r3, #20]
 8006d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	88da      	ldrh	r2, [r3, #6]
 8006d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d60:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d64:	6800      	ldr	r0, [r0, #0]
 8006d66:	f001 fc9c 	bl	80086a2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	461a      	mov	r2, r3
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]
 8006d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	011a      	lsls	r2, r3, #4
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006da4:	60fb      	str	r3, [r7, #12]
 8006da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	801a      	strh	r2, [r3, #0]
 8006db0:	f000 be1f 	b.w	80079f2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	78db      	ldrb	r3, [r3, #3]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	f040 8462 	bne.w	800768a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6a1a      	ldr	r2, [r3, #32]
 8006dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	f240 83df 	bls.w	80075a2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e0a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	441a      	add	r2, r3
 8006e28:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006e2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e34:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6a1a      	ldr	r2, [r3, #32]
 8006e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e50:	1ad2      	subs	r2, r2, r3
 8006e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 81c7 	beq.w	8007214 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	785b      	ldrb	r3, [r3, #1]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d177      	bne.n	8006f92 <USB_EPStartXfer+0x2ce>
 8006ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec2:	4413      	add	r3, r2
 8006ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	011a      	lsls	r2, r3, #4
 8006ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eec:	801a      	strh	r2, [r3, #0]
 8006eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ef4:	d921      	bls.n	8006f3a <USB_EPStartXfer+0x276>
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efa:	095b      	lsrs	r3, r3, #5
 8006efc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f04:	f003 031f 	and.w	r3, r3, #31
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d104      	bne.n	8006f16 <USB_EPStartXfer+0x252>
 8006f0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006f10:	3b01      	subs	r3, #1
 8006f12:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	029b      	lsls	r3, r3, #10
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	4313      	orrs	r3, r2
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f36:	801a      	strh	r2, [r3, #0]
 8006f38:	e050      	b.n	8006fdc <USB_EPStartXfer+0x318>
 8006f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10a      	bne.n	8006f58 <USB_EPStartXfer+0x294>
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	801a      	strh	r2, [r3, #0]
 8006f56:	e041      	b.n	8006fdc <USB_EPStartXfer+0x318>
 8006f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f5c:	085b      	lsrs	r3, r3, #1
 8006f5e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d004      	beq.n	8006f78 <USB_EPStartXfer+0x2b4>
 8006f6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006f72:	3301      	adds	r3, #1
 8006f74:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	029b      	lsls	r3, r3, #10
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8e:	801a      	strh	r2, [r3, #0]
 8006f90:	e024      	b.n	8006fdc <USB_EPStartXfer+0x318>
 8006f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	785b      	ldrb	r3, [r3, #1]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d11c      	bne.n	8006fdc <USB_EPStartXfer+0x318>
 8006fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb6:	4413      	add	r3, r2
 8006fb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	011a      	lsls	r2, r3, #4
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fca:	4413      	add	r3, r2
 8006fcc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	895b      	ldrh	r3, [r3, #10]
 8006fe8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6959      	ldr	r1, [r3, #20]
 8006ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007002:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007006:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800700a:	6800      	ldr	r0, [r0, #0]
 800700c:	f001 fb49 	bl	80086a2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695a      	ldr	r2, [r3, #20]
 800701c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007020:	441a      	add	r2, r3
 8007022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800702e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6a1a      	ldr	r2, [r3, #32]
 800703a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	429a      	cmp	r2, r3
 8007048:	d90f      	bls.n	800706a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800704a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6a1a      	ldr	r2, [r3, #32]
 8007056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705a:	1ad2      	subs	r2, r2, r3
 800705c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	621a      	str	r2, [r3, #32]
 8007068:	e00e      	b.n	8007088 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800706a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800707a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2200      	movs	r2, #0
 8007086:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	785b      	ldrb	r3, [r3, #1]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d177      	bne.n	8007188 <USB_EPStartXfer+0x4c4>
 8007098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	61bb      	str	r3, [r7, #24]
 80070a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	461a      	mov	r2, r3
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	4413      	add	r3, r2
 80070ba:	61bb      	str	r3, [r7, #24]
 80070bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	011a      	lsls	r2, r3, #4
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	4413      	add	r3, r2
 80070ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80070d2:	617b      	str	r3, [r7, #20]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070de:	b29a      	uxth	r2, r3
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	801a      	strh	r2, [r3, #0]
 80070e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80070ea:	d921      	bls.n	8007130 <USB_EPStartXfer+0x46c>
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f0:	095b      	lsrs	r3, r3, #5
 80070f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80070f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fa:	f003 031f 	and.w	r3, r3, #31
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d104      	bne.n	800710c <USB_EPStartXfer+0x448>
 8007102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007106:	3b01      	subs	r3, #1
 8007108:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	b29a      	uxth	r2, r3
 8007112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007116:	b29b      	uxth	r3, r3
 8007118:	029b      	lsls	r3, r3, #10
 800711a:	b29b      	uxth	r3, r3
 800711c:	4313      	orrs	r3, r2
 800711e:	b29b      	uxth	r3, r3
 8007120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007128:	b29a      	uxth	r2, r3
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	801a      	strh	r2, [r3, #0]
 800712e:	e056      	b.n	80071de <USB_EPStartXfer+0x51a>
 8007130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10a      	bne.n	800714e <USB_EPStartXfer+0x48a>
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	b29b      	uxth	r3, r3
 800713e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007146:	b29a      	uxth	r2, r3
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	801a      	strh	r2, [r3, #0]
 800714c:	e047      	b.n	80071de <USB_EPStartXfer+0x51a>
 800714e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007152:	085b      	lsrs	r3, r3, #1
 8007154:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	2b00      	cmp	r3, #0
 8007162:	d004      	beq.n	800716e <USB_EPStartXfer+0x4aa>
 8007164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007168:	3301      	adds	r3, #1
 800716a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	b29a      	uxth	r2, r3
 8007174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007178:	b29b      	uxth	r3, r3
 800717a:	029b      	lsls	r3, r3, #10
 800717c:	b29b      	uxth	r3, r3
 800717e:	4313      	orrs	r3, r2
 8007180:	b29a      	uxth	r2, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	801a      	strh	r2, [r3, #0]
 8007186:	e02a      	b.n	80071de <USB_EPStartXfer+0x51a>
 8007188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800718c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d122      	bne.n	80071de <USB_EPStartXfer+0x51a>
 8007198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	623b      	str	r3, [r7, #32]
 80071a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	461a      	mov	r2, r3
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	4413      	add	r3, r2
 80071ba:	623b      	str	r3, [r7, #32]
 80071bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	011a      	lsls	r2, r3, #4
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	4413      	add	r3, r2
 80071ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071d2:	61fb      	str	r3, [r7, #28]
 80071d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d8:	b29a      	uxth	r2, r3
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80071de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	891b      	ldrh	r3, [r3, #8]
 80071ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6959      	ldr	r1, [r3, #20]
 80071fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071fe:	b29b      	uxth	r3, r3
 8007200:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007204:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007208:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800720c:	6800      	ldr	r0, [r0, #0]
 800720e:	f001 fa48 	bl	80086a2 <USB_WritePMA>
 8007212:	e3ee      	b.n	80079f2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d177      	bne.n	8007314 <USB_EPStartXfer+0x650>
 8007224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800723e:	b29b      	uxth	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007244:	4413      	add	r3, r2
 8007246:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	011a      	lsls	r2, r3, #4
 8007256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007258:	4413      	add	r3, r2
 800725a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800725e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	b29b      	uxth	r3, r3
 8007266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800726a:	b29a      	uxth	r2, r3
 800726c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800726e:	801a      	strh	r2, [r3, #0]
 8007270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007274:	2b3e      	cmp	r3, #62	@ 0x3e
 8007276:	d921      	bls.n	80072bc <USB_EPStartXfer+0x5f8>
 8007278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727c:	095b      	lsrs	r3, r3, #5
 800727e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007286:	f003 031f 	and.w	r3, r3, #31
 800728a:	2b00      	cmp	r3, #0
 800728c:	d104      	bne.n	8007298 <USB_EPStartXfer+0x5d4>
 800728e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007292:	3b01      	subs	r3, #1
 8007294:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	b29a      	uxth	r2, r3
 800729e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	029b      	lsls	r3, r3, #10
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	4313      	orrs	r3, r2
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072b8:	801a      	strh	r2, [r3, #0]
 80072ba:	e056      	b.n	800736a <USB_EPStartXfer+0x6a6>
 80072bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <USB_EPStartXfer+0x616>
 80072c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072d6:	801a      	strh	r2, [r3, #0]
 80072d8:	e047      	b.n	800736a <USB_EPStartXfer+0x6a6>
 80072da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072de:	085b      	lsrs	r3, r3, #1
 80072e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d004      	beq.n	80072fa <USB_EPStartXfer+0x636>
 80072f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80072f4:	3301      	adds	r3, #1
 80072f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80072fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	b29a      	uxth	r2, r3
 8007300:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007304:	b29b      	uxth	r3, r3
 8007306:	029b      	lsls	r3, r3, #10
 8007308:	b29b      	uxth	r3, r3
 800730a:	4313      	orrs	r3, r2
 800730c:	b29a      	uxth	r2, r3
 800730e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007310:	801a      	strh	r2, [r3, #0]
 8007312:	e02a      	b.n	800736a <USB_EPStartXfer+0x6a6>
 8007314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d122      	bne.n	800736a <USB_EPStartXfer+0x6a6>
 8007324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007328:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007334:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800733e:	b29b      	uxth	r3, r3
 8007340:	461a      	mov	r2, r3
 8007342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007344:	4413      	add	r3, r2
 8007346:	653b      	str	r3, [r7, #80]	@ 0x50
 8007348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	011a      	lsls	r2, r3, #4
 8007356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007358:	4413      	add	r3, r2
 800735a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800735e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007364:	b29a      	uxth	r2, r3
 8007366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007368:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800736a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	891b      	ldrh	r3, [r3, #8]
 8007376:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800737a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6959      	ldr	r1, [r3, #20]
 8007386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738a:	b29b      	uxth	r3, r3
 800738c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007390:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007394:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007398:	6800      	ldr	r0, [r0, #0]
 800739a:	f001 f982 	bl	80086a2 <USB_WritePMA>
            ep->xfer_buff += len;
 800739e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	695a      	ldr	r2, [r3, #20]
 80073aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ae:	441a      	add	r2, r3
 80073b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6a1a      	ldr	r2, [r3, #32]
 80073c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d90f      	bls.n	80073f8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80073d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6a1a      	ldr	r2, [r3, #32]
 80073e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e8:	1ad2      	subs	r2, r2, r3
 80073ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	621a      	str	r2, [r3, #32]
 80073f6:	e00e      	b.n	8007416 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80073f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2200      	movs	r2, #0
 8007414:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	643b      	str	r3, [r7, #64]	@ 0x40
 8007422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	785b      	ldrb	r3, [r3, #1]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d177      	bne.n	8007522 <USB_EPStartXfer+0x85e>
 8007432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800743e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007442:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800744c:	b29b      	uxth	r3, r3
 800744e:	461a      	mov	r2, r3
 8007450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007452:	4413      	add	r3, r2
 8007454:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	011a      	lsls	r2, r3, #4
 8007464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007466:	4413      	add	r3, r2
 8007468:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800746c:	637b      	str	r3, [r7, #52]	@ 0x34
 800746e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	b29b      	uxth	r3, r3
 8007474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007478:	b29a      	uxth	r2, r3
 800747a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800747c:	801a      	strh	r2, [r3, #0]
 800747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007482:	2b3e      	cmp	r3, #62	@ 0x3e
 8007484:	d921      	bls.n	80074ca <USB_EPStartXfer+0x806>
 8007486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800748a:	095b      	lsrs	r3, r3, #5
 800748c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007494:	f003 031f 	and.w	r3, r3, #31
 8007498:	2b00      	cmp	r3, #0
 800749a:	d104      	bne.n	80074a6 <USB_EPStartXfer+0x7e2>
 800749c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a0:	3b01      	subs	r3, #1
 80074a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80074a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	029b      	lsls	r3, r3, #10
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	4313      	orrs	r3, r2
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074c6:	801a      	strh	r2, [r3, #0]
 80074c8:	e050      	b.n	800756c <USB_EPStartXfer+0x8a8>
 80074ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <USB_EPStartXfer+0x824>
 80074d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e4:	801a      	strh	r2, [r3, #0]
 80074e6:	e041      	b.n	800756c <USB_EPStartXfer+0x8a8>
 80074e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ec:	085b      	lsrs	r3, r3, #1
 80074ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d004      	beq.n	8007508 <USB_EPStartXfer+0x844>
 80074fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007502:	3301      	adds	r3, #1
 8007504:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29a      	uxth	r2, r3
 800750e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007512:	b29b      	uxth	r3, r3
 8007514:	029b      	lsls	r3, r3, #10
 8007516:	b29b      	uxth	r3, r3
 8007518:	4313      	orrs	r3, r2
 800751a:	b29a      	uxth	r2, r3
 800751c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800751e:	801a      	strh	r2, [r3, #0]
 8007520:	e024      	b.n	800756c <USB_EPStartXfer+0x8a8>
 8007522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	785b      	ldrb	r3, [r3, #1]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d11c      	bne.n	800756c <USB_EPStartXfer+0x8a8>
 8007532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007536:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007540:	b29b      	uxth	r3, r3
 8007542:	461a      	mov	r2, r3
 8007544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007546:	4413      	add	r3, r2
 8007548:	643b      	str	r3, [r7, #64]	@ 0x40
 800754a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	011a      	lsls	r2, r3, #4
 8007558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800755a:	4413      	add	r3, r2
 800755c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007566:	b29a      	uxth	r2, r3
 8007568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800756a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800756c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	895b      	ldrh	r3, [r3, #10]
 8007578:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800757c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6959      	ldr	r1, [r3, #20]
 8007588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800758c:	b29b      	uxth	r3, r3
 800758e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007592:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007596:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800759a:	6800      	ldr	r0, [r0, #0]
 800759c:	f001 f881 	bl	80086a2 <USB_WritePMA>
 80075a0:	e227      	b.n	80079f2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80075a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80075b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80075d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075d8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80075dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	441a      	add	r2, r3
 80075f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80075fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800760a:	b29b      	uxth	r3, r3
 800760c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800760e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007612:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800761a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800761e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007628:	b29b      	uxth	r3, r3
 800762a:	461a      	mov	r2, r3
 800762c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800762e:	4413      	add	r3, r2
 8007630:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	011a      	lsls	r2, r3, #4
 8007640:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007642:	4413      	add	r3, r2
 8007644:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007648:	65bb      	str	r3, [r7, #88]	@ 0x58
 800764a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800764e:	b29a      	uxth	r2, r3
 8007650:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007652:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	891b      	ldrh	r3, [r3, #8]
 8007660:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6959      	ldr	r1, [r3, #20]
 8007670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007674:	b29b      	uxth	r3, r3
 8007676:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800767a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800767e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007682:	6800      	ldr	r0, [r0, #0]
 8007684:	f001 f80d 	bl	80086a2 <USB_WritePMA>
 8007688:	e1b3      	b.n	80079f2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800768a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800768e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6a1a      	ldr	r2, [r3, #32]
 8007696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769a:	1ad2      	subs	r2, r2, r3
 800769c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 80c6 	beq.w	800785c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	673b      	str	r3, [r7, #112]	@ 0x70
 80076dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	785b      	ldrb	r3, [r3, #1]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d177      	bne.n	80077dc <USB_EPStartXfer+0xb18>
 80076ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007706:	b29b      	uxth	r3, r3
 8007708:	461a      	mov	r2, r3
 800770a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800770c:	4413      	add	r3, r2
 800770e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	011a      	lsls	r2, r3, #4
 800771e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007720:	4413      	add	r3, r2
 8007722:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007726:	667b      	str	r3, [r7, #100]	@ 0x64
 8007728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	b29b      	uxth	r3, r3
 800772e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007732:	b29a      	uxth	r2, r3
 8007734:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007736:	801a      	strh	r2, [r3, #0]
 8007738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773c:	2b3e      	cmp	r3, #62	@ 0x3e
 800773e:	d921      	bls.n	8007784 <USB_EPStartXfer+0xac0>
 8007740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007744:	095b      	lsrs	r3, r3, #5
 8007746:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800774a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800774e:	f003 031f 	and.w	r3, r3, #31
 8007752:	2b00      	cmp	r3, #0
 8007754:	d104      	bne.n	8007760 <USB_EPStartXfer+0xa9c>
 8007756:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800775a:	3b01      	subs	r3, #1
 800775c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29a      	uxth	r2, r3
 8007766:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800776a:	b29b      	uxth	r3, r3
 800776c:	029b      	lsls	r3, r3, #10
 800776e:	b29b      	uxth	r3, r3
 8007770:	4313      	orrs	r3, r2
 8007772:	b29b      	uxth	r3, r3
 8007774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800777c:	b29a      	uxth	r2, r3
 800777e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007780:	801a      	strh	r2, [r3, #0]
 8007782:	e050      	b.n	8007826 <USB_EPStartXfer+0xb62>
 8007784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10a      	bne.n	80077a2 <USB_EPStartXfer+0xade>
 800778c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	b29b      	uxth	r3, r3
 8007792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800779a:	b29a      	uxth	r2, r3
 800779c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800779e:	801a      	strh	r2, [r3, #0]
 80077a0:	e041      	b.n	8007826 <USB_EPStartXfer+0xb62>
 80077a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a6:	085b      	lsrs	r3, r3, #1
 80077a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80077ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <USB_EPStartXfer+0xafe>
 80077b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80077bc:	3301      	adds	r3, #1
 80077be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80077c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	029b      	lsls	r3, r3, #10
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	4313      	orrs	r3, r2
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077d8:	801a      	strh	r2, [r3, #0]
 80077da:	e024      	b.n	8007826 <USB_EPStartXfer+0xb62>
 80077dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	785b      	ldrb	r3, [r3, #1]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d11c      	bne.n	8007826 <USB_EPStartXfer+0xb62>
 80077ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	461a      	mov	r2, r3
 80077fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007800:	4413      	add	r3, r2
 8007802:	673b      	str	r3, [r7, #112]	@ 0x70
 8007804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	011a      	lsls	r2, r3, #4
 8007812:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007814:	4413      	add	r3, r2
 8007816:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800781a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800781c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007820:	b29a      	uxth	r2, r3
 8007822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007824:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	895b      	ldrh	r3, [r3, #10]
 8007832:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6959      	ldr	r1, [r3, #20]
 8007842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007846:	b29b      	uxth	r3, r3
 8007848:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800784c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007850:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007854:	6800      	ldr	r0, [r0, #0]
 8007856:	f000 ff24 	bl	80086a2 <USB_WritePMA>
 800785a:	e0ca      	b.n	80079f2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800785c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d177      	bne.n	800795c <USB_EPStartXfer+0xc98>
 800786c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007870:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007886:	b29b      	uxth	r3, r3
 8007888:	461a      	mov	r2, r3
 800788a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800788c:	4413      	add	r3, r2
 800788e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	011a      	lsls	r2, r3, #4
 800789e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078a0:	4413      	add	r3, r2
 80078a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80078a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078b6:	801a      	strh	r2, [r3, #0]
 80078b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80078be:	d921      	bls.n	8007904 <USB_EPStartXfer+0xc40>
 80078c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c4:	095b      	lsrs	r3, r3, #5
 80078c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80078ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ce:	f003 031f 	and.w	r3, r3, #31
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d104      	bne.n	80078e0 <USB_EPStartXfer+0xc1c>
 80078d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80078da:	3b01      	subs	r3, #1
 80078dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80078e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	029b      	lsls	r3, r3, #10
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	4313      	orrs	r3, r2
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007900:	801a      	strh	r2, [r3, #0]
 8007902:	e05c      	b.n	80079be <USB_EPStartXfer+0xcfa>
 8007904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10a      	bne.n	8007922 <USB_EPStartXfer+0xc5e>
 800790c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	b29b      	uxth	r3, r3
 8007912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800791a:	b29a      	uxth	r2, r3
 800791c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800791e:	801a      	strh	r2, [r3, #0]
 8007920:	e04d      	b.n	80079be <USB_EPStartXfer+0xcfa>
 8007922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007926:	085b      	lsrs	r3, r3, #1
 8007928:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800792c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	d004      	beq.n	8007942 <USB_EPStartXfer+0xc7e>
 8007938:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800793c:	3301      	adds	r3, #1
 800793e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007942:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007944:	881b      	ldrh	r3, [r3, #0]
 8007946:	b29a      	uxth	r2, r3
 8007948:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800794c:	b29b      	uxth	r3, r3
 800794e:	029b      	lsls	r3, r3, #10
 8007950:	b29b      	uxth	r3, r3
 8007952:	4313      	orrs	r3, r2
 8007954:	b29a      	uxth	r2, r3
 8007956:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007958:	801a      	strh	r2, [r3, #0]
 800795a:	e030      	b.n	80079be <USB_EPStartXfer+0xcfa>
 800795c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	785b      	ldrb	r3, [r3, #1]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d128      	bne.n	80079be <USB_EPStartXfer+0xcfa>
 800796c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007970:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800797a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007988:	b29b      	uxth	r3, r3
 800798a:	461a      	mov	r2, r3
 800798c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007990:	4413      	add	r3, r2
 8007992:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	011a      	lsls	r2, r3, #4
 80079a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079a8:	4413      	add	r3, r2
 80079aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80079ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80079bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80079be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	891b      	ldrh	r3, [r3, #8]
 80079ca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6959      	ldr	r1, [r3, #20]
 80079da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079de:	b29b      	uxth	r3, r3
 80079e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80079e4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80079e8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80079ec:	6800      	ldr	r0, [r0, #0]
 80079ee:	f000 fe58 	bl	80086a2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80079f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a18:	817b      	strh	r3, [r7, #10]
 8007a1a:	897b      	ldrh	r3, [r7, #10]
 8007a1c:	f083 0310 	eor.w	r3, r3, #16
 8007a20:	817b      	strh	r3, [r7, #10]
 8007a22:	897b      	ldrh	r3, [r7, #10]
 8007a24:	f083 0320 	eor.w	r3, r3, #32
 8007a28:	817b      	strh	r3, [r7, #10]
 8007a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	441a      	add	r2, r3
 8007a44:	897b      	ldrh	r3, [r7, #10]
 8007a46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	8013      	strh	r3, [r2, #0]
 8007a5a:	f000 bcde 	b.w	800841a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	7b1b      	ldrb	r3, [r3, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f040 80bb 	bne.w	8007be6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	699a      	ldr	r2, [r3, #24]
 8007a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d917      	bls.n	8007abc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	699a      	ldr	r2, [r3, #24]
 8007aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aac:	1ad2      	subs	r2, r2, r3
 8007aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	619a      	str	r2, [r3, #24]
 8007aba:	e00e      	b.n	8007ada <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ade:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	461a      	mov	r2, r3
 8007afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007afe:	4413      	add	r3, r2
 8007b00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	011a      	lsls	r2, r3, #4
 8007b12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b16:	4413      	add	r3, r2
 8007b18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b32:	801a      	strh	r2, [r3, #0]
 8007b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b38:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b3a:	d924      	bls.n	8007b86 <USB_EPStartXfer+0xec2>
 8007b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b40:	095b      	lsrs	r3, r3, #5
 8007b42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b4a:	f003 031f 	and.w	r3, r3, #31
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d104      	bne.n	8007b5c <USB_EPStartXfer+0xe98>
 8007b52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007b56:	3b01      	subs	r3, #1
 8007b58:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	029b      	lsls	r3, r3, #10
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b80:	801a      	strh	r2, [r3, #0]
 8007b82:	f000 bc10 	b.w	80083a6 <USB_EPStartXfer+0x16e2>
 8007b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10c      	bne.n	8007ba8 <USB_EPStartXfer+0xee4>
 8007b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ba4:	801a      	strh	r2, [r3, #0]
 8007ba6:	e3fe      	b.n	80083a6 <USB_EPStartXfer+0x16e2>
 8007ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bac:	085b      	lsrs	r3, r3, #1
 8007bae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d004      	beq.n	8007bc8 <USB_EPStartXfer+0xf04>
 8007bbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	029b      	lsls	r3, r3, #10
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007be2:	801a      	strh	r2, [r3, #0]
 8007be4:	e3df      	b.n	80083a6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	78db      	ldrb	r3, [r3, #3]
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	f040 8218 	bne.w	8008028 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	785b      	ldrb	r3, [r3, #1]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f040 809d 	bne.w	8007d44 <USB_EPStartXfer+0x1080>
 8007c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	461a      	mov	r2, r3
 8007c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c2e:	4413      	add	r3, r2
 8007c30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	011a      	lsls	r2, r3, #4
 8007c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c46:	4413      	add	r3, r2
 8007c48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c62:	801a      	strh	r2, [r3, #0]
 8007c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c72:	d92b      	bls.n	8007ccc <USB_EPStartXfer+0x1008>
 8007c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	095b      	lsrs	r3, r3, #5
 8007c82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	f003 031f 	and.w	r3, r3, #31
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d104      	bne.n	8007ca4 <USB_EPStartXfer+0xfe0>
 8007c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007ca4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	029b      	lsls	r3, r3, #10
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007cc8:	801a      	strh	r2, [r3, #0]
 8007cca:	e070      	b.n	8007dae <USB_EPStartXfer+0x10ea>
 8007ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10c      	bne.n	8007cf6 <USB_EPStartXfer+0x1032>
 8007cdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007cf2:	801a      	strh	r2, [r3, #0]
 8007cf4:	e05b      	b.n	8007dae <USB_EPStartXfer+0x10ea>
 8007cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	085b      	lsrs	r3, r3, #1
 8007d04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d004      	beq.n	8007d26 <USB_EPStartXfer+0x1062>
 8007d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d20:	3301      	adds	r3, #1
 8007d22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	029b      	lsls	r3, r3, #10
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d40:	801a      	strh	r2, [r3, #0]
 8007d42:	e034      	b.n	8007dae <USB_EPStartXfer+0x10ea>
 8007d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	785b      	ldrb	r3, [r3, #1]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d12c      	bne.n	8007dae <USB_EPStartXfer+0x10ea>
 8007d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	461a      	mov	r2, r3
 8007d74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d78:	4413      	add	r3, r2
 8007d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	011a      	lsls	r2, r3, #4
 8007d8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d90:	4413      	add	r3, r2
 8007d92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007dac:	801a      	strh	r2, [r3, #0]
 8007dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	785b      	ldrb	r3, [r3, #1]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f040 809d 	bne.w	8007f08 <USB_EPStartXfer+0x1244>
 8007dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	461a      	mov	r2, r3
 8007dee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007df2:	4413      	add	r3, r2
 8007df4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	011a      	lsls	r2, r3, #4
 8007e06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e26:	801a      	strh	r2, [r3, #0]
 8007e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e36:	d92b      	bls.n	8007e90 <USB_EPStartXfer+0x11cc>
 8007e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	095b      	lsrs	r3, r3, #5
 8007e46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	f003 031f 	and.w	r3, r3, #31
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d104      	bne.n	8007e68 <USB_EPStartXfer+0x11a4>
 8007e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e62:	3b01      	subs	r3, #1
 8007e64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	029b      	lsls	r3, r3, #10
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e8c:	801a      	strh	r2, [r3, #0]
 8007e8e:	e069      	b.n	8007f64 <USB_EPStartXfer+0x12a0>
 8007e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10c      	bne.n	8007eba <USB_EPStartXfer+0x11f6>
 8007ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007eb6:	801a      	strh	r2, [r3, #0]
 8007eb8:	e054      	b.n	8007f64 <USB_EPStartXfer+0x12a0>
 8007eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	085b      	lsrs	r3, r3, #1
 8007ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d004      	beq.n	8007eea <USB_EPStartXfer+0x1226>
 8007ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007eea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007eee:	881b      	ldrh	r3, [r3, #0]
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	029b      	lsls	r3, r3, #10
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	4313      	orrs	r3, r2
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f04:	801a      	strh	r2, [r3, #0]
 8007f06:	e02d      	b.n	8007f64 <USB_EPStartXfer+0x12a0>
 8007f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	785b      	ldrb	r3, [r3, #1]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d125      	bne.n	8007f64 <USB_EPStartXfer+0x12a0>
 8007f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	461a      	mov	r2, r3
 8007f2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007f2e:	4413      	add	r3, r2
 8007f30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	011a      	lsls	r2, r3, #4
 8007f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007f46:	4413      	add	r3, r2
 8007f48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f62:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69db      	ldr	r3, [r3, #28]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8218 	beq.w	80083a6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d005      	beq.n	8007fae <USB_EPStartXfer+0x12ea>
 8007fa2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10d      	bne.n	8007fca <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007fae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f040 81f5 	bne.w	80083a6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007fbc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f040 81ee 	bne.w	80083a6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ff0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	441a      	add	r2, r3
 800800e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800801a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800801e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008022:	b29b      	uxth	r3, r3
 8008024:	8013      	strh	r3, [r2, #0]
 8008026:	e1be      	b.n	80083a6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800802c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	78db      	ldrb	r3, [r3, #3]
 8008034:	2b01      	cmp	r3, #1
 8008036:	f040 81b4 	bne.w	80083a2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800803a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800803e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699a      	ldr	r2, [r3, #24]
 8008046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800804a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	429a      	cmp	r2, r3
 8008054:	d917      	bls.n	8008086 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800806a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	699a      	ldr	r2, [r3, #24]
 8008072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008076:	1ad2      	subs	r2, r2, r3
 8008078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800807c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	619a      	str	r2, [r3, #24]
 8008084:	e00e      	b.n	80080a4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800808a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800809a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2200      	movs	r2, #0
 80080a2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80080a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	785b      	ldrb	r3, [r3, #1]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f040 8085 	bne.w	80081c0 <USB_EPStartXfer+0x14fc>
 80080b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80080c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	461a      	mov	r2, r3
 80080d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080da:	4413      	add	r3, r2
 80080dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80080e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	011a      	lsls	r2, r3, #4
 80080ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080f2:	4413      	add	r3, r2
 80080f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80080f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	b29b      	uxth	r3, r3
 8008104:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008108:	b29a      	uxth	r2, r3
 800810a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800810e:	801a      	strh	r2, [r3, #0]
 8008110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008114:	2b3e      	cmp	r3, #62	@ 0x3e
 8008116:	d923      	bls.n	8008160 <USB_EPStartXfer+0x149c>
 8008118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800811c:	095b      	lsrs	r3, r3, #5
 800811e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008126:	f003 031f 	and.w	r3, r3, #31
 800812a:	2b00      	cmp	r3, #0
 800812c:	d104      	bne.n	8008138 <USB_EPStartXfer+0x1474>
 800812e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008132:	3b01      	subs	r3, #1
 8008134:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008138:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	b29a      	uxth	r2, r3
 8008140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008144:	b29b      	uxth	r3, r3
 8008146:	029b      	lsls	r3, r3, #10
 8008148:	b29b      	uxth	r3, r3
 800814a:	4313      	orrs	r3, r2
 800814c:	b29b      	uxth	r3, r3
 800814e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008156:	b29a      	uxth	r2, r3
 8008158:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800815c:	801a      	strh	r2, [r3, #0]
 800815e:	e060      	b.n	8008222 <USB_EPStartXfer+0x155e>
 8008160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10c      	bne.n	8008182 <USB_EPStartXfer+0x14be>
 8008168:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	b29b      	uxth	r3, r3
 8008170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008178:	b29a      	uxth	r2, r3
 800817a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800817e:	801a      	strh	r2, [r3, #0]
 8008180:	e04f      	b.n	8008222 <USB_EPStartXfer+0x155e>
 8008182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008186:	085b      	lsrs	r3, r3, #1
 8008188:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800818c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d004      	beq.n	80081a2 <USB_EPStartXfer+0x14de>
 8008198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800819c:	3301      	adds	r3, #1
 800819e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	029b      	lsls	r3, r3, #10
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	4313      	orrs	r3, r2
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081bc:	801a      	strh	r2, [r3, #0]
 80081be:	e030      	b.n	8008222 <USB_EPStartXfer+0x155e>
 80081c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	785b      	ldrb	r3, [r3, #1]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d128      	bne.n	8008222 <USB_EPStartXfer+0x155e>
 80081d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80081de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	461a      	mov	r2, r3
 80081f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081f4:	4413      	add	r3, r2
 80081f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80081fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	011a      	lsls	r2, r3, #4
 8008208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800820c:	4413      	add	r3, r2
 800820e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008212:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800821a:	b29a      	uxth	r2, r3
 800821c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008220:	801a      	strh	r2, [r3, #0]
 8008222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	785b      	ldrb	r3, [r3, #1]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f040 8085 	bne.w	800834c <USB_EPStartXfer+0x1688>
 8008242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008246:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008254:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800825e:	b29b      	uxth	r3, r3
 8008260:	461a      	mov	r2, r3
 8008262:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008266:	4413      	add	r3, r2
 8008268:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800826c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	011a      	lsls	r2, r3, #4
 800827a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800827e:	4413      	add	r3, r2
 8008280:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008288:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008294:	b29a      	uxth	r2, r3
 8008296:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800829a:	801a      	strh	r2, [r3, #0]
 800829c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80082a2:	d923      	bls.n	80082ec <USB_EPStartXfer+0x1628>
 80082a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a8:	095b      	lsrs	r3, r3, #5
 80082aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b2:	f003 031f 	and.w	r3, r3, #31
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d104      	bne.n	80082c4 <USB_EPStartXfer+0x1600>
 80082ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082be:	3b01      	subs	r3, #1
 80082c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	029b      	lsls	r3, r3, #10
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	4313      	orrs	r3, r2
 80082d8:	b29b      	uxth	r3, r3
 80082da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80082e8:	801a      	strh	r2, [r3, #0]
 80082ea:	e05c      	b.n	80083a6 <USB_EPStartXfer+0x16e2>
 80082ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10c      	bne.n	800830e <USB_EPStartXfer+0x164a>
 80082f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008304:	b29a      	uxth	r2, r3
 8008306:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800830a:	801a      	strh	r2, [r3, #0]
 800830c:	e04b      	b.n	80083a6 <USB_EPStartXfer+0x16e2>
 800830e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008312:	085b      	lsrs	r3, r3, #1
 8008314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	d004      	beq.n	800832e <USB_EPStartXfer+0x166a>
 8008324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008328:	3301      	adds	r3, #1
 800832a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800832e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	b29a      	uxth	r2, r3
 8008336:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800833a:	b29b      	uxth	r3, r3
 800833c:	029b      	lsls	r3, r3, #10
 800833e:	b29b      	uxth	r3, r3
 8008340:	4313      	orrs	r3, r2
 8008342:	b29a      	uxth	r2, r3
 8008344:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008348:	801a      	strh	r2, [r3, #0]
 800834a:	e02c      	b.n	80083a6 <USB_EPStartXfer+0x16e2>
 800834c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	785b      	ldrb	r3, [r3, #1]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d124      	bne.n	80083a6 <USB_EPStartXfer+0x16e2>
 800835c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008360:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800836a:	b29b      	uxth	r3, r3
 800836c:	461a      	mov	r2, r3
 800836e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008372:	4413      	add	r3, r2
 8008374:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	011a      	lsls	r2, r3, #4
 8008386:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800838a:	4413      	add	r3, r2
 800838c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008390:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008398:	b29a      	uxth	r2, r3
 800839a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800839e:	801a      	strh	r2, [r3, #0]
 80083a0:	e001      	b.n	80083a6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e03a      	b.n	800841c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80083a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80083d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80083d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80083d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80083dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80083e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80083e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80083e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	441a      	add	r2, r3
 8008402:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800840a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800840e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008416:	b29b      	uxth	r3, r3
 8008418:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008426:	b480      	push	{r7}
 8008428:	b085      	sub	sp, #20
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	785b      	ldrb	r3, [r3, #1]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d020      	beq.n	800847a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	b29b      	uxth	r3, r3
 8008446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800844a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800844e:	81bb      	strh	r3, [r7, #12]
 8008450:	89bb      	ldrh	r3, [r7, #12]
 8008452:	f083 0310 	eor.w	r3, r3, #16
 8008456:	81bb      	strh	r3, [r7, #12]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	441a      	add	r2, r3
 8008462:	89bb      	ldrh	r3, [r7, #12]
 8008464:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008468:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800846c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008474:	b29b      	uxth	r3, r3
 8008476:	8013      	strh	r3, [r2, #0]
 8008478:	e01f      	b.n	80084ba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	b29b      	uxth	r3, r3
 8008488:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800848c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008490:	81fb      	strh	r3, [r7, #14]
 8008492:	89fb      	ldrh	r3, [r7, #14]
 8008494:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008498:	81fb      	strh	r3, [r7, #14]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	441a      	add	r2, r3
 80084a4:	89fb      	ldrh	r3, [r7, #14]
 80084a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bc80      	pop	{r7}
 80084c4:	4770      	bx	lr

080084c6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b087      	sub	sp, #28
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	7b1b      	ldrb	r3, [r3, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f040 809d 	bne.w	8008614 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	785b      	ldrb	r3, [r3, #1]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d04c      	beq.n	800857c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	823b      	strh	r3, [r7, #16]
 80084f0:	8a3b      	ldrh	r3, [r7, #16]
 80084f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d01b      	beq.n	8008532 <USB_EPClearStall+0x6c>
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	b29b      	uxth	r3, r3
 8008508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800850c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008510:	81fb      	strh	r3, [r7, #14]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	441a      	add	r2, r3
 800851c:	89fb      	ldrh	r3, [r7, #14]
 800851e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800852a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800852e:	b29b      	uxth	r3, r3
 8008530:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	78db      	ldrb	r3, [r3, #3]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d06c      	beq.n	8008614 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	b29b      	uxth	r3, r3
 8008548:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800854c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008550:	81bb      	strh	r3, [r7, #12]
 8008552:	89bb      	ldrh	r3, [r7, #12]
 8008554:	f083 0320 	eor.w	r3, r3, #32
 8008558:	81bb      	strh	r3, [r7, #12]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	441a      	add	r2, r3
 8008564:	89bb      	ldrh	r3, [r7, #12]
 8008566:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800856a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800856e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008576:	b29b      	uxth	r3, r3
 8008578:	8013      	strh	r3, [r2, #0]
 800857a:	e04b      	b.n	8008614 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	82fb      	strh	r3, [r7, #22]
 800858a:	8afb      	ldrh	r3, [r7, #22]
 800858c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d01b      	beq.n	80085cc <USB_EPClearStall+0x106>
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085aa:	82bb      	strh	r3, [r7, #20]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	441a      	add	r2, r3
 80085b6:	8abb      	ldrh	r3, [r7, #20]
 80085b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80085c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4413      	add	r3, r2
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085e2:	827b      	strh	r3, [r7, #18]
 80085e4:	8a7b      	ldrh	r3, [r7, #18]
 80085e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80085ea:	827b      	strh	r3, [r7, #18]
 80085ec:	8a7b      	ldrh	r3, [r7, #18]
 80085ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80085f2:	827b      	strh	r3, [r7, #18]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	441a      	add	r2, r3
 80085fe:	8a7b      	ldrh	r3, [r7, #18]
 8008600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800860c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008610:	b29b      	uxth	r3, r3
 8008612:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	371c      	adds	r7, #28
 800861a:	46bd      	mov	sp, r7
 800861c:	bc80      	pop	{r7}
 800861e:	4770      	bx	lr

08008620 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800862c:	78fb      	ldrb	r3, [r7, #3]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d103      	bne.n	800863a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2280      	movs	r2, #128	@ 0x80
 8008636:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	bc80      	pop	{r7}
 8008644:	4770      	bx	lr

08008646 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	bc80      	pop	{r7}
 8008658:	4770      	bx	lr

0800865a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	bc80      	pop	{r7}
 800866c:	4770      	bx	lr

0800866e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800866e:	b480      	push	{r7}
 8008670:	b085      	sub	sp, #20
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800867c:	b29b      	uxth	r3, r3
 800867e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008680:	68fb      	ldr	r3, [r7, #12]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	bc80      	pop	{r7}
 800868a:	4770      	bx	lr

0800868c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	bc80      	pop	{r7}
 80086a0:	4770      	bx	lr

080086a2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b08b      	sub	sp, #44	@ 0x2c
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	60f8      	str	r0, [r7, #12]
 80086aa:	60b9      	str	r1, [r7, #8]
 80086ac:	4611      	mov	r1, r2
 80086ae:	461a      	mov	r2, r3
 80086b0:	460b      	mov	r3, r1
 80086b2:	80fb      	strh	r3, [r7, #6]
 80086b4:	4613      	mov	r3, r2
 80086b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80086b8:	88bb      	ldrh	r3, [r7, #4]
 80086ba:	3301      	adds	r3, #1
 80086bc:	085b      	lsrs	r3, r3, #1
 80086be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086c8:	88fb      	ldrh	r3, [r7, #6]
 80086ca:	005a      	lsls	r2, r3, #1
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086d4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80086da:	e01e      	b.n	800871a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	3301      	adds	r3, #1
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	021b      	lsls	r3, r3, #8
 80086ea:	b21a      	sxth	r2, r3
 80086ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	b21b      	sxth	r3, r3
 80086f4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	8a7a      	ldrh	r2, [r7, #18]
 80086fa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	3302      	adds	r3, #2
 8008700:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	3302      	adds	r3, #2
 8008706:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	3301      	adds	r3, #1
 800870c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	3301      	adds	r3, #1
 8008712:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008716:	3b01      	subs	r3, #1
 8008718:	627b      	str	r3, [r7, #36]	@ 0x24
 800871a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1dd      	bne.n	80086dc <USB_WritePMA+0x3a>
  }
}
 8008720:	bf00      	nop
 8008722:	bf00      	nop
 8008724:	372c      	adds	r7, #44	@ 0x2c
 8008726:	46bd      	mov	sp, r7
 8008728:	bc80      	pop	{r7}
 800872a:	4770      	bx	lr

0800872c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800872c:	b480      	push	{r7}
 800872e:	b08b      	sub	sp, #44	@ 0x2c
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	4611      	mov	r1, r2
 8008738:	461a      	mov	r2, r3
 800873a:	460b      	mov	r3, r1
 800873c:	80fb      	strh	r3, [r7, #6]
 800873e:	4613      	mov	r3, r2
 8008740:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008742:	88bb      	ldrh	r3, [r7, #4]
 8008744:	085b      	lsrs	r3, r3, #1
 8008746:	b29b      	uxth	r3, r3
 8008748:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008752:	88fb      	ldrh	r3, [r7, #6]
 8008754:	005a      	lsls	r2, r3, #1
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	4413      	add	r3, r2
 800875a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800875e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	627b      	str	r3, [r7, #36]	@ 0x24
 8008764:	e01b      	b.n	800879e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	b29b      	uxth	r3, r3
 800876c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	3302      	adds	r3, #2
 8008772:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	b2da      	uxtb	r2, r3
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	3301      	adds	r3, #1
 8008780:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	0a1b      	lsrs	r3, r3, #8
 8008786:	b2da      	uxtb	r2, r3
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	3301      	adds	r3, #1
 8008790:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	3302      	adds	r3, #2
 8008796:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879a:	3b01      	subs	r3, #1
 800879c:	627b      	str	r3, [r7, #36]	@ 0x24
 800879e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e0      	bne.n	8008766 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80087a4:	88bb      	ldrh	r3, [r7, #4]
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d007      	beq.n	80087c0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	701a      	strb	r2, [r3, #0]
  }
}
 80087c0:	bf00      	nop
 80087c2:	372c      	adds	r7, #44	@ 0x2c
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bc80      	pop	{r7}
 80087c8:	4770      	bx	lr

080087ca <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b084      	sub	sp, #16
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	460b      	mov	r3, r1
 80087d4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	7c1b      	ldrb	r3, [r3, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d115      	bne.n	800880e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80087e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087e6:	2202      	movs	r2, #2
 80087e8:	2181      	movs	r1, #129	@ 0x81
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 fec7 	bl	800a57e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80087f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087fa:	2202      	movs	r2, #2
 80087fc:	2101      	movs	r1, #1
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f001 febd 	bl	800a57e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800880c:	e012      	b.n	8008834 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800880e:	2340      	movs	r3, #64	@ 0x40
 8008810:	2202      	movs	r2, #2
 8008812:	2181      	movs	r1, #129	@ 0x81
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f001 feb2 	bl	800a57e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008820:	2340      	movs	r3, #64	@ 0x40
 8008822:	2202      	movs	r2, #2
 8008824:	2101      	movs	r1, #1
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f001 fea9 	bl	800a57e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008834:	2308      	movs	r3, #8
 8008836:	2203      	movs	r2, #3
 8008838:	2182      	movs	r1, #130	@ 0x82
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f001 fe9f 	bl	800a57e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008846:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800884a:	f001 ffbf 	bl	800a7cc <USBD_static_malloc>
 800884e:	4602      	mov	r2, r0
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800885c:	2b00      	cmp	r3, #0
 800885e:	d102      	bne.n	8008866 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008860:	2301      	movs	r3, #1
 8008862:	73fb      	strb	r3, [r7, #15]
 8008864:	e026      	b.n	80088b4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800886c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2200      	movs	r2, #0
 800887c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2200      	movs	r2, #0
 8008884:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	7c1b      	ldrb	r3, [r3, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d109      	bne.n	80088a4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008896:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800889a:	2101      	movs	r1, #1
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f001 ff5f 	bl	800a760 <USBD_LL_PrepareReceive>
 80088a2:	e007      	b.n	80088b4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088aa:	2340      	movs	r3, #64	@ 0x40
 80088ac:	2101      	movs	r1, #1
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f001 ff56 	bl	800a760 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b084      	sub	sp, #16
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	460b      	mov	r3, r1
 80088c8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80088ce:	2181      	movs	r1, #129	@ 0x81
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 fe7a 	bl	800a5ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80088dc:	2101      	movs	r1, #1
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f001 fe73 	bl	800a5ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80088ec:	2182      	movs	r1, #130	@ 0x82
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 fe6b 	bl	800a5ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00e      	beq.n	8008922 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008914:	4618      	mov	r0, r3
 8008916:	f001 ff65 	bl	800a7e4 <USBD_static_free>
    pdev->pClassData = NULL;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800893c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008952:	2b00      	cmp	r3, #0
 8008954:	d039      	beq.n	80089ca <USBD_CDC_Setup+0x9e>
 8008956:	2b20      	cmp	r3, #32
 8008958:	d17f      	bne.n	8008a5a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	88db      	ldrh	r3, [r3, #6]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d029      	beq.n	80089b6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	b25b      	sxtb	r3, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	da11      	bge.n	8008990 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008978:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	88d2      	ldrh	r2, [r2, #6]
 800897e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008980:	6939      	ldr	r1, [r7, #16]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	88db      	ldrh	r3, [r3, #6]
 8008986:	461a      	mov	r2, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 fa05 	bl	8009d98 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800898e:	e06b      	b.n	8008a68 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	785a      	ldrb	r2, [r3, #1]
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	88db      	ldrh	r3, [r3, #6]
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80089a6:	6939      	ldr	r1, [r7, #16]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	88db      	ldrh	r3, [r3, #6]
 80089ac:	461a      	mov	r2, r3
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f001 fa20 	bl	8009df4 <USBD_CtlPrepareRx>
      break;
 80089b4:	e058      	b.n	8008a68 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	7850      	ldrb	r0, [r2, #1]
 80089c2:	2200      	movs	r2, #0
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	4798      	blx	r3
      break;
 80089c8:	e04e      	b.n	8008a68 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	785b      	ldrb	r3, [r3, #1]
 80089ce:	2b0b      	cmp	r3, #11
 80089d0:	d02e      	beq.n	8008a30 <USBD_CDC_Setup+0x104>
 80089d2:	2b0b      	cmp	r3, #11
 80089d4:	dc38      	bgt.n	8008a48 <USBD_CDC_Setup+0x11c>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <USBD_CDC_Setup+0xb4>
 80089da:	2b0a      	cmp	r3, #10
 80089dc:	d014      	beq.n	8008a08 <USBD_CDC_Setup+0xdc>
 80089de:	e033      	b.n	8008a48 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d107      	bne.n	80089fa <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80089ea:	f107 030c 	add.w	r3, r7, #12
 80089ee:	2202      	movs	r2, #2
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f001 f9d0 	bl	8009d98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089f8:	e02e      	b.n	8008a58 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f001 f961 	bl	8009cc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a02:	2302      	movs	r3, #2
 8008a04:	75fb      	strb	r3, [r7, #23]
          break;
 8008a06:	e027      	b.n	8008a58 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	d107      	bne.n	8008a22 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a12:	f107 030f 	add.w	r3, r7, #15
 8008a16:	2201      	movs	r2, #1
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f001 f9bc 	bl	8009d98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a20:	e01a      	b.n	8008a58 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f001 f94d 	bl	8009cc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a2e:	e013      	b.n	8008a58 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d00d      	beq.n	8008a56 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f001 f941 	bl	8009cc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a42:	2302      	movs	r3, #2
 8008a44:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a46:	e006      	b.n	8008a56 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f001 f93a 	bl	8009cc4 <USBD_CtlError>
          ret = USBD_FAIL;
 8008a50:	2302      	movs	r3, #2
 8008a52:	75fb      	strb	r3, [r7, #23]
          break;
 8008a54:	e000      	b.n	8008a58 <USBD_CDC_Setup+0x12c>
          break;
 8008a56:	bf00      	nop
      }
      break;
 8008a58:	e006      	b.n	8008a68 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 f931 	bl	8009cc4 <USBD_CtlError>
      ret = USBD_FAIL;
 8008a62:	2302      	movs	r3, #2
 8008a64:	75fb      	strb	r3, [r7, #23]
      break;
 8008a66:	bf00      	nop
  }

  return ret;
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a84:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a8c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d03a      	beq.n	8008b0e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008a98:	78fa      	ldrb	r2, [r7, #3]
 8008a9a:	6879      	ldr	r1, [r7, #4]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	440b      	add	r3, r1
 8008aa6:	331c      	adds	r3, #28
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d029      	beq.n	8008b02 <USBD_CDC_DataIn+0x90>
 8008aae:	78fa      	ldrb	r2, [r7, #3]
 8008ab0:	6879      	ldr	r1, [r7, #4]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	440b      	add	r3, r1
 8008abc:	331c      	adds	r3, #28
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	78f9      	ldrb	r1, [r7, #3]
 8008ac2:	68b8      	ldr	r0, [r7, #8]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	440b      	add	r3, r1
 8008aca:	00db      	lsls	r3, r3, #3
 8008acc:	4403      	add	r3, r0
 8008ace:	3338      	adds	r3, #56	@ 0x38
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	fbb2 f1f3 	udiv	r1, r2, r3
 8008ad6:	fb01 f303 	mul.w	r3, r1, r3
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d110      	bne.n	8008b02 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008ae0:	78fa      	ldrb	r2, [r7, #3]
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	331c      	adds	r3, #28
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008af4:	78f9      	ldrb	r1, [r7, #3]
 8008af6:	2300      	movs	r3, #0
 8008af8:	2200      	movs	r2, #0
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f001 fe0d 	bl	800a71a <USBD_LL_Transmit>
 8008b00:	e003      	b.n	8008b0a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	e000      	b.n	8008b10 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008b0e:	2302      	movs	r3, #2
  }
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b2c:	78fb      	ldrb	r3, [r7, #3]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f001 fe38 	bl	800a7a6 <USBD_LL_GetRxDataSize>
 8008b36:	4602      	mov	r2, r0
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00d      	beq.n	8008b64 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	4798      	blx	r3

    return USBD_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	e000      	b.n	8008b66 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008b64:	2302      	movs	r3, #2
  }
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b7c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d014      	beq.n	8008bb2 <USBD_CDC_EP0_RxReady+0x44>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008b8e:	2bff      	cmp	r3, #255	@ 0xff
 8008b90:	d00f      	beq.n	8008bb2 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008ba0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008ba8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	22ff      	movs	r2, #255	@ 0xff
 8008bae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2243      	movs	r2, #67	@ 0x43
 8008bc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008bca:	4b03      	ldr	r3, [pc, #12]	@ (8008bd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bc80      	pop	{r7}
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	20000094 	.word	0x20000094

08008bdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2243      	movs	r2, #67	@ 0x43
 8008be8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008bea:	4b03      	ldr	r3, [pc, #12]	@ (8008bf8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bc80      	pop	{r7}
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	20000050 	.word	0x20000050

08008bfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2243      	movs	r2, #67	@ 0x43
 8008c08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008c0a:	4b03      	ldr	r3, [pc, #12]	@ (8008c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bc80      	pop	{r7}
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	200000d8 	.word	0x200000d8

08008c1c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	220a      	movs	r2, #10
 8008c28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008c2a:	4b03      	ldr	r3, [pc, #12]	@ (8008c38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bc80      	pop	{r7}
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	2000000c 	.word	0x2000000c

08008c3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008c46:	2302      	movs	r3, #2
 8008c48:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d005      	beq.n	8008c5c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bc80      	pop	{r7}
 8008c66:	4770      	bx	lr

08008c68 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	4613      	mov	r3, r2
 8008c74:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c7c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008c86:	88fa      	ldrh	r2, [r7, #6]
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	371c      	adds	r7, #28
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bc80      	pop	{r7}
 8008c98:	4770      	bx	lr

08008c9a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b085      	sub	sp, #20
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008caa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bc80      	pop	{r7}
 8008cbe:	4770      	bx	lr

08008cc0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d01c      	beq.n	8008d14 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d115      	bne.n	8008d10 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	2181      	movs	r1, #129	@ 0x81
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 fd07 	bl	800a71a <USBD_LL_Transmit>

      return USBD_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	e002      	b.n	8008d16 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e000      	b.n	8008d16 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008d14:	2302      	movs	r3, #2
  }
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b084      	sub	sp, #16
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d2c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d017      	beq.n	8008d68 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	7c1b      	ldrb	r3, [r3, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d109      	bne.n	8008d54 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 fd07 	bl	800a760 <USBD_LL_PrepareReceive>
 8008d52:	e007      	b.n	8008d64 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d5a:	2340      	movs	r3, #64	@ 0x40
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f001 fcfe 	bl	800a760 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	e000      	b.n	8008d6a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008d68:	2302      	movs	r3, #2
  }
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b084      	sub	sp, #16
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	60f8      	str	r0, [r7, #12]
 8008d7a:	60b9      	str	r1, [r7, #8]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008d86:	2302      	movs	r3, #2
 8008d88:	e01a      	b.n	8008dc0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	79fa      	ldrb	r2, [r7, #7]
 8008db6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f001 fb6b 	bl	800a494 <USBD_LL_Init>

  return USBD_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d006      	beq.n	8008dea <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	73fb      	strb	r3, [r7, #15]
 8008de8:	e001      	b.n	8008dee <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008dea:	2302      	movs	r3, #2
 8008dec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bc80      	pop	{r7}
 8008df8:	4770      	bx	lr

08008dfa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f001 fba0 	bl	800a548 <USBD_LL_Start>

  return USBD_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b083      	sub	sp, #12
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bc80      	pop	{r7}
 8008e24:	4770      	bx	lr

08008e26 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b084      	sub	sp, #16
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	460b      	mov	r3, r1
 8008e30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008e32:	2302      	movs	r3, #2
 8008e34:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00c      	beq.n	8008e5a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	78fa      	ldrb	r2, [r7, #3]
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	4798      	blx	r3
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d101      	bne.n	8008e5a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	78fa      	ldrb	r2, [r7, #3]
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	4798      	blx	r3

  return USBD_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 fed8 	bl	8009c52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008ebe:	f003 031f 	and.w	r3, r3, #31
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d016      	beq.n	8008ef4 <USBD_LL_SetupStage+0x6a>
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d81c      	bhi.n	8008f04 <USBD_LL_SetupStage+0x7a>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d002      	beq.n	8008ed4 <USBD_LL_SetupStage+0x4a>
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d008      	beq.n	8008ee4 <USBD_LL_SetupStage+0x5a>
 8008ed2:	e017      	b.n	8008f04 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f9cb 	bl	8009278 <USBD_StdDevReq>
      break;
 8008ee2:	e01a      	b.n	8008f1a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fa2d 	bl	800934c <USBD_StdItfReq>
      break;
 8008ef2:	e012      	b.n	8008f1a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fa6d 	bl	80093dc <USBD_StdEPReq>
      break;
 8008f02:	e00a      	b.n	8008f1a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008f0a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 fb78 	bl	800a608 <USBD_LL_StallEP>
      break;
 8008f18:	bf00      	nop
  }

  return USBD_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	607a      	str	r2, [r7, #4]
 8008f30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f32:	7afb      	ldrb	r3, [r7, #11]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d14b      	bne.n	8008fd0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008f3e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	d134      	bne.n	8008fb4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d919      	bls.n	8008f8a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	68da      	ldr	r2, [r3, #12]
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	1ad2      	subs	r2, r2, r3
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	68da      	ldr	r2, [r3, #12]
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d203      	bcs.n	8008f78 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	e002      	b.n	8008f7e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	461a      	mov	r2, r3
 8008f80:	6879      	ldr	r1, [r7, #4]
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 ff54 	bl	8009e30 <USBD_CtlContinueRx>
 8008f88:	e038      	b.n	8008ffc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00a      	beq.n	8008fac <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008f9c:	2b03      	cmp	r3, #3
 8008f9e:	d105      	bne.n	8008fac <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f000 ff51 	bl	8009e54 <USBD_CtlSendStatus>
 8008fb2:	e023      	b.n	8008ffc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008fba:	2b05      	cmp	r3, #5
 8008fbc:	d11e      	bne.n	8008ffc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f001 fb1d 	bl	800a608 <USBD_LL_StallEP>
 8008fce:	e015      	b.n	8008ffc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00d      	beq.n	8008ff8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	d108      	bne.n	8008ff8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	7afa      	ldrb	r2, [r7, #11]
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	4798      	blx	r3
 8008ff6:	e001      	b.n	8008ffc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	e000      	b.n	8008ffe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b086      	sub	sp, #24
 800900a:	af00      	add	r7, sp, #0
 800900c:	60f8      	str	r0, [r7, #12]
 800900e:	460b      	mov	r3, r1
 8009010:	607a      	str	r2, [r7, #4]
 8009012:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009014:	7afb      	ldrb	r3, [r7, #11]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d17f      	bne.n	800911a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3314      	adds	r3, #20
 800901e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009026:	2b02      	cmp	r3, #2
 8009028:	d15c      	bne.n	80090e4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	68da      	ldr	r2, [r3, #12]
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	429a      	cmp	r2, r3
 8009034:	d915      	bls.n	8009062 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	68da      	ldr	r2, [r3, #12]
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	1ad2      	subs	r2, r2, r3
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	b29b      	uxth	r3, r3
 800904a:	461a      	mov	r2, r3
 800904c:	6879      	ldr	r1, [r7, #4]
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 febe 	bl	8009dd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009054:	2300      	movs	r3, #0
 8009056:	2200      	movs	r2, #0
 8009058:	2100      	movs	r1, #0
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f001 fb80 	bl	800a760 <USBD_LL_PrepareReceive>
 8009060:	e04e      	b.n	8009100 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	6912      	ldr	r2, [r2, #16]
 800906a:	fbb3 f1f2 	udiv	r1, r3, r2
 800906e:	fb01 f202 	mul.w	r2, r1, r2
 8009072:	1a9b      	subs	r3, r3, r2
 8009074:	2b00      	cmp	r3, #0
 8009076:	d11c      	bne.n	80090b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009080:	429a      	cmp	r2, r3
 8009082:	d316      	bcc.n	80090b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800908e:	429a      	cmp	r2, r3
 8009090:	d20f      	bcs.n	80090b2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009092:	2200      	movs	r2, #0
 8009094:	2100      	movs	r1, #0
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f000 fe9a 	bl	8009dd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090a4:	2300      	movs	r3, #0
 80090a6:	2200      	movs	r2, #0
 80090a8:	2100      	movs	r1, #0
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f001 fb58 	bl	800a760 <USBD_LL_PrepareReceive>
 80090b0:	e026      	b.n	8009100 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80090c4:	2b03      	cmp	r3, #3
 80090c6:	d105      	bne.n	80090d4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80090d4:	2180      	movs	r1, #128	@ 0x80
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f001 fa96 	bl	800a608 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f000 fecc 	bl	8009e7a <USBD_CtlReceiveStatus>
 80090e2:	e00d      	b.n	8009100 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80090ea:	2b04      	cmp	r3, #4
 80090ec:	d004      	beq.n	80090f8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d103      	bne.n	8009100 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80090f8:	2180      	movs	r1, #128	@ 0x80
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f001 fa84 	bl	800a608 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009106:	2b01      	cmp	r3, #1
 8009108:	d11d      	bne.n	8009146 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f7ff fe81 	bl	8008e12 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009118:	e015      	b.n	8009146 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00d      	beq.n	8009142 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800912c:	2b03      	cmp	r3, #3
 800912e:	d108      	bne.n	8009142 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	7afa      	ldrb	r2, [r7, #11]
 800913a:	4611      	mov	r1, r2
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	4798      	blx	r3
 8009140:	e001      	b.n	8009146 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009142:	2302      	movs	r3, #2
 8009144:	e000      	b.n	8009148 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3718      	adds	r7, #24
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009158:	2340      	movs	r3, #64	@ 0x40
 800915a:	2200      	movs	r2, #0
 800915c:	2100      	movs	r1, #0
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f001 fa0d 	bl	800a57e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2240      	movs	r2, #64	@ 0x40
 8009170:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009174:	2340      	movs	r3, #64	@ 0x40
 8009176:	2200      	movs	r2, #0
 8009178:	2180      	movs	r1, #128	@ 0x80
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f001 f9ff 	bl	800a57e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2240      	movs	r2, #64	@ 0x40
 800918a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d009      	beq.n	80091c8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	6852      	ldr	r2, [r2, #4]
 80091c0:	b2d2      	uxtb	r2, r2
 80091c2:	4611      	mov	r1, r2
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	4798      	blx	r3
  }

  return USBD_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b083      	sub	sp, #12
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	460b      	mov	r3, r1
 80091dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	78fa      	ldrb	r2, [r7, #3]
 80091e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bc80      	pop	{r7}
 80091ee:	4770      	bx	lr

080091f0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2204      	movs	r2, #4
 8009208:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	bc80      	pop	{r7}
 8009216:	4770      	bx	lr

08009218 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009226:	2b04      	cmp	r3, #4
 8009228:	d105      	bne.n	8009236 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	bc80      	pop	{r7}
 8009240:	4770      	bx	lr

08009242 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b082      	sub	sp, #8
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009250:	2b03      	cmp	r3, #3
 8009252:	d10b      	bne.n	800926c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800925a:	69db      	ldr	r3, [r3, #28]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d005      	beq.n	800926c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009266:	69db      	ldr	r3, [r3, #28]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800928e:	2b40      	cmp	r3, #64	@ 0x40
 8009290:	d005      	beq.n	800929e <USBD_StdDevReq+0x26>
 8009292:	2b40      	cmp	r3, #64	@ 0x40
 8009294:	d84f      	bhi.n	8009336 <USBD_StdDevReq+0xbe>
 8009296:	2b00      	cmp	r3, #0
 8009298:	d009      	beq.n	80092ae <USBD_StdDevReq+0x36>
 800929a:	2b20      	cmp	r3, #32
 800929c:	d14b      	bne.n	8009336 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	4798      	blx	r3
      break;
 80092ac:	e048      	b.n	8009340 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	785b      	ldrb	r3, [r3, #1]
 80092b2:	2b09      	cmp	r3, #9
 80092b4:	d839      	bhi.n	800932a <USBD_StdDevReq+0xb2>
 80092b6:	a201      	add	r2, pc, #4	@ (adr r2, 80092bc <USBD_StdDevReq+0x44>)
 80092b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092bc:	0800930d 	.word	0x0800930d
 80092c0:	08009321 	.word	0x08009321
 80092c4:	0800932b 	.word	0x0800932b
 80092c8:	08009317 	.word	0x08009317
 80092cc:	0800932b 	.word	0x0800932b
 80092d0:	080092ef 	.word	0x080092ef
 80092d4:	080092e5 	.word	0x080092e5
 80092d8:	0800932b 	.word	0x0800932b
 80092dc:	08009303 	.word	0x08009303
 80092e0:	080092f9 	.word	0x080092f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f9dc 	bl	80096a4 <USBD_GetDescriptor>
          break;
 80092ec:	e022      	b.n	8009334 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fb3f 	bl	8009974 <USBD_SetAddress>
          break;
 80092f6:	e01d      	b.n	8009334 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fb7e 	bl	80099fc <USBD_SetConfig>
          break;
 8009300:	e018      	b.n	8009334 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fc07 	bl	8009b18 <USBD_GetConfig>
          break;
 800930a:	e013      	b.n	8009334 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fc37 	bl	8009b82 <USBD_GetStatus>
          break;
 8009314:	e00e      	b.n	8009334 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fc65 	bl	8009be8 <USBD_SetFeature>
          break;
 800931e:	e009      	b.n	8009334 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fc74 	bl	8009c10 <USBD_ClrFeature>
          break;
 8009328:	e004      	b.n	8009334 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fcc9 	bl	8009cc4 <USBD_CtlError>
          break;
 8009332:	bf00      	nop
      }
      break;
 8009334:	e004      	b.n	8009340 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fcc3 	bl	8009cc4 <USBD_CtlError>
      break;
 800933e:	bf00      	nop
  }

  return ret;
 8009340:	7bfb      	ldrb	r3, [r7, #15]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop

0800934c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009362:	2b40      	cmp	r3, #64	@ 0x40
 8009364:	d005      	beq.n	8009372 <USBD_StdItfReq+0x26>
 8009366:	2b40      	cmp	r3, #64	@ 0x40
 8009368:	d82e      	bhi.n	80093c8 <USBD_StdItfReq+0x7c>
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <USBD_StdItfReq+0x26>
 800936e:	2b20      	cmp	r3, #32
 8009370:	d12a      	bne.n	80093c8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009378:	3b01      	subs	r3, #1
 800937a:	2b02      	cmp	r3, #2
 800937c:	d81d      	bhi.n	80093ba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	889b      	ldrh	r3, [r3, #4]
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b01      	cmp	r3, #1
 8009386:	d813      	bhi.n	80093b0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	4798      	blx	r3
 8009396:	4603      	mov	r3, r0
 8009398:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	88db      	ldrh	r3, [r3, #6]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d110      	bne.n	80093c4 <USBD_StdItfReq+0x78>
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10d      	bne.n	80093c4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fd53 	bl	8009e54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80093ae:	e009      	b.n	80093c4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fc86 	bl	8009cc4 <USBD_CtlError>
          break;
 80093b8:	e004      	b.n	80093c4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fc81 	bl	8009cc4 <USBD_CtlError>
          break;
 80093c2:	e000      	b.n	80093c6 <USBD_StdItfReq+0x7a>
          break;
 80093c4:	bf00      	nop
      }
      break;
 80093c6:	e004      	b.n	80093d2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fc7a 	bl	8009cc4 <USBD_CtlError>
      break;
 80093d0:	bf00      	nop
  }

  return USBD_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	889b      	ldrh	r3, [r3, #4]
 80093ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093f8:	2b40      	cmp	r3, #64	@ 0x40
 80093fa:	d007      	beq.n	800940c <USBD_StdEPReq+0x30>
 80093fc:	2b40      	cmp	r3, #64	@ 0x40
 80093fe:	f200 8146 	bhi.w	800968e <USBD_StdEPReq+0x2b2>
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00a      	beq.n	800941c <USBD_StdEPReq+0x40>
 8009406:	2b20      	cmp	r3, #32
 8009408:	f040 8141 	bne.w	800968e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	4798      	blx	r3
      break;
 800941a:	e13d      	b.n	8009698 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009424:	2b20      	cmp	r3, #32
 8009426:	d10a      	bne.n	800943e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	4798      	blx	r3
 8009436:	4603      	mov	r3, r0
 8009438:	73fb      	strb	r3, [r7, #15]

        return ret;
 800943a:	7bfb      	ldrb	r3, [r7, #15]
 800943c:	e12d      	b.n	800969a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	785b      	ldrb	r3, [r3, #1]
 8009442:	2b03      	cmp	r3, #3
 8009444:	d007      	beq.n	8009456 <USBD_StdEPReq+0x7a>
 8009446:	2b03      	cmp	r3, #3
 8009448:	f300 811b 	bgt.w	8009682 <USBD_StdEPReq+0x2a6>
 800944c:	2b00      	cmp	r3, #0
 800944e:	d072      	beq.n	8009536 <USBD_StdEPReq+0x15a>
 8009450:	2b01      	cmp	r3, #1
 8009452:	d03a      	beq.n	80094ca <USBD_StdEPReq+0xee>
 8009454:	e115      	b.n	8009682 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800945c:	2b02      	cmp	r3, #2
 800945e:	d002      	beq.n	8009466 <USBD_StdEPReq+0x8a>
 8009460:	2b03      	cmp	r3, #3
 8009462:	d015      	beq.n	8009490 <USBD_StdEPReq+0xb4>
 8009464:	e02b      	b.n	80094be <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00c      	beq.n	8009486 <USBD_StdEPReq+0xaa>
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	2b80      	cmp	r3, #128	@ 0x80
 8009470:	d009      	beq.n	8009486 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009472:	7bbb      	ldrb	r3, [r7, #14]
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f001 f8c6 	bl	800a608 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800947c:	2180      	movs	r1, #128	@ 0x80
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 f8c2 	bl	800a608 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009484:	e020      	b.n	80094c8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fc1b 	bl	8009cc4 <USBD_CtlError>
              break;
 800948e:	e01b      	b.n	80094c8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	885b      	ldrh	r3, [r3, #2]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10e      	bne.n	80094b6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009498:	7bbb      	ldrb	r3, [r7, #14]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00b      	beq.n	80094b6 <USBD_StdEPReq+0xda>
 800949e:	7bbb      	ldrb	r3, [r7, #14]
 80094a0:	2b80      	cmp	r3, #128	@ 0x80
 80094a2:	d008      	beq.n	80094b6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	88db      	ldrh	r3, [r3, #6]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d104      	bne.n	80094b6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f001 f8a9 	bl	800a608 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fccc 	bl	8009e54 <USBD_CtlSendStatus>

              break;
 80094bc:	e004      	b.n	80094c8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fbff 	bl	8009cc4 <USBD_CtlError>
              break;
 80094c6:	bf00      	nop
          }
          break;
 80094c8:	e0e0      	b.n	800968c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d002      	beq.n	80094da <USBD_StdEPReq+0xfe>
 80094d4:	2b03      	cmp	r3, #3
 80094d6:	d015      	beq.n	8009504 <USBD_StdEPReq+0x128>
 80094d8:	e026      	b.n	8009528 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094da:	7bbb      	ldrb	r3, [r7, #14]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00c      	beq.n	80094fa <USBD_StdEPReq+0x11e>
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
 80094e2:	2b80      	cmp	r3, #128	@ 0x80
 80094e4:	d009      	beq.n	80094fa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	4619      	mov	r1, r3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f001 f88c 	bl	800a608 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80094f0:	2180      	movs	r1, #128	@ 0x80
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f001 f888 	bl	800a608 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094f8:	e01c      	b.n	8009534 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fbe1 	bl	8009cc4 <USBD_CtlError>
              break;
 8009502:	e017      	b.n	8009534 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	885b      	ldrh	r3, [r3, #2]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d112      	bne.n	8009532 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800950c:	7bbb      	ldrb	r3, [r7, #14]
 800950e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009512:	2b00      	cmp	r3, #0
 8009514:	d004      	beq.n	8009520 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009516:	7bbb      	ldrb	r3, [r7, #14]
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f001 f893 	bl	800a646 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fc97 	bl	8009e54 <USBD_CtlSendStatus>
              }
              break;
 8009526:	e004      	b.n	8009532 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fbca 	bl	8009cc4 <USBD_CtlError>
              break;
 8009530:	e000      	b.n	8009534 <USBD_StdEPReq+0x158>
              break;
 8009532:	bf00      	nop
          }
          break;
 8009534:	e0aa      	b.n	800968c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800953c:	2b02      	cmp	r3, #2
 800953e:	d002      	beq.n	8009546 <USBD_StdEPReq+0x16a>
 8009540:	2b03      	cmp	r3, #3
 8009542:	d032      	beq.n	80095aa <USBD_StdEPReq+0x1ce>
 8009544:	e097      	b.n	8009676 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009546:	7bbb      	ldrb	r3, [r7, #14]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d007      	beq.n	800955c <USBD_StdEPReq+0x180>
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	2b80      	cmp	r3, #128	@ 0x80
 8009550:	d004      	beq.n	800955c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fbb5 	bl	8009cc4 <USBD_CtlError>
                break;
 800955a:	e091      	b.n	8009680 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800955c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009560:	2b00      	cmp	r3, #0
 8009562:	da0b      	bge.n	800957c <USBD_StdEPReq+0x1a0>
 8009564:	7bbb      	ldrb	r3, [r7, #14]
 8009566:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800956a:	4613      	mov	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	3310      	adds	r3, #16
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	4413      	add	r3, r2
 8009578:	3304      	adds	r3, #4
 800957a:	e00b      	b.n	8009594 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800957c:	7bbb      	ldrb	r3, [r7, #14]
 800957e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009582:	4613      	mov	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	4413      	add	r3, r2
 8009592:	3304      	adds	r3, #4
 8009594:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	2200      	movs	r2, #0
 800959a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	2202      	movs	r2, #2
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fbf8 	bl	8009d98 <USBD_CtlSendData>
              break;
 80095a8:	e06a      	b.n	8009680 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80095aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	da11      	bge.n	80095d6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095b2:	7bbb      	ldrb	r3, [r7, #14]
 80095b4:	f003 020f 	and.w	r2, r3, #15
 80095b8:	6879      	ldr	r1, [r7, #4]
 80095ba:	4613      	mov	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	440b      	add	r3, r1
 80095c4:	3318      	adds	r3, #24
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d117      	bne.n	80095fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fb78 	bl	8009cc4 <USBD_CtlError>
                  break;
 80095d4:	e054      	b.n	8009680 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	f003 020f 	and.w	r2, r3, #15
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	4613      	mov	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	440b      	add	r3, r1
 80095e8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d104      	bne.n	80095fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fb65 	bl	8009cc4 <USBD_CtlError>
                  break;
 80095fa:	e041      	b.n	8009680 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009600:	2b00      	cmp	r3, #0
 8009602:	da0b      	bge.n	800961c <USBD_StdEPReq+0x240>
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800960a:	4613      	mov	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	3310      	adds	r3, #16
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	4413      	add	r3, r2
 8009618:	3304      	adds	r3, #4
 800961a:	e00b      	b.n	8009634 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800961c:	7bbb      	ldrb	r3, [r7, #14]
 800961e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	4413      	add	r3, r2
 8009632:	3304      	adds	r3, #4
 8009634:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009636:	7bbb      	ldrb	r3, [r7, #14]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <USBD_StdEPReq+0x266>
 800963c:	7bbb      	ldrb	r3, [r7, #14]
 800963e:	2b80      	cmp	r3, #128	@ 0x80
 8009640:	d103      	bne.n	800964a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2200      	movs	r2, #0
 8009646:	601a      	str	r2, [r3, #0]
 8009648:	e00e      	b.n	8009668 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800964a:	7bbb      	ldrb	r3, [r7, #14]
 800964c:	4619      	mov	r1, r3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f001 f818 	bl	800a684 <USBD_LL_IsStallEP>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d003      	beq.n	8009662 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	2201      	movs	r2, #1
 800965e:	601a      	str	r2, [r3, #0]
 8009660:	e002      	b.n	8009668 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2200      	movs	r2, #0
 8009666:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	2202      	movs	r2, #2
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fb92 	bl	8009d98 <USBD_CtlSendData>
              break;
 8009674:	e004      	b.n	8009680 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009676:	6839      	ldr	r1, [r7, #0]
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fb23 	bl	8009cc4 <USBD_CtlError>
              break;
 800967e:	bf00      	nop
          }
          break;
 8009680:	e004      	b.n	800968c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009682:	6839      	ldr	r1, [r7, #0]
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fb1d 	bl	8009cc4 <USBD_CtlError>
          break;
 800968a:	bf00      	nop
      }
      break;
 800968c:	e004      	b.n	8009698 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 fb17 	bl	8009cc4 <USBD_CtlError>
      break;
 8009696:	bf00      	nop
  }

  return ret;
 8009698:	7bfb      	ldrb	r3, [r7, #15]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
	...

080096a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096ae:	2300      	movs	r3, #0
 80096b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80096b2:	2300      	movs	r3, #0
 80096b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80096b6:	2300      	movs	r3, #0
 80096b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	885b      	ldrh	r3, [r3, #2]
 80096be:	0a1b      	lsrs	r3, r3, #8
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	3b01      	subs	r3, #1
 80096c4:	2b06      	cmp	r3, #6
 80096c6:	f200 8128 	bhi.w	800991a <USBD_GetDescriptor+0x276>
 80096ca:	a201      	add	r2, pc, #4	@ (adr r2, 80096d0 <USBD_GetDescriptor+0x2c>)
 80096cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d0:	080096ed 	.word	0x080096ed
 80096d4:	08009705 	.word	0x08009705
 80096d8:	08009745 	.word	0x08009745
 80096dc:	0800991b 	.word	0x0800991b
 80096e0:	0800991b 	.word	0x0800991b
 80096e4:	080098bb 	.word	0x080098bb
 80096e8:	080098e7 	.word	0x080098e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	7c12      	ldrb	r2, [r2, #16]
 80096f8:	f107 0108 	add.w	r1, r7, #8
 80096fc:	4610      	mov	r0, r2
 80096fe:	4798      	blx	r3
 8009700:	60f8      	str	r0, [r7, #12]
      break;
 8009702:	e112      	b.n	800992a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	7c1b      	ldrb	r3, [r3, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10d      	bne.n	8009728 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009714:	f107 0208 	add.w	r2, r7, #8
 8009718:	4610      	mov	r0, r2
 800971a:	4798      	blx	r3
 800971c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	3301      	adds	r3, #1
 8009722:	2202      	movs	r2, #2
 8009724:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009726:	e100      	b.n	800992a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800972e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009730:	f107 0208 	add.w	r2, r7, #8
 8009734:	4610      	mov	r0, r2
 8009736:	4798      	blx	r3
 8009738:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3301      	adds	r3, #1
 800973e:	2202      	movs	r2, #2
 8009740:	701a      	strb	r2, [r3, #0]
      break;
 8009742:	e0f2      	b.n	800992a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	885b      	ldrh	r3, [r3, #2]
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b05      	cmp	r3, #5
 800974c:	f200 80ac 	bhi.w	80098a8 <USBD_GetDescriptor+0x204>
 8009750:	a201      	add	r2, pc, #4	@ (adr r2, 8009758 <USBD_GetDescriptor+0xb4>)
 8009752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009756:	bf00      	nop
 8009758:	08009771 	.word	0x08009771
 800975c:	080097a5 	.word	0x080097a5
 8009760:	080097d9 	.word	0x080097d9
 8009764:	0800980d 	.word	0x0800980d
 8009768:	08009841 	.word	0x08009841
 800976c:	08009875 	.word	0x08009875
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00b      	beq.n	8009794 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	7c12      	ldrb	r2, [r2, #16]
 8009788:	f107 0108 	add.w	r1, r7, #8
 800978c:	4610      	mov	r0, r2
 800978e:	4798      	blx	r3
 8009790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009792:	e091      	b.n	80098b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fa94 	bl	8009cc4 <USBD_CtlError>
            err++;
 800979c:	7afb      	ldrb	r3, [r7, #11]
 800979e:	3301      	adds	r3, #1
 80097a0:	72fb      	strb	r3, [r7, #11]
          break;
 80097a2:	e089      	b.n	80098b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00b      	beq.n	80097c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	7c12      	ldrb	r2, [r2, #16]
 80097bc:	f107 0108 	add.w	r1, r7, #8
 80097c0:	4610      	mov	r0, r2
 80097c2:	4798      	blx	r3
 80097c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097c6:	e077      	b.n	80098b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fa7a 	bl	8009cc4 <USBD_CtlError>
            err++;
 80097d0:	7afb      	ldrb	r3, [r7, #11]
 80097d2:	3301      	adds	r3, #1
 80097d4:	72fb      	strb	r3, [r7, #11]
          break;
 80097d6:	e06f      	b.n	80098b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00b      	beq.n	80097fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	7c12      	ldrb	r2, [r2, #16]
 80097f0:	f107 0108 	add.w	r1, r7, #8
 80097f4:	4610      	mov	r0, r2
 80097f6:	4798      	blx	r3
 80097f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097fa:	e05d      	b.n	80098b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fa60 	bl	8009cc4 <USBD_CtlError>
            err++;
 8009804:	7afb      	ldrb	r3, [r7, #11]
 8009806:	3301      	adds	r3, #1
 8009808:	72fb      	strb	r3, [r7, #11]
          break;
 800980a:	e055      	b.n	80098b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00b      	beq.n	8009830 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	7c12      	ldrb	r2, [r2, #16]
 8009824:	f107 0108 	add.w	r1, r7, #8
 8009828:	4610      	mov	r0, r2
 800982a:	4798      	blx	r3
 800982c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800982e:	e043      	b.n	80098b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fa46 	bl	8009cc4 <USBD_CtlError>
            err++;
 8009838:	7afb      	ldrb	r3, [r7, #11]
 800983a:	3301      	adds	r3, #1
 800983c:	72fb      	strb	r3, [r7, #11]
          break;
 800983e:	e03b      	b.n	80098b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00b      	beq.n	8009864 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	7c12      	ldrb	r2, [r2, #16]
 8009858:	f107 0108 	add.w	r1, r7, #8
 800985c:	4610      	mov	r0, r2
 800985e:	4798      	blx	r3
 8009860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009862:	e029      	b.n	80098b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fa2c 	bl	8009cc4 <USBD_CtlError>
            err++;
 800986c:	7afb      	ldrb	r3, [r7, #11]
 800986e:	3301      	adds	r3, #1
 8009870:	72fb      	strb	r3, [r7, #11]
          break;
 8009872:	e021      	b.n	80098b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00b      	beq.n	8009898 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	7c12      	ldrb	r2, [r2, #16]
 800988c:	f107 0108 	add.w	r1, r7, #8
 8009890:	4610      	mov	r0, r2
 8009892:	4798      	blx	r3
 8009894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009896:	e00f      	b.n	80098b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fa12 	bl	8009cc4 <USBD_CtlError>
            err++;
 80098a0:	7afb      	ldrb	r3, [r7, #11]
 80098a2:	3301      	adds	r3, #1
 80098a4:	72fb      	strb	r3, [r7, #11]
          break;
 80098a6:	e007      	b.n	80098b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fa0a 	bl	8009cc4 <USBD_CtlError>
          err++;
 80098b0:	7afb      	ldrb	r3, [r7, #11]
 80098b2:	3301      	adds	r3, #1
 80098b4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80098b6:	e038      	b.n	800992a <USBD_GetDescriptor+0x286>
 80098b8:	e037      	b.n	800992a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	7c1b      	ldrb	r3, [r3, #16]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d109      	bne.n	80098d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ca:	f107 0208 	add.w	r2, r7, #8
 80098ce:	4610      	mov	r0, r2
 80098d0:	4798      	blx	r3
 80098d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098d4:	e029      	b.n	800992a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f9f3 	bl	8009cc4 <USBD_CtlError>
        err++;
 80098de:	7afb      	ldrb	r3, [r7, #11]
 80098e0:	3301      	adds	r3, #1
 80098e2:	72fb      	strb	r3, [r7, #11]
      break;
 80098e4:	e021      	b.n	800992a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	7c1b      	ldrb	r3, [r3, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10d      	bne.n	800990a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098f6:	f107 0208 	add.w	r2, r7, #8
 80098fa:	4610      	mov	r0, r2
 80098fc:	4798      	blx	r3
 80098fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	3301      	adds	r3, #1
 8009904:	2207      	movs	r2, #7
 8009906:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009908:	e00f      	b.n	800992a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f9d9 	bl	8009cc4 <USBD_CtlError>
        err++;
 8009912:	7afb      	ldrb	r3, [r7, #11]
 8009914:	3301      	adds	r3, #1
 8009916:	72fb      	strb	r3, [r7, #11]
      break;
 8009918:	e007      	b.n	800992a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f9d1 	bl	8009cc4 <USBD_CtlError>
      err++;
 8009922:	7afb      	ldrb	r3, [r7, #11]
 8009924:	3301      	adds	r3, #1
 8009926:	72fb      	strb	r3, [r7, #11]
      break;
 8009928:	bf00      	nop
  }

  if (err != 0U)
 800992a:	7afb      	ldrb	r3, [r7, #11]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d11c      	bne.n	800996a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009930:	893b      	ldrh	r3, [r7, #8]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d011      	beq.n	800995a <USBD_GetDescriptor+0x2b6>
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	88db      	ldrh	r3, [r3, #6]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00d      	beq.n	800995a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	88da      	ldrh	r2, [r3, #6]
 8009942:	893b      	ldrh	r3, [r7, #8]
 8009944:	4293      	cmp	r3, r2
 8009946:	bf28      	it	cs
 8009948:	4613      	movcs	r3, r2
 800994a:	b29b      	uxth	r3, r3
 800994c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800994e:	893b      	ldrh	r3, [r7, #8]
 8009950:	461a      	mov	r2, r3
 8009952:	68f9      	ldr	r1, [r7, #12]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fa1f 	bl	8009d98 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	88db      	ldrh	r3, [r3, #6]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d104      	bne.n	800996c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fa76 	bl	8009e54 <USBD_CtlSendStatus>
 8009968:	e000      	b.n	800996c <USBD_GetDescriptor+0x2c8>
    return;
 800996a:	bf00      	nop
    }
  }
}
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop

08009974 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	889b      	ldrh	r3, [r3, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d130      	bne.n	80099e8 <USBD_SetAddress+0x74>
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	88db      	ldrh	r3, [r3, #6]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d12c      	bne.n	80099e8 <USBD_SetAddress+0x74>
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	885b      	ldrh	r3, [r3, #2]
 8009992:	2b7f      	cmp	r3, #127	@ 0x7f
 8009994:	d828      	bhi.n	80099e8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	885b      	ldrh	r3, [r3, #2]
 800999a:	b2db      	uxtb	r3, r3
 800999c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099a8:	2b03      	cmp	r3, #3
 80099aa:	d104      	bne.n	80099b6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f988 	bl	8009cc4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099b4:	e01d      	b.n	80099f2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	7bfa      	ldrb	r2, [r7, #15]
 80099ba:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fe8a 	bl	800a6dc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fa43 	bl	8009e54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80099ce:	7bfb      	ldrb	r3, [r7, #15]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d004      	beq.n	80099de <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2202      	movs	r2, #2
 80099d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099dc:	e009      	b.n	80099f2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099e6:	e004      	b.n	80099f2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f96a 	bl	8009cc4 <USBD_CtlError>
  }
}
 80099f0:	bf00      	nop
 80099f2:	bf00      	nop
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	885b      	ldrh	r3, [r3, #2]
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	4b41      	ldr	r3, [pc, #260]	@ (8009b14 <USBD_SetConfig+0x118>)
 8009a0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a10:	4b40      	ldr	r3, [pc, #256]	@ (8009b14 <USBD_SetConfig+0x118>)
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d904      	bls.n	8009a22 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f952 	bl	8009cc4 <USBD_CtlError>
 8009a20:	e075      	b.n	8009b0e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d002      	beq.n	8009a32 <USBD_SetConfig+0x36>
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	d023      	beq.n	8009a78 <USBD_SetConfig+0x7c>
 8009a30:	e062      	b.n	8009af8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009a32:	4b38      	ldr	r3, [pc, #224]	@ (8009b14 <USBD_SetConfig+0x118>)
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d01a      	beq.n	8009a70 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009a3a:	4b36      	ldr	r3, [pc, #216]	@ (8009b14 <USBD_SetConfig+0x118>)
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2203      	movs	r2, #3
 8009a48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a4c:	4b31      	ldr	r3, [pc, #196]	@ (8009b14 <USBD_SetConfig+0x118>)
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7ff f9e7 	bl	8008e26 <USBD_SetClassConfig>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d104      	bne.n	8009a68 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f92f 	bl	8009cc4 <USBD_CtlError>
            return;
 8009a66:	e052      	b.n	8009b0e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 f9f3 	bl	8009e54 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009a6e:	e04e      	b.n	8009b0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f9ef 	bl	8009e54 <USBD_CtlSendStatus>
        break;
 8009a76:	e04a      	b.n	8009b0e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009a78:	4b26      	ldr	r3, [pc, #152]	@ (8009b14 <USBD_SetConfig+0x118>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d112      	bne.n	8009aa6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2202      	movs	r2, #2
 8009a84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009a88:	4b22      	ldr	r3, [pc, #136]	@ (8009b14 <USBD_SetConfig+0x118>)
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009a92:	4b20      	ldr	r3, [pc, #128]	@ (8009b14 <USBD_SetConfig+0x118>)
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f7ff f9e3 	bl	8008e64 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f9d8 	bl	8009e54 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009aa4:	e033      	b.n	8009b0e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8009b14 <USBD_SetConfig+0x118>)
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d01d      	beq.n	8009af0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff f9d1 	bl	8008e64 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009ac2:	4b14      	ldr	r3, [pc, #80]	@ (8009b14 <USBD_SetConfig+0x118>)
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009acc:	4b11      	ldr	r3, [pc, #68]	@ (8009b14 <USBD_SetConfig+0x118>)
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f7ff f9a7 	bl	8008e26 <USBD_SetClassConfig>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d104      	bne.n	8009ae8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f8ef 	bl	8009cc4 <USBD_CtlError>
            return;
 8009ae6:	e012      	b.n	8009b0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f9b3 	bl	8009e54 <USBD_CtlSendStatus>
        break;
 8009aee:	e00e      	b.n	8009b0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f9af 	bl	8009e54 <USBD_CtlSendStatus>
        break;
 8009af6:	e00a      	b.n	8009b0e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f8e2 	bl	8009cc4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009b00:	4b04      	ldr	r3, [pc, #16]	@ (8009b14 <USBD_SetConfig+0x118>)
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	4619      	mov	r1, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7ff f9ac 	bl	8008e64 <USBD_ClrClassConfig>
        break;
 8009b0c:	bf00      	nop
    }
  }
}
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	200004e8 	.word	0x200004e8

08009b18 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	88db      	ldrh	r3, [r3, #6]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d004      	beq.n	8009b34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b2a:	6839      	ldr	r1, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f8c9 	bl	8009cc4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b32:	e022      	b.n	8009b7a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	dc02      	bgt.n	8009b44 <USBD_GetConfig+0x2c>
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	dc03      	bgt.n	8009b4a <USBD_GetConfig+0x32>
 8009b42:	e015      	b.n	8009b70 <USBD_GetConfig+0x58>
 8009b44:	2b03      	cmp	r3, #3
 8009b46:	d00b      	beq.n	8009b60 <USBD_GetConfig+0x48>
 8009b48:	e012      	b.n	8009b70 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	3308      	adds	r3, #8
 8009b54:	2201      	movs	r2, #1
 8009b56:	4619      	mov	r1, r3
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f91d 	bl	8009d98 <USBD_CtlSendData>
        break;
 8009b5e:	e00c      	b.n	8009b7a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	3304      	adds	r3, #4
 8009b64:	2201      	movs	r2, #1
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f915 	bl	8009d98 <USBD_CtlSendData>
        break;
 8009b6e:	e004      	b.n	8009b7a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f8a6 	bl	8009cc4 <USBD_CtlError>
        break;
 8009b78:	bf00      	nop
}
 8009b7a:	bf00      	nop
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b082      	sub	sp, #8
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b92:	3b01      	subs	r3, #1
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d81e      	bhi.n	8009bd6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	88db      	ldrh	r3, [r3, #6]
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	d004      	beq.n	8009baa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f88e 	bl	8009cc4 <USBD_CtlError>
        break;
 8009ba8:	e01a      	b.n	8009be0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d005      	beq.n	8009bc6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	f043 0202 	orr.w	r2, r3, #2
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	330c      	adds	r3, #12
 8009bca:	2202      	movs	r2, #2
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f8e2 	bl	8009d98 <USBD_CtlSendData>
      break;
 8009bd4:	e004      	b.n	8009be0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f873 	bl	8009cc4 <USBD_CtlError>
      break;
 8009bde:	bf00      	nop
  }
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	885b      	ldrh	r3, [r3, #2]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d106      	bne.n	8009c08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f926 	bl	8009e54 <USBD_CtlSendStatus>
  }
}
 8009c08:	bf00      	nop
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c20:	3b01      	subs	r3, #1
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d80b      	bhi.n	8009c3e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	885b      	ldrh	r3, [r3, #2]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d10c      	bne.n	8009c48 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 f90c 	bl	8009e54 <USBD_CtlSendStatus>
      }
      break;
 8009c3c:	e004      	b.n	8009c48 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009c3e:	6839      	ldr	r1, [r7, #0]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f83f 	bl	8009cc4 <USBD_CtlError>
      break;
 8009c46:	e000      	b.n	8009c4a <USBD_ClrFeature+0x3a>
      break;
 8009c48:	bf00      	nop
  }
}
 8009c4a:	bf00      	nop
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b083      	sub	sp, #12
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	781a      	ldrb	r2, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	785a      	ldrb	r2, [r3, #1]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	3302      	adds	r3, #2
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	461a      	mov	r2, r3
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	3303      	adds	r3, #3
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	021b      	lsls	r3, r3, #8
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	4413      	add	r3, r2
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	3304      	adds	r3, #4
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	3305      	adds	r3, #5
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	021b      	lsls	r3, r3, #8
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	4413      	add	r3, r2
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	3306      	adds	r3, #6
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	3307      	adds	r3, #7
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	021b      	lsls	r3, r3, #8
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	4413      	add	r3, r2
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	80da      	strh	r2, [r3, #6]

}
 8009cba:	bf00      	nop
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bc80      	pop	{r7}
 8009cc2:	4770      	bx	lr

08009cc4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009cce:	2180      	movs	r1, #128	@ 0x80
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fc99 	bl	800a608 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fc95 	bl	800a608 <USBD_LL_StallEP>
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b086      	sub	sp, #24
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	60f8      	str	r0, [r7, #12]
 8009cee:	60b9      	str	r1, [r7, #8]
 8009cf0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d032      	beq.n	8009d62 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f000 f834 	bl	8009d6a <USBD_GetLen>
 8009d02:	4603      	mov	r3, r0
 8009d04:	3301      	adds	r3, #1
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009d10:	7dfb      	ldrb	r3, [r7, #23]
 8009d12:	1c5a      	adds	r2, r3, #1
 8009d14:	75fa      	strb	r2, [r7, #23]
 8009d16:	461a      	mov	r2, r3
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	7812      	ldrb	r2, [r2, #0]
 8009d20:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	75fa      	strb	r2, [r7, #23]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	2203      	movs	r2, #3
 8009d30:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009d32:	e012      	b.n	8009d5a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	60fa      	str	r2, [r7, #12]
 8009d3a:	7dfa      	ldrb	r2, [r7, #23]
 8009d3c:	1c51      	adds	r1, r2, #1
 8009d3e:	75f9      	strb	r1, [r7, #23]
 8009d40:	4611      	mov	r1, r2
 8009d42:	68ba      	ldr	r2, [r7, #8]
 8009d44:	440a      	add	r2, r1
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
 8009d4c:	1c5a      	adds	r2, r3, #1
 8009d4e:	75fa      	strb	r2, [r7, #23]
 8009d50:	461a      	mov	r2, r3
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	4413      	add	r3, r2
 8009d56:	2200      	movs	r2, #0
 8009d58:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1e8      	bne.n	8009d34 <USBD_GetString+0x4e>
    }
  }
}
 8009d62:	bf00      	nop
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b085      	sub	sp, #20
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d72:	2300      	movs	r3, #0
 8009d74:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009d76:	e005      	b.n	8009d84 <USBD_GetLen+0x1a>
  {
    len++;
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	3301      	adds	r3, #1
 8009d82:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1f5      	bne.n	8009d78 <USBD_GetLen+0xe>
  }

  return len;
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bc80      	pop	{r7}
 8009d96:	4770      	bx	lr

08009d98 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	4613      	mov	r3, r2
 8009da4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2202      	movs	r2, #2
 8009daa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009dae:	88fa      	ldrh	r2, [r7, #6]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009db4:	88fa      	ldrh	r2, [r7, #6]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009dba:	88fb      	ldrh	r3, [r7, #6]
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 fcaa 	bl	800a71a <USBD_LL_Transmit>

  return USBD_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009dde:	88fb      	ldrh	r3, [r7, #6]
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	2100      	movs	r1, #0
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f000 fc98 	bl	800a71a <USBD_LL_Transmit>

  return USBD_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2203      	movs	r2, #3
 8009e06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009e0a:	88fa      	ldrh	r2, [r7, #6]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009e12:	88fa      	ldrh	r2, [r7, #6]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e1a:	88fb      	ldrh	r3, [r7, #6]
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	2100      	movs	r1, #0
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 fc9d 	bl	800a760 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e3e:	88fb      	ldrh	r3, [r7, #6]
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	2100      	movs	r1, #0
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f000 fc8b 	bl	800a760 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2204      	movs	r2, #4
 8009e60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e64:	2300      	movs	r3, #0
 8009e66:	2200      	movs	r2, #0
 8009e68:	2100      	movs	r1, #0
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fc55 	bl	800a71a <USBD_LL_Transmit>

  return USBD_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b082      	sub	sp, #8
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2205      	movs	r2, #5
 8009e86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2100      	movs	r1, #0
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fc65 	bl	800a760 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	4912      	ldr	r1, [pc, #72]	@ (8009ef0 <MX_USB_DEVICE_Init+0x50>)
 8009ea8:	4812      	ldr	r0, [pc, #72]	@ (8009ef4 <MX_USB_DEVICE_Init+0x54>)
 8009eaa:	f7fe ff62 	bl	8008d72 <USBD_Init>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009eb4:	f7f7 f93e 	bl	8001134 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009eb8:	490f      	ldr	r1, [pc, #60]	@ (8009ef8 <MX_USB_DEVICE_Init+0x58>)
 8009eba:	480e      	ldr	r0, [pc, #56]	@ (8009ef4 <MX_USB_DEVICE_Init+0x54>)
 8009ebc:	f7fe ff84 	bl	8008dc8 <USBD_RegisterClass>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009ec6:	f7f7 f935 	bl	8001134 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009eca:	490c      	ldr	r1, [pc, #48]	@ (8009efc <MX_USB_DEVICE_Init+0x5c>)
 8009ecc:	4809      	ldr	r0, [pc, #36]	@ (8009ef4 <MX_USB_DEVICE_Init+0x54>)
 8009ece:	f7fe feb5 	bl	8008c3c <USBD_CDC_RegisterInterface>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009ed8:	f7f7 f92c 	bl	8001134 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009edc:	4805      	ldr	r0, [pc, #20]	@ (8009ef4 <MX_USB_DEVICE_Init+0x54>)
 8009ede:	f7fe ff8c 	bl	8008dfa <USBD_Start>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009ee8:	f7f7 f924 	bl	8001134 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009eec:	bf00      	nop
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	2000012c 	.word	0x2000012c
 8009ef4:	200004ec 	.word	0x200004ec
 8009ef8:	20000018 	.word	0x20000018
 8009efc:	2000011c 	.word	0x2000011c

08009f00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f04:	2200      	movs	r2, #0
 8009f06:	4905      	ldr	r1, [pc, #20]	@ (8009f1c <CDC_Init_FS+0x1c>)
 8009f08:	4805      	ldr	r0, [pc, #20]	@ (8009f20 <CDC_Init_FS+0x20>)
 8009f0a:	f7fe fead 	bl	8008c68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f0e:	4905      	ldr	r1, [pc, #20]	@ (8009f24 <CDC_Init_FS+0x24>)
 8009f10:	4803      	ldr	r0, [pc, #12]	@ (8009f20 <CDC_Init_FS+0x20>)
 8009f12:	f7fe fec2 	bl	8008c9a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	200007f0 	.word	0x200007f0
 8009f20:	200004ec 	.word	0x200004ec
 8009f24:	200007b0 	.word	0x200007b0

08009f28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009f2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bc80      	pop	{r7}
 8009f34:	4770      	bx	lr
	...

08009f38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	6039      	str	r1, [r7, #0]
 8009f42:	71fb      	strb	r3, [r7, #7]
 8009f44:	4613      	mov	r3, r2
 8009f46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009f48:	79fb      	ldrb	r3, [r7, #7]
 8009f4a:	2b23      	cmp	r3, #35	@ 0x23
 8009f4c:	f200 8098 	bhi.w	800a080 <CDC_Control_FS+0x148>
 8009f50:	a201      	add	r2, pc, #4	@ (adr r2, 8009f58 <CDC_Control_FS+0x20>)
 8009f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f56:	bf00      	nop
 8009f58:	0800a081 	.word	0x0800a081
 8009f5c:	0800a081 	.word	0x0800a081
 8009f60:	0800a081 	.word	0x0800a081
 8009f64:	0800a081 	.word	0x0800a081
 8009f68:	0800a081 	.word	0x0800a081
 8009f6c:	0800a081 	.word	0x0800a081
 8009f70:	0800a081 	.word	0x0800a081
 8009f74:	0800a081 	.word	0x0800a081
 8009f78:	0800a081 	.word	0x0800a081
 8009f7c:	0800a081 	.word	0x0800a081
 8009f80:	0800a081 	.word	0x0800a081
 8009f84:	0800a081 	.word	0x0800a081
 8009f88:	0800a081 	.word	0x0800a081
 8009f8c:	0800a081 	.word	0x0800a081
 8009f90:	0800a081 	.word	0x0800a081
 8009f94:	0800a081 	.word	0x0800a081
 8009f98:	0800a081 	.word	0x0800a081
 8009f9c:	0800a081 	.word	0x0800a081
 8009fa0:	0800a081 	.word	0x0800a081
 8009fa4:	0800a081 	.word	0x0800a081
 8009fa8:	0800a081 	.word	0x0800a081
 8009fac:	0800a081 	.word	0x0800a081
 8009fb0:	0800a081 	.word	0x0800a081
 8009fb4:	0800a081 	.word	0x0800a081
 8009fb8:	0800a081 	.word	0x0800a081
 8009fbc:	0800a081 	.word	0x0800a081
 8009fc0:	0800a081 	.word	0x0800a081
 8009fc4:	0800a081 	.word	0x0800a081
 8009fc8:	0800a081 	.word	0x0800a081
 8009fcc:	0800a081 	.word	0x0800a081
 8009fd0:	0800a081 	.word	0x0800a081
 8009fd4:	0800a081 	.word	0x0800a081
 8009fd8:	08009fe9 	.word	0x08009fe9
 8009fdc:	0800a02d 	.word	0x0800a02d
 8009fe0:	0800a081 	.word	0x0800a081
 8009fe4:	0800a081 	.word	0x0800a081
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	 lineCoding.bitrate 	= (uint32_t)(pbuf[0]|(pbuf[1]<<8)
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	461a      	mov	r2, r3
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	021b      	lsls	r3, r3, #8
 8009ff6:	431a      	orrs	r2, r3
    			 	 	 	 	 |(pbuf[2]<<16)|(pbuf[3]<<24));
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	3302      	adds	r3, #2
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	041b      	lsls	r3, r3, #16
 800a000:	431a      	orrs	r2, r3
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	3303      	adds	r3, #3
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	061b      	lsls	r3, r3, #24
 800a00a:	4313      	orrs	r3, r2
    	 lineCoding.bitrate 	= (uint32_t)(pbuf[0]|(pbuf[1]<<8)
 800a00c:	461a      	mov	r2, r3
 800a00e:	4b20      	ldr	r3, [pc, #128]	@ (800a090 <CDC_Control_FS+0x158>)
 800a010:	601a      	str	r2, [r3, #0]
    	 lineCoding.format 		= pbuf[4];
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	791a      	ldrb	r2, [r3, #4]
 800a016:	4b1e      	ldr	r3, [pc, #120]	@ (800a090 <CDC_Control_FS+0x158>)
 800a018:	711a      	strb	r2, [r3, #4]
    	 lineCoding.paritytype 	= pbuf[5];
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	795a      	ldrb	r2, [r3, #5]
 800a01e:	4b1c      	ldr	r3, [pc, #112]	@ (800a090 <CDC_Control_FS+0x158>)
 800a020:	715a      	strb	r2, [r3, #5]
    	 lineCoding.datatype 	= pbuf[6];
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	799a      	ldrb	r2, [r3, #6]
 800a026:	4b1a      	ldr	r3, [pc, #104]	@ (800a090 <CDC_Control_FS+0x158>)
 800a028:	719a      	strb	r2, [r3, #6]
//    	 printf("ReceivedCDC_SET_LINE_CODING:\r\n\tBaudrate:%lu\r\n\tCharFormat:%d\r\n\t
//    	 Parity:%d\r\n\tDataBits:%d\r\n",lineCoding.bitrate,lineCoding.format,
//    	 lineCoding.paritytype,lineCoding.datatype);
    break;
 800a02a:	e02a      	b.n	800a082 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	 pbuf[0]=(uint8_t)(lineCoding.bitrate);
 800a02c:	4b18      	ldr	r3, [pc, #96]	@ (800a090 <CDC_Control_FS+0x158>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	b2da      	uxtb	r2, r3
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	701a      	strb	r2, [r3, #0]
    	 pbuf[1]=(uint8_t)(lineCoding.bitrate>>8);
 800a036:	4b16      	ldr	r3, [pc, #88]	@ (800a090 <CDC_Control_FS+0x158>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	0a1a      	lsrs	r2, r3, #8
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	3301      	adds	r3, #1
 800a040:	b2d2      	uxtb	r2, r2
 800a042:	701a      	strb	r2, [r3, #0]
    	 pbuf[2]=(uint8_t)(lineCoding.bitrate>>16);
 800a044:	4b12      	ldr	r3, [pc, #72]	@ (800a090 <CDC_Control_FS+0x158>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	0c1a      	lsrs	r2, r3, #16
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	3302      	adds	r3, #2
 800a04e:	b2d2      	uxtb	r2, r2
 800a050:	701a      	strb	r2, [r3, #0]
    	 pbuf[3]=(uint8_t)(lineCoding.bitrate>>24);
 800a052:	4b0f      	ldr	r3, [pc, #60]	@ (800a090 <CDC_Control_FS+0x158>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	0e1a      	lsrs	r2, r3, #24
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	3303      	adds	r3, #3
 800a05c:	b2d2      	uxtb	r2, r2
 800a05e:	701a      	strb	r2, [r3, #0]
    	 pbuf[4]=lineCoding.format;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	3304      	adds	r3, #4
 800a064:	4a0a      	ldr	r2, [pc, #40]	@ (800a090 <CDC_Control_FS+0x158>)
 800a066:	7912      	ldrb	r2, [r2, #4]
 800a068:	701a      	strb	r2, [r3, #0]
    	 pbuf[5]=lineCoding.paritytype;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	3305      	adds	r3, #5
 800a06e:	4a08      	ldr	r2, [pc, #32]	@ (800a090 <CDC_Control_FS+0x158>)
 800a070:	7952      	ldrb	r2, [r2, #5]
 800a072:	701a      	strb	r2, [r3, #0]
    	 pbuf[6]=lineCoding.datatype;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	3306      	adds	r3, #6
 800a078:	4a05      	ldr	r2, [pc, #20]	@ (800a090 <CDC_Control_FS+0x158>)
 800a07a:	7992      	ldrb	r2, [r2, #6]
 800a07c:	701a      	strb	r2, [r3, #0]
    break;
 800a07e:	e000      	b.n	800a082 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a080:	bf00      	nop
  }

  return (USBD_OK);
 800a082:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a084:	4618      	mov	r0, r3
 800a086:	370c      	adds	r7, #12
 800a088:	46bd      	mov	sp, r7
 800a08a:	bc80      	pop	{r7}
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	20000830 	.word	0x20000830

0800a094 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_Transmit_FS(Buf, *Len);
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f80e 	bl	800a0c8 <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a0ac:	6879      	ldr	r1, [r7, #4]
 800a0ae:	4805      	ldr	r0, [pc, #20]	@ (800a0c4 <CDC_Receive_FS+0x30>)
 800a0b0:	f7fe fdf3 	bl	8008c9a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a0b4:	4803      	ldr	r0, [pc, #12]	@ (800a0c4 <CDC_Receive_FS+0x30>)
 800a0b6:	f7fe fe32 	bl	8008d1e <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800a0ba:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	200004ec 	.word	0x200004ec

0800a0c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a0d8:	4b0d      	ldr	r3, [pc, #52]	@ (800a110 <CDC_Transmit_FS+0x48>)
 800a0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d001      	beq.n	800a0ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e00b      	b.n	800a106 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a0ee:	887b      	ldrh	r3, [r7, #2]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	4806      	ldr	r0, [pc, #24]	@ (800a110 <CDC_Transmit_FS+0x48>)
 800a0f6:	f7fe fdb7 	bl	8008c68 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a0fa:	4805      	ldr	r0, [pc, #20]	@ (800a110 <CDC_Transmit_FS+0x48>)
 800a0fc:	f7fe fde0 	bl	8008cc0 <USBD_CDC_TransmitPacket>
 800a100:	4603      	mov	r3, r0
 800a102:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a104:	7bfb      	ldrb	r3, [r7, #15]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	200004ec 	.word	0x200004ec

0800a114 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	4603      	mov	r3, r0
 800a11c:	6039      	str	r1, [r7, #0]
 800a11e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	2212      	movs	r2, #18
 800a124:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a126:	4b03      	ldr	r3, [pc, #12]	@ (800a134 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a128:	4618      	mov	r0, r3
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bc80      	pop	{r7}
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	20000148 	.word	0x20000148

0800a138 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	4603      	mov	r3, r0
 800a140:	6039      	str	r1, [r7, #0]
 800a142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	2204      	movs	r2, #4
 800a148:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a14a:	4b03      	ldr	r3, [pc, #12]	@ (800a158 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	bc80      	pop	{r7}
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	2000015c 	.word	0x2000015c

0800a15c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	4603      	mov	r3, r0
 800a164:	6039      	str	r1, [r7, #0]
 800a166:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a168:	79fb      	ldrb	r3, [r7, #7]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d105      	bne.n	800a17a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	4907      	ldr	r1, [pc, #28]	@ (800a190 <USBD_FS_ProductStrDescriptor+0x34>)
 800a172:	4808      	ldr	r0, [pc, #32]	@ (800a194 <USBD_FS_ProductStrDescriptor+0x38>)
 800a174:	f7ff fdb7 	bl	8009ce6 <USBD_GetString>
 800a178:	e004      	b.n	800a184 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	4904      	ldr	r1, [pc, #16]	@ (800a190 <USBD_FS_ProductStrDescriptor+0x34>)
 800a17e:	4805      	ldr	r0, [pc, #20]	@ (800a194 <USBD_FS_ProductStrDescriptor+0x38>)
 800a180:	f7ff fdb1 	bl	8009ce6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a184:	4b02      	ldr	r3, [pc, #8]	@ (800a190 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a186:	4618      	mov	r0, r3
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	20000838 	.word	0x20000838
 800a194:	0800d198 	.word	0x0800d198

0800a198 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	6039      	str	r1, [r7, #0]
 800a1a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	4904      	ldr	r1, [pc, #16]	@ (800a1b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a1a8:	4804      	ldr	r0, [pc, #16]	@ (800a1bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a1aa:	f7ff fd9c 	bl	8009ce6 <USBD_GetString>
  return USBD_StrDesc;
 800a1ae:	4b02      	ldr	r3, [pc, #8]	@ (800a1b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	20000838 	.word	0x20000838
 800a1bc:	0800d1a8 	.word	0x0800d1a8

0800a1c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	6039      	str	r1, [r7, #0]
 800a1ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	221a      	movs	r2, #26
 800a1d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a1d2:	f000 f843 	bl	800a25c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a1d6:	4b02      	ldr	r3, [pc, #8]	@ (800a1e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	20000160 	.word	0x20000160

0800a1e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	6039      	str	r1, [r7, #0]
 800a1ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a1f0:	79fb      	ldrb	r3, [r7, #7]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d105      	bne.n	800a202 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	4907      	ldr	r1, [pc, #28]	@ (800a218 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1fa:	4808      	ldr	r0, [pc, #32]	@ (800a21c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1fc:	f7ff fd73 	bl	8009ce6 <USBD_GetString>
 800a200:	e004      	b.n	800a20c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a202:	683a      	ldr	r2, [r7, #0]
 800a204:	4904      	ldr	r1, [pc, #16]	@ (800a218 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a206:	4805      	ldr	r0, [pc, #20]	@ (800a21c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a208:	f7ff fd6d 	bl	8009ce6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a20c:	4b02      	ldr	r3, [pc, #8]	@ (800a218 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	20000838 	.word	0x20000838
 800a21c:	0800d1bc 	.word	0x0800d1bc

0800a220 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	4603      	mov	r3, r0
 800a228:	6039      	str	r1, [r7, #0]
 800a22a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a22c:	79fb      	ldrb	r3, [r7, #7]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d105      	bne.n	800a23e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	4907      	ldr	r1, [pc, #28]	@ (800a254 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a236:	4808      	ldr	r0, [pc, #32]	@ (800a258 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a238:	f7ff fd55 	bl	8009ce6 <USBD_GetString>
 800a23c:	e004      	b.n	800a248 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	4904      	ldr	r1, [pc, #16]	@ (800a254 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a242:	4805      	ldr	r0, [pc, #20]	@ (800a258 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a244:	f7ff fd4f 	bl	8009ce6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a248:	4b02      	ldr	r3, [pc, #8]	@ (800a254 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	20000838 	.word	0x20000838
 800a258:	0800d1c8 	.word	0x0800d1c8

0800a25c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	4413      	add	r3, r2
 800a268:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d009      	beq.n	800a284 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a270:	2208      	movs	r2, #8
 800a272:	4906      	ldr	r1, [pc, #24]	@ (800a28c <Get_SerialNum+0x30>)
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f000 f80d 	bl	800a294 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a27a:	2204      	movs	r2, #4
 800a27c:	4904      	ldr	r1, [pc, #16]	@ (800a290 <Get_SerialNum+0x34>)
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f808 	bl	800a294 <IntToUnicode>
  }
}
 800a284:	bf00      	nop
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	20000162 	.word	0x20000162
 800a290:	20000172 	.word	0x20000172

0800a294 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a294:	b480      	push	{r7}
 800a296:	b087      	sub	sp, #28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	75fb      	strb	r3, [r7, #23]
 800a2aa:	e027      	b.n	800a2fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	0f1b      	lsrs	r3, r3, #28
 800a2b0:	2b09      	cmp	r3, #9
 800a2b2:	d80b      	bhi.n	800a2cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	0f1b      	lsrs	r3, r3, #28
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	7dfb      	ldrb	r3, [r7, #23]
 800a2bc:	005b      	lsls	r3, r3, #1
 800a2be:	4619      	mov	r1, r3
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	440b      	add	r3, r1
 800a2c4:	3230      	adds	r2, #48	@ 0x30
 800a2c6:	b2d2      	uxtb	r2, r2
 800a2c8:	701a      	strb	r2, [r3, #0]
 800a2ca:	e00a      	b.n	800a2e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	0f1b      	lsrs	r3, r3, #28
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	7dfb      	ldrb	r3, [r7, #23]
 800a2d4:	005b      	lsls	r3, r3, #1
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	440b      	add	r3, r1
 800a2dc:	3237      	adds	r2, #55	@ 0x37
 800a2de:	b2d2      	uxtb	r2, r2
 800a2e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	011b      	lsls	r3, r3, #4
 800a2e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a2e8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ea:	005b      	lsls	r3, r3, #1
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a2f6:	7dfb      	ldrb	r3, [r7, #23]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	75fb      	strb	r3, [r7, #23]
 800a2fc:	7dfa      	ldrb	r2, [r7, #23]
 800a2fe:	79fb      	ldrb	r3, [r7, #7]
 800a300:	429a      	cmp	r2, r3
 800a302:	d3d3      	bcc.n	800a2ac <IntToUnicode+0x18>
  }
}
 800a304:	bf00      	nop
 800a306:	bf00      	nop
 800a308:	371c      	adds	r7, #28
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bc80      	pop	{r7}
 800a30e:	4770      	bx	lr

0800a310 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a0d      	ldr	r2, [pc, #52]	@ (800a354 <HAL_PCD_MspInit+0x44>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d113      	bne.n	800a34a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a322:	4b0d      	ldr	r3, [pc, #52]	@ (800a358 <HAL_PCD_MspInit+0x48>)
 800a324:	69db      	ldr	r3, [r3, #28]
 800a326:	4a0c      	ldr	r2, [pc, #48]	@ (800a358 <HAL_PCD_MspInit+0x48>)
 800a328:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a32c:	61d3      	str	r3, [r2, #28]
 800a32e:	4b0a      	ldr	r3, [pc, #40]	@ (800a358 <HAL_PCD_MspInit+0x48>)
 800a330:	69db      	ldr	r3, [r3, #28]
 800a332:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a336:	60fb      	str	r3, [r7, #12]
 800a338:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a33a:	2200      	movs	r2, #0
 800a33c:	2100      	movs	r1, #0
 800a33e:	2014      	movs	r0, #20
 800a340:	f7f7 fff7 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a344:	2014      	movs	r0, #20
 800a346:	f7f8 f810 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a34a:	bf00      	nop
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	40005c00 	.word	0x40005c00
 800a358:	40021000 	.word	0x40021000

0800a35c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800a370:	4619      	mov	r1, r3
 800a372:	4610      	mov	r0, r2
 800a374:	f7fe fd89 	bl	8008e8a <USBD_LL_SetupStage>
}
 800a378:	bf00      	nop
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	460b      	mov	r3, r1
 800a38a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a392:	78fa      	ldrb	r2, [r7, #3]
 800a394:	6879      	ldr	r1, [r7, #4]
 800a396:	4613      	mov	r3, r2
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	4413      	add	r3, r2
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	440b      	add	r3, r1
 800a3a0:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	78fb      	ldrb	r3, [r7, #3]
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	f7fe fdbb 	bl	8008f24 <USBD_LL_DataOutStage>
}
 800a3ae:	bf00      	nop
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b082      	sub	sp, #8
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800a3c8:	78fa      	ldrb	r2, [r7, #3]
 800a3ca:	6879      	ldr	r1, [r7, #4]
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4413      	add	r3, r2
 800a3d2:	00db      	lsls	r3, r3, #3
 800a3d4:	440b      	add	r3, r1
 800a3d6:	333c      	adds	r3, #60	@ 0x3c
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	78fb      	ldrb	r3, [r7, #3]
 800a3dc:	4619      	mov	r1, r3
 800a3de:	f7fe fe12 	bl	8009006 <USBD_LL_DataInStage>
}
 800a3e2:	bf00      	nop
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b082      	sub	sp, #8
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7fe ff22 	bl	8009242 <USBD_LL_SOF>
}
 800a3fe:	bf00      	nop
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b084      	sub	sp, #16
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a40e:	2301      	movs	r3, #1
 800a410:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	2b02      	cmp	r3, #2
 800a418:	d001      	beq.n	800a41e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a41a:	f7f6 fe8b 	bl	8001134 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a424:	7bfa      	ldrb	r2, [r7, #15]
 800a426:	4611      	mov	r1, r2
 800a428:	4618      	mov	r0, r3
 800a42a:	f7fe fed2 	bl	80091d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a434:	4618      	mov	r0, r3
 800a436:	f7fe fe8b 	bl	8009150 <USBD_LL_Reset>
}
 800a43a:	bf00      	nop
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
	...

0800a444 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a452:	4618      	mov	r0, r3
 800a454:	f7fe fecc 	bl	80091f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d005      	beq.n	800a46c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a460:	4b04      	ldr	r3, [pc, #16]	@ (800a474 <HAL_PCD_SuspendCallback+0x30>)
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	4a03      	ldr	r2, [pc, #12]	@ (800a474 <HAL_PCD_SuspendCallback+0x30>)
 800a466:	f043 0306 	orr.w	r3, r3, #6
 800a46a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a46c:	bf00      	nop
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	e000ed00 	.word	0xe000ed00

0800a478 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800a486:	4618      	mov	r0, r3
 800a488:	f7fe fec6 	bl	8009218 <USBD_LL_Resume>
}
 800a48c:	bf00      	nop
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a49c:	4a28      	ldr	r2, [pc, #160]	@ (800a540 <USBD_LL_Init+0xac>)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a26      	ldr	r2, [pc, #152]	@ (800a540 <USBD_LL_Init+0xac>)
 800a4a8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a4ac:	4b24      	ldr	r3, [pc, #144]	@ (800a540 <USBD_LL_Init+0xac>)
 800a4ae:	4a25      	ldr	r2, [pc, #148]	@ (800a544 <USBD_LL_Init+0xb0>)
 800a4b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a4b2:	4b23      	ldr	r3, [pc, #140]	@ (800a540 <USBD_LL_Init+0xac>)
 800a4b4:	2208      	movs	r2, #8
 800a4b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a4b8:	4b21      	ldr	r3, [pc, #132]	@ (800a540 <USBD_LL_Init+0xac>)
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a4be:	4b20      	ldr	r3, [pc, #128]	@ (800a540 <USBD_LL_Init+0xac>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a4c4:	4b1e      	ldr	r3, [pc, #120]	@ (800a540 <USBD_LL_Init+0xac>)
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a4ca:	4b1d      	ldr	r3, [pc, #116]	@ (800a540 <USBD_LL_Init+0xac>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a4d0:	481b      	ldr	r0, [pc, #108]	@ (800a540 <USBD_LL_Init+0xac>)
 800a4d2:	f7f8 fb1f 	bl	8002b14 <HAL_PCD_Init>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a4dc:	f7f6 fe2a 	bl	8001134 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4e6:	2318      	movs	r3, #24
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	f7fa f83d 	bl	800456a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4f6:	2358      	movs	r3, #88	@ 0x58
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	2180      	movs	r1, #128	@ 0x80
 800a4fc:	f7fa f835 	bl	800456a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a506:	23c0      	movs	r3, #192	@ 0xc0
 800a508:	2200      	movs	r2, #0
 800a50a:	2181      	movs	r1, #129	@ 0x81
 800a50c:	f7fa f82d 	bl	800456a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a516:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a51a:	2200      	movs	r2, #0
 800a51c:	2101      	movs	r1, #1
 800a51e:	f7fa f824 	bl	800456a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a528:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a52c:	2200      	movs	r2, #0
 800a52e:	2182      	movs	r1, #130	@ 0x82
 800a530:	f7fa f81b 	bl	800456a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	20000a38 	.word	0x20000a38
 800a544:	40005c00 	.word	0x40005c00

0800a548 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a550:	2300      	movs	r3, #0
 800a552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a554:	2300      	movs	r3, #0
 800a556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a55e:	4618      	mov	r0, r3
 800a560:	f7f8 fbd7 	bl	8002d12 <HAL_PCD_Start>
 800a564:	4603      	mov	r3, r0
 800a566:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a568:	7bfb      	ldrb	r3, [r7, #15]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f000 f94e 	bl	800a80c <USBD_Get_USB_Status>
 800a570:	4603      	mov	r3, r0
 800a572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a574:	7bbb      	ldrb	r3, [r7, #14]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	4608      	mov	r0, r1
 800a588:	4611      	mov	r1, r2
 800a58a:	461a      	mov	r2, r3
 800a58c:	4603      	mov	r3, r0
 800a58e:	70fb      	strb	r3, [r7, #3]
 800a590:	460b      	mov	r3, r1
 800a592:	70bb      	strb	r3, [r7, #2]
 800a594:	4613      	mov	r3, r2
 800a596:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a598:	2300      	movs	r3, #0
 800a59a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a59c:	2300      	movs	r3, #0
 800a59e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a5a6:	78bb      	ldrb	r3, [r7, #2]
 800a5a8:	883a      	ldrh	r2, [r7, #0]
 800a5aa:	78f9      	ldrb	r1, [r7, #3]
 800a5ac:	f7f8 fd2c 	bl	8003008 <HAL_PCD_EP_Open>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 f928 	bl	800a80c <USBD_Get_USB_Status>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5e4:	78fa      	ldrb	r2, [r7, #3]
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7f8 fd6a 	bl	80030c2 <HAL_PCD_EP_Close>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f000 f909 	bl	800a80c <USBD_Get_USB_Status>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	460b      	mov	r3, r1
 800a612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a622:	78fa      	ldrb	r2, [r7, #3]
 800a624:	4611      	mov	r1, r2
 800a626:	4618      	mov	r0, r3
 800a628:	f7f8 fe12 	bl	8003250 <HAL_PCD_EP_SetStall>
 800a62c:	4603      	mov	r3, r0
 800a62e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a630:	7bfb      	ldrb	r3, [r7, #15]
 800a632:	4618      	mov	r0, r3
 800a634:	f000 f8ea 	bl	800a80c <USBD_Get_USB_Status>
 800a638:	4603      	mov	r3, r0
 800a63a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a63c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b084      	sub	sp, #16
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	460b      	mov	r3, r1
 800a650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a656:	2300      	movs	r3, #0
 800a658:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a660:	78fa      	ldrb	r2, [r7, #3]
 800a662:	4611      	mov	r1, r2
 800a664:	4618      	mov	r0, r3
 800a666:	f7f8 fe53 	bl	8003310 <HAL_PCD_EP_ClrStall>
 800a66a:	4603      	mov	r3, r0
 800a66c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
 800a670:	4618      	mov	r0, r3
 800a672:	f000 f8cb 	bl	800a80c <USBD_Get_USB_Status>
 800a676:	4603      	mov	r3, r0
 800a678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a67a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	460b      	mov	r3, r1
 800a68e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a696:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	da0c      	bge.n	800a6ba <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a6a0:	78fb      	ldrb	r3, [r7, #3]
 800a6a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6a6:	68f9      	ldr	r1, [r7, #12]
 800a6a8:	1c5a      	adds	r2, r3, #1
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	00db      	lsls	r3, r3, #3
 800a6b2:	440b      	add	r3, r1
 800a6b4:	3302      	adds	r3, #2
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	e00b      	b.n	800a6d2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a6ba:	78fb      	ldrb	r3, [r7, #3]
 800a6bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a6c0:	68f9      	ldr	r1, [r7, #12]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4413      	add	r3, r2
 800a6c8:	00db      	lsls	r3, r3, #3
 800a6ca:	440b      	add	r3, r1
 800a6cc:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800a6d0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bc80      	pop	{r7}
 800a6da:	4770      	bx	lr

0800a6dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6f6:	78fa      	ldrb	r2, [r7, #3]
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7f8 fc5f 	bl	8002fbe <HAL_PCD_SetAddress>
 800a700:	4603      	mov	r3, r0
 800a702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a704:	7bfb      	ldrb	r3, [r7, #15]
 800a706:	4618      	mov	r0, r3
 800a708:	f000 f880 	bl	800a80c <USBD_Get_USB_Status>
 800a70c:	4603      	mov	r3, r0
 800a70e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a710:	7bbb      	ldrb	r3, [r7, #14]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b086      	sub	sp, #24
 800a71e:	af00      	add	r7, sp, #0
 800a720:	60f8      	str	r0, [r7, #12]
 800a722:	607a      	str	r2, [r7, #4]
 800a724:	461a      	mov	r2, r3
 800a726:	460b      	mov	r3, r1
 800a728:	72fb      	strb	r3, [r7, #11]
 800a72a:	4613      	mov	r3, r2
 800a72c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a732:	2300      	movs	r3, #0
 800a734:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a73c:	893b      	ldrh	r3, [r7, #8]
 800a73e:	7af9      	ldrb	r1, [r7, #11]
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	f7f8 fd4e 	bl	80031e2 <HAL_PCD_EP_Transmit>
 800a746:	4603      	mov	r3, r0
 800a748:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a74a:	7dfb      	ldrb	r3, [r7, #23]
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 f85d 	bl	800a80c <USBD_Get_USB_Status>
 800a752:	4603      	mov	r3, r0
 800a754:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a756:	7dbb      	ldrb	r3, [r7, #22]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3718      	adds	r7, #24
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	607a      	str	r2, [r7, #4]
 800a76a:	461a      	mov	r2, r3
 800a76c:	460b      	mov	r3, r1
 800a76e:	72fb      	strb	r3, [r7, #11]
 800a770:	4613      	mov	r3, r2
 800a772:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a778:	2300      	movs	r3, #0
 800a77a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a782:	893b      	ldrh	r3, [r7, #8]
 800a784:	7af9      	ldrb	r1, [r7, #11]
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	f7f8 fce3 	bl	8003152 <HAL_PCD_EP_Receive>
 800a78c:	4603      	mov	r3, r0
 800a78e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a790:	7dfb      	ldrb	r3, [r7, #23]
 800a792:	4618      	mov	r0, r3
 800a794:	f000 f83a 	bl	800a80c <USBD_Get_USB_Status>
 800a798:	4603      	mov	r3, r0
 800a79a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a79c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3718      	adds	r7, #24
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7b8:	78fa      	ldrb	r2, [r7, #3]
 800a7ba:	4611      	mov	r1, r2
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7f8 fcf9 	bl	80031b4 <HAL_PCD_EP_GetRxCount>
 800a7c2:	4603      	mov	r3, r0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a7d4:	4b02      	ldr	r3, [pc, #8]	@ (800a7e0 <USBD_static_malloc+0x14>)
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bc80      	pop	{r7}
 800a7de:	4770      	bx	lr
 800a7e0:	20000d28 	.word	0x20000d28

0800a7e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]

}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bc80      	pop	{r7}
 800a7f4:	4770      	bx	lr

0800a7f6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b083      	sub	sp, #12
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	460b      	mov	r3, r1
 800a800:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a802:	bf00      	nop
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	bc80      	pop	{r7}
 800a80a:	4770      	bx	lr

0800a80c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	4603      	mov	r3, r0
 800a814:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a81a:	79fb      	ldrb	r3, [r7, #7]
 800a81c:	2b03      	cmp	r3, #3
 800a81e:	d817      	bhi.n	800a850 <USBD_Get_USB_Status+0x44>
 800a820:	a201      	add	r2, pc, #4	@ (adr r2, 800a828 <USBD_Get_USB_Status+0x1c>)
 800a822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a826:	bf00      	nop
 800a828:	0800a839 	.word	0x0800a839
 800a82c:	0800a83f 	.word	0x0800a83f
 800a830:	0800a845 	.word	0x0800a845
 800a834:	0800a84b 	.word	0x0800a84b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
    break;
 800a83c:	e00b      	b.n	800a856 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a83e:	2302      	movs	r3, #2
 800a840:	73fb      	strb	r3, [r7, #15]
    break;
 800a842:	e008      	b.n	800a856 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a844:	2301      	movs	r3, #1
 800a846:	73fb      	strb	r3, [r7, #15]
    break;
 800a848:	e005      	b.n	800a856 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a84a:	2302      	movs	r3, #2
 800a84c:	73fb      	strb	r3, [r7, #15]
    break;
 800a84e:	e002      	b.n	800a856 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a850:	2302      	movs	r3, #2
 800a852:	73fb      	strb	r3, [r7, #15]
    break;
 800a854:	bf00      	nop
  }
  return usb_status;
 800a856:	7bfb      	ldrb	r3, [r7, #15]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bc80      	pop	{r7}
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop

0800a864 <__cvt>:
 800a864:	2b00      	cmp	r3, #0
 800a866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a86a:	461d      	mov	r5, r3
 800a86c:	bfbb      	ittet	lt
 800a86e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a872:	461d      	movlt	r5, r3
 800a874:	2300      	movge	r3, #0
 800a876:	232d      	movlt	r3, #45	@ 0x2d
 800a878:	b088      	sub	sp, #32
 800a87a:	4614      	mov	r4, r2
 800a87c:	bfb8      	it	lt
 800a87e:	4614      	movlt	r4, r2
 800a880:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a882:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a884:	7013      	strb	r3, [r2, #0]
 800a886:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a888:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a88c:	f023 0820 	bic.w	r8, r3, #32
 800a890:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a894:	d005      	beq.n	800a8a2 <__cvt+0x3e>
 800a896:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a89a:	d100      	bne.n	800a89e <__cvt+0x3a>
 800a89c:	3601      	adds	r6, #1
 800a89e:	2302      	movs	r3, #2
 800a8a0:	e000      	b.n	800a8a4 <__cvt+0x40>
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	aa07      	add	r2, sp, #28
 800a8a6:	9204      	str	r2, [sp, #16]
 800a8a8:	aa06      	add	r2, sp, #24
 800a8aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a8ae:	e9cd 3600 	strd	r3, r6, [sp]
 800a8b2:	4622      	mov	r2, r4
 800a8b4:	462b      	mov	r3, r5
 800a8b6:	f000 fe4f 	bl	800b558 <_dtoa_r>
 800a8ba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a8be:	4607      	mov	r7, r0
 800a8c0:	d119      	bne.n	800a8f6 <__cvt+0x92>
 800a8c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a8c4:	07db      	lsls	r3, r3, #31
 800a8c6:	d50e      	bpl.n	800a8e6 <__cvt+0x82>
 800a8c8:	eb00 0906 	add.w	r9, r0, r6
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	4629      	mov	r1, r5
 800a8d4:	f7f6 f868 	bl	80009a8 <__aeabi_dcmpeq>
 800a8d8:	b108      	cbz	r0, 800a8de <__cvt+0x7a>
 800a8da:	f8cd 901c 	str.w	r9, [sp, #28]
 800a8de:	2230      	movs	r2, #48	@ 0x30
 800a8e0:	9b07      	ldr	r3, [sp, #28]
 800a8e2:	454b      	cmp	r3, r9
 800a8e4:	d31e      	bcc.n	800a924 <__cvt+0xc0>
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	9b07      	ldr	r3, [sp, #28]
 800a8ea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a8ec:	1bdb      	subs	r3, r3, r7
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	b008      	add	sp, #32
 800a8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a8fa:	eb00 0906 	add.w	r9, r0, r6
 800a8fe:	d1e5      	bne.n	800a8cc <__cvt+0x68>
 800a900:	7803      	ldrb	r3, [r0, #0]
 800a902:	2b30      	cmp	r3, #48	@ 0x30
 800a904:	d10a      	bne.n	800a91c <__cvt+0xb8>
 800a906:	2200      	movs	r2, #0
 800a908:	2300      	movs	r3, #0
 800a90a:	4620      	mov	r0, r4
 800a90c:	4629      	mov	r1, r5
 800a90e:	f7f6 f84b 	bl	80009a8 <__aeabi_dcmpeq>
 800a912:	b918      	cbnz	r0, 800a91c <__cvt+0xb8>
 800a914:	f1c6 0601 	rsb	r6, r6, #1
 800a918:	f8ca 6000 	str.w	r6, [sl]
 800a91c:	f8da 3000 	ldr.w	r3, [sl]
 800a920:	4499      	add	r9, r3
 800a922:	e7d3      	b.n	800a8cc <__cvt+0x68>
 800a924:	1c59      	adds	r1, r3, #1
 800a926:	9107      	str	r1, [sp, #28]
 800a928:	701a      	strb	r2, [r3, #0]
 800a92a:	e7d9      	b.n	800a8e0 <__cvt+0x7c>

0800a92c <__exponent>:
 800a92c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a92e:	2900      	cmp	r1, #0
 800a930:	bfb6      	itet	lt
 800a932:	232d      	movlt	r3, #45	@ 0x2d
 800a934:	232b      	movge	r3, #43	@ 0x2b
 800a936:	4249      	neglt	r1, r1
 800a938:	2909      	cmp	r1, #9
 800a93a:	7002      	strb	r2, [r0, #0]
 800a93c:	7043      	strb	r3, [r0, #1]
 800a93e:	dd29      	ble.n	800a994 <__exponent+0x68>
 800a940:	f10d 0307 	add.w	r3, sp, #7
 800a944:	461d      	mov	r5, r3
 800a946:	270a      	movs	r7, #10
 800a948:	fbb1 f6f7 	udiv	r6, r1, r7
 800a94c:	461a      	mov	r2, r3
 800a94e:	fb07 1416 	mls	r4, r7, r6, r1
 800a952:	3430      	adds	r4, #48	@ 0x30
 800a954:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a958:	460c      	mov	r4, r1
 800a95a:	2c63      	cmp	r4, #99	@ 0x63
 800a95c:	4631      	mov	r1, r6
 800a95e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a962:	dcf1      	bgt.n	800a948 <__exponent+0x1c>
 800a964:	3130      	adds	r1, #48	@ 0x30
 800a966:	1e94      	subs	r4, r2, #2
 800a968:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a96c:	4623      	mov	r3, r4
 800a96e:	1c41      	adds	r1, r0, #1
 800a970:	42ab      	cmp	r3, r5
 800a972:	d30a      	bcc.n	800a98a <__exponent+0x5e>
 800a974:	f10d 0309 	add.w	r3, sp, #9
 800a978:	1a9b      	subs	r3, r3, r2
 800a97a:	42ac      	cmp	r4, r5
 800a97c:	bf88      	it	hi
 800a97e:	2300      	movhi	r3, #0
 800a980:	3302      	adds	r3, #2
 800a982:	4403      	add	r3, r0
 800a984:	1a18      	subs	r0, r3, r0
 800a986:	b003      	add	sp, #12
 800a988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a98a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a98e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a992:	e7ed      	b.n	800a970 <__exponent+0x44>
 800a994:	2330      	movs	r3, #48	@ 0x30
 800a996:	3130      	adds	r1, #48	@ 0x30
 800a998:	7083      	strb	r3, [r0, #2]
 800a99a:	70c1      	strb	r1, [r0, #3]
 800a99c:	1d03      	adds	r3, r0, #4
 800a99e:	e7f1      	b.n	800a984 <__exponent+0x58>

0800a9a0 <_printf_float>:
 800a9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	b091      	sub	sp, #68	@ 0x44
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a9ac:	4616      	mov	r6, r2
 800a9ae:	461f      	mov	r7, r3
 800a9b0:	4605      	mov	r5, r0
 800a9b2:	f000 fcc1 	bl	800b338 <_localeconv_r>
 800a9b6:	6803      	ldr	r3, [r0, #0]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	9308      	str	r3, [sp, #32]
 800a9bc:	f7f5 fbc8 	bl	8000150 <strlen>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9c4:	f8d8 3000 	ldr.w	r3, [r8]
 800a9c8:	9009      	str	r0, [sp, #36]	@ 0x24
 800a9ca:	3307      	adds	r3, #7
 800a9cc:	f023 0307 	bic.w	r3, r3, #7
 800a9d0:	f103 0208 	add.w	r2, r3, #8
 800a9d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a9d8:	f8d4 b000 	ldr.w	fp, [r4]
 800a9dc:	f8c8 2000 	str.w	r2, [r8]
 800a9e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a9e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9ea:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a9f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a9fa:	4b9c      	ldr	r3, [pc, #624]	@ (800ac6c <_printf_float+0x2cc>)
 800a9fc:	f7f6 f806 	bl	8000a0c <__aeabi_dcmpun>
 800aa00:	bb70      	cbnz	r0, 800aa60 <_printf_float+0xc0>
 800aa02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aa06:	f04f 32ff 	mov.w	r2, #4294967295
 800aa0a:	4b98      	ldr	r3, [pc, #608]	@ (800ac6c <_printf_float+0x2cc>)
 800aa0c:	f7f5 ffe0 	bl	80009d0 <__aeabi_dcmple>
 800aa10:	bb30      	cbnz	r0, 800aa60 <_printf_float+0xc0>
 800aa12:	2200      	movs	r2, #0
 800aa14:	2300      	movs	r3, #0
 800aa16:	4640      	mov	r0, r8
 800aa18:	4649      	mov	r1, r9
 800aa1a:	f7f5 ffcf 	bl	80009bc <__aeabi_dcmplt>
 800aa1e:	b110      	cbz	r0, 800aa26 <_printf_float+0x86>
 800aa20:	232d      	movs	r3, #45	@ 0x2d
 800aa22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa26:	4a92      	ldr	r2, [pc, #584]	@ (800ac70 <_printf_float+0x2d0>)
 800aa28:	4b92      	ldr	r3, [pc, #584]	@ (800ac74 <_printf_float+0x2d4>)
 800aa2a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aa2e:	bf94      	ite	ls
 800aa30:	4690      	movls	r8, r2
 800aa32:	4698      	movhi	r8, r3
 800aa34:	2303      	movs	r3, #3
 800aa36:	f04f 0900 	mov.w	r9, #0
 800aa3a:	6123      	str	r3, [r4, #16]
 800aa3c:	f02b 0304 	bic.w	r3, fp, #4
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	4633      	mov	r3, r6
 800aa44:	4621      	mov	r1, r4
 800aa46:	4628      	mov	r0, r5
 800aa48:	9700      	str	r7, [sp, #0]
 800aa4a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800aa4c:	f000 f9d4 	bl	800adf8 <_printf_common>
 800aa50:	3001      	adds	r0, #1
 800aa52:	f040 8090 	bne.w	800ab76 <_printf_float+0x1d6>
 800aa56:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5a:	b011      	add	sp, #68	@ 0x44
 800aa5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa60:	4642      	mov	r2, r8
 800aa62:	464b      	mov	r3, r9
 800aa64:	4640      	mov	r0, r8
 800aa66:	4649      	mov	r1, r9
 800aa68:	f7f5 ffd0 	bl	8000a0c <__aeabi_dcmpun>
 800aa6c:	b148      	cbz	r0, 800aa82 <_printf_float+0xe2>
 800aa6e:	464b      	mov	r3, r9
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	bfb8      	it	lt
 800aa74:	232d      	movlt	r3, #45	@ 0x2d
 800aa76:	4a80      	ldr	r2, [pc, #512]	@ (800ac78 <_printf_float+0x2d8>)
 800aa78:	bfb8      	it	lt
 800aa7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aa7e:	4b7f      	ldr	r3, [pc, #508]	@ (800ac7c <_printf_float+0x2dc>)
 800aa80:	e7d3      	b.n	800aa2a <_printf_float+0x8a>
 800aa82:	6863      	ldr	r3, [r4, #4]
 800aa84:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800aa88:	1c5a      	adds	r2, r3, #1
 800aa8a:	d13f      	bne.n	800ab0c <_printf_float+0x16c>
 800aa8c:	2306      	movs	r3, #6
 800aa8e:	6063      	str	r3, [r4, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800aa96:	6023      	str	r3, [r4, #0]
 800aa98:	9206      	str	r2, [sp, #24]
 800aa9a:	aa0e      	add	r2, sp, #56	@ 0x38
 800aa9c:	e9cd a204 	strd	sl, r2, [sp, #16]
 800aaa0:	aa0d      	add	r2, sp, #52	@ 0x34
 800aaa2:	9203      	str	r2, [sp, #12]
 800aaa4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800aaa8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800aaac:	6863      	ldr	r3, [r4, #4]
 800aaae:	4642      	mov	r2, r8
 800aab0:	9300      	str	r3, [sp, #0]
 800aab2:	4628      	mov	r0, r5
 800aab4:	464b      	mov	r3, r9
 800aab6:	910a      	str	r1, [sp, #40]	@ 0x28
 800aab8:	f7ff fed4 	bl	800a864 <__cvt>
 800aabc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aabe:	4680      	mov	r8, r0
 800aac0:	2947      	cmp	r1, #71	@ 0x47
 800aac2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800aac4:	d128      	bne.n	800ab18 <_printf_float+0x178>
 800aac6:	1cc8      	adds	r0, r1, #3
 800aac8:	db02      	blt.n	800aad0 <_printf_float+0x130>
 800aaca:	6863      	ldr	r3, [r4, #4]
 800aacc:	4299      	cmp	r1, r3
 800aace:	dd40      	ble.n	800ab52 <_printf_float+0x1b2>
 800aad0:	f1aa 0a02 	sub.w	sl, sl, #2
 800aad4:	fa5f fa8a 	uxtb.w	sl, sl
 800aad8:	4652      	mov	r2, sl
 800aada:	3901      	subs	r1, #1
 800aadc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aae0:	910d      	str	r1, [sp, #52]	@ 0x34
 800aae2:	f7ff ff23 	bl	800a92c <__exponent>
 800aae6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aae8:	4681      	mov	r9, r0
 800aaea:	1813      	adds	r3, r2, r0
 800aaec:	2a01      	cmp	r2, #1
 800aaee:	6123      	str	r3, [r4, #16]
 800aaf0:	dc02      	bgt.n	800aaf8 <_printf_float+0x158>
 800aaf2:	6822      	ldr	r2, [r4, #0]
 800aaf4:	07d2      	lsls	r2, r2, #31
 800aaf6:	d501      	bpl.n	800aafc <_printf_float+0x15c>
 800aaf8:	3301      	adds	r3, #1
 800aafa:	6123      	str	r3, [r4, #16]
 800aafc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d09e      	beq.n	800aa42 <_printf_float+0xa2>
 800ab04:	232d      	movs	r3, #45	@ 0x2d
 800ab06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab0a:	e79a      	b.n	800aa42 <_printf_float+0xa2>
 800ab0c:	2947      	cmp	r1, #71	@ 0x47
 800ab0e:	d1bf      	bne.n	800aa90 <_printf_float+0xf0>
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1bd      	bne.n	800aa90 <_printf_float+0xf0>
 800ab14:	2301      	movs	r3, #1
 800ab16:	e7ba      	b.n	800aa8e <_printf_float+0xee>
 800ab18:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab1c:	d9dc      	bls.n	800aad8 <_printf_float+0x138>
 800ab1e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ab22:	d118      	bne.n	800ab56 <_printf_float+0x1b6>
 800ab24:	2900      	cmp	r1, #0
 800ab26:	6863      	ldr	r3, [r4, #4]
 800ab28:	dd0b      	ble.n	800ab42 <_printf_float+0x1a2>
 800ab2a:	6121      	str	r1, [r4, #16]
 800ab2c:	b913      	cbnz	r3, 800ab34 <_printf_float+0x194>
 800ab2e:	6822      	ldr	r2, [r4, #0]
 800ab30:	07d0      	lsls	r0, r2, #31
 800ab32:	d502      	bpl.n	800ab3a <_printf_float+0x19a>
 800ab34:	3301      	adds	r3, #1
 800ab36:	440b      	add	r3, r1
 800ab38:	6123      	str	r3, [r4, #16]
 800ab3a:	f04f 0900 	mov.w	r9, #0
 800ab3e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ab40:	e7dc      	b.n	800aafc <_printf_float+0x15c>
 800ab42:	b913      	cbnz	r3, 800ab4a <_printf_float+0x1aa>
 800ab44:	6822      	ldr	r2, [r4, #0]
 800ab46:	07d2      	lsls	r2, r2, #31
 800ab48:	d501      	bpl.n	800ab4e <_printf_float+0x1ae>
 800ab4a:	3302      	adds	r3, #2
 800ab4c:	e7f4      	b.n	800ab38 <_printf_float+0x198>
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e7f2      	b.n	800ab38 <_printf_float+0x198>
 800ab52:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ab56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab58:	4299      	cmp	r1, r3
 800ab5a:	db05      	blt.n	800ab68 <_printf_float+0x1c8>
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	6121      	str	r1, [r4, #16]
 800ab60:	07d8      	lsls	r0, r3, #31
 800ab62:	d5ea      	bpl.n	800ab3a <_printf_float+0x19a>
 800ab64:	1c4b      	adds	r3, r1, #1
 800ab66:	e7e7      	b.n	800ab38 <_printf_float+0x198>
 800ab68:	2900      	cmp	r1, #0
 800ab6a:	bfcc      	ite	gt
 800ab6c:	2201      	movgt	r2, #1
 800ab6e:	f1c1 0202 	rsble	r2, r1, #2
 800ab72:	4413      	add	r3, r2
 800ab74:	e7e0      	b.n	800ab38 <_printf_float+0x198>
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	055a      	lsls	r2, r3, #21
 800ab7a:	d407      	bmi.n	800ab8c <_printf_float+0x1ec>
 800ab7c:	6923      	ldr	r3, [r4, #16]
 800ab7e:	4642      	mov	r2, r8
 800ab80:	4631      	mov	r1, r6
 800ab82:	4628      	mov	r0, r5
 800ab84:	47b8      	blx	r7
 800ab86:	3001      	adds	r0, #1
 800ab88:	d12b      	bne.n	800abe2 <_printf_float+0x242>
 800ab8a:	e764      	b.n	800aa56 <_printf_float+0xb6>
 800ab8c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab90:	f240 80dc 	bls.w	800ad4c <_printf_float+0x3ac>
 800ab94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ab98:	2200      	movs	r2, #0
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f7f5 ff04 	bl	80009a8 <__aeabi_dcmpeq>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d033      	beq.n	800ac0c <_printf_float+0x26c>
 800aba4:	2301      	movs	r3, #1
 800aba6:	4631      	mov	r1, r6
 800aba8:	4628      	mov	r0, r5
 800abaa:	4a35      	ldr	r2, [pc, #212]	@ (800ac80 <_printf_float+0x2e0>)
 800abac:	47b8      	blx	r7
 800abae:	3001      	adds	r0, #1
 800abb0:	f43f af51 	beq.w	800aa56 <_printf_float+0xb6>
 800abb4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800abb8:	4543      	cmp	r3, r8
 800abba:	db02      	blt.n	800abc2 <_printf_float+0x222>
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	07d8      	lsls	r0, r3, #31
 800abc0:	d50f      	bpl.n	800abe2 <_printf_float+0x242>
 800abc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800abc6:	4631      	mov	r1, r6
 800abc8:	4628      	mov	r0, r5
 800abca:	47b8      	blx	r7
 800abcc:	3001      	adds	r0, #1
 800abce:	f43f af42 	beq.w	800aa56 <_printf_float+0xb6>
 800abd2:	f04f 0900 	mov.w	r9, #0
 800abd6:	f108 38ff 	add.w	r8, r8, #4294967295
 800abda:	f104 0a1a 	add.w	sl, r4, #26
 800abde:	45c8      	cmp	r8, r9
 800abe0:	dc09      	bgt.n	800abf6 <_printf_float+0x256>
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	079b      	lsls	r3, r3, #30
 800abe6:	f100 8102 	bmi.w	800adee <_printf_float+0x44e>
 800abea:	68e0      	ldr	r0, [r4, #12]
 800abec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abee:	4298      	cmp	r0, r3
 800abf0:	bfb8      	it	lt
 800abf2:	4618      	movlt	r0, r3
 800abf4:	e731      	b.n	800aa5a <_printf_float+0xba>
 800abf6:	2301      	movs	r3, #1
 800abf8:	4652      	mov	r2, sl
 800abfa:	4631      	mov	r1, r6
 800abfc:	4628      	mov	r0, r5
 800abfe:	47b8      	blx	r7
 800ac00:	3001      	adds	r0, #1
 800ac02:	f43f af28 	beq.w	800aa56 <_printf_float+0xb6>
 800ac06:	f109 0901 	add.w	r9, r9, #1
 800ac0a:	e7e8      	b.n	800abde <_printf_float+0x23e>
 800ac0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	dc38      	bgt.n	800ac84 <_printf_float+0x2e4>
 800ac12:	2301      	movs	r3, #1
 800ac14:	4631      	mov	r1, r6
 800ac16:	4628      	mov	r0, r5
 800ac18:	4a19      	ldr	r2, [pc, #100]	@ (800ac80 <_printf_float+0x2e0>)
 800ac1a:	47b8      	blx	r7
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	f43f af1a 	beq.w	800aa56 <_printf_float+0xb6>
 800ac22:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800ac26:	ea59 0303 	orrs.w	r3, r9, r3
 800ac2a:	d102      	bne.n	800ac32 <_printf_float+0x292>
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	07d9      	lsls	r1, r3, #31
 800ac30:	d5d7      	bpl.n	800abe2 <_printf_float+0x242>
 800ac32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac36:	4631      	mov	r1, r6
 800ac38:	4628      	mov	r0, r5
 800ac3a:	47b8      	blx	r7
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	f43f af0a 	beq.w	800aa56 <_printf_float+0xb6>
 800ac42:	f04f 0a00 	mov.w	sl, #0
 800ac46:	f104 0b1a 	add.w	fp, r4, #26
 800ac4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac4c:	425b      	negs	r3, r3
 800ac4e:	4553      	cmp	r3, sl
 800ac50:	dc01      	bgt.n	800ac56 <_printf_float+0x2b6>
 800ac52:	464b      	mov	r3, r9
 800ac54:	e793      	b.n	800ab7e <_printf_float+0x1de>
 800ac56:	2301      	movs	r3, #1
 800ac58:	465a      	mov	r2, fp
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	47b8      	blx	r7
 800ac60:	3001      	adds	r0, #1
 800ac62:	f43f aef8 	beq.w	800aa56 <_printf_float+0xb6>
 800ac66:	f10a 0a01 	add.w	sl, sl, #1
 800ac6a:	e7ee      	b.n	800ac4a <_printf_float+0x2aa>
 800ac6c:	7fefffff 	.word	0x7fefffff
 800ac70:	0800d216 	.word	0x0800d216
 800ac74:	0800d21a 	.word	0x0800d21a
 800ac78:	0800d21e 	.word	0x0800d21e
 800ac7c:	0800d222 	.word	0x0800d222
 800ac80:	0800d226 	.word	0x0800d226
 800ac84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ac86:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ac8a:	4553      	cmp	r3, sl
 800ac8c:	bfa8      	it	ge
 800ac8e:	4653      	movge	r3, sl
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	4699      	mov	r9, r3
 800ac94:	dc36      	bgt.n	800ad04 <_printf_float+0x364>
 800ac96:	f04f 0b00 	mov.w	fp, #0
 800ac9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac9e:	f104 021a 	add.w	r2, r4, #26
 800aca2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aca4:	930a      	str	r3, [sp, #40]	@ 0x28
 800aca6:	eba3 0309 	sub.w	r3, r3, r9
 800acaa:	455b      	cmp	r3, fp
 800acac:	dc31      	bgt.n	800ad12 <_printf_float+0x372>
 800acae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800acb0:	459a      	cmp	sl, r3
 800acb2:	dc3a      	bgt.n	800ad2a <_printf_float+0x38a>
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	07da      	lsls	r2, r3, #31
 800acb8:	d437      	bmi.n	800ad2a <_printf_float+0x38a>
 800acba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800acbc:	ebaa 0903 	sub.w	r9, sl, r3
 800acc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acc2:	ebaa 0303 	sub.w	r3, sl, r3
 800acc6:	4599      	cmp	r9, r3
 800acc8:	bfa8      	it	ge
 800acca:	4699      	movge	r9, r3
 800accc:	f1b9 0f00 	cmp.w	r9, #0
 800acd0:	dc33      	bgt.n	800ad3a <_printf_float+0x39a>
 800acd2:	f04f 0800 	mov.w	r8, #0
 800acd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acda:	f104 0b1a 	add.w	fp, r4, #26
 800acde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ace0:	ebaa 0303 	sub.w	r3, sl, r3
 800ace4:	eba3 0309 	sub.w	r3, r3, r9
 800ace8:	4543      	cmp	r3, r8
 800acea:	f77f af7a 	ble.w	800abe2 <_printf_float+0x242>
 800acee:	2301      	movs	r3, #1
 800acf0:	465a      	mov	r2, fp
 800acf2:	4631      	mov	r1, r6
 800acf4:	4628      	mov	r0, r5
 800acf6:	47b8      	blx	r7
 800acf8:	3001      	adds	r0, #1
 800acfa:	f43f aeac 	beq.w	800aa56 <_printf_float+0xb6>
 800acfe:	f108 0801 	add.w	r8, r8, #1
 800ad02:	e7ec      	b.n	800acde <_printf_float+0x33e>
 800ad04:	4642      	mov	r2, r8
 800ad06:	4631      	mov	r1, r6
 800ad08:	4628      	mov	r0, r5
 800ad0a:	47b8      	blx	r7
 800ad0c:	3001      	adds	r0, #1
 800ad0e:	d1c2      	bne.n	800ac96 <_printf_float+0x2f6>
 800ad10:	e6a1      	b.n	800aa56 <_printf_float+0xb6>
 800ad12:	2301      	movs	r3, #1
 800ad14:	4631      	mov	r1, r6
 800ad16:	4628      	mov	r0, r5
 800ad18:	920a      	str	r2, [sp, #40]	@ 0x28
 800ad1a:	47b8      	blx	r7
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	f43f ae9a 	beq.w	800aa56 <_printf_float+0xb6>
 800ad22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad24:	f10b 0b01 	add.w	fp, fp, #1
 800ad28:	e7bb      	b.n	800aca2 <_printf_float+0x302>
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad30:	4628      	mov	r0, r5
 800ad32:	47b8      	blx	r7
 800ad34:	3001      	adds	r0, #1
 800ad36:	d1c0      	bne.n	800acba <_printf_float+0x31a>
 800ad38:	e68d      	b.n	800aa56 <_printf_float+0xb6>
 800ad3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad3c:	464b      	mov	r3, r9
 800ad3e:	4631      	mov	r1, r6
 800ad40:	4628      	mov	r0, r5
 800ad42:	4442      	add	r2, r8
 800ad44:	47b8      	blx	r7
 800ad46:	3001      	adds	r0, #1
 800ad48:	d1c3      	bne.n	800acd2 <_printf_float+0x332>
 800ad4a:	e684      	b.n	800aa56 <_printf_float+0xb6>
 800ad4c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ad50:	f1ba 0f01 	cmp.w	sl, #1
 800ad54:	dc01      	bgt.n	800ad5a <_printf_float+0x3ba>
 800ad56:	07db      	lsls	r3, r3, #31
 800ad58:	d536      	bpl.n	800adc8 <_printf_float+0x428>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	4642      	mov	r2, r8
 800ad5e:	4631      	mov	r1, r6
 800ad60:	4628      	mov	r0, r5
 800ad62:	47b8      	blx	r7
 800ad64:	3001      	adds	r0, #1
 800ad66:	f43f ae76 	beq.w	800aa56 <_printf_float+0xb6>
 800ad6a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad6e:	4631      	mov	r1, r6
 800ad70:	4628      	mov	r0, r5
 800ad72:	47b8      	blx	r7
 800ad74:	3001      	adds	r0, #1
 800ad76:	f43f ae6e 	beq.w	800aa56 <_printf_float+0xb6>
 800ad7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad7e:	2200      	movs	r2, #0
 800ad80:	2300      	movs	r3, #0
 800ad82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad86:	f7f5 fe0f 	bl	80009a8 <__aeabi_dcmpeq>
 800ad8a:	b9c0      	cbnz	r0, 800adbe <_printf_float+0x41e>
 800ad8c:	4653      	mov	r3, sl
 800ad8e:	f108 0201 	add.w	r2, r8, #1
 800ad92:	4631      	mov	r1, r6
 800ad94:	4628      	mov	r0, r5
 800ad96:	47b8      	blx	r7
 800ad98:	3001      	adds	r0, #1
 800ad9a:	d10c      	bne.n	800adb6 <_printf_float+0x416>
 800ad9c:	e65b      	b.n	800aa56 <_printf_float+0xb6>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	465a      	mov	r2, fp
 800ada2:	4631      	mov	r1, r6
 800ada4:	4628      	mov	r0, r5
 800ada6:	47b8      	blx	r7
 800ada8:	3001      	adds	r0, #1
 800adaa:	f43f ae54 	beq.w	800aa56 <_printf_float+0xb6>
 800adae:	f108 0801 	add.w	r8, r8, #1
 800adb2:	45d0      	cmp	r8, sl
 800adb4:	dbf3      	blt.n	800ad9e <_printf_float+0x3fe>
 800adb6:	464b      	mov	r3, r9
 800adb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800adbc:	e6e0      	b.n	800ab80 <_printf_float+0x1e0>
 800adbe:	f04f 0800 	mov.w	r8, #0
 800adc2:	f104 0b1a 	add.w	fp, r4, #26
 800adc6:	e7f4      	b.n	800adb2 <_printf_float+0x412>
 800adc8:	2301      	movs	r3, #1
 800adca:	4642      	mov	r2, r8
 800adcc:	e7e1      	b.n	800ad92 <_printf_float+0x3f2>
 800adce:	2301      	movs	r3, #1
 800add0:	464a      	mov	r2, r9
 800add2:	4631      	mov	r1, r6
 800add4:	4628      	mov	r0, r5
 800add6:	47b8      	blx	r7
 800add8:	3001      	adds	r0, #1
 800adda:	f43f ae3c 	beq.w	800aa56 <_printf_float+0xb6>
 800adde:	f108 0801 	add.w	r8, r8, #1
 800ade2:	68e3      	ldr	r3, [r4, #12]
 800ade4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ade6:	1a5b      	subs	r3, r3, r1
 800ade8:	4543      	cmp	r3, r8
 800adea:	dcf0      	bgt.n	800adce <_printf_float+0x42e>
 800adec:	e6fd      	b.n	800abea <_printf_float+0x24a>
 800adee:	f04f 0800 	mov.w	r8, #0
 800adf2:	f104 0919 	add.w	r9, r4, #25
 800adf6:	e7f4      	b.n	800ade2 <_printf_float+0x442>

0800adf8 <_printf_common>:
 800adf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adfc:	4616      	mov	r6, r2
 800adfe:	4698      	mov	r8, r3
 800ae00:	688a      	ldr	r2, [r1, #8]
 800ae02:	690b      	ldr	r3, [r1, #16]
 800ae04:	4607      	mov	r7, r0
 800ae06:	4293      	cmp	r3, r2
 800ae08:	bfb8      	it	lt
 800ae0a:	4613      	movlt	r3, r2
 800ae0c:	6033      	str	r3, [r6, #0]
 800ae0e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae12:	460c      	mov	r4, r1
 800ae14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae18:	b10a      	cbz	r2, 800ae1e <_printf_common+0x26>
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	6033      	str	r3, [r6, #0]
 800ae1e:	6823      	ldr	r3, [r4, #0]
 800ae20:	0699      	lsls	r1, r3, #26
 800ae22:	bf42      	ittt	mi
 800ae24:	6833      	ldrmi	r3, [r6, #0]
 800ae26:	3302      	addmi	r3, #2
 800ae28:	6033      	strmi	r3, [r6, #0]
 800ae2a:	6825      	ldr	r5, [r4, #0]
 800ae2c:	f015 0506 	ands.w	r5, r5, #6
 800ae30:	d106      	bne.n	800ae40 <_printf_common+0x48>
 800ae32:	f104 0a19 	add.w	sl, r4, #25
 800ae36:	68e3      	ldr	r3, [r4, #12]
 800ae38:	6832      	ldr	r2, [r6, #0]
 800ae3a:	1a9b      	subs	r3, r3, r2
 800ae3c:	42ab      	cmp	r3, r5
 800ae3e:	dc2b      	bgt.n	800ae98 <_printf_common+0xa0>
 800ae40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae44:	6822      	ldr	r2, [r4, #0]
 800ae46:	3b00      	subs	r3, #0
 800ae48:	bf18      	it	ne
 800ae4a:	2301      	movne	r3, #1
 800ae4c:	0692      	lsls	r2, r2, #26
 800ae4e:	d430      	bmi.n	800aeb2 <_printf_common+0xba>
 800ae50:	4641      	mov	r1, r8
 800ae52:	4638      	mov	r0, r7
 800ae54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae58:	47c8      	blx	r9
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	d023      	beq.n	800aea6 <_printf_common+0xae>
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	6922      	ldr	r2, [r4, #16]
 800ae62:	f003 0306 	and.w	r3, r3, #6
 800ae66:	2b04      	cmp	r3, #4
 800ae68:	bf14      	ite	ne
 800ae6a:	2500      	movne	r5, #0
 800ae6c:	6833      	ldreq	r3, [r6, #0]
 800ae6e:	f04f 0600 	mov.w	r6, #0
 800ae72:	bf08      	it	eq
 800ae74:	68e5      	ldreq	r5, [r4, #12]
 800ae76:	f104 041a 	add.w	r4, r4, #26
 800ae7a:	bf08      	it	eq
 800ae7c:	1aed      	subeq	r5, r5, r3
 800ae7e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ae82:	bf08      	it	eq
 800ae84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	bfc4      	itt	gt
 800ae8c:	1a9b      	subgt	r3, r3, r2
 800ae8e:	18ed      	addgt	r5, r5, r3
 800ae90:	42b5      	cmp	r5, r6
 800ae92:	d11a      	bne.n	800aeca <_printf_common+0xd2>
 800ae94:	2000      	movs	r0, #0
 800ae96:	e008      	b.n	800aeaa <_printf_common+0xb2>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	4652      	mov	r2, sl
 800ae9c:	4641      	mov	r1, r8
 800ae9e:	4638      	mov	r0, r7
 800aea0:	47c8      	blx	r9
 800aea2:	3001      	adds	r0, #1
 800aea4:	d103      	bne.n	800aeae <_printf_common+0xb6>
 800aea6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeae:	3501      	adds	r5, #1
 800aeb0:	e7c1      	b.n	800ae36 <_printf_common+0x3e>
 800aeb2:	2030      	movs	r0, #48	@ 0x30
 800aeb4:	18e1      	adds	r1, r4, r3
 800aeb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aeba:	1c5a      	adds	r2, r3, #1
 800aebc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aec0:	4422      	add	r2, r4
 800aec2:	3302      	adds	r3, #2
 800aec4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aec8:	e7c2      	b.n	800ae50 <_printf_common+0x58>
 800aeca:	2301      	movs	r3, #1
 800aecc:	4622      	mov	r2, r4
 800aece:	4641      	mov	r1, r8
 800aed0:	4638      	mov	r0, r7
 800aed2:	47c8      	blx	r9
 800aed4:	3001      	adds	r0, #1
 800aed6:	d0e6      	beq.n	800aea6 <_printf_common+0xae>
 800aed8:	3601      	adds	r6, #1
 800aeda:	e7d9      	b.n	800ae90 <_printf_common+0x98>

0800aedc <_printf_i>:
 800aedc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aee0:	7e0f      	ldrb	r7, [r1, #24]
 800aee2:	4691      	mov	r9, r2
 800aee4:	2f78      	cmp	r7, #120	@ 0x78
 800aee6:	4680      	mov	r8, r0
 800aee8:	460c      	mov	r4, r1
 800aeea:	469a      	mov	sl, r3
 800aeec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aeee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aef2:	d807      	bhi.n	800af04 <_printf_i+0x28>
 800aef4:	2f62      	cmp	r7, #98	@ 0x62
 800aef6:	d80a      	bhi.n	800af0e <_printf_i+0x32>
 800aef8:	2f00      	cmp	r7, #0
 800aefa:	f000 80d3 	beq.w	800b0a4 <_printf_i+0x1c8>
 800aefe:	2f58      	cmp	r7, #88	@ 0x58
 800af00:	f000 80ba 	beq.w	800b078 <_printf_i+0x19c>
 800af04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af0c:	e03a      	b.n	800af84 <_printf_i+0xa8>
 800af0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af12:	2b15      	cmp	r3, #21
 800af14:	d8f6      	bhi.n	800af04 <_printf_i+0x28>
 800af16:	a101      	add	r1, pc, #4	@ (adr r1, 800af1c <_printf_i+0x40>)
 800af18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af1c:	0800af75 	.word	0x0800af75
 800af20:	0800af89 	.word	0x0800af89
 800af24:	0800af05 	.word	0x0800af05
 800af28:	0800af05 	.word	0x0800af05
 800af2c:	0800af05 	.word	0x0800af05
 800af30:	0800af05 	.word	0x0800af05
 800af34:	0800af89 	.word	0x0800af89
 800af38:	0800af05 	.word	0x0800af05
 800af3c:	0800af05 	.word	0x0800af05
 800af40:	0800af05 	.word	0x0800af05
 800af44:	0800af05 	.word	0x0800af05
 800af48:	0800b08b 	.word	0x0800b08b
 800af4c:	0800afb3 	.word	0x0800afb3
 800af50:	0800b045 	.word	0x0800b045
 800af54:	0800af05 	.word	0x0800af05
 800af58:	0800af05 	.word	0x0800af05
 800af5c:	0800b0ad 	.word	0x0800b0ad
 800af60:	0800af05 	.word	0x0800af05
 800af64:	0800afb3 	.word	0x0800afb3
 800af68:	0800af05 	.word	0x0800af05
 800af6c:	0800af05 	.word	0x0800af05
 800af70:	0800b04d 	.word	0x0800b04d
 800af74:	6833      	ldr	r3, [r6, #0]
 800af76:	1d1a      	adds	r2, r3, #4
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	6032      	str	r2, [r6, #0]
 800af7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af84:	2301      	movs	r3, #1
 800af86:	e09e      	b.n	800b0c6 <_printf_i+0x1ea>
 800af88:	6833      	ldr	r3, [r6, #0]
 800af8a:	6820      	ldr	r0, [r4, #0]
 800af8c:	1d19      	adds	r1, r3, #4
 800af8e:	6031      	str	r1, [r6, #0]
 800af90:	0606      	lsls	r6, r0, #24
 800af92:	d501      	bpl.n	800af98 <_printf_i+0xbc>
 800af94:	681d      	ldr	r5, [r3, #0]
 800af96:	e003      	b.n	800afa0 <_printf_i+0xc4>
 800af98:	0645      	lsls	r5, r0, #25
 800af9a:	d5fb      	bpl.n	800af94 <_printf_i+0xb8>
 800af9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800afa0:	2d00      	cmp	r5, #0
 800afa2:	da03      	bge.n	800afac <_printf_i+0xd0>
 800afa4:	232d      	movs	r3, #45	@ 0x2d
 800afa6:	426d      	negs	r5, r5
 800afa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afac:	230a      	movs	r3, #10
 800afae:	4859      	ldr	r0, [pc, #356]	@ (800b114 <_printf_i+0x238>)
 800afb0:	e011      	b.n	800afd6 <_printf_i+0xfa>
 800afb2:	6821      	ldr	r1, [r4, #0]
 800afb4:	6833      	ldr	r3, [r6, #0]
 800afb6:	0608      	lsls	r0, r1, #24
 800afb8:	f853 5b04 	ldr.w	r5, [r3], #4
 800afbc:	d402      	bmi.n	800afc4 <_printf_i+0xe8>
 800afbe:	0649      	lsls	r1, r1, #25
 800afc0:	bf48      	it	mi
 800afc2:	b2ad      	uxthmi	r5, r5
 800afc4:	2f6f      	cmp	r7, #111	@ 0x6f
 800afc6:	6033      	str	r3, [r6, #0]
 800afc8:	bf14      	ite	ne
 800afca:	230a      	movne	r3, #10
 800afcc:	2308      	moveq	r3, #8
 800afce:	4851      	ldr	r0, [pc, #324]	@ (800b114 <_printf_i+0x238>)
 800afd0:	2100      	movs	r1, #0
 800afd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800afd6:	6866      	ldr	r6, [r4, #4]
 800afd8:	2e00      	cmp	r6, #0
 800afda:	bfa8      	it	ge
 800afdc:	6821      	ldrge	r1, [r4, #0]
 800afde:	60a6      	str	r6, [r4, #8]
 800afe0:	bfa4      	itt	ge
 800afe2:	f021 0104 	bicge.w	r1, r1, #4
 800afe6:	6021      	strge	r1, [r4, #0]
 800afe8:	b90d      	cbnz	r5, 800afee <_printf_i+0x112>
 800afea:	2e00      	cmp	r6, #0
 800afec:	d04b      	beq.n	800b086 <_printf_i+0x1aa>
 800afee:	4616      	mov	r6, r2
 800aff0:	fbb5 f1f3 	udiv	r1, r5, r3
 800aff4:	fb03 5711 	mls	r7, r3, r1, r5
 800aff8:	5dc7      	ldrb	r7, [r0, r7]
 800affa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800affe:	462f      	mov	r7, r5
 800b000:	42bb      	cmp	r3, r7
 800b002:	460d      	mov	r5, r1
 800b004:	d9f4      	bls.n	800aff0 <_printf_i+0x114>
 800b006:	2b08      	cmp	r3, #8
 800b008:	d10b      	bne.n	800b022 <_printf_i+0x146>
 800b00a:	6823      	ldr	r3, [r4, #0]
 800b00c:	07df      	lsls	r7, r3, #31
 800b00e:	d508      	bpl.n	800b022 <_printf_i+0x146>
 800b010:	6923      	ldr	r3, [r4, #16]
 800b012:	6861      	ldr	r1, [r4, #4]
 800b014:	4299      	cmp	r1, r3
 800b016:	bfde      	ittt	le
 800b018:	2330      	movle	r3, #48	@ 0x30
 800b01a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b01e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b022:	1b92      	subs	r2, r2, r6
 800b024:	6122      	str	r2, [r4, #16]
 800b026:	464b      	mov	r3, r9
 800b028:	4621      	mov	r1, r4
 800b02a:	4640      	mov	r0, r8
 800b02c:	f8cd a000 	str.w	sl, [sp]
 800b030:	aa03      	add	r2, sp, #12
 800b032:	f7ff fee1 	bl	800adf8 <_printf_common>
 800b036:	3001      	adds	r0, #1
 800b038:	d14a      	bne.n	800b0d0 <_printf_i+0x1f4>
 800b03a:	f04f 30ff 	mov.w	r0, #4294967295
 800b03e:	b004      	add	sp, #16
 800b040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b044:	6823      	ldr	r3, [r4, #0]
 800b046:	f043 0320 	orr.w	r3, r3, #32
 800b04a:	6023      	str	r3, [r4, #0]
 800b04c:	2778      	movs	r7, #120	@ 0x78
 800b04e:	4832      	ldr	r0, [pc, #200]	@ (800b118 <_printf_i+0x23c>)
 800b050:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	6831      	ldr	r1, [r6, #0]
 800b058:	061f      	lsls	r7, r3, #24
 800b05a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b05e:	d402      	bmi.n	800b066 <_printf_i+0x18a>
 800b060:	065f      	lsls	r7, r3, #25
 800b062:	bf48      	it	mi
 800b064:	b2ad      	uxthmi	r5, r5
 800b066:	6031      	str	r1, [r6, #0]
 800b068:	07d9      	lsls	r1, r3, #31
 800b06a:	bf44      	itt	mi
 800b06c:	f043 0320 	orrmi.w	r3, r3, #32
 800b070:	6023      	strmi	r3, [r4, #0]
 800b072:	b11d      	cbz	r5, 800b07c <_printf_i+0x1a0>
 800b074:	2310      	movs	r3, #16
 800b076:	e7ab      	b.n	800afd0 <_printf_i+0xf4>
 800b078:	4826      	ldr	r0, [pc, #152]	@ (800b114 <_printf_i+0x238>)
 800b07a:	e7e9      	b.n	800b050 <_printf_i+0x174>
 800b07c:	6823      	ldr	r3, [r4, #0]
 800b07e:	f023 0320 	bic.w	r3, r3, #32
 800b082:	6023      	str	r3, [r4, #0]
 800b084:	e7f6      	b.n	800b074 <_printf_i+0x198>
 800b086:	4616      	mov	r6, r2
 800b088:	e7bd      	b.n	800b006 <_printf_i+0x12a>
 800b08a:	6833      	ldr	r3, [r6, #0]
 800b08c:	6825      	ldr	r5, [r4, #0]
 800b08e:	1d18      	adds	r0, r3, #4
 800b090:	6961      	ldr	r1, [r4, #20]
 800b092:	6030      	str	r0, [r6, #0]
 800b094:	062e      	lsls	r6, r5, #24
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	d501      	bpl.n	800b09e <_printf_i+0x1c2>
 800b09a:	6019      	str	r1, [r3, #0]
 800b09c:	e002      	b.n	800b0a4 <_printf_i+0x1c8>
 800b09e:	0668      	lsls	r0, r5, #25
 800b0a0:	d5fb      	bpl.n	800b09a <_printf_i+0x1be>
 800b0a2:	8019      	strh	r1, [r3, #0]
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	4616      	mov	r6, r2
 800b0a8:	6123      	str	r3, [r4, #16]
 800b0aa:	e7bc      	b.n	800b026 <_printf_i+0x14a>
 800b0ac:	6833      	ldr	r3, [r6, #0]
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	1d1a      	adds	r2, r3, #4
 800b0b2:	6032      	str	r2, [r6, #0]
 800b0b4:	681e      	ldr	r6, [r3, #0]
 800b0b6:	6862      	ldr	r2, [r4, #4]
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f000 f9b4 	bl	800b426 <memchr>
 800b0be:	b108      	cbz	r0, 800b0c4 <_printf_i+0x1e8>
 800b0c0:	1b80      	subs	r0, r0, r6
 800b0c2:	6060      	str	r0, [r4, #4]
 800b0c4:	6863      	ldr	r3, [r4, #4]
 800b0c6:	6123      	str	r3, [r4, #16]
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0ce:	e7aa      	b.n	800b026 <_printf_i+0x14a>
 800b0d0:	4632      	mov	r2, r6
 800b0d2:	4649      	mov	r1, r9
 800b0d4:	4640      	mov	r0, r8
 800b0d6:	6923      	ldr	r3, [r4, #16]
 800b0d8:	47d0      	blx	sl
 800b0da:	3001      	adds	r0, #1
 800b0dc:	d0ad      	beq.n	800b03a <_printf_i+0x15e>
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	079b      	lsls	r3, r3, #30
 800b0e2:	d413      	bmi.n	800b10c <_printf_i+0x230>
 800b0e4:	68e0      	ldr	r0, [r4, #12]
 800b0e6:	9b03      	ldr	r3, [sp, #12]
 800b0e8:	4298      	cmp	r0, r3
 800b0ea:	bfb8      	it	lt
 800b0ec:	4618      	movlt	r0, r3
 800b0ee:	e7a6      	b.n	800b03e <_printf_i+0x162>
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	4632      	mov	r2, r6
 800b0f4:	4649      	mov	r1, r9
 800b0f6:	4640      	mov	r0, r8
 800b0f8:	47d0      	blx	sl
 800b0fa:	3001      	adds	r0, #1
 800b0fc:	d09d      	beq.n	800b03a <_printf_i+0x15e>
 800b0fe:	3501      	adds	r5, #1
 800b100:	68e3      	ldr	r3, [r4, #12]
 800b102:	9903      	ldr	r1, [sp, #12]
 800b104:	1a5b      	subs	r3, r3, r1
 800b106:	42ab      	cmp	r3, r5
 800b108:	dcf2      	bgt.n	800b0f0 <_printf_i+0x214>
 800b10a:	e7eb      	b.n	800b0e4 <_printf_i+0x208>
 800b10c:	2500      	movs	r5, #0
 800b10e:	f104 0619 	add.w	r6, r4, #25
 800b112:	e7f5      	b.n	800b100 <_printf_i+0x224>
 800b114:	0800d228 	.word	0x0800d228
 800b118:	0800d239 	.word	0x0800d239

0800b11c <std>:
 800b11c:	2300      	movs	r3, #0
 800b11e:	b510      	push	{r4, lr}
 800b120:	4604      	mov	r4, r0
 800b122:	e9c0 3300 	strd	r3, r3, [r0]
 800b126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b12a:	6083      	str	r3, [r0, #8]
 800b12c:	8181      	strh	r1, [r0, #12]
 800b12e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b130:	81c2      	strh	r2, [r0, #14]
 800b132:	6183      	str	r3, [r0, #24]
 800b134:	4619      	mov	r1, r3
 800b136:	2208      	movs	r2, #8
 800b138:	305c      	adds	r0, #92	@ 0x5c
 800b13a:	f000 f8f4 	bl	800b326 <memset>
 800b13e:	4b0d      	ldr	r3, [pc, #52]	@ (800b174 <std+0x58>)
 800b140:	6224      	str	r4, [r4, #32]
 800b142:	6263      	str	r3, [r4, #36]	@ 0x24
 800b144:	4b0c      	ldr	r3, [pc, #48]	@ (800b178 <std+0x5c>)
 800b146:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b148:	4b0c      	ldr	r3, [pc, #48]	@ (800b17c <std+0x60>)
 800b14a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b14c:	4b0c      	ldr	r3, [pc, #48]	@ (800b180 <std+0x64>)
 800b14e:	6323      	str	r3, [r4, #48]	@ 0x30
 800b150:	4b0c      	ldr	r3, [pc, #48]	@ (800b184 <std+0x68>)
 800b152:	429c      	cmp	r4, r3
 800b154:	d006      	beq.n	800b164 <std+0x48>
 800b156:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b15a:	4294      	cmp	r4, r2
 800b15c:	d002      	beq.n	800b164 <std+0x48>
 800b15e:	33d0      	adds	r3, #208	@ 0xd0
 800b160:	429c      	cmp	r4, r3
 800b162:	d105      	bne.n	800b170 <std+0x54>
 800b164:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b16c:	f000 b958 	b.w	800b420 <__retarget_lock_init_recursive>
 800b170:	bd10      	pop	{r4, pc}
 800b172:	bf00      	nop
 800b174:	0800b2a1 	.word	0x0800b2a1
 800b178:	0800b2c3 	.word	0x0800b2c3
 800b17c:	0800b2fb 	.word	0x0800b2fb
 800b180:	0800b31f 	.word	0x0800b31f
 800b184:	20000f48 	.word	0x20000f48

0800b188 <stdio_exit_handler>:
 800b188:	4a02      	ldr	r2, [pc, #8]	@ (800b194 <stdio_exit_handler+0xc>)
 800b18a:	4903      	ldr	r1, [pc, #12]	@ (800b198 <stdio_exit_handler+0x10>)
 800b18c:	4803      	ldr	r0, [pc, #12]	@ (800b19c <stdio_exit_handler+0x14>)
 800b18e:	f000 b869 	b.w	800b264 <_fwalk_sglue>
 800b192:	bf00      	nop
 800b194:	2000017c 	.word	0x2000017c
 800b198:	0800cae5 	.word	0x0800cae5
 800b19c:	2000018c 	.word	0x2000018c

0800b1a0 <cleanup_stdio>:
 800b1a0:	6841      	ldr	r1, [r0, #4]
 800b1a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d4 <cleanup_stdio+0x34>)
 800b1a4:	b510      	push	{r4, lr}
 800b1a6:	4299      	cmp	r1, r3
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	d001      	beq.n	800b1b0 <cleanup_stdio+0x10>
 800b1ac:	f001 fc9a 	bl	800cae4 <_fflush_r>
 800b1b0:	68a1      	ldr	r1, [r4, #8]
 800b1b2:	4b09      	ldr	r3, [pc, #36]	@ (800b1d8 <cleanup_stdio+0x38>)
 800b1b4:	4299      	cmp	r1, r3
 800b1b6:	d002      	beq.n	800b1be <cleanup_stdio+0x1e>
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	f001 fc93 	bl	800cae4 <_fflush_r>
 800b1be:	68e1      	ldr	r1, [r4, #12]
 800b1c0:	4b06      	ldr	r3, [pc, #24]	@ (800b1dc <cleanup_stdio+0x3c>)
 800b1c2:	4299      	cmp	r1, r3
 800b1c4:	d004      	beq.n	800b1d0 <cleanup_stdio+0x30>
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1cc:	f001 bc8a 	b.w	800cae4 <_fflush_r>
 800b1d0:	bd10      	pop	{r4, pc}
 800b1d2:	bf00      	nop
 800b1d4:	20000f48 	.word	0x20000f48
 800b1d8:	20000fb0 	.word	0x20000fb0
 800b1dc:	20001018 	.word	0x20001018

0800b1e0 <global_stdio_init.part.0>:
 800b1e0:	b510      	push	{r4, lr}
 800b1e2:	4b0b      	ldr	r3, [pc, #44]	@ (800b210 <global_stdio_init.part.0+0x30>)
 800b1e4:	4c0b      	ldr	r4, [pc, #44]	@ (800b214 <global_stdio_init.part.0+0x34>)
 800b1e6:	4a0c      	ldr	r2, [pc, #48]	@ (800b218 <global_stdio_init.part.0+0x38>)
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	601a      	str	r2, [r3, #0]
 800b1ec:	2104      	movs	r1, #4
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f7ff ff94 	bl	800b11c <std>
 800b1f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	2109      	movs	r1, #9
 800b1fc:	f7ff ff8e 	bl	800b11c <std>
 800b200:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b204:	2202      	movs	r2, #2
 800b206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b20a:	2112      	movs	r1, #18
 800b20c:	f7ff bf86 	b.w	800b11c <std>
 800b210:	20001080 	.word	0x20001080
 800b214:	20000f48 	.word	0x20000f48
 800b218:	0800b189 	.word	0x0800b189

0800b21c <__sfp_lock_acquire>:
 800b21c:	4801      	ldr	r0, [pc, #4]	@ (800b224 <__sfp_lock_acquire+0x8>)
 800b21e:	f000 b900 	b.w	800b422 <__retarget_lock_acquire_recursive>
 800b222:	bf00      	nop
 800b224:	20001089 	.word	0x20001089

0800b228 <__sfp_lock_release>:
 800b228:	4801      	ldr	r0, [pc, #4]	@ (800b230 <__sfp_lock_release+0x8>)
 800b22a:	f000 b8fb 	b.w	800b424 <__retarget_lock_release_recursive>
 800b22e:	bf00      	nop
 800b230:	20001089 	.word	0x20001089

0800b234 <__sinit>:
 800b234:	b510      	push	{r4, lr}
 800b236:	4604      	mov	r4, r0
 800b238:	f7ff fff0 	bl	800b21c <__sfp_lock_acquire>
 800b23c:	6a23      	ldr	r3, [r4, #32]
 800b23e:	b11b      	cbz	r3, 800b248 <__sinit+0x14>
 800b240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b244:	f7ff bff0 	b.w	800b228 <__sfp_lock_release>
 800b248:	4b04      	ldr	r3, [pc, #16]	@ (800b25c <__sinit+0x28>)
 800b24a:	6223      	str	r3, [r4, #32]
 800b24c:	4b04      	ldr	r3, [pc, #16]	@ (800b260 <__sinit+0x2c>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1f5      	bne.n	800b240 <__sinit+0xc>
 800b254:	f7ff ffc4 	bl	800b1e0 <global_stdio_init.part.0>
 800b258:	e7f2      	b.n	800b240 <__sinit+0xc>
 800b25a:	bf00      	nop
 800b25c:	0800b1a1 	.word	0x0800b1a1
 800b260:	20001080 	.word	0x20001080

0800b264 <_fwalk_sglue>:
 800b264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b268:	4607      	mov	r7, r0
 800b26a:	4688      	mov	r8, r1
 800b26c:	4614      	mov	r4, r2
 800b26e:	2600      	movs	r6, #0
 800b270:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b274:	f1b9 0901 	subs.w	r9, r9, #1
 800b278:	d505      	bpl.n	800b286 <_fwalk_sglue+0x22>
 800b27a:	6824      	ldr	r4, [r4, #0]
 800b27c:	2c00      	cmp	r4, #0
 800b27e:	d1f7      	bne.n	800b270 <_fwalk_sglue+0xc>
 800b280:	4630      	mov	r0, r6
 800b282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b286:	89ab      	ldrh	r3, [r5, #12]
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d907      	bls.n	800b29c <_fwalk_sglue+0x38>
 800b28c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b290:	3301      	adds	r3, #1
 800b292:	d003      	beq.n	800b29c <_fwalk_sglue+0x38>
 800b294:	4629      	mov	r1, r5
 800b296:	4638      	mov	r0, r7
 800b298:	47c0      	blx	r8
 800b29a:	4306      	orrs	r6, r0
 800b29c:	3568      	adds	r5, #104	@ 0x68
 800b29e:	e7e9      	b.n	800b274 <_fwalk_sglue+0x10>

0800b2a0 <__sread>:
 800b2a0:	b510      	push	{r4, lr}
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a8:	f000 f86c 	bl	800b384 <_read_r>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	bfab      	itete	ge
 800b2b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b2b2:	89a3      	ldrhlt	r3, [r4, #12]
 800b2b4:	181b      	addge	r3, r3, r0
 800b2b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b2ba:	bfac      	ite	ge
 800b2bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b2be:	81a3      	strhlt	r3, [r4, #12]
 800b2c0:	bd10      	pop	{r4, pc}

0800b2c2 <__swrite>:
 800b2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c6:	461f      	mov	r7, r3
 800b2c8:	898b      	ldrh	r3, [r1, #12]
 800b2ca:	4605      	mov	r5, r0
 800b2cc:	05db      	lsls	r3, r3, #23
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	4616      	mov	r6, r2
 800b2d2:	d505      	bpl.n	800b2e0 <__swrite+0x1e>
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2dc:	f000 f840 	bl	800b360 <_lseek_r>
 800b2e0:	89a3      	ldrh	r3, [r4, #12]
 800b2e2:	4632      	mov	r2, r6
 800b2e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b2e8:	81a3      	strh	r3, [r4, #12]
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	463b      	mov	r3, r7
 800b2ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f6:	f000 b857 	b.w	800b3a8 <_write_r>

0800b2fa <__sseek>:
 800b2fa:	b510      	push	{r4, lr}
 800b2fc:	460c      	mov	r4, r1
 800b2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b302:	f000 f82d 	bl	800b360 <_lseek_r>
 800b306:	1c43      	adds	r3, r0, #1
 800b308:	89a3      	ldrh	r3, [r4, #12]
 800b30a:	bf15      	itete	ne
 800b30c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b30e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b312:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b316:	81a3      	strheq	r3, [r4, #12]
 800b318:	bf18      	it	ne
 800b31a:	81a3      	strhne	r3, [r4, #12]
 800b31c:	bd10      	pop	{r4, pc}

0800b31e <__sclose>:
 800b31e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b322:	f000 b80d 	b.w	800b340 <_close_r>

0800b326 <memset>:
 800b326:	4603      	mov	r3, r0
 800b328:	4402      	add	r2, r0
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d100      	bne.n	800b330 <memset+0xa>
 800b32e:	4770      	bx	lr
 800b330:	f803 1b01 	strb.w	r1, [r3], #1
 800b334:	e7f9      	b.n	800b32a <memset+0x4>
	...

0800b338 <_localeconv_r>:
 800b338:	4800      	ldr	r0, [pc, #0]	@ (800b33c <_localeconv_r+0x4>)
 800b33a:	4770      	bx	lr
 800b33c:	200002c8 	.word	0x200002c8

0800b340 <_close_r>:
 800b340:	b538      	push	{r3, r4, r5, lr}
 800b342:	2300      	movs	r3, #0
 800b344:	4d05      	ldr	r5, [pc, #20]	@ (800b35c <_close_r+0x1c>)
 800b346:	4604      	mov	r4, r0
 800b348:	4608      	mov	r0, r1
 800b34a:	602b      	str	r3, [r5, #0]
 800b34c:	f7f6 f8e3 	bl	8001516 <_close>
 800b350:	1c43      	adds	r3, r0, #1
 800b352:	d102      	bne.n	800b35a <_close_r+0x1a>
 800b354:	682b      	ldr	r3, [r5, #0]
 800b356:	b103      	cbz	r3, 800b35a <_close_r+0x1a>
 800b358:	6023      	str	r3, [r4, #0]
 800b35a:	bd38      	pop	{r3, r4, r5, pc}
 800b35c:	20001084 	.word	0x20001084

0800b360 <_lseek_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	4604      	mov	r4, r0
 800b364:	4608      	mov	r0, r1
 800b366:	4611      	mov	r1, r2
 800b368:	2200      	movs	r2, #0
 800b36a:	4d05      	ldr	r5, [pc, #20]	@ (800b380 <_lseek_r+0x20>)
 800b36c:	602a      	str	r2, [r5, #0]
 800b36e:	461a      	mov	r2, r3
 800b370:	f7f6 f8f5 	bl	800155e <_lseek>
 800b374:	1c43      	adds	r3, r0, #1
 800b376:	d102      	bne.n	800b37e <_lseek_r+0x1e>
 800b378:	682b      	ldr	r3, [r5, #0]
 800b37a:	b103      	cbz	r3, 800b37e <_lseek_r+0x1e>
 800b37c:	6023      	str	r3, [r4, #0]
 800b37e:	bd38      	pop	{r3, r4, r5, pc}
 800b380:	20001084 	.word	0x20001084

0800b384 <_read_r>:
 800b384:	b538      	push	{r3, r4, r5, lr}
 800b386:	4604      	mov	r4, r0
 800b388:	4608      	mov	r0, r1
 800b38a:	4611      	mov	r1, r2
 800b38c:	2200      	movs	r2, #0
 800b38e:	4d05      	ldr	r5, [pc, #20]	@ (800b3a4 <_read_r+0x20>)
 800b390:	602a      	str	r2, [r5, #0]
 800b392:	461a      	mov	r2, r3
 800b394:	f7f6 f886 	bl	80014a4 <_read>
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	d102      	bne.n	800b3a2 <_read_r+0x1e>
 800b39c:	682b      	ldr	r3, [r5, #0]
 800b39e:	b103      	cbz	r3, 800b3a2 <_read_r+0x1e>
 800b3a0:	6023      	str	r3, [r4, #0]
 800b3a2:	bd38      	pop	{r3, r4, r5, pc}
 800b3a4:	20001084 	.word	0x20001084

0800b3a8 <_write_r>:
 800b3a8:	b538      	push	{r3, r4, r5, lr}
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	4608      	mov	r0, r1
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	4d05      	ldr	r5, [pc, #20]	@ (800b3c8 <_write_r+0x20>)
 800b3b4:	602a      	str	r2, [r5, #0]
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	f7f6 f891 	bl	80014de <_write>
 800b3bc:	1c43      	adds	r3, r0, #1
 800b3be:	d102      	bne.n	800b3c6 <_write_r+0x1e>
 800b3c0:	682b      	ldr	r3, [r5, #0]
 800b3c2:	b103      	cbz	r3, 800b3c6 <_write_r+0x1e>
 800b3c4:	6023      	str	r3, [r4, #0]
 800b3c6:	bd38      	pop	{r3, r4, r5, pc}
 800b3c8:	20001084 	.word	0x20001084

0800b3cc <__errno>:
 800b3cc:	4b01      	ldr	r3, [pc, #4]	@ (800b3d4 <__errno+0x8>)
 800b3ce:	6818      	ldr	r0, [r3, #0]
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	20000188 	.word	0x20000188

0800b3d8 <__libc_init_array>:
 800b3d8:	b570      	push	{r4, r5, r6, lr}
 800b3da:	2600      	movs	r6, #0
 800b3dc:	4d0c      	ldr	r5, [pc, #48]	@ (800b410 <__libc_init_array+0x38>)
 800b3de:	4c0d      	ldr	r4, [pc, #52]	@ (800b414 <__libc_init_array+0x3c>)
 800b3e0:	1b64      	subs	r4, r4, r5
 800b3e2:	10a4      	asrs	r4, r4, #2
 800b3e4:	42a6      	cmp	r6, r4
 800b3e6:	d109      	bne.n	800b3fc <__libc_init_array+0x24>
 800b3e8:	f001 fec8 	bl	800d17c <_init>
 800b3ec:	2600      	movs	r6, #0
 800b3ee:	4d0a      	ldr	r5, [pc, #40]	@ (800b418 <__libc_init_array+0x40>)
 800b3f0:	4c0a      	ldr	r4, [pc, #40]	@ (800b41c <__libc_init_array+0x44>)
 800b3f2:	1b64      	subs	r4, r4, r5
 800b3f4:	10a4      	asrs	r4, r4, #2
 800b3f6:	42a6      	cmp	r6, r4
 800b3f8:	d105      	bne.n	800b406 <__libc_init_array+0x2e>
 800b3fa:	bd70      	pop	{r4, r5, r6, pc}
 800b3fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b400:	4798      	blx	r3
 800b402:	3601      	adds	r6, #1
 800b404:	e7ee      	b.n	800b3e4 <__libc_init_array+0xc>
 800b406:	f855 3b04 	ldr.w	r3, [r5], #4
 800b40a:	4798      	blx	r3
 800b40c:	3601      	adds	r6, #1
 800b40e:	e7f2      	b.n	800b3f6 <__libc_init_array+0x1e>
 800b410:	0800d590 	.word	0x0800d590
 800b414:	0800d590 	.word	0x0800d590
 800b418:	0800d590 	.word	0x0800d590
 800b41c:	0800d594 	.word	0x0800d594

0800b420 <__retarget_lock_init_recursive>:
 800b420:	4770      	bx	lr

0800b422 <__retarget_lock_acquire_recursive>:
 800b422:	4770      	bx	lr

0800b424 <__retarget_lock_release_recursive>:
 800b424:	4770      	bx	lr

0800b426 <memchr>:
 800b426:	4603      	mov	r3, r0
 800b428:	b510      	push	{r4, lr}
 800b42a:	b2c9      	uxtb	r1, r1
 800b42c:	4402      	add	r2, r0
 800b42e:	4293      	cmp	r3, r2
 800b430:	4618      	mov	r0, r3
 800b432:	d101      	bne.n	800b438 <memchr+0x12>
 800b434:	2000      	movs	r0, #0
 800b436:	e003      	b.n	800b440 <memchr+0x1a>
 800b438:	7804      	ldrb	r4, [r0, #0]
 800b43a:	3301      	adds	r3, #1
 800b43c:	428c      	cmp	r4, r1
 800b43e:	d1f6      	bne.n	800b42e <memchr+0x8>
 800b440:	bd10      	pop	{r4, pc}

0800b442 <quorem>:
 800b442:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b446:	6903      	ldr	r3, [r0, #16]
 800b448:	690c      	ldr	r4, [r1, #16]
 800b44a:	4607      	mov	r7, r0
 800b44c:	42a3      	cmp	r3, r4
 800b44e:	db7e      	blt.n	800b54e <quorem+0x10c>
 800b450:	3c01      	subs	r4, #1
 800b452:	00a3      	lsls	r3, r4, #2
 800b454:	f100 0514 	add.w	r5, r0, #20
 800b458:	f101 0814 	add.w	r8, r1, #20
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b462:	9301      	str	r3, [sp, #4]
 800b464:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b468:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b46c:	3301      	adds	r3, #1
 800b46e:	429a      	cmp	r2, r3
 800b470:	fbb2 f6f3 	udiv	r6, r2, r3
 800b474:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b478:	d32e      	bcc.n	800b4d8 <quorem+0x96>
 800b47a:	f04f 0a00 	mov.w	sl, #0
 800b47e:	46c4      	mov	ip, r8
 800b480:	46ae      	mov	lr, r5
 800b482:	46d3      	mov	fp, sl
 800b484:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b488:	b298      	uxth	r0, r3
 800b48a:	fb06 a000 	mla	r0, r6, r0, sl
 800b48e:	0c1b      	lsrs	r3, r3, #16
 800b490:	0c02      	lsrs	r2, r0, #16
 800b492:	fb06 2303 	mla	r3, r6, r3, r2
 800b496:	f8de 2000 	ldr.w	r2, [lr]
 800b49a:	b280      	uxth	r0, r0
 800b49c:	b292      	uxth	r2, r2
 800b49e:	1a12      	subs	r2, r2, r0
 800b4a0:	445a      	add	r2, fp
 800b4a2:	f8de 0000 	ldr.w	r0, [lr]
 800b4a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b4b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b4b4:	b292      	uxth	r2, r2
 800b4b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b4ba:	45e1      	cmp	r9, ip
 800b4bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b4c0:	f84e 2b04 	str.w	r2, [lr], #4
 800b4c4:	d2de      	bcs.n	800b484 <quorem+0x42>
 800b4c6:	9b00      	ldr	r3, [sp, #0]
 800b4c8:	58eb      	ldr	r3, [r5, r3]
 800b4ca:	b92b      	cbnz	r3, 800b4d8 <quorem+0x96>
 800b4cc:	9b01      	ldr	r3, [sp, #4]
 800b4ce:	3b04      	subs	r3, #4
 800b4d0:	429d      	cmp	r5, r3
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	d32f      	bcc.n	800b536 <quorem+0xf4>
 800b4d6:	613c      	str	r4, [r7, #16]
 800b4d8:	4638      	mov	r0, r7
 800b4da:	f001 f97b 	bl	800c7d4 <__mcmp>
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	db25      	blt.n	800b52e <quorem+0xec>
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	f858 2b04 	ldr.w	r2, [r8], #4
 800b4ea:	f8d1 c000 	ldr.w	ip, [r1]
 800b4ee:	fa1f fe82 	uxth.w	lr, r2
 800b4f2:	fa1f f38c 	uxth.w	r3, ip
 800b4f6:	eba3 030e 	sub.w	r3, r3, lr
 800b4fa:	4403      	add	r3, r0
 800b4fc:	0c12      	lsrs	r2, r2, #16
 800b4fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b502:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b506:	b29b      	uxth	r3, r3
 800b508:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b50c:	45c1      	cmp	r9, r8
 800b50e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b512:	f841 3b04 	str.w	r3, [r1], #4
 800b516:	d2e6      	bcs.n	800b4e6 <quorem+0xa4>
 800b518:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b51c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b520:	b922      	cbnz	r2, 800b52c <quorem+0xea>
 800b522:	3b04      	subs	r3, #4
 800b524:	429d      	cmp	r5, r3
 800b526:	461a      	mov	r2, r3
 800b528:	d30b      	bcc.n	800b542 <quorem+0x100>
 800b52a:	613c      	str	r4, [r7, #16]
 800b52c:	3601      	adds	r6, #1
 800b52e:	4630      	mov	r0, r6
 800b530:	b003      	add	sp, #12
 800b532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b536:	6812      	ldr	r2, [r2, #0]
 800b538:	3b04      	subs	r3, #4
 800b53a:	2a00      	cmp	r2, #0
 800b53c:	d1cb      	bne.n	800b4d6 <quorem+0x94>
 800b53e:	3c01      	subs	r4, #1
 800b540:	e7c6      	b.n	800b4d0 <quorem+0x8e>
 800b542:	6812      	ldr	r2, [r2, #0]
 800b544:	3b04      	subs	r3, #4
 800b546:	2a00      	cmp	r2, #0
 800b548:	d1ef      	bne.n	800b52a <quorem+0xe8>
 800b54a:	3c01      	subs	r4, #1
 800b54c:	e7ea      	b.n	800b524 <quorem+0xe2>
 800b54e:	2000      	movs	r0, #0
 800b550:	e7ee      	b.n	800b530 <quorem+0xee>
 800b552:	0000      	movs	r0, r0
 800b554:	0000      	movs	r0, r0
	...

0800b558 <_dtoa_r>:
 800b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55c:	4614      	mov	r4, r2
 800b55e:	461d      	mov	r5, r3
 800b560:	69c7      	ldr	r7, [r0, #28]
 800b562:	b097      	sub	sp, #92	@ 0x5c
 800b564:	4683      	mov	fp, r0
 800b566:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b56a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b56c:	b97f      	cbnz	r7, 800b58e <_dtoa_r+0x36>
 800b56e:	2010      	movs	r0, #16
 800b570:	f000 fe02 	bl	800c178 <malloc>
 800b574:	4602      	mov	r2, r0
 800b576:	f8cb 001c 	str.w	r0, [fp, #28]
 800b57a:	b920      	cbnz	r0, 800b586 <_dtoa_r+0x2e>
 800b57c:	21ef      	movs	r1, #239	@ 0xef
 800b57e:	4ba8      	ldr	r3, [pc, #672]	@ (800b820 <_dtoa_r+0x2c8>)
 800b580:	48a8      	ldr	r0, [pc, #672]	@ (800b824 <_dtoa_r+0x2cc>)
 800b582:	f001 faf5 	bl	800cb70 <__assert_func>
 800b586:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b58a:	6007      	str	r7, [r0, #0]
 800b58c:	60c7      	str	r7, [r0, #12]
 800b58e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b592:	6819      	ldr	r1, [r3, #0]
 800b594:	b159      	cbz	r1, 800b5ae <_dtoa_r+0x56>
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	2301      	movs	r3, #1
 800b59a:	4093      	lsls	r3, r2
 800b59c:	604a      	str	r2, [r1, #4]
 800b59e:	608b      	str	r3, [r1, #8]
 800b5a0:	4658      	mov	r0, fp
 800b5a2:	f000 fedf 	bl	800c364 <_Bfree>
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b5ac:	601a      	str	r2, [r3, #0]
 800b5ae:	1e2b      	subs	r3, r5, #0
 800b5b0:	bfaf      	iteee	ge
 800b5b2:	2300      	movge	r3, #0
 800b5b4:	2201      	movlt	r2, #1
 800b5b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b5ba:	9303      	strlt	r3, [sp, #12]
 800b5bc:	bfa8      	it	ge
 800b5be:	6033      	strge	r3, [r6, #0]
 800b5c0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b5c4:	4b98      	ldr	r3, [pc, #608]	@ (800b828 <_dtoa_r+0x2d0>)
 800b5c6:	bfb8      	it	lt
 800b5c8:	6032      	strlt	r2, [r6, #0]
 800b5ca:	ea33 0308 	bics.w	r3, r3, r8
 800b5ce:	d112      	bne.n	800b5f6 <_dtoa_r+0x9e>
 800b5d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b5d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b5d6:	6013      	str	r3, [r2, #0]
 800b5d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b5dc:	4323      	orrs	r3, r4
 800b5de:	f000 8550 	beq.w	800c082 <_dtoa_r+0xb2a>
 800b5e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b5e4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b82c <_dtoa_r+0x2d4>
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	f000 8552 	beq.w	800c092 <_dtoa_r+0xb3a>
 800b5ee:	f10a 0303 	add.w	r3, sl, #3
 800b5f2:	f000 bd4c 	b.w	800c08e <_dtoa_r+0xb36>
 800b5f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b5fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b602:	2200      	movs	r2, #0
 800b604:	2300      	movs	r3, #0
 800b606:	f7f5 f9cf 	bl	80009a8 <__aeabi_dcmpeq>
 800b60a:	4607      	mov	r7, r0
 800b60c:	b158      	cbz	r0, 800b626 <_dtoa_r+0xce>
 800b60e:	2301      	movs	r3, #1
 800b610:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b612:	6013      	str	r3, [r2, #0]
 800b614:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b616:	b113      	cbz	r3, 800b61e <_dtoa_r+0xc6>
 800b618:	4b85      	ldr	r3, [pc, #532]	@ (800b830 <_dtoa_r+0x2d8>)
 800b61a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b834 <_dtoa_r+0x2dc>
 800b622:	f000 bd36 	b.w	800c092 <_dtoa_r+0xb3a>
 800b626:	ab14      	add	r3, sp, #80	@ 0x50
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	ab15      	add	r3, sp, #84	@ 0x54
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	4658      	mov	r0, fp
 800b630:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b634:	f001 f97e 	bl	800c934 <__d2b>
 800b638:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b63c:	4681      	mov	r9, r0
 800b63e:	2e00      	cmp	r6, #0
 800b640:	d077      	beq.n	800b732 <_dtoa_r+0x1da>
 800b642:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b648:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b64c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b650:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b654:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b658:	9712      	str	r7, [sp, #72]	@ 0x48
 800b65a:	4619      	mov	r1, r3
 800b65c:	2200      	movs	r2, #0
 800b65e:	4b76      	ldr	r3, [pc, #472]	@ (800b838 <_dtoa_r+0x2e0>)
 800b660:	f7f4 fd82 	bl	8000168 <__aeabi_dsub>
 800b664:	a368      	add	r3, pc, #416	@ (adr r3, 800b808 <_dtoa_r+0x2b0>)
 800b666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66a:	f7f4 ff35 	bl	80004d8 <__aeabi_dmul>
 800b66e:	a368      	add	r3, pc, #416	@ (adr r3, 800b810 <_dtoa_r+0x2b8>)
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	f7f4 fd7a 	bl	800016c <__adddf3>
 800b678:	4604      	mov	r4, r0
 800b67a:	4630      	mov	r0, r6
 800b67c:	460d      	mov	r5, r1
 800b67e:	f7f4 fec1 	bl	8000404 <__aeabi_i2d>
 800b682:	a365      	add	r3, pc, #404	@ (adr r3, 800b818 <_dtoa_r+0x2c0>)
 800b684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b688:	f7f4 ff26 	bl	80004d8 <__aeabi_dmul>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	4620      	mov	r0, r4
 800b692:	4629      	mov	r1, r5
 800b694:	f7f4 fd6a 	bl	800016c <__adddf3>
 800b698:	4604      	mov	r4, r0
 800b69a:	460d      	mov	r5, r1
 800b69c:	f7f5 f9cc 	bl	8000a38 <__aeabi_d2iz>
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	4607      	mov	r7, r0
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	f7f5 f987 	bl	80009bc <__aeabi_dcmplt>
 800b6ae:	b140      	cbz	r0, 800b6c2 <_dtoa_r+0x16a>
 800b6b0:	4638      	mov	r0, r7
 800b6b2:	f7f4 fea7 	bl	8000404 <__aeabi_i2d>
 800b6b6:	4622      	mov	r2, r4
 800b6b8:	462b      	mov	r3, r5
 800b6ba:	f7f5 f975 	bl	80009a8 <__aeabi_dcmpeq>
 800b6be:	b900      	cbnz	r0, 800b6c2 <_dtoa_r+0x16a>
 800b6c0:	3f01      	subs	r7, #1
 800b6c2:	2f16      	cmp	r7, #22
 800b6c4:	d853      	bhi.n	800b76e <_dtoa_r+0x216>
 800b6c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6ca:	4b5c      	ldr	r3, [pc, #368]	@ (800b83c <_dtoa_r+0x2e4>)
 800b6cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	f7f5 f972 	bl	80009bc <__aeabi_dcmplt>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d04a      	beq.n	800b772 <_dtoa_r+0x21a>
 800b6dc:	2300      	movs	r3, #0
 800b6de:	3f01      	subs	r7, #1
 800b6e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b6e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b6e4:	1b9b      	subs	r3, r3, r6
 800b6e6:	1e5a      	subs	r2, r3, #1
 800b6e8:	bf46      	itte	mi
 800b6ea:	f1c3 0801 	rsbmi	r8, r3, #1
 800b6ee:	2300      	movmi	r3, #0
 800b6f0:	f04f 0800 	movpl.w	r8, #0
 800b6f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6f6:	bf48      	it	mi
 800b6f8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b6fa:	2f00      	cmp	r7, #0
 800b6fc:	db3b      	blt.n	800b776 <_dtoa_r+0x21e>
 800b6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b700:	970e      	str	r7, [sp, #56]	@ 0x38
 800b702:	443b      	add	r3, r7
 800b704:	9309      	str	r3, [sp, #36]	@ 0x24
 800b706:	2300      	movs	r3, #0
 800b708:	930a      	str	r3, [sp, #40]	@ 0x28
 800b70a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b70c:	2b09      	cmp	r3, #9
 800b70e:	d866      	bhi.n	800b7de <_dtoa_r+0x286>
 800b710:	2b05      	cmp	r3, #5
 800b712:	bfc4      	itt	gt
 800b714:	3b04      	subgt	r3, #4
 800b716:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b718:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b71a:	bfc8      	it	gt
 800b71c:	2400      	movgt	r4, #0
 800b71e:	f1a3 0302 	sub.w	r3, r3, #2
 800b722:	bfd8      	it	le
 800b724:	2401      	movle	r4, #1
 800b726:	2b03      	cmp	r3, #3
 800b728:	d864      	bhi.n	800b7f4 <_dtoa_r+0x29c>
 800b72a:	e8df f003 	tbb	[pc, r3]
 800b72e:	382b      	.short	0x382b
 800b730:	5636      	.short	0x5636
 800b732:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b736:	441e      	add	r6, r3
 800b738:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b73c:	2b20      	cmp	r3, #32
 800b73e:	bfc1      	itttt	gt
 800b740:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b744:	fa08 f803 	lslgt.w	r8, r8, r3
 800b748:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b74c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b750:	bfd6      	itet	le
 800b752:	f1c3 0320 	rsble	r3, r3, #32
 800b756:	ea48 0003 	orrgt.w	r0, r8, r3
 800b75a:	fa04 f003 	lslle.w	r0, r4, r3
 800b75e:	f7f4 fe41 	bl	80003e4 <__aeabi_ui2d>
 800b762:	2201      	movs	r2, #1
 800b764:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b768:	3e01      	subs	r6, #1
 800b76a:	9212      	str	r2, [sp, #72]	@ 0x48
 800b76c:	e775      	b.n	800b65a <_dtoa_r+0x102>
 800b76e:	2301      	movs	r3, #1
 800b770:	e7b6      	b.n	800b6e0 <_dtoa_r+0x188>
 800b772:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b774:	e7b5      	b.n	800b6e2 <_dtoa_r+0x18a>
 800b776:	427b      	negs	r3, r7
 800b778:	930a      	str	r3, [sp, #40]	@ 0x28
 800b77a:	2300      	movs	r3, #0
 800b77c:	eba8 0807 	sub.w	r8, r8, r7
 800b780:	930e      	str	r3, [sp, #56]	@ 0x38
 800b782:	e7c2      	b.n	800b70a <_dtoa_r+0x1b2>
 800b784:	2300      	movs	r3, #0
 800b786:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b788:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	dc35      	bgt.n	800b7fa <_dtoa_r+0x2a2>
 800b78e:	2301      	movs	r3, #1
 800b790:	461a      	mov	r2, r3
 800b792:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b796:	9221      	str	r2, [sp, #132]	@ 0x84
 800b798:	e00b      	b.n	800b7b2 <_dtoa_r+0x25a>
 800b79a:	2301      	movs	r3, #1
 800b79c:	e7f3      	b.n	800b786 <_dtoa_r+0x22e>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b7a4:	18fb      	adds	r3, r7, r3
 800b7a6:	9308      	str	r3, [sp, #32]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	9307      	str	r3, [sp, #28]
 800b7ae:	bfb8      	it	lt
 800b7b0:	2301      	movlt	r3, #1
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	2204      	movs	r2, #4
 800b7b6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b7ba:	f102 0514 	add.w	r5, r2, #20
 800b7be:	429d      	cmp	r5, r3
 800b7c0:	d91f      	bls.n	800b802 <_dtoa_r+0x2aa>
 800b7c2:	6041      	str	r1, [r0, #4]
 800b7c4:	4658      	mov	r0, fp
 800b7c6:	f000 fd8d 	bl	800c2e4 <_Balloc>
 800b7ca:	4682      	mov	sl, r0
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d139      	bne.n	800b844 <_dtoa_r+0x2ec>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	f240 11af 	movw	r1, #431	@ 0x1af
 800b7d6:	4b1a      	ldr	r3, [pc, #104]	@ (800b840 <_dtoa_r+0x2e8>)
 800b7d8:	e6d2      	b.n	800b580 <_dtoa_r+0x28>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e7e0      	b.n	800b7a0 <_dtoa_r+0x248>
 800b7de:	2401      	movs	r4, #1
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b7e4:	9320      	str	r3, [sp, #128]	@ 0x80
 800b7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b7f0:	2312      	movs	r3, #18
 800b7f2:	e7d0      	b.n	800b796 <_dtoa_r+0x23e>
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7f8:	e7f5      	b.n	800b7e6 <_dtoa_r+0x28e>
 800b7fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b7fc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b800:	e7d7      	b.n	800b7b2 <_dtoa_r+0x25a>
 800b802:	3101      	adds	r1, #1
 800b804:	0052      	lsls	r2, r2, #1
 800b806:	e7d8      	b.n	800b7ba <_dtoa_r+0x262>
 800b808:	636f4361 	.word	0x636f4361
 800b80c:	3fd287a7 	.word	0x3fd287a7
 800b810:	8b60c8b3 	.word	0x8b60c8b3
 800b814:	3fc68a28 	.word	0x3fc68a28
 800b818:	509f79fb 	.word	0x509f79fb
 800b81c:	3fd34413 	.word	0x3fd34413
 800b820:	0800d257 	.word	0x0800d257
 800b824:	0800d26e 	.word	0x0800d26e
 800b828:	7ff00000 	.word	0x7ff00000
 800b82c:	0800d253 	.word	0x0800d253
 800b830:	0800d227 	.word	0x0800d227
 800b834:	0800d226 	.word	0x0800d226
 800b838:	3ff80000 	.word	0x3ff80000
 800b83c:	0800d368 	.word	0x0800d368
 800b840:	0800d2c6 	.word	0x0800d2c6
 800b844:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b848:	6018      	str	r0, [r3, #0]
 800b84a:	9b07      	ldr	r3, [sp, #28]
 800b84c:	2b0e      	cmp	r3, #14
 800b84e:	f200 80a4 	bhi.w	800b99a <_dtoa_r+0x442>
 800b852:	2c00      	cmp	r4, #0
 800b854:	f000 80a1 	beq.w	800b99a <_dtoa_r+0x442>
 800b858:	2f00      	cmp	r7, #0
 800b85a:	dd33      	ble.n	800b8c4 <_dtoa_r+0x36c>
 800b85c:	4b86      	ldr	r3, [pc, #536]	@ (800ba78 <_dtoa_r+0x520>)
 800b85e:	f007 020f 	and.w	r2, r7, #15
 800b862:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b866:	05f8      	lsls	r0, r7, #23
 800b868:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b86c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b870:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b874:	d516      	bpl.n	800b8a4 <_dtoa_r+0x34c>
 800b876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b87a:	4b80      	ldr	r3, [pc, #512]	@ (800ba7c <_dtoa_r+0x524>)
 800b87c:	2603      	movs	r6, #3
 800b87e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b882:	f7f4 ff53 	bl	800072c <__aeabi_ddiv>
 800b886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b88a:	f004 040f 	and.w	r4, r4, #15
 800b88e:	4d7b      	ldr	r5, [pc, #492]	@ (800ba7c <_dtoa_r+0x524>)
 800b890:	b954      	cbnz	r4, 800b8a8 <_dtoa_r+0x350>
 800b892:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b89a:	f7f4 ff47 	bl	800072c <__aeabi_ddiv>
 800b89e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8a2:	e028      	b.n	800b8f6 <_dtoa_r+0x39e>
 800b8a4:	2602      	movs	r6, #2
 800b8a6:	e7f2      	b.n	800b88e <_dtoa_r+0x336>
 800b8a8:	07e1      	lsls	r1, r4, #31
 800b8aa:	d508      	bpl.n	800b8be <_dtoa_r+0x366>
 800b8ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b8b4:	f7f4 fe10 	bl	80004d8 <__aeabi_dmul>
 800b8b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8bc:	3601      	adds	r6, #1
 800b8be:	1064      	asrs	r4, r4, #1
 800b8c0:	3508      	adds	r5, #8
 800b8c2:	e7e5      	b.n	800b890 <_dtoa_r+0x338>
 800b8c4:	f000 80d2 	beq.w	800ba6c <_dtoa_r+0x514>
 800b8c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8cc:	427c      	negs	r4, r7
 800b8ce:	4b6a      	ldr	r3, [pc, #424]	@ (800ba78 <_dtoa_r+0x520>)
 800b8d0:	f004 020f 	and.w	r2, r4, #15
 800b8d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8dc:	f7f4 fdfc 	bl	80004d8 <__aeabi_dmul>
 800b8e0:	2602      	movs	r6, #2
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8e8:	4d64      	ldr	r5, [pc, #400]	@ (800ba7c <_dtoa_r+0x524>)
 800b8ea:	1124      	asrs	r4, r4, #4
 800b8ec:	2c00      	cmp	r4, #0
 800b8ee:	f040 80b2 	bne.w	800ba56 <_dtoa_r+0x4fe>
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d1d3      	bne.n	800b89e <_dtoa_r+0x346>
 800b8f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b8fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f000 80b7 	beq.w	800ba70 <_dtoa_r+0x518>
 800b902:	2200      	movs	r2, #0
 800b904:	4620      	mov	r0, r4
 800b906:	4629      	mov	r1, r5
 800b908:	4b5d      	ldr	r3, [pc, #372]	@ (800ba80 <_dtoa_r+0x528>)
 800b90a:	f7f5 f857 	bl	80009bc <__aeabi_dcmplt>
 800b90e:	2800      	cmp	r0, #0
 800b910:	f000 80ae 	beq.w	800ba70 <_dtoa_r+0x518>
 800b914:	9b07      	ldr	r3, [sp, #28]
 800b916:	2b00      	cmp	r3, #0
 800b918:	f000 80aa 	beq.w	800ba70 <_dtoa_r+0x518>
 800b91c:	9b08      	ldr	r3, [sp, #32]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	dd37      	ble.n	800b992 <_dtoa_r+0x43a>
 800b922:	1e7b      	subs	r3, r7, #1
 800b924:	4620      	mov	r0, r4
 800b926:	9304      	str	r3, [sp, #16]
 800b928:	2200      	movs	r2, #0
 800b92a:	4629      	mov	r1, r5
 800b92c:	4b55      	ldr	r3, [pc, #340]	@ (800ba84 <_dtoa_r+0x52c>)
 800b92e:	f7f4 fdd3 	bl	80004d8 <__aeabi_dmul>
 800b932:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b936:	9c08      	ldr	r4, [sp, #32]
 800b938:	3601      	adds	r6, #1
 800b93a:	4630      	mov	r0, r6
 800b93c:	f7f4 fd62 	bl	8000404 <__aeabi_i2d>
 800b940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b944:	f7f4 fdc8 	bl	80004d8 <__aeabi_dmul>
 800b948:	2200      	movs	r2, #0
 800b94a:	4b4f      	ldr	r3, [pc, #316]	@ (800ba88 <_dtoa_r+0x530>)
 800b94c:	f7f4 fc0e 	bl	800016c <__adddf3>
 800b950:	4605      	mov	r5, r0
 800b952:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b956:	2c00      	cmp	r4, #0
 800b958:	f040 809a 	bne.w	800ba90 <_dtoa_r+0x538>
 800b95c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b960:	2200      	movs	r2, #0
 800b962:	4b4a      	ldr	r3, [pc, #296]	@ (800ba8c <_dtoa_r+0x534>)
 800b964:	f7f4 fc00 	bl	8000168 <__aeabi_dsub>
 800b968:	4602      	mov	r2, r0
 800b96a:	460b      	mov	r3, r1
 800b96c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b970:	462a      	mov	r2, r5
 800b972:	4633      	mov	r3, r6
 800b974:	f7f5 f840 	bl	80009f8 <__aeabi_dcmpgt>
 800b978:	2800      	cmp	r0, #0
 800b97a:	f040 828e 	bne.w	800be9a <_dtoa_r+0x942>
 800b97e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b982:	462a      	mov	r2, r5
 800b984:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b988:	f7f5 f818 	bl	80009bc <__aeabi_dcmplt>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	f040 8127 	bne.w	800bbe0 <_dtoa_r+0x688>
 800b992:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b996:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b99a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f2c0 8163 	blt.w	800bc68 <_dtoa_r+0x710>
 800b9a2:	2f0e      	cmp	r7, #14
 800b9a4:	f300 8160 	bgt.w	800bc68 <_dtoa_r+0x710>
 800b9a8:	4b33      	ldr	r3, [pc, #204]	@ (800ba78 <_dtoa_r+0x520>)
 800b9aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b9ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b9b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b9b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	da03      	bge.n	800b9c4 <_dtoa_r+0x46c>
 800b9bc:	9b07      	ldr	r3, [sp, #28]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f340 8100 	ble.w	800bbc4 <_dtoa_r+0x66c>
 800b9c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b9c8:	4656      	mov	r6, sl
 800b9ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	f7f4 feab 	bl	800072c <__aeabi_ddiv>
 800b9d6:	f7f5 f82f 	bl	8000a38 <__aeabi_d2iz>
 800b9da:	4680      	mov	r8, r0
 800b9dc:	f7f4 fd12 	bl	8000404 <__aeabi_i2d>
 800b9e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9e4:	f7f4 fd78 	bl	80004d8 <__aeabi_dmul>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	4629      	mov	r1, r5
 800b9f0:	f7f4 fbba 	bl	8000168 <__aeabi_dsub>
 800b9f4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b9f8:	9d07      	ldr	r5, [sp, #28]
 800b9fa:	f806 4b01 	strb.w	r4, [r6], #1
 800b9fe:	eba6 040a 	sub.w	r4, r6, sl
 800ba02:	42a5      	cmp	r5, r4
 800ba04:	4602      	mov	r2, r0
 800ba06:	460b      	mov	r3, r1
 800ba08:	f040 8116 	bne.w	800bc38 <_dtoa_r+0x6e0>
 800ba0c:	f7f4 fbae 	bl	800016c <__adddf3>
 800ba10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba14:	4604      	mov	r4, r0
 800ba16:	460d      	mov	r5, r1
 800ba18:	f7f4 ffee 	bl	80009f8 <__aeabi_dcmpgt>
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	f040 80f8 	bne.w	800bc12 <_dtoa_r+0x6ba>
 800ba22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba26:	4620      	mov	r0, r4
 800ba28:	4629      	mov	r1, r5
 800ba2a:	f7f4 ffbd 	bl	80009a8 <__aeabi_dcmpeq>
 800ba2e:	b118      	cbz	r0, 800ba38 <_dtoa_r+0x4e0>
 800ba30:	f018 0f01 	tst.w	r8, #1
 800ba34:	f040 80ed 	bne.w	800bc12 <_dtoa_r+0x6ba>
 800ba38:	4649      	mov	r1, r9
 800ba3a:	4658      	mov	r0, fp
 800ba3c:	f000 fc92 	bl	800c364 <_Bfree>
 800ba40:	2300      	movs	r3, #0
 800ba42:	7033      	strb	r3, [r6, #0]
 800ba44:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ba46:	3701      	adds	r7, #1
 800ba48:	601f      	str	r7, [r3, #0]
 800ba4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f000 8320 	beq.w	800c092 <_dtoa_r+0xb3a>
 800ba52:	601e      	str	r6, [r3, #0]
 800ba54:	e31d      	b.n	800c092 <_dtoa_r+0xb3a>
 800ba56:	07e2      	lsls	r2, r4, #31
 800ba58:	d505      	bpl.n	800ba66 <_dtoa_r+0x50e>
 800ba5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba5e:	f7f4 fd3b 	bl	80004d8 <__aeabi_dmul>
 800ba62:	2301      	movs	r3, #1
 800ba64:	3601      	adds	r6, #1
 800ba66:	1064      	asrs	r4, r4, #1
 800ba68:	3508      	adds	r5, #8
 800ba6a:	e73f      	b.n	800b8ec <_dtoa_r+0x394>
 800ba6c:	2602      	movs	r6, #2
 800ba6e:	e742      	b.n	800b8f6 <_dtoa_r+0x39e>
 800ba70:	9c07      	ldr	r4, [sp, #28]
 800ba72:	9704      	str	r7, [sp, #16]
 800ba74:	e761      	b.n	800b93a <_dtoa_r+0x3e2>
 800ba76:	bf00      	nop
 800ba78:	0800d368 	.word	0x0800d368
 800ba7c:	0800d340 	.word	0x0800d340
 800ba80:	3ff00000 	.word	0x3ff00000
 800ba84:	40240000 	.word	0x40240000
 800ba88:	401c0000 	.word	0x401c0000
 800ba8c:	40140000 	.word	0x40140000
 800ba90:	4b70      	ldr	r3, [pc, #448]	@ (800bc54 <_dtoa_r+0x6fc>)
 800ba92:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba9c:	4454      	add	r4, sl
 800ba9e:	2900      	cmp	r1, #0
 800baa0:	d045      	beq.n	800bb2e <_dtoa_r+0x5d6>
 800baa2:	2000      	movs	r0, #0
 800baa4:	496c      	ldr	r1, [pc, #432]	@ (800bc58 <_dtoa_r+0x700>)
 800baa6:	f7f4 fe41 	bl	800072c <__aeabi_ddiv>
 800baaa:	4633      	mov	r3, r6
 800baac:	462a      	mov	r2, r5
 800baae:	f7f4 fb5b 	bl	8000168 <__aeabi_dsub>
 800bab2:	4656      	mov	r6, sl
 800bab4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bab8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800babc:	f7f4 ffbc 	bl	8000a38 <__aeabi_d2iz>
 800bac0:	4605      	mov	r5, r0
 800bac2:	f7f4 fc9f 	bl	8000404 <__aeabi_i2d>
 800bac6:	4602      	mov	r2, r0
 800bac8:	460b      	mov	r3, r1
 800baca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bace:	f7f4 fb4b 	bl	8000168 <__aeabi_dsub>
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	3530      	adds	r5, #48	@ 0x30
 800bad8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800badc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bae0:	f806 5b01 	strb.w	r5, [r6], #1
 800bae4:	f7f4 ff6a 	bl	80009bc <__aeabi_dcmplt>
 800bae8:	2800      	cmp	r0, #0
 800baea:	d163      	bne.n	800bbb4 <_dtoa_r+0x65c>
 800baec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800baf0:	2000      	movs	r0, #0
 800baf2:	495a      	ldr	r1, [pc, #360]	@ (800bc5c <_dtoa_r+0x704>)
 800baf4:	f7f4 fb38 	bl	8000168 <__aeabi_dsub>
 800baf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bafc:	f7f4 ff5e 	bl	80009bc <__aeabi_dcmplt>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	f040 8087 	bne.w	800bc14 <_dtoa_r+0x6bc>
 800bb06:	42a6      	cmp	r6, r4
 800bb08:	f43f af43 	beq.w	800b992 <_dtoa_r+0x43a>
 800bb0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bb10:	2200      	movs	r2, #0
 800bb12:	4b53      	ldr	r3, [pc, #332]	@ (800bc60 <_dtoa_r+0x708>)
 800bb14:	f7f4 fce0 	bl	80004d8 <__aeabi_dmul>
 800bb18:	2200      	movs	r2, #0
 800bb1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb22:	4b4f      	ldr	r3, [pc, #316]	@ (800bc60 <_dtoa_r+0x708>)
 800bb24:	f7f4 fcd8 	bl	80004d8 <__aeabi_dmul>
 800bb28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb2c:	e7c4      	b.n	800bab8 <_dtoa_r+0x560>
 800bb2e:	4631      	mov	r1, r6
 800bb30:	4628      	mov	r0, r5
 800bb32:	f7f4 fcd1 	bl	80004d8 <__aeabi_dmul>
 800bb36:	4656      	mov	r6, sl
 800bb38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb3c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bb3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb42:	f7f4 ff79 	bl	8000a38 <__aeabi_d2iz>
 800bb46:	4605      	mov	r5, r0
 800bb48:	f7f4 fc5c 	bl	8000404 <__aeabi_i2d>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb54:	f7f4 fb08 	bl	8000168 <__aeabi_dsub>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	3530      	adds	r5, #48	@ 0x30
 800bb5e:	f806 5b01 	strb.w	r5, [r6], #1
 800bb62:	42a6      	cmp	r6, r4
 800bb64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb68:	f04f 0200 	mov.w	r2, #0
 800bb6c:	d124      	bne.n	800bbb8 <_dtoa_r+0x660>
 800bb6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bb72:	4b39      	ldr	r3, [pc, #228]	@ (800bc58 <_dtoa_r+0x700>)
 800bb74:	f7f4 fafa 	bl	800016c <__adddf3>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb80:	f7f4 ff3a 	bl	80009f8 <__aeabi_dcmpgt>
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d145      	bne.n	800bc14 <_dtoa_r+0x6bc>
 800bb88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	4932      	ldr	r1, [pc, #200]	@ (800bc58 <_dtoa_r+0x700>)
 800bb90:	f7f4 faea 	bl	8000168 <__aeabi_dsub>
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb9c:	f7f4 ff0e 	bl	80009bc <__aeabi_dcmplt>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	f43f aef6 	beq.w	800b992 <_dtoa_r+0x43a>
 800bba6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bba8:	1e73      	subs	r3, r6, #1
 800bbaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bbac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bbb0:	2b30      	cmp	r3, #48	@ 0x30
 800bbb2:	d0f8      	beq.n	800bba6 <_dtoa_r+0x64e>
 800bbb4:	9f04      	ldr	r7, [sp, #16]
 800bbb6:	e73f      	b.n	800ba38 <_dtoa_r+0x4e0>
 800bbb8:	4b29      	ldr	r3, [pc, #164]	@ (800bc60 <_dtoa_r+0x708>)
 800bbba:	f7f4 fc8d 	bl	80004d8 <__aeabi_dmul>
 800bbbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbc2:	e7bc      	b.n	800bb3e <_dtoa_r+0x5e6>
 800bbc4:	d10c      	bne.n	800bbe0 <_dtoa_r+0x688>
 800bbc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	4b25      	ldr	r3, [pc, #148]	@ (800bc64 <_dtoa_r+0x70c>)
 800bbce:	f7f4 fc83 	bl	80004d8 <__aeabi_dmul>
 800bbd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bbd6:	f7f4 ff05 	bl	80009e4 <__aeabi_dcmpge>
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	f000 815b 	beq.w	800be96 <_dtoa_r+0x93e>
 800bbe0:	2400      	movs	r4, #0
 800bbe2:	4625      	mov	r5, r4
 800bbe4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bbe6:	4656      	mov	r6, sl
 800bbe8:	43db      	mvns	r3, r3
 800bbea:	9304      	str	r3, [sp, #16]
 800bbec:	2700      	movs	r7, #0
 800bbee:	4621      	mov	r1, r4
 800bbf0:	4658      	mov	r0, fp
 800bbf2:	f000 fbb7 	bl	800c364 <_Bfree>
 800bbf6:	2d00      	cmp	r5, #0
 800bbf8:	d0dc      	beq.n	800bbb4 <_dtoa_r+0x65c>
 800bbfa:	b12f      	cbz	r7, 800bc08 <_dtoa_r+0x6b0>
 800bbfc:	42af      	cmp	r7, r5
 800bbfe:	d003      	beq.n	800bc08 <_dtoa_r+0x6b0>
 800bc00:	4639      	mov	r1, r7
 800bc02:	4658      	mov	r0, fp
 800bc04:	f000 fbae 	bl	800c364 <_Bfree>
 800bc08:	4629      	mov	r1, r5
 800bc0a:	4658      	mov	r0, fp
 800bc0c:	f000 fbaa 	bl	800c364 <_Bfree>
 800bc10:	e7d0      	b.n	800bbb4 <_dtoa_r+0x65c>
 800bc12:	9704      	str	r7, [sp, #16]
 800bc14:	4633      	mov	r3, r6
 800bc16:	461e      	mov	r6, r3
 800bc18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc1c:	2a39      	cmp	r2, #57	@ 0x39
 800bc1e:	d107      	bne.n	800bc30 <_dtoa_r+0x6d8>
 800bc20:	459a      	cmp	sl, r3
 800bc22:	d1f8      	bne.n	800bc16 <_dtoa_r+0x6be>
 800bc24:	9a04      	ldr	r2, [sp, #16]
 800bc26:	3201      	adds	r2, #1
 800bc28:	9204      	str	r2, [sp, #16]
 800bc2a:	2230      	movs	r2, #48	@ 0x30
 800bc2c:	f88a 2000 	strb.w	r2, [sl]
 800bc30:	781a      	ldrb	r2, [r3, #0]
 800bc32:	3201      	adds	r2, #1
 800bc34:	701a      	strb	r2, [r3, #0]
 800bc36:	e7bd      	b.n	800bbb4 <_dtoa_r+0x65c>
 800bc38:	2200      	movs	r2, #0
 800bc3a:	4b09      	ldr	r3, [pc, #36]	@ (800bc60 <_dtoa_r+0x708>)
 800bc3c:	f7f4 fc4c 	bl	80004d8 <__aeabi_dmul>
 800bc40:	2200      	movs	r2, #0
 800bc42:	2300      	movs	r3, #0
 800bc44:	4604      	mov	r4, r0
 800bc46:	460d      	mov	r5, r1
 800bc48:	f7f4 feae 	bl	80009a8 <__aeabi_dcmpeq>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	f43f aebc 	beq.w	800b9ca <_dtoa_r+0x472>
 800bc52:	e6f1      	b.n	800ba38 <_dtoa_r+0x4e0>
 800bc54:	0800d368 	.word	0x0800d368
 800bc58:	3fe00000 	.word	0x3fe00000
 800bc5c:	3ff00000 	.word	0x3ff00000
 800bc60:	40240000 	.word	0x40240000
 800bc64:	40140000 	.word	0x40140000
 800bc68:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bc6a:	2a00      	cmp	r2, #0
 800bc6c:	f000 80db 	beq.w	800be26 <_dtoa_r+0x8ce>
 800bc70:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bc72:	2a01      	cmp	r2, #1
 800bc74:	f300 80bf 	bgt.w	800bdf6 <_dtoa_r+0x89e>
 800bc78:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bc7a:	2a00      	cmp	r2, #0
 800bc7c:	f000 80b7 	beq.w	800bdee <_dtoa_r+0x896>
 800bc80:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bc84:	4646      	mov	r6, r8
 800bc86:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bc88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc8a:	2101      	movs	r1, #1
 800bc8c:	441a      	add	r2, r3
 800bc8e:	4658      	mov	r0, fp
 800bc90:	4498      	add	r8, r3
 800bc92:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc94:	f000 fc1a 	bl	800c4cc <__i2b>
 800bc98:	4605      	mov	r5, r0
 800bc9a:	b15e      	cbz	r6, 800bcb4 <_dtoa_r+0x75c>
 800bc9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	dd08      	ble.n	800bcb4 <_dtoa_r+0x75c>
 800bca2:	42b3      	cmp	r3, r6
 800bca4:	bfa8      	it	ge
 800bca6:	4633      	movge	r3, r6
 800bca8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcaa:	eba8 0803 	sub.w	r8, r8, r3
 800bcae:	1af6      	subs	r6, r6, r3
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcb6:	b1f3      	cbz	r3, 800bcf6 <_dtoa_r+0x79e>
 800bcb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f000 80b7 	beq.w	800be2e <_dtoa_r+0x8d6>
 800bcc0:	b18c      	cbz	r4, 800bce6 <_dtoa_r+0x78e>
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	4622      	mov	r2, r4
 800bcc6:	4658      	mov	r0, fp
 800bcc8:	f000 fcbe 	bl	800c648 <__pow5mult>
 800bccc:	464a      	mov	r2, r9
 800bcce:	4601      	mov	r1, r0
 800bcd0:	4605      	mov	r5, r0
 800bcd2:	4658      	mov	r0, fp
 800bcd4:	f000 fc10 	bl	800c4f8 <__multiply>
 800bcd8:	4649      	mov	r1, r9
 800bcda:	9004      	str	r0, [sp, #16]
 800bcdc:	4658      	mov	r0, fp
 800bcde:	f000 fb41 	bl	800c364 <_Bfree>
 800bce2:	9b04      	ldr	r3, [sp, #16]
 800bce4:	4699      	mov	r9, r3
 800bce6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bce8:	1b1a      	subs	r2, r3, r4
 800bcea:	d004      	beq.n	800bcf6 <_dtoa_r+0x79e>
 800bcec:	4649      	mov	r1, r9
 800bcee:	4658      	mov	r0, fp
 800bcf0:	f000 fcaa 	bl	800c648 <__pow5mult>
 800bcf4:	4681      	mov	r9, r0
 800bcf6:	2101      	movs	r1, #1
 800bcf8:	4658      	mov	r0, fp
 800bcfa:	f000 fbe7 	bl	800c4cc <__i2b>
 800bcfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd00:	4604      	mov	r4, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	f000 81c9 	beq.w	800c09a <_dtoa_r+0xb42>
 800bd08:	461a      	mov	r2, r3
 800bd0a:	4601      	mov	r1, r0
 800bd0c:	4658      	mov	r0, fp
 800bd0e:	f000 fc9b 	bl	800c648 <__pow5mult>
 800bd12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bd14:	4604      	mov	r4, r0
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	f300 808f 	bgt.w	800be3a <_dtoa_r+0x8e2>
 800bd1c:	9b02      	ldr	r3, [sp, #8]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f040 8087 	bne.w	800be32 <_dtoa_r+0x8da>
 800bd24:	9b03      	ldr	r3, [sp, #12]
 800bd26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f040 8083 	bne.w	800be36 <_dtoa_r+0x8de>
 800bd30:	9b03      	ldr	r3, [sp, #12]
 800bd32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd36:	0d1b      	lsrs	r3, r3, #20
 800bd38:	051b      	lsls	r3, r3, #20
 800bd3a:	b12b      	cbz	r3, 800bd48 <_dtoa_r+0x7f0>
 800bd3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd3e:	f108 0801 	add.w	r8, r8, #1
 800bd42:	3301      	adds	r3, #1
 800bd44:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd46:	2301      	movs	r3, #1
 800bd48:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f000 81aa 	beq.w	800c0a6 <_dtoa_r+0xb4e>
 800bd52:	6923      	ldr	r3, [r4, #16]
 800bd54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd58:	6918      	ldr	r0, [r3, #16]
 800bd5a:	f000 fb6b 	bl	800c434 <__hi0bits>
 800bd5e:	f1c0 0020 	rsb	r0, r0, #32
 800bd62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd64:	4418      	add	r0, r3
 800bd66:	f010 001f 	ands.w	r0, r0, #31
 800bd6a:	d071      	beq.n	800be50 <_dtoa_r+0x8f8>
 800bd6c:	f1c0 0320 	rsb	r3, r0, #32
 800bd70:	2b04      	cmp	r3, #4
 800bd72:	dd65      	ble.n	800be40 <_dtoa_r+0x8e8>
 800bd74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd76:	f1c0 001c 	rsb	r0, r0, #28
 800bd7a:	4403      	add	r3, r0
 800bd7c:	4480      	add	r8, r0
 800bd7e:	4406      	add	r6, r0
 800bd80:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd82:	f1b8 0f00 	cmp.w	r8, #0
 800bd86:	dd05      	ble.n	800bd94 <_dtoa_r+0x83c>
 800bd88:	4649      	mov	r1, r9
 800bd8a:	4642      	mov	r2, r8
 800bd8c:	4658      	mov	r0, fp
 800bd8e:	f000 fcb5 	bl	800c6fc <__lshift>
 800bd92:	4681      	mov	r9, r0
 800bd94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	dd05      	ble.n	800bda6 <_dtoa_r+0x84e>
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	4658      	mov	r0, fp
 800bda0:	f000 fcac 	bl	800c6fc <__lshift>
 800bda4:	4604      	mov	r4, r0
 800bda6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d053      	beq.n	800be54 <_dtoa_r+0x8fc>
 800bdac:	4621      	mov	r1, r4
 800bdae:	4648      	mov	r0, r9
 800bdb0:	f000 fd10 	bl	800c7d4 <__mcmp>
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	da4d      	bge.n	800be54 <_dtoa_r+0x8fc>
 800bdb8:	1e7b      	subs	r3, r7, #1
 800bdba:	4649      	mov	r1, r9
 800bdbc:	9304      	str	r3, [sp, #16]
 800bdbe:	220a      	movs	r2, #10
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	4658      	mov	r0, fp
 800bdc4:	f000 faf0 	bl	800c3a8 <__multadd>
 800bdc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdca:	4681      	mov	r9, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f000 816c 	beq.w	800c0aa <_dtoa_r+0xb52>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	220a      	movs	r2, #10
 800bdd8:	4658      	mov	r0, fp
 800bdda:	f000 fae5 	bl	800c3a8 <__multadd>
 800bdde:	9b08      	ldr	r3, [sp, #32]
 800bde0:	4605      	mov	r5, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	dc61      	bgt.n	800beaa <_dtoa_r+0x952>
 800bde6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	dc3b      	bgt.n	800be64 <_dtoa_r+0x90c>
 800bdec:	e05d      	b.n	800beaa <_dtoa_r+0x952>
 800bdee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bdf0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bdf4:	e746      	b.n	800bc84 <_dtoa_r+0x72c>
 800bdf6:	9b07      	ldr	r3, [sp, #28]
 800bdf8:	1e5c      	subs	r4, r3, #1
 800bdfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdfc:	42a3      	cmp	r3, r4
 800bdfe:	bfbf      	itttt	lt
 800be00:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800be02:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800be04:	1ae3      	sublt	r3, r4, r3
 800be06:	18d2      	addlt	r2, r2, r3
 800be08:	bfa8      	it	ge
 800be0a:	1b1c      	subge	r4, r3, r4
 800be0c:	9b07      	ldr	r3, [sp, #28]
 800be0e:	bfbe      	ittt	lt
 800be10:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800be12:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800be14:	2400      	movlt	r4, #0
 800be16:	2b00      	cmp	r3, #0
 800be18:	bfb5      	itete	lt
 800be1a:	eba8 0603 	sublt.w	r6, r8, r3
 800be1e:	4646      	movge	r6, r8
 800be20:	2300      	movlt	r3, #0
 800be22:	9b07      	ldrge	r3, [sp, #28]
 800be24:	e730      	b.n	800bc88 <_dtoa_r+0x730>
 800be26:	4646      	mov	r6, r8
 800be28:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800be2a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800be2c:	e735      	b.n	800bc9a <_dtoa_r+0x742>
 800be2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be30:	e75c      	b.n	800bcec <_dtoa_r+0x794>
 800be32:	2300      	movs	r3, #0
 800be34:	e788      	b.n	800bd48 <_dtoa_r+0x7f0>
 800be36:	9b02      	ldr	r3, [sp, #8]
 800be38:	e786      	b.n	800bd48 <_dtoa_r+0x7f0>
 800be3a:	2300      	movs	r3, #0
 800be3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800be3e:	e788      	b.n	800bd52 <_dtoa_r+0x7fa>
 800be40:	d09f      	beq.n	800bd82 <_dtoa_r+0x82a>
 800be42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be44:	331c      	adds	r3, #28
 800be46:	441a      	add	r2, r3
 800be48:	4498      	add	r8, r3
 800be4a:	441e      	add	r6, r3
 800be4c:	9209      	str	r2, [sp, #36]	@ 0x24
 800be4e:	e798      	b.n	800bd82 <_dtoa_r+0x82a>
 800be50:	4603      	mov	r3, r0
 800be52:	e7f6      	b.n	800be42 <_dtoa_r+0x8ea>
 800be54:	9b07      	ldr	r3, [sp, #28]
 800be56:	9704      	str	r7, [sp, #16]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	dc20      	bgt.n	800be9e <_dtoa_r+0x946>
 800be5c:	9308      	str	r3, [sp, #32]
 800be5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be60:	2b02      	cmp	r3, #2
 800be62:	dd1e      	ble.n	800bea2 <_dtoa_r+0x94a>
 800be64:	9b08      	ldr	r3, [sp, #32]
 800be66:	2b00      	cmp	r3, #0
 800be68:	f47f aebc 	bne.w	800bbe4 <_dtoa_r+0x68c>
 800be6c:	4621      	mov	r1, r4
 800be6e:	2205      	movs	r2, #5
 800be70:	4658      	mov	r0, fp
 800be72:	f000 fa99 	bl	800c3a8 <__multadd>
 800be76:	4601      	mov	r1, r0
 800be78:	4604      	mov	r4, r0
 800be7a:	4648      	mov	r0, r9
 800be7c:	f000 fcaa 	bl	800c7d4 <__mcmp>
 800be80:	2800      	cmp	r0, #0
 800be82:	f77f aeaf 	ble.w	800bbe4 <_dtoa_r+0x68c>
 800be86:	2331      	movs	r3, #49	@ 0x31
 800be88:	4656      	mov	r6, sl
 800be8a:	f806 3b01 	strb.w	r3, [r6], #1
 800be8e:	9b04      	ldr	r3, [sp, #16]
 800be90:	3301      	adds	r3, #1
 800be92:	9304      	str	r3, [sp, #16]
 800be94:	e6aa      	b.n	800bbec <_dtoa_r+0x694>
 800be96:	9c07      	ldr	r4, [sp, #28]
 800be98:	9704      	str	r7, [sp, #16]
 800be9a:	4625      	mov	r5, r4
 800be9c:	e7f3      	b.n	800be86 <_dtoa_r+0x92e>
 800be9e:	9b07      	ldr	r3, [sp, #28]
 800bea0:	9308      	str	r3, [sp, #32]
 800bea2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	f000 8104 	beq.w	800c0b2 <_dtoa_r+0xb5a>
 800beaa:	2e00      	cmp	r6, #0
 800beac:	dd05      	ble.n	800beba <_dtoa_r+0x962>
 800beae:	4629      	mov	r1, r5
 800beb0:	4632      	mov	r2, r6
 800beb2:	4658      	mov	r0, fp
 800beb4:	f000 fc22 	bl	800c6fc <__lshift>
 800beb8:	4605      	mov	r5, r0
 800beba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d05a      	beq.n	800bf76 <_dtoa_r+0xa1e>
 800bec0:	4658      	mov	r0, fp
 800bec2:	6869      	ldr	r1, [r5, #4]
 800bec4:	f000 fa0e 	bl	800c2e4 <_Balloc>
 800bec8:	4606      	mov	r6, r0
 800beca:	b928      	cbnz	r0, 800bed8 <_dtoa_r+0x980>
 800becc:	4602      	mov	r2, r0
 800bece:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bed2:	4b83      	ldr	r3, [pc, #524]	@ (800c0e0 <_dtoa_r+0xb88>)
 800bed4:	f7ff bb54 	b.w	800b580 <_dtoa_r+0x28>
 800bed8:	692a      	ldr	r2, [r5, #16]
 800beda:	f105 010c 	add.w	r1, r5, #12
 800bede:	3202      	adds	r2, #2
 800bee0:	0092      	lsls	r2, r2, #2
 800bee2:	300c      	adds	r0, #12
 800bee4:	f000 fe36 	bl	800cb54 <memcpy>
 800bee8:	2201      	movs	r2, #1
 800beea:	4631      	mov	r1, r6
 800beec:	4658      	mov	r0, fp
 800beee:	f000 fc05 	bl	800c6fc <__lshift>
 800bef2:	462f      	mov	r7, r5
 800bef4:	4605      	mov	r5, r0
 800bef6:	f10a 0301 	add.w	r3, sl, #1
 800befa:	9307      	str	r3, [sp, #28]
 800befc:	9b08      	ldr	r3, [sp, #32]
 800befe:	4453      	add	r3, sl
 800bf00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf02:	9b02      	ldr	r3, [sp, #8]
 800bf04:	f003 0301 	and.w	r3, r3, #1
 800bf08:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf0a:	9b07      	ldr	r3, [sp, #28]
 800bf0c:	4621      	mov	r1, r4
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	4648      	mov	r0, r9
 800bf12:	9302      	str	r3, [sp, #8]
 800bf14:	f7ff fa95 	bl	800b442 <quorem>
 800bf18:	4639      	mov	r1, r7
 800bf1a:	9008      	str	r0, [sp, #32]
 800bf1c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bf20:	4648      	mov	r0, r9
 800bf22:	f000 fc57 	bl	800c7d4 <__mcmp>
 800bf26:	462a      	mov	r2, r5
 800bf28:	9009      	str	r0, [sp, #36]	@ 0x24
 800bf2a:	4621      	mov	r1, r4
 800bf2c:	4658      	mov	r0, fp
 800bf2e:	f000 fc6d 	bl	800c80c <__mdiff>
 800bf32:	68c2      	ldr	r2, [r0, #12]
 800bf34:	4606      	mov	r6, r0
 800bf36:	bb02      	cbnz	r2, 800bf7a <_dtoa_r+0xa22>
 800bf38:	4601      	mov	r1, r0
 800bf3a:	4648      	mov	r0, r9
 800bf3c:	f000 fc4a 	bl	800c7d4 <__mcmp>
 800bf40:	4602      	mov	r2, r0
 800bf42:	4631      	mov	r1, r6
 800bf44:	4658      	mov	r0, fp
 800bf46:	920c      	str	r2, [sp, #48]	@ 0x30
 800bf48:	f000 fa0c 	bl	800c364 <_Bfree>
 800bf4c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bf4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bf50:	9e07      	ldr	r6, [sp, #28]
 800bf52:	ea43 0102 	orr.w	r1, r3, r2
 800bf56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf58:	4319      	orrs	r1, r3
 800bf5a:	d110      	bne.n	800bf7e <_dtoa_r+0xa26>
 800bf5c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bf60:	d029      	beq.n	800bfb6 <_dtoa_r+0xa5e>
 800bf62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	dd02      	ble.n	800bf6e <_dtoa_r+0xa16>
 800bf68:	9b08      	ldr	r3, [sp, #32]
 800bf6a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bf6e:	9b02      	ldr	r3, [sp, #8]
 800bf70:	f883 8000 	strb.w	r8, [r3]
 800bf74:	e63b      	b.n	800bbee <_dtoa_r+0x696>
 800bf76:	4628      	mov	r0, r5
 800bf78:	e7bb      	b.n	800bef2 <_dtoa_r+0x99a>
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	e7e1      	b.n	800bf42 <_dtoa_r+0x9ea>
 800bf7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	db04      	blt.n	800bf8e <_dtoa_r+0xa36>
 800bf84:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800bf86:	430b      	orrs	r3, r1
 800bf88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bf8a:	430b      	orrs	r3, r1
 800bf8c:	d120      	bne.n	800bfd0 <_dtoa_r+0xa78>
 800bf8e:	2a00      	cmp	r2, #0
 800bf90:	dded      	ble.n	800bf6e <_dtoa_r+0xa16>
 800bf92:	4649      	mov	r1, r9
 800bf94:	2201      	movs	r2, #1
 800bf96:	4658      	mov	r0, fp
 800bf98:	f000 fbb0 	bl	800c6fc <__lshift>
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	4681      	mov	r9, r0
 800bfa0:	f000 fc18 	bl	800c7d4 <__mcmp>
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	dc03      	bgt.n	800bfb0 <_dtoa_r+0xa58>
 800bfa8:	d1e1      	bne.n	800bf6e <_dtoa_r+0xa16>
 800bfaa:	f018 0f01 	tst.w	r8, #1
 800bfae:	d0de      	beq.n	800bf6e <_dtoa_r+0xa16>
 800bfb0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bfb4:	d1d8      	bne.n	800bf68 <_dtoa_r+0xa10>
 800bfb6:	2339      	movs	r3, #57	@ 0x39
 800bfb8:	9a02      	ldr	r2, [sp, #8]
 800bfba:	7013      	strb	r3, [r2, #0]
 800bfbc:	4633      	mov	r3, r6
 800bfbe:	461e      	mov	r6, r3
 800bfc0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	2a39      	cmp	r2, #57	@ 0x39
 800bfc8:	d052      	beq.n	800c070 <_dtoa_r+0xb18>
 800bfca:	3201      	adds	r2, #1
 800bfcc:	701a      	strb	r2, [r3, #0]
 800bfce:	e60e      	b.n	800bbee <_dtoa_r+0x696>
 800bfd0:	2a00      	cmp	r2, #0
 800bfd2:	dd07      	ble.n	800bfe4 <_dtoa_r+0xa8c>
 800bfd4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bfd8:	d0ed      	beq.n	800bfb6 <_dtoa_r+0xa5e>
 800bfda:	9a02      	ldr	r2, [sp, #8]
 800bfdc:	f108 0301 	add.w	r3, r8, #1
 800bfe0:	7013      	strb	r3, [r2, #0]
 800bfe2:	e604      	b.n	800bbee <_dtoa_r+0x696>
 800bfe4:	9b07      	ldr	r3, [sp, #28]
 800bfe6:	9a07      	ldr	r2, [sp, #28]
 800bfe8:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bfec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d028      	beq.n	800c044 <_dtoa_r+0xaec>
 800bff2:	4649      	mov	r1, r9
 800bff4:	2300      	movs	r3, #0
 800bff6:	220a      	movs	r2, #10
 800bff8:	4658      	mov	r0, fp
 800bffa:	f000 f9d5 	bl	800c3a8 <__multadd>
 800bffe:	42af      	cmp	r7, r5
 800c000:	4681      	mov	r9, r0
 800c002:	f04f 0300 	mov.w	r3, #0
 800c006:	f04f 020a 	mov.w	r2, #10
 800c00a:	4639      	mov	r1, r7
 800c00c:	4658      	mov	r0, fp
 800c00e:	d107      	bne.n	800c020 <_dtoa_r+0xac8>
 800c010:	f000 f9ca 	bl	800c3a8 <__multadd>
 800c014:	4607      	mov	r7, r0
 800c016:	4605      	mov	r5, r0
 800c018:	9b07      	ldr	r3, [sp, #28]
 800c01a:	3301      	adds	r3, #1
 800c01c:	9307      	str	r3, [sp, #28]
 800c01e:	e774      	b.n	800bf0a <_dtoa_r+0x9b2>
 800c020:	f000 f9c2 	bl	800c3a8 <__multadd>
 800c024:	4629      	mov	r1, r5
 800c026:	4607      	mov	r7, r0
 800c028:	2300      	movs	r3, #0
 800c02a:	220a      	movs	r2, #10
 800c02c:	4658      	mov	r0, fp
 800c02e:	f000 f9bb 	bl	800c3a8 <__multadd>
 800c032:	4605      	mov	r5, r0
 800c034:	e7f0      	b.n	800c018 <_dtoa_r+0xac0>
 800c036:	9b08      	ldr	r3, [sp, #32]
 800c038:	2700      	movs	r7, #0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	bfcc      	ite	gt
 800c03e:	461e      	movgt	r6, r3
 800c040:	2601      	movle	r6, #1
 800c042:	4456      	add	r6, sl
 800c044:	4649      	mov	r1, r9
 800c046:	2201      	movs	r2, #1
 800c048:	4658      	mov	r0, fp
 800c04a:	f000 fb57 	bl	800c6fc <__lshift>
 800c04e:	4621      	mov	r1, r4
 800c050:	4681      	mov	r9, r0
 800c052:	f000 fbbf 	bl	800c7d4 <__mcmp>
 800c056:	2800      	cmp	r0, #0
 800c058:	dcb0      	bgt.n	800bfbc <_dtoa_r+0xa64>
 800c05a:	d102      	bne.n	800c062 <_dtoa_r+0xb0a>
 800c05c:	f018 0f01 	tst.w	r8, #1
 800c060:	d1ac      	bne.n	800bfbc <_dtoa_r+0xa64>
 800c062:	4633      	mov	r3, r6
 800c064:	461e      	mov	r6, r3
 800c066:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c06a:	2a30      	cmp	r2, #48	@ 0x30
 800c06c:	d0fa      	beq.n	800c064 <_dtoa_r+0xb0c>
 800c06e:	e5be      	b.n	800bbee <_dtoa_r+0x696>
 800c070:	459a      	cmp	sl, r3
 800c072:	d1a4      	bne.n	800bfbe <_dtoa_r+0xa66>
 800c074:	9b04      	ldr	r3, [sp, #16]
 800c076:	3301      	adds	r3, #1
 800c078:	9304      	str	r3, [sp, #16]
 800c07a:	2331      	movs	r3, #49	@ 0x31
 800c07c:	f88a 3000 	strb.w	r3, [sl]
 800c080:	e5b5      	b.n	800bbee <_dtoa_r+0x696>
 800c082:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c084:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c0e4 <_dtoa_r+0xb8c>
 800c088:	b11b      	cbz	r3, 800c092 <_dtoa_r+0xb3a>
 800c08a:	f10a 0308 	add.w	r3, sl, #8
 800c08e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c090:	6013      	str	r3, [r2, #0]
 800c092:	4650      	mov	r0, sl
 800c094:	b017      	add	sp, #92	@ 0x5c
 800c096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c09a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	f77f ae3d 	ble.w	800bd1c <_dtoa_r+0x7c4>
 800c0a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0a6:	2001      	movs	r0, #1
 800c0a8:	e65b      	b.n	800bd62 <_dtoa_r+0x80a>
 800c0aa:	9b08      	ldr	r3, [sp, #32]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f77f aed6 	ble.w	800be5e <_dtoa_r+0x906>
 800c0b2:	4656      	mov	r6, sl
 800c0b4:	4621      	mov	r1, r4
 800c0b6:	4648      	mov	r0, r9
 800c0b8:	f7ff f9c3 	bl	800b442 <quorem>
 800c0bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c0c0:	9b08      	ldr	r3, [sp, #32]
 800c0c2:	f806 8b01 	strb.w	r8, [r6], #1
 800c0c6:	eba6 020a 	sub.w	r2, r6, sl
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	ddb3      	ble.n	800c036 <_dtoa_r+0xade>
 800c0ce:	4649      	mov	r1, r9
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	220a      	movs	r2, #10
 800c0d4:	4658      	mov	r0, fp
 800c0d6:	f000 f967 	bl	800c3a8 <__multadd>
 800c0da:	4681      	mov	r9, r0
 800c0dc:	e7ea      	b.n	800c0b4 <_dtoa_r+0xb5c>
 800c0de:	bf00      	nop
 800c0e0:	0800d2c6 	.word	0x0800d2c6
 800c0e4:	0800d24a 	.word	0x0800d24a

0800c0e8 <_free_r>:
 800c0e8:	b538      	push	{r3, r4, r5, lr}
 800c0ea:	4605      	mov	r5, r0
 800c0ec:	2900      	cmp	r1, #0
 800c0ee:	d040      	beq.n	800c172 <_free_r+0x8a>
 800c0f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0f4:	1f0c      	subs	r4, r1, #4
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	bfb8      	it	lt
 800c0fa:	18e4      	addlt	r4, r4, r3
 800c0fc:	f000 f8e6 	bl	800c2cc <__malloc_lock>
 800c100:	4a1c      	ldr	r2, [pc, #112]	@ (800c174 <_free_r+0x8c>)
 800c102:	6813      	ldr	r3, [r2, #0]
 800c104:	b933      	cbnz	r3, 800c114 <_free_r+0x2c>
 800c106:	6063      	str	r3, [r4, #4]
 800c108:	6014      	str	r4, [r2, #0]
 800c10a:	4628      	mov	r0, r5
 800c10c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c110:	f000 b8e2 	b.w	800c2d8 <__malloc_unlock>
 800c114:	42a3      	cmp	r3, r4
 800c116:	d908      	bls.n	800c12a <_free_r+0x42>
 800c118:	6820      	ldr	r0, [r4, #0]
 800c11a:	1821      	adds	r1, r4, r0
 800c11c:	428b      	cmp	r3, r1
 800c11e:	bf01      	itttt	eq
 800c120:	6819      	ldreq	r1, [r3, #0]
 800c122:	685b      	ldreq	r3, [r3, #4]
 800c124:	1809      	addeq	r1, r1, r0
 800c126:	6021      	streq	r1, [r4, #0]
 800c128:	e7ed      	b.n	800c106 <_free_r+0x1e>
 800c12a:	461a      	mov	r2, r3
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	b10b      	cbz	r3, 800c134 <_free_r+0x4c>
 800c130:	42a3      	cmp	r3, r4
 800c132:	d9fa      	bls.n	800c12a <_free_r+0x42>
 800c134:	6811      	ldr	r1, [r2, #0]
 800c136:	1850      	adds	r0, r2, r1
 800c138:	42a0      	cmp	r0, r4
 800c13a:	d10b      	bne.n	800c154 <_free_r+0x6c>
 800c13c:	6820      	ldr	r0, [r4, #0]
 800c13e:	4401      	add	r1, r0
 800c140:	1850      	adds	r0, r2, r1
 800c142:	4283      	cmp	r3, r0
 800c144:	6011      	str	r1, [r2, #0]
 800c146:	d1e0      	bne.n	800c10a <_free_r+0x22>
 800c148:	6818      	ldr	r0, [r3, #0]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	4408      	add	r0, r1
 800c14e:	6010      	str	r0, [r2, #0]
 800c150:	6053      	str	r3, [r2, #4]
 800c152:	e7da      	b.n	800c10a <_free_r+0x22>
 800c154:	d902      	bls.n	800c15c <_free_r+0x74>
 800c156:	230c      	movs	r3, #12
 800c158:	602b      	str	r3, [r5, #0]
 800c15a:	e7d6      	b.n	800c10a <_free_r+0x22>
 800c15c:	6820      	ldr	r0, [r4, #0]
 800c15e:	1821      	adds	r1, r4, r0
 800c160:	428b      	cmp	r3, r1
 800c162:	bf01      	itttt	eq
 800c164:	6819      	ldreq	r1, [r3, #0]
 800c166:	685b      	ldreq	r3, [r3, #4]
 800c168:	1809      	addeq	r1, r1, r0
 800c16a:	6021      	streq	r1, [r4, #0]
 800c16c:	6063      	str	r3, [r4, #4]
 800c16e:	6054      	str	r4, [r2, #4]
 800c170:	e7cb      	b.n	800c10a <_free_r+0x22>
 800c172:	bd38      	pop	{r3, r4, r5, pc}
 800c174:	20001090 	.word	0x20001090

0800c178 <malloc>:
 800c178:	4b02      	ldr	r3, [pc, #8]	@ (800c184 <malloc+0xc>)
 800c17a:	4601      	mov	r1, r0
 800c17c:	6818      	ldr	r0, [r3, #0]
 800c17e:	f000 b825 	b.w	800c1cc <_malloc_r>
 800c182:	bf00      	nop
 800c184:	20000188 	.word	0x20000188

0800c188 <sbrk_aligned>:
 800c188:	b570      	push	{r4, r5, r6, lr}
 800c18a:	4e0f      	ldr	r6, [pc, #60]	@ (800c1c8 <sbrk_aligned+0x40>)
 800c18c:	460c      	mov	r4, r1
 800c18e:	6831      	ldr	r1, [r6, #0]
 800c190:	4605      	mov	r5, r0
 800c192:	b911      	cbnz	r1, 800c19a <sbrk_aligned+0x12>
 800c194:	f000 fcce 	bl	800cb34 <_sbrk_r>
 800c198:	6030      	str	r0, [r6, #0]
 800c19a:	4621      	mov	r1, r4
 800c19c:	4628      	mov	r0, r5
 800c19e:	f000 fcc9 	bl	800cb34 <_sbrk_r>
 800c1a2:	1c43      	adds	r3, r0, #1
 800c1a4:	d103      	bne.n	800c1ae <sbrk_aligned+0x26>
 800c1a6:	f04f 34ff 	mov.w	r4, #4294967295
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	bd70      	pop	{r4, r5, r6, pc}
 800c1ae:	1cc4      	adds	r4, r0, #3
 800c1b0:	f024 0403 	bic.w	r4, r4, #3
 800c1b4:	42a0      	cmp	r0, r4
 800c1b6:	d0f8      	beq.n	800c1aa <sbrk_aligned+0x22>
 800c1b8:	1a21      	subs	r1, r4, r0
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	f000 fcba 	bl	800cb34 <_sbrk_r>
 800c1c0:	3001      	adds	r0, #1
 800c1c2:	d1f2      	bne.n	800c1aa <sbrk_aligned+0x22>
 800c1c4:	e7ef      	b.n	800c1a6 <sbrk_aligned+0x1e>
 800c1c6:	bf00      	nop
 800c1c8:	2000108c 	.word	0x2000108c

0800c1cc <_malloc_r>:
 800c1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1d0:	1ccd      	adds	r5, r1, #3
 800c1d2:	f025 0503 	bic.w	r5, r5, #3
 800c1d6:	3508      	adds	r5, #8
 800c1d8:	2d0c      	cmp	r5, #12
 800c1da:	bf38      	it	cc
 800c1dc:	250c      	movcc	r5, #12
 800c1de:	2d00      	cmp	r5, #0
 800c1e0:	4606      	mov	r6, r0
 800c1e2:	db01      	blt.n	800c1e8 <_malloc_r+0x1c>
 800c1e4:	42a9      	cmp	r1, r5
 800c1e6:	d904      	bls.n	800c1f2 <_malloc_r+0x26>
 800c1e8:	230c      	movs	r3, #12
 800c1ea:	6033      	str	r3, [r6, #0]
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c2c8 <_malloc_r+0xfc>
 800c1f6:	f000 f869 	bl	800c2cc <__malloc_lock>
 800c1fa:	f8d8 3000 	ldr.w	r3, [r8]
 800c1fe:	461c      	mov	r4, r3
 800c200:	bb44      	cbnz	r4, 800c254 <_malloc_r+0x88>
 800c202:	4629      	mov	r1, r5
 800c204:	4630      	mov	r0, r6
 800c206:	f7ff ffbf 	bl	800c188 <sbrk_aligned>
 800c20a:	1c43      	adds	r3, r0, #1
 800c20c:	4604      	mov	r4, r0
 800c20e:	d158      	bne.n	800c2c2 <_malloc_r+0xf6>
 800c210:	f8d8 4000 	ldr.w	r4, [r8]
 800c214:	4627      	mov	r7, r4
 800c216:	2f00      	cmp	r7, #0
 800c218:	d143      	bne.n	800c2a2 <_malloc_r+0xd6>
 800c21a:	2c00      	cmp	r4, #0
 800c21c:	d04b      	beq.n	800c2b6 <_malloc_r+0xea>
 800c21e:	6823      	ldr	r3, [r4, #0]
 800c220:	4639      	mov	r1, r7
 800c222:	4630      	mov	r0, r6
 800c224:	eb04 0903 	add.w	r9, r4, r3
 800c228:	f000 fc84 	bl	800cb34 <_sbrk_r>
 800c22c:	4581      	cmp	r9, r0
 800c22e:	d142      	bne.n	800c2b6 <_malloc_r+0xea>
 800c230:	6821      	ldr	r1, [r4, #0]
 800c232:	4630      	mov	r0, r6
 800c234:	1a6d      	subs	r5, r5, r1
 800c236:	4629      	mov	r1, r5
 800c238:	f7ff ffa6 	bl	800c188 <sbrk_aligned>
 800c23c:	3001      	adds	r0, #1
 800c23e:	d03a      	beq.n	800c2b6 <_malloc_r+0xea>
 800c240:	6823      	ldr	r3, [r4, #0]
 800c242:	442b      	add	r3, r5
 800c244:	6023      	str	r3, [r4, #0]
 800c246:	f8d8 3000 	ldr.w	r3, [r8]
 800c24a:	685a      	ldr	r2, [r3, #4]
 800c24c:	bb62      	cbnz	r2, 800c2a8 <_malloc_r+0xdc>
 800c24e:	f8c8 7000 	str.w	r7, [r8]
 800c252:	e00f      	b.n	800c274 <_malloc_r+0xa8>
 800c254:	6822      	ldr	r2, [r4, #0]
 800c256:	1b52      	subs	r2, r2, r5
 800c258:	d420      	bmi.n	800c29c <_malloc_r+0xd0>
 800c25a:	2a0b      	cmp	r2, #11
 800c25c:	d917      	bls.n	800c28e <_malloc_r+0xc2>
 800c25e:	1961      	adds	r1, r4, r5
 800c260:	42a3      	cmp	r3, r4
 800c262:	6025      	str	r5, [r4, #0]
 800c264:	bf18      	it	ne
 800c266:	6059      	strne	r1, [r3, #4]
 800c268:	6863      	ldr	r3, [r4, #4]
 800c26a:	bf08      	it	eq
 800c26c:	f8c8 1000 	streq.w	r1, [r8]
 800c270:	5162      	str	r2, [r4, r5]
 800c272:	604b      	str	r3, [r1, #4]
 800c274:	4630      	mov	r0, r6
 800c276:	f000 f82f 	bl	800c2d8 <__malloc_unlock>
 800c27a:	f104 000b 	add.w	r0, r4, #11
 800c27e:	1d23      	adds	r3, r4, #4
 800c280:	f020 0007 	bic.w	r0, r0, #7
 800c284:	1ac2      	subs	r2, r0, r3
 800c286:	bf1c      	itt	ne
 800c288:	1a1b      	subne	r3, r3, r0
 800c28a:	50a3      	strne	r3, [r4, r2]
 800c28c:	e7af      	b.n	800c1ee <_malloc_r+0x22>
 800c28e:	6862      	ldr	r2, [r4, #4]
 800c290:	42a3      	cmp	r3, r4
 800c292:	bf0c      	ite	eq
 800c294:	f8c8 2000 	streq.w	r2, [r8]
 800c298:	605a      	strne	r2, [r3, #4]
 800c29a:	e7eb      	b.n	800c274 <_malloc_r+0xa8>
 800c29c:	4623      	mov	r3, r4
 800c29e:	6864      	ldr	r4, [r4, #4]
 800c2a0:	e7ae      	b.n	800c200 <_malloc_r+0x34>
 800c2a2:	463c      	mov	r4, r7
 800c2a4:	687f      	ldr	r7, [r7, #4]
 800c2a6:	e7b6      	b.n	800c216 <_malloc_r+0x4a>
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	42a3      	cmp	r3, r4
 800c2ae:	d1fb      	bne.n	800c2a8 <_malloc_r+0xdc>
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	6053      	str	r3, [r2, #4]
 800c2b4:	e7de      	b.n	800c274 <_malloc_r+0xa8>
 800c2b6:	230c      	movs	r3, #12
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	6033      	str	r3, [r6, #0]
 800c2bc:	f000 f80c 	bl	800c2d8 <__malloc_unlock>
 800c2c0:	e794      	b.n	800c1ec <_malloc_r+0x20>
 800c2c2:	6005      	str	r5, [r0, #0]
 800c2c4:	e7d6      	b.n	800c274 <_malloc_r+0xa8>
 800c2c6:	bf00      	nop
 800c2c8:	20001090 	.word	0x20001090

0800c2cc <__malloc_lock>:
 800c2cc:	4801      	ldr	r0, [pc, #4]	@ (800c2d4 <__malloc_lock+0x8>)
 800c2ce:	f7ff b8a8 	b.w	800b422 <__retarget_lock_acquire_recursive>
 800c2d2:	bf00      	nop
 800c2d4:	20001088 	.word	0x20001088

0800c2d8 <__malloc_unlock>:
 800c2d8:	4801      	ldr	r0, [pc, #4]	@ (800c2e0 <__malloc_unlock+0x8>)
 800c2da:	f7ff b8a3 	b.w	800b424 <__retarget_lock_release_recursive>
 800c2de:	bf00      	nop
 800c2e0:	20001088 	.word	0x20001088

0800c2e4 <_Balloc>:
 800c2e4:	b570      	push	{r4, r5, r6, lr}
 800c2e6:	69c6      	ldr	r6, [r0, #28]
 800c2e8:	4604      	mov	r4, r0
 800c2ea:	460d      	mov	r5, r1
 800c2ec:	b976      	cbnz	r6, 800c30c <_Balloc+0x28>
 800c2ee:	2010      	movs	r0, #16
 800c2f0:	f7ff ff42 	bl	800c178 <malloc>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	61e0      	str	r0, [r4, #28]
 800c2f8:	b920      	cbnz	r0, 800c304 <_Balloc+0x20>
 800c2fa:	216b      	movs	r1, #107	@ 0x6b
 800c2fc:	4b17      	ldr	r3, [pc, #92]	@ (800c35c <_Balloc+0x78>)
 800c2fe:	4818      	ldr	r0, [pc, #96]	@ (800c360 <_Balloc+0x7c>)
 800c300:	f000 fc36 	bl	800cb70 <__assert_func>
 800c304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c308:	6006      	str	r6, [r0, #0]
 800c30a:	60c6      	str	r6, [r0, #12]
 800c30c:	69e6      	ldr	r6, [r4, #28]
 800c30e:	68f3      	ldr	r3, [r6, #12]
 800c310:	b183      	cbz	r3, 800c334 <_Balloc+0x50>
 800c312:	69e3      	ldr	r3, [r4, #28]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c31a:	b9b8      	cbnz	r0, 800c34c <_Balloc+0x68>
 800c31c:	2101      	movs	r1, #1
 800c31e:	fa01 f605 	lsl.w	r6, r1, r5
 800c322:	1d72      	adds	r2, r6, #5
 800c324:	4620      	mov	r0, r4
 800c326:	0092      	lsls	r2, r2, #2
 800c328:	f000 fc40 	bl	800cbac <_calloc_r>
 800c32c:	b160      	cbz	r0, 800c348 <_Balloc+0x64>
 800c32e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c332:	e00e      	b.n	800c352 <_Balloc+0x6e>
 800c334:	2221      	movs	r2, #33	@ 0x21
 800c336:	2104      	movs	r1, #4
 800c338:	4620      	mov	r0, r4
 800c33a:	f000 fc37 	bl	800cbac <_calloc_r>
 800c33e:	69e3      	ldr	r3, [r4, #28]
 800c340:	60f0      	str	r0, [r6, #12]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1e4      	bne.n	800c312 <_Balloc+0x2e>
 800c348:	2000      	movs	r0, #0
 800c34a:	bd70      	pop	{r4, r5, r6, pc}
 800c34c:	6802      	ldr	r2, [r0, #0]
 800c34e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c352:	2300      	movs	r3, #0
 800c354:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c358:	e7f7      	b.n	800c34a <_Balloc+0x66>
 800c35a:	bf00      	nop
 800c35c:	0800d257 	.word	0x0800d257
 800c360:	0800d2d7 	.word	0x0800d2d7

0800c364 <_Bfree>:
 800c364:	b570      	push	{r4, r5, r6, lr}
 800c366:	69c6      	ldr	r6, [r0, #28]
 800c368:	4605      	mov	r5, r0
 800c36a:	460c      	mov	r4, r1
 800c36c:	b976      	cbnz	r6, 800c38c <_Bfree+0x28>
 800c36e:	2010      	movs	r0, #16
 800c370:	f7ff ff02 	bl	800c178 <malloc>
 800c374:	4602      	mov	r2, r0
 800c376:	61e8      	str	r0, [r5, #28]
 800c378:	b920      	cbnz	r0, 800c384 <_Bfree+0x20>
 800c37a:	218f      	movs	r1, #143	@ 0x8f
 800c37c:	4b08      	ldr	r3, [pc, #32]	@ (800c3a0 <_Bfree+0x3c>)
 800c37e:	4809      	ldr	r0, [pc, #36]	@ (800c3a4 <_Bfree+0x40>)
 800c380:	f000 fbf6 	bl	800cb70 <__assert_func>
 800c384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c388:	6006      	str	r6, [r0, #0]
 800c38a:	60c6      	str	r6, [r0, #12]
 800c38c:	b13c      	cbz	r4, 800c39e <_Bfree+0x3a>
 800c38e:	69eb      	ldr	r3, [r5, #28]
 800c390:	6862      	ldr	r2, [r4, #4]
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c398:	6021      	str	r1, [r4, #0]
 800c39a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c39e:	bd70      	pop	{r4, r5, r6, pc}
 800c3a0:	0800d257 	.word	0x0800d257
 800c3a4:	0800d2d7 	.word	0x0800d2d7

0800c3a8 <__multadd>:
 800c3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ac:	4607      	mov	r7, r0
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	461e      	mov	r6, r3
 800c3b2:	2000      	movs	r0, #0
 800c3b4:	690d      	ldr	r5, [r1, #16]
 800c3b6:	f101 0c14 	add.w	ip, r1, #20
 800c3ba:	f8dc 3000 	ldr.w	r3, [ip]
 800c3be:	3001      	adds	r0, #1
 800c3c0:	b299      	uxth	r1, r3
 800c3c2:	fb02 6101 	mla	r1, r2, r1, r6
 800c3c6:	0c1e      	lsrs	r6, r3, #16
 800c3c8:	0c0b      	lsrs	r3, r1, #16
 800c3ca:	fb02 3306 	mla	r3, r2, r6, r3
 800c3ce:	b289      	uxth	r1, r1
 800c3d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c3d4:	4285      	cmp	r5, r0
 800c3d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c3da:	f84c 1b04 	str.w	r1, [ip], #4
 800c3de:	dcec      	bgt.n	800c3ba <__multadd+0x12>
 800c3e0:	b30e      	cbz	r6, 800c426 <__multadd+0x7e>
 800c3e2:	68a3      	ldr	r3, [r4, #8]
 800c3e4:	42ab      	cmp	r3, r5
 800c3e6:	dc19      	bgt.n	800c41c <__multadd+0x74>
 800c3e8:	6861      	ldr	r1, [r4, #4]
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	3101      	adds	r1, #1
 800c3ee:	f7ff ff79 	bl	800c2e4 <_Balloc>
 800c3f2:	4680      	mov	r8, r0
 800c3f4:	b928      	cbnz	r0, 800c402 <__multadd+0x5a>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	21ba      	movs	r1, #186	@ 0xba
 800c3fa:	4b0c      	ldr	r3, [pc, #48]	@ (800c42c <__multadd+0x84>)
 800c3fc:	480c      	ldr	r0, [pc, #48]	@ (800c430 <__multadd+0x88>)
 800c3fe:	f000 fbb7 	bl	800cb70 <__assert_func>
 800c402:	6922      	ldr	r2, [r4, #16]
 800c404:	f104 010c 	add.w	r1, r4, #12
 800c408:	3202      	adds	r2, #2
 800c40a:	0092      	lsls	r2, r2, #2
 800c40c:	300c      	adds	r0, #12
 800c40e:	f000 fba1 	bl	800cb54 <memcpy>
 800c412:	4621      	mov	r1, r4
 800c414:	4638      	mov	r0, r7
 800c416:	f7ff ffa5 	bl	800c364 <_Bfree>
 800c41a:	4644      	mov	r4, r8
 800c41c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c420:	3501      	adds	r5, #1
 800c422:	615e      	str	r6, [r3, #20]
 800c424:	6125      	str	r5, [r4, #16]
 800c426:	4620      	mov	r0, r4
 800c428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c42c:	0800d2c6 	.word	0x0800d2c6
 800c430:	0800d2d7 	.word	0x0800d2d7

0800c434 <__hi0bits>:
 800c434:	4603      	mov	r3, r0
 800c436:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c43a:	bf3a      	itte	cc
 800c43c:	0403      	lslcc	r3, r0, #16
 800c43e:	2010      	movcc	r0, #16
 800c440:	2000      	movcs	r0, #0
 800c442:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c446:	bf3c      	itt	cc
 800c448:	021b      	lslcc	r3, r3, #8
 800c44a:	3008      	addcc	r0, #8
 800c44c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c450:	bf3c      	itt	cc
 800c452:	011b      	lslcc	r3, r3, #4
 800c454:	3004      	addcc	r0, #4
 800c456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c45a:	bf3c      	itt	cc
 800c45c:	009b      	lslcc	r3, r3, #2
 800c45e:	3002      	addcc	r0, #2
 800c460:	2b00      	cmp	r3, #0
 800c462:	db05      	blt.n	800c470 <__hi0bits+0x3c>
 800c464:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c468:	f100 0001 	add.w	r0, r0, #1
 800c46c:	bf08      	it	eq
 800c46e:	2020      	moveq	r0, #32
 800c470:	4770      	bx	lr

0800c472 <__lo0bits>:
 800c472:	6803      	ldr	r3, [r0, #0]
 800c474:	4602      	mov	r2, r0
 800c476:	f013 0007 	ands.w	r0, r3, #7
 800c47a:	d00b      	beq.n	800c494 <__lo0bits+0x22>
 800c47c:	07d9      	lsls	r1, r3, #31
 800c47e:	d421      	bmi.n	800c4c4 <__lo0bits+0x52>
 800c480:	0798      	lsls	r0, r3, #30
 800c482:	bf49      	itett	mi
 800c484:	085b      	lsrmi	r3, r3, #1
 800c486:	089b      	lsrpl	r3, r3, #2
 800c488:	2001      	movmi	r0, #1
 800c48a:	6013      	strmi	r3, [r2, #0]
 800c48c:	bf5c      	itt	pl
 800c48e:	2002      	movpl	r0, #2
 800c490:	6013      	strpl	r3, [r2, #0]
 800c492:	4770      	bx	lr
 800c494:	b299      	uxth	r1, r3
 800c496:	b909      	cbnz	r1, 800c49c <__lo0bits+0x2a>
 800c498:	2010      	movs	r0, #16
 800c49a:	0c1b      	lsrs	r3, r3, #16
 800c49c:	b2d9      	uxtb	r1, r3
 800c49e:	b909      	cbnz	r1, 800c4a4 <__lo0bits+0x32>
 800c4a0:	3008      	adds	r0, #8
 800c4a2:	0a1b      	lsrs	r3, r3, #8
 800c4a4:	0719      	lsls	r1, r3, #28
 800c4a6:	bf04      	itt	eq
 800c4a8:	091b      	lsreq	r3, r3, #4
 800c4aa:	3004      	addeq	r0, #4
 800c4ac:	0799      	lsls	r1, r3, #30
 800c4ae:	bf04      	itt	eq
 800c4b0:	089b      	lsreq	r3, r3, #2
 800c4b2:	3002      	addeq	r0, #2
 800c4b4:	07d9      	lsls	r1, r3, #31
 800c4b6:	d403      	bmi.n	800c4c0 <__lo0bits+0x4e>
 800c4b8:	085b      	lsrs	r3, r3, #1
 800c4ba:	f100 0001 	add.w	r0, r0, #1
 800c4be:	d003      	beq.n	800c4c8 <__lo0bits+0x56>
 800c4c0:	6013      	str	r3, [r2, #0]
 800c4c2:	4770      	bx	lr
 800c4c4:	2000      	movs	r0, #0
 800c4c6:	4770      	bx	lr
 800c4c8:	2020      	movs	r0, #32
 800c4ca:	4770      	bx	lr

0800c4cc <__i2b>:
 800c4cc:	b510      	push	{r4, lr}
 800c4ce:	460c      	mov	r4, r1
 800c4d0:	2101      	movs	r1, #1
 800c4d2:	f7ff ff07 	bl	800c2e4 <_Balloc>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	b928      	cbnz	r0, 800c4e6 <__i2b+0x1a>
 800c4da:	f240 1145 	movw	r1, #325	@ 0x145
 800c4de:	4b04      	ldr	r3, [pc, #16]	@ (800c4f0 <__i2b+0x24>)
 800c4e0:	4804      	ldr	r0, [pc, #16]	@ (800c4f4 <__i2b+0x28>)
 800c4e2:	f000 fb45 	bl	800cb70 <__assert_func>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	6144      	str	r4, [r0, #20]
 800c4ea:	6103      	str	r3, [r0, #16]
 800c4ec:	bd10      	pop	{r4, pc}
 800c4ee:	bf00      	nop
 800c4f0:	0800d2c6 	.word	0x0800d2c6
 800c4f4:	0800d2d7 	.word	0x0800d2d7

0800c4f8 <__multiply>:
 800c4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fc:	4614      	mov	r4, r2
 800c4fe:	690a      	ldr	r2, [r1, #16]
 800c500:	6923      	ldr	r3, [r4, #16]
 800c502:	460f      	mov	r7, r1
 800c504:	429a      	cmp	r2, r3
 800c506:	bfa2      	ittt	ge
 800c508:	4623      	movge	r3, r4
 800c50a:	460c      	movge	r4, r1
 800c50c:	461f      	movge	r7, r3
 800c50e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c512:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c516:	68a3      	ldr	r3, [r4, #8]
 800c518:	6861      	ldr	r1, [r4, #4]
 800c51a:	eb0a 0609 	add.w	r6, sl, r9
 800c51e:	42b3      	cmp	r3, r6
 800c520:	b085      	sub	sp, #20
 800c522:	bfb8      	it	lt
 800c524:	3101      	addlt	r1, #1
 800c526:	f7ff fedd 	bl	800c2e4 <_Balloc>
 800c52a:	b930      	cbnz	r0, 800c53a <__multiply+0x42>
 800c52c:	4602      	mov	r2, r0
 800c52e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c532:	4b43      	ldr	r3, [pc, #268]	@ (800c640 <__multiply+0x148>)
 800c534:	4843      	ldr	r0, [pc, #268]	@ (800c644 <__multiply+0x14c>)
 800c536:	f000 fb1b 	bl	800cb70 <__assert_func>
 800c53a:	f100 0514 	add.w	r5, r0, #20
 800c53e:	462b      	mov	r3, r5
 800c540:	2200      	movs	r2, #0
 800c542:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c546:	4543      	cmp	r3, r8
 800c548:	d321      	bcc.n	800c58e <__multiply+0x96>
 800c54a:	f107 0114 	add.w	r1, r7, #20
 800c54e:	f104 0214 	add.w	r2, r4, #20
 800c552:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c556:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c55a:	9302      	str	r3, [sp, #8]
 800c55c:	1b13      	subs	r3, r2, r4
 800c55e:	3b15      	subs	r3, #21
 800c560:	f023 0303 	bic.w	r3, r3, #3
 800c564:	3304      	adds	r3, #4
 800c566:	f104 0715 	add.w	r7, r4, #21
 800c56a:	42ba      	cmp	r2, r7
 800c56c:	bf38      	it	cc
 800c56e:	2304      	movcc	r3, #4
 800c570:	9301      	str	r3, [sp, #4]
 800c572:	9b02      	ldr	r3, [sp, #8]
 800c574:	9103      	str	r1, [sp, #12]
 800c576:	428b      	cmp	r3, r1
 800c578:	d80c      	bhi.n	800c594 <__multiply+0x9c>
 800c57a:	2e00      	cmp	r6, #0
 800c57c:	dd03      	ble.n	800c586 <__multiply+0x8e>
 800c57e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c582:	2b00      	cmp	r3, #0
 800c584:	d05a      	beq.n	800c63c <__multiply+0x144>
 800c586:	6106      	str	r6, [r0, #16]
 800c588:	b005      	add	sp, #20
 800c58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58e:	f843 2b04 	str.w	r2, [r3], #4
 800c592:	e7d8      	b.n	800c546 <__multiply+0x4e>
 800c594:	f8b1 a000 	ldrh.w	sl, [r1]
 800c598:	f1ba 0f00 	cmp.w	sl, #0
 800c59c:	d023      	beq.n	800c5e6 <__multiply+0xee>
 800c59e:	46a9      	mov	r9, r5
 800c5a0:	f04f 0c00 	mov.w	ip, #0
 800c5a4:	f104 0e14 	add.w	lr, r4, #20
 800c5a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c5ac:	f8d9 3000 	ldr.w	r3, [r9]
 800c5b0:	fa1f fb87 	uxth.w	fp, r7
 800c5b4:	b29b      	uxth	r3, r3
 800c5b6:	fb0a 330b 	mla	r3, sl, fp, r3
 800c5ba:	4463      	add	r3, ip
 800c5bc:	f8d9 c000 	ldr.w	ip, [r9]
 800c5c0:	0c3f      	lsrs	r7, r7, #16
 800c5c2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c5c6:	fb0a c707 	mla	r7, sl, r7, ip
 800c5ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c5d4:	4572      	cmp	r2, lr
 800c5d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c5da:	f849 3b04 	str.w	r3, [r9], #4
 800c5de:	d8e3      	bhi.n	800c5a8 <__multiply+0xb0>
 800c5e0:	9b01      	ldr	r3, [sp, #4]
 800c5e2:	f845 c003 	str.w	ip, [r5, r3]
 800c5e6:	9b03      	ldr	r3, [sp, #12]
 800c5e8:	3104      	adds	r1, #4
 800c5ea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c5ee:	f1b9 0f00 	cmp.w	r9, #0
 800c5f2:	d021      	beq.n	800c638 <__multiply+0x140>
 800c5f4:	46ae      	mov	lr, r5
 800c5f6:	f04f 0a00 	mov.w	sl, #0
 800c5fa:	682b      	ldr	r3, [r5, #0]
 800c5fc:	f104 0c14 	add.w	ip, r4, #20
 800c600:	f8bc b000 	ldrh.w	fp, [ip]
 800c604:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c608:	b29b      	uxth	r3, r3
 800c60a:	fb09 770b 	mla	r7, r9, fp, r7
 800c60e:	4457      	add	r7, sl
 800c610:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c614:	f84e 3b04 	str.w	r3, [lr], #4
 800c618:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c61c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c620:	f8be 3000 	ldrh.w	r3, [lr]
 800c624:	4562      	cmp	r2, ip
 800c626:	fb09 330a 	mla	r3, r9, sl, r3
 800c62a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c62e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c632:	d8e5      	bhi.n	800c600 <__multiply+0x108>
 800c634:	9f01      	ldr	r7, [sp, #4]
 800c636:	51eb      	str	r3, [r5, r7]
 800c638:	3504      	adds	r5, #4
 800c63a:	e79a      	b.n	800c572 <__multiply+0x7a>
 800c63c:	3e01      	subs	r6, #1
 800c63e:	e79c      	b.n	800c57a <__multiply+0x82>
 800c640:	0800d2c6 	.word	0x0800d2c6
 800c644:	0800d2d7 	.word	0x0800d2d7

0800c648 <__pow5mult>:
 800c648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c64c:	4615      	mov	r5, r2
 800c64e:	f012 0203 	ands.w	r2, r2, #3
 800c652:	4607      	mov	r7, r0
 800c654:	460e      	mov	r6, r1
 800c656:	d007      	beq.n	800c668 <__pow5mult+0x20>
 800c658:	4c25      	ldr	r4, [pc, #148]	@ (800c6f0 <__pow5mult+0xa8>)
 800c65a:	3a01      	subs	r2, #1
 800c65c:	2300      	movs	r3, #0
 800c65e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c662:	f7ff fea1 	bl	800c3a8 <__multadd>
 800c666:	4606      	mov	r6, r0
 800c668:	10ad      	asrs	r5, r5, #2
 800c66a:	d03d      	beq.n	800c6e8 <__pow5mult+0xa0>
 800c66c:	69fc      	ldr	r4, [r7, #28]
 800c66e:	b97c      	cbnz	r4, 800c690 <__pow5mult+0x48>
 800c670:	2010      	movs	r0, #16
 800c672:	f7ff fd81 	bl	800c178 <malloc>
 800c676:	4602      	mov	r2, r0
 800c678:	61f8      	str	r0, [r7, #28]
 800c67a:	b928      	cbnz	r0, 800c688 <__pow5mult+0x40>
 800c67c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c680:	4b1c      	ldr	r3, [pc, #112]	@ (800c6f4 <__pow5mult+0xac>)
 800c682:	481d      	ldr	r0, [pc, #116]	@ (800c6f8 <__pow5mult+0xb0>)
 800c684:	f000 fa74 	bl	800cb70 <__assert_func>
 800c688:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c68c:	6004      	str	r4, [r0, #0]
 800c68e:	60c4      	str	r4, [r0, #12]
 800c690:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c694:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c698:	b94c      	cbnz	r4, 800c6ae <__pow5mult+0x66>
 800c69a:	f240 2171 	movw	r1, #625	@ 0x271
 800c69e:	4638      	mov	r0, r7
 800c6a0:	f7ff ff14 	bl	800c4cc <__i2b>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	f8c8 0008 	str.w	r0, [r8, #8]
 800c6ac:	6003      	str	r3, [r0, #0]
 800c6ae:	f04f 0900 	mov.w	r9, #0
 800c6b2:	07eb      	lsls	r3, r5, #31
 800c6b4:	d50a      	bpl.n	800c6cc <__pow5mult+0x84>
 800c6b6:	4631      	mov	r1, r6
 800c6b8:	4622      	mov	r2, r4
 800c6ba:	4638      	mov	r0, r7
 800c6bc:	f7ff ff1c 	bl	800c4f8 <__multiply>
 800c6c0:	4680      	mov	r8, r0
 800c6c2:	4631      	mov	r1, r6
 800c6c4:	4638      	mov	r0, r7
 800c6c6:	f7ff fe4d 	bl	800c364 <_Bfree>
 800c6ca:	4646      	mov	r6, r8
 800c6cc:	106d      	asrs	r5, r5, #1
 800c6ce:	d00b      	beq.n	800c6e8 <__pow5mult+0xa0>
 800c6d0:	6820      	ldr	r0, [r4, #0]
 800c6d2:	b938      	cbnz	r0, 800c6e4 <__pow5mult+0x9c>
 800c6d4:	4622      	mov	r2, r4
 800c6d6:	4621      	mov	r1, r4
 800c6d8:	4638      	mov	r0, r7
 800c6da:	f7ff ff0d 	bl	800c4f8 <__multiply>
 800c6de:	6020      	str	r0, [r4, #0]
 800c6e0:	f8c0 9000 	str.w	r9, [r0]
 800c6e4:	4604      	mov	r4, r0
 800c6e6:	e7e4      	b.n	800c6b2 <__pow5mult+0x6a>
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ee:	bf00      	nop
 800c6f0:	0800d330 	.word	0x0800d330
 800c6f4:	0800d257 	.word	0x0800d257
 800c6f8:	0800d2d7 	.word	0x0800d2d7

0800c6fc <__lshift>:
 800c6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c700:	460c      	mov	r4, r1
 800c702:	4607      	mov	r7, r0
 800c704:	4691      	mov	r9, r2
 800c706:	6923      	ldr	r3, [r4, #16]
 800c708:	6849      	ldr	r1, [r1, #4]
 800c70a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c70e:	68a3      	ldr	r3, [r4, #8]
 800c710:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c714:	f108 0601 	add.w	r6, r8, #1
 800c718:	42b3      	cmp	r3, r6
 800c71a:	db0b      	blt.n	800c734 <__lshift+0x38>
 800c71c:	4638      	mov	r0, r7
 800c71e:	f7ff fde1 	bl	800c2e4 <_Balloc>
 800c722:	4605      	mov	r5, r0
 800c724:	b948      	cbnz	r0, 800c73a <__lshift+0x3e>
 800c726:	4602      	mov	r2, r0
 800c728:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c72c:	4b27      	ldr	r3, [pc, #156]	@ (800c7cc <__lshift+0xd0>)
 800c72e:	4828      	ldr	r0, [pc, #160]	@ (800c7d0 <__lshift+0xd4>)
 800c730:	f000 fa1e 	bl	800cb70 <__assert_func>
 800c734:	3101      	adds	r1, #1
 800c736:	005b      	lsls	r3, r3, #1
 800c738:	e7ee      	b.n	800c718 <__lshift+0x1c>
 800c73a:	2300      	movs	r3, #0
 800c73c:	f100 0114 	add.w	r1, r0, #20
 800c740:	f100 0210 	add.w	r2, r0, #16
 800c744:	4618      	mov	r0, r3
 800c746:	4553      	cmp	r3, sl
 800c748:	db33      	blt.n	800c7b2 <__lshift+0xb6>
 800c74a:	6920      	ldr	r0, [r4, #16]
 800c74c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c750:	f104 0314 	add.w	r3, r4, #20
 800c754:	f019 091f 	ands.w	r9, r9, #31
 800c758:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c75c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c760:	d02b      	beq.n	800c7ba <__lshift+0xbe>
 800c762:	468a      	mov	sl, r1
 800c764:	2200      	movs	r2, #0
 800c766:	f1c9 0e20 	rsb	lr, r9, #32
 800c76a:	6818      	ldr	r0, [r3, #0]
 800c76c:	fa00 f009 	lsl.w	r0, r0, r9
 800c770:	4310      	orrs	r0, r2
 800c772:	f84a 0b04 	str.w	r0, [sl], #4
 800c776:	f853 2b04 	ldr.w	r2, [r3], #4
 800c77a:	459c      	cmp	ip, r3
 800c77c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c780:	d8f3      	bhi.n	800c76a <__lshift+0x6e>
 800c782:	ebac 0304 	sub.w	r3, ip, r4
 800c786:	3b15      	subs	r3, #21
 800c788:	f023 0303 	bic.w	r3, r3, #3
 800c78c:	3304      	adds	r3, #4
 800c78e:	f104 0015 	add.w	r0, r4, #21
 800c792:	4584      	cmp	ip, r0
 800c794:	bf38      	it	cc
 800c796:	2304      	movcc	r3, #4
 800c798:	50ca      	str	r2, [r1, r3]
 800c79a:	b10a      	cbz	r2, 800c7a0 <__lshift+0xa4>
 800c79c:	f108 0602 	add.w	r6, r8, #2
 800c7a0:	3e01      	subs	r6, #1
 800c7a2:	4638      	mov	r0, r7
 800c7a4:	4621      	mov	r1, r4
 800c7a6:	612e      	str	r6, [r5, #16]
 800c7a8:	f7ff fddc 	bl	800c364 <_Bfree>
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	e7c5      	b.n	800c746 <__lshift+0x4a>
 800c7ba:	3904      	subs	r1, #4
 800c7bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7c0:	459c      	cmp	ip, r3
 800c7c2:	f841 2f04 	str.w	r2, [r1, #4]!
 800c7c6:	d8f9      	bhi.n	800c7bc <__lshift+0xc0>
 800c7c8:	e7ea      	b.n	800c7a0 <__lshift+0xa4>
 800c7ca:	bf00      	nop
 800c7cc:	0800d2c6 	.word	0x0800d2c6
 800c7d0:	0800d2d7 	.word	0x0800d2d7

0800c7d4 <__mcmp>:
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	690a      	ldr	r2, [r1, #16]
 800c7d8:	6900      	ldr	r0, [r0, #16]
 800c7da:	b530      	push	{r4, r5, lr}
 800c7dc:	1a80      	subs	r0, r0, r2
 800c7de:	d10e      	bne.n	800c7fe <__mcmp+0x2a>
 800c7e0:	3314      	adds	r3, #20
 800c7e2:	3114      	adds	r1, #20
 800c7e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c7e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c7ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c7f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c7f4:	4295      	cmp	r5, r2
 800c7f6:	d003      	beq.n	800c800 <__mcmp+0x2c>
 800c7f8:	d205      	bcs.n	800c806 <__mcmp+0x32>
 800c7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c7fe:	bd30      	pop	{r4, r5, pc}
 800c800:	42a3      	cmp	r3, r4
 800c802:	d3f3      	bcc.n	800c7ec <__mcmp+0x18>
 800c804:	e7fb      	b.n	800c7fe <__mcmp+0x2a>
 800c806:	2001      	movs	r0, #1
 800c808:	e7f9      	b.n	800c7fe <__mcmp+0x2a>
	...

0800c80c <__mdiff>:
 800c80c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c810:	4689      	mov	r9, r1
 800c812:	4606      	mov	r6, r0
 800c814:	4611      	mov	r1, r2
 800c816:	4648      	mov	r0, r9
 800c818:	4614      	mov	r4, r2
 800c81a:	f7ff ffdb 	bl	800c7d4 <__mcmp>
 800c81e:	1e05      	subs	r5, r0, #0
 800c820:	d112      	bne.n	800c848 <__mdiff+0x3c>
 800c822:	4629      	mov	r1, r5
 800c824:	4630      	mov	r0, r6
 800c826:	f7ff fd5d 	bl	800c2e4 <_Balloc>
 800c82a:	4602      	mov	r2, r0
 800c82c:	b928      	cbnz	r0, 800c83a <__mdiff+0x2e>
 800c82e:	f240 2137 	movw	r1, #567	@ 0x237
 800c832:	4b3e      	ldr	r3, [pc, #248]	@ (800c92c <__mdiff+0x120>)
 800c834:	483e      	ldr	r0, [pc, #248]	@ (800c930 <__mdiff+0x124>)
 800c836:	f000 f99b 	bl	800cb70 <__assert_func>
 800c83a:	2301      	movs	r3, #1
 800c83c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c840:	4610      	mov	r0, r2
 800c842:	b003      	add	sp, #12
 800c844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c848:	bfbc      	itt	lt
 800c84a:	464b      	movlt	r3, r9
 800c84c:	46a1      	movlt	r9, r4
 800c84e:	4630      	mov	r0, r6
 800c850:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c854:	bfba      	itte	lt
 800c856:	461c      	movlt	r4, r3
 800c858:	2501      	movlt	r5, #1
 800c85a:	2500      	movge	r5, #0
 800c85c:	f7ff fd42 	bl	800c2e4 <_Balloc>
 800c860:	4602      	mov	r2, r0
 800c862:	b918      	cbnz	r0, 800c86c <__mdiff+0x60>
 800c864:	f240 2145 	movw	r1, #581	@ 0x245
 800c868:	4b30      	ldr	r3, [pc, #192]	@ (800c92c <__mdiff+0x120>)
 800c86a:	e7e3      	b.n	800c834 <__mdiff+0x28>
 800c86c:	f100 0b14 	add.w	fp, r0, #20
 800c870:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c874:	f109 0310 	add.w	r3, r9, #16
 800c878:	60c5      	str	r5, [r0, #12]
 800c87a:	f04f 0c00 	mov.w	ip, #0
 800c87e:	f109 0514 	add.w	r5, r9, #20
 800c882:	46d9      	mov	r9, fp
 800c884:	6926      	ldr	r6, [r4, #16]
 800c886:	f104 0e14 	add.w	lr, r4, #20
 800c88a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c88e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c892:	9301      	str	r3, [sp, #4]
 800c894:	9b01      	ldr	r3, [sp, #4]
 800c896:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c89a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c89e:	b281      	uxth	r1, r0
 800c8a0:	9301      	str	r3, [sp, #4]
 800c8a2:	fa1f f38a 	uxth.w	r3, sl
 800c8a6:	1a5b      	subs	r3, r3, r1
 800c8a8:	0c00      	lsrs	r0, r0, #16
 800c8aa:	4463      	add	r3, ip
 800c8ac:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c8b0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c8ba:	4576      	cmp	r6, lr
 800c8bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c8c0:	f849 3b04 	str.w	r3, [r9], #4
 800c8c4:	d8e6      	bhi.n	800c894 <__mdiff+0x88>
 800c8c6:	1b33      	subs	r3, r6, r4
 800c8c8:	3b15      	subs	r3, #21
 800c8ca:	f023 0303 	bic.w	r3, r3, #3
 800c8ce:	3415      	adds	r4, #21
 800c8d0:	3304      	adds	r3, #4
 800c8d2:	42a6      	cmp	r6, r4
 800c8d4:	bf38      	it	cc
 800c8d6:	2304      	movcc	r3, #4
 800c8d8:	441d      	add	r5, r3
 800c8da:	445b      	add	r3, fp
 800c8dc:	461e      	mov	r6, r3
 800c8de:	462c      	mov	r4, r5
 800c8e0:	4544      	cmp	r4, r8
 800c8e2:	d30e      	bcc.n	800c902 <__mdiff+0xf6>
 800c8e4:	f108 0103 	add.w	r1, r8, #3
 800c8e8:	1b49      	subs	r1, r1, r5
 800c8ea:	f021 0103 	bic.w	r1, r1, #3
 800c8ee:	3d03      	subs	r5, #3
 800c8f0:	45a8      	cmp	r8, r5
 800c8f2:	bf38      	it	cc
 800c8f4:	2100      	movcc	r1, #0
 800c8f6:	440b      	add	r3, r1
 800c8f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c8fc:	b199      	cbz	r1, 800c926 <__mdiff+0x11a>
 800c8fe:	6117      	str	r7, [r2, #16]
 800c900:	e79e      	b.n	800c840 <__mdiff+0x34>
 800c902:	46e6      	mov	lr, ip
 800c904:	f854 1b04 	ldr.w	r1, [r4], #4
 800c908:	fa1f fc81 	uxth.w	ip, r1
 800c90c:	44f4      	add	ip, lr
 800c90e:	0c08      	lsrs	r0, r1, #16
 800c910:	4471      	add	r1, lr
 800c912:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c916:	b289      	uxth	r1, r1
 800c918:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c91c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c920:	f846 1b04 	str.w	r1, [r6], #4
 800c924:	e7dc      	b.n	800c8e0 <__mdiff+0xd4>
 800c926:	3f01      	subs	r7, #1
 800c928:	e7e6      	b.n	800c8f8 <__mdiff+0xec>
 800c92a:	bf00      	nop
 800c92c:	0800d2c6 	.word	0x0800d2c6
 800c930:	0800d2d7 	.word	0x0800d2d7

0800c934 <__d2b>:
 800c934:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c938:	2101      	movs	r1, #1
 800c93a:	4690      	mov	r8, r2
 800c93c:	4699      	mov	r9, r3
 800c93e:	9e08      	ldr	r6, [sp, #32]
 800c940:	f7ff fcd0 	bl	800c2e4 <_Balloc>
 800c944:	4604      	mov	r4, r0
 800c946:	b930      	cbnz	r0, 800c956 <__d2b+0x22>
 800c948:	4602      	mov	r2, r0
 800c94a:	f240 310f 	movw	r1, #783	@ 0x30f
 800c94e:	4b23      	ldr	r3, [pc, #140]	@ (800c9dc <__d2b+0xa8>)
 800c950:	4823      	ldr	r0, [pc, #140]	@ (800c9e0 <__d2b+0xac>)
 800c952:	f000 f90d 	bl	800cb70 <__assert_func>
 800c956:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c95a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c95e:	b10d      	cbz	r5, 800c964 <__d2b+0x30>
 800c960:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c964:	9301      	str	r3, [sp, #4]
 800c966:	f1b8 0300 	subs.w	r3, r8, #0
 800c96a:	d024      	beq.n	800c9b6 <__d2b+0x82>
 800c96c:	4668      	mov	r0, sp
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	f7ff fd7f 	bl	800c472 <__lo0bits>
 800c974:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c978:	b1d8      	cbz	r0, 800c9b2 <__d2b+0x7e>
 800c97a:	f1c0 0320 	rsb	r3, r0, #32
 800c97e:	fa02 f303 	lsl.w	r3, r2, r3
 800c982:	430b      	orrs	r3, r1
 800c984:	40c2      	lsrs	r2, r0
 800c986:	6163      	str	r3, [r4, #20]
 800c988:	9201      	str	r2, [sp, #4]
 800c98a:	9b01      	ldr	r3, [sp, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	bf0c      	ite	eq
 800c990:	2201      	moveq	r2, #1
 800c992:	2202      	movne	r2, #2
 800c994:	61a3      	str	r3, [r4, #24]
 800c996:	6122      	str	r2, [r4, #16]
 800c998:	b1ad      	cbz	r5, 800c9c6 <__d2b+0x92>
 800c99a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c99e:	4405      	add	r5, r0
 800c9a0:	6035      	str	r5, [r6, #0]
 800c9a2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9a8:	6018      	str	r0, [r3, #0]
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	b002      	add	sp, #8
 800c9ae:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c9b2:	6161      	str	r1, [r4, #20]
 800c9b4:	e7e9      	b.n	800c98a <__d2b+0x56>
 800c9b6:	a801      	add	r0, sp, #4
 800c9b8:	f7ff fd5b 	bl	800c472 <__lo0bits>
 800c9bc:	9b01      	ldr	r3, [sp, #4]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	6163      	str	r3, [r4, #20]
 800c9c2:	3020      	adds	r0, #32
 800c9c4:	e7e7      	b.n	800c996 <__d2b+0x62>
 800c9c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c9ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c9ce:	6030      	str	r0, [r6, #0]
 800c9d0:	6918      	ldr	r0, [r3, #16]
 800c9d2:	f7ff fd2f 	bl	800c434 <__hi0bits>
 800c9d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c9da:	e7e4      	b.n	800c9a6 <__d2b+0x72>
 800c9dc:	0800d2c6 	.word	0x0800d2c6
 800c9e0:	0800d2d7 	.word	0x0800d2d7

0800c9e4 <__sflush_r>:
 800c9e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ea:	0716      	lsls	r6, r2, #28
 800c9ec:	4605      	mov	r5, r0
 800c9ee:	460c      	mov	r4, r1
 800c9f0:	d454      	bmi.n	800ca9c <__sflush_r+0xb8>
 800c9f2:	684b      	ldr	r3, [r1, #4]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	dc02      	bgt.n	800c9fe <__sflush_r+0x1a>
 800c9f8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	dd48      	ble.n	800ca90 <__sflush_r+0xac>
 800c9fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca00:	2e00      	cmp	r6, #0
 800ca02:	d045      	beq.n	800ca90 <__sflush_r+0xac>
 800ca04:	2300      	movs	r3, #0
 800ca06:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca0a:	682f      	ldr	r7, [r5, #0]
 800ca0c:	6a21      	ldr	r1, [r4, #32]
 800ca0e:	602b      	str	r3, [r5, #0]
 800ca10:	d030      	beq.n	800ca74 <__sflush_r+0x90>
 800ca12:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca14:	89a3      	ldrh	r3, [r4, #12]
 800ca16:	0759      	lsls	r1, r3, #29
 800ca18:	d505      	bpl.n	800ca26 <__sflush_r+0x42>
 800ca1a:	6863      	ldr	r3, [r4, #4]
 800ca1c:	1ad2      	subs	r2, r2, r3
 800ca1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca20:	b10b      	cbz	r3, 800ca26 <__sflush_r+0x42>
 800ca22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca24:	1ad2      	subs	r2, r2, r3
 800ca26:	2300      	movs	r3, #0
 800ca28:	4628      	mov	r0, r5
 800ca2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca2c:	6a21      	ldr	r1, [r4, #32]
 800ca2e:	47b0      	blx	r6
 800ca30:	1c43      	adds	r3, r0, #1
 800ca32:	89a3      	ldrh	r3, [r4, #12]
 800ca34:	d106      	bne.n	800ca44 <__sflush_r+0x60>
 800ca36:	6829      	ldr	r1, [r5, #0]
 800ca38:	291d      	cmp	r1, #29
 800ca3a:	d82b      	bhi.n	800ca94 <__sflush_r+0xb0>
 800ca3c:	4a28      	ldr	r2, [pc, #160]	@ (800cae0 <__sflush_r+0xfc>)
 800ca3e:	410a      	asrs	r2, r1
 800ca40:	07d6      	lsls	r6, r2, #31
 800ca42:	d427      	bmi.n	800ca94 <__sflush_r+0xb0>
 800ca44:	2200      	movs	r2, #0
 800ca46:	6062      	str	r2, [r4, #4]
 800ca48:	6922      	ldr	r2, [r4, #16]
 800ca4a:	04d9      	lsls	r1, r3, #19
 800ca4c:	6022      	str	r2, [r4, #0]
 800ca4e:	d504      	bpl.n	800ca5a <__sflush_r+0x76>
 800ca50:	1c42      	adds	r2, r0, #1
 800ca52:	d101      	bne.n	800ca58 <__sflush_r+0x74>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	b903      	cbnz	r3, 800ca5a <__sflush_r+0x76>
 800ca58:	6560      	str	r0, [r4, #84]	@ 0x54
 800ca5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca5c:	602f      	str	r7, [r5, #0]
 800ca5e:	b1b9      	cbz	r1, 800ca90 <__sflush_r+0xac>
 800ca60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca64:	4299      	cmp	r1, r3
 800ca66:	d002      	beq.n	800ca6e <__sflush_r+0x8a>
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f7ff fb3d 	bl	800c0e8 <_free_r>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca72:	e00d      	b.n	800ca90 <__sflush_r+0xac>
 800ca74:	2301      	movs	r3, #1
 800ca76:	4628      	mov	r0, r5
 800ca78:	47b0      	blx	r6
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	1c50      	adds	r0, r2, #1
 800ca7e:	d1c9      	bne.n	800ca14 <__sflush_r+0x30>
 800ca80:	682b      	ldr	r3, [r5, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d0c6      	beq.n	800ca14 <__sflush_r+0x30>
 800ca86:	2b1d      	cmp	r3, #29
 800ca88:	d001      	beq.n	800ca8e <__sflush_r+0xaa>
 800ca8a:	2b16      	cmp	r3, #22
 800ca8c:	d11d      	bne.n	800caca <__sflush_r+0xe6>
 800ca8e:	602f      	str	r7, [r5, #0]
 800ca90:	2000      	movs	r0, #0
 800ca92:	e021      	b.n	800cad8 <__sflush_r+0xf4>
 800ca94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca98:	b21b      	sxth	r3, r3
 800ca9a:	e01a      	b.n	800cad2 <__sflush_r+0xee>
 800ca9c:	690f      	ldr	r7, [r1, #16]
 800ca9e:	2f00      	cmp	r7, #0
 800caa0:	d0f6      	beq.n	800ca90 <__sflush_r+0xac>
 800caa2:	0793      	lsls	r3, r2, #30
 800caa4:	bf18      	it	ne
 800caa6:	2300      	movne	r3, #0
 800caa8:	680e      	ldr	r6, [r1, #0]
 800caaa:	bf08      	it	eq
 800caac:	694b      	ldreq	r3, [r1, #20]
 800caae:	1bf6      	subs	r6, r6, r7
 800cab0:	600f      	str	r7, [r1, #0]
 800cab2:	608b      	str	r3, [r1, #8]
 800cab4:	2e00      	cmp	r6, #0
 800cab6:	ddeb      	ble.n	800ca90 <__sflush_r+0xac>
 800cab8:	4633      	mov	r3, r6
 800caba:	463a      	mov	r2, r7
 800cabc:	4628      	mov	r0, r5
 800cabe:	6a21      	ldr	r1, [r4, #32]
 800cac0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800cac4:	47e0      	blx	ip
 800cac6:	2800      	cmp	r0, #0
 800cac8:	dc07      	bgt.n	800cada <__sflush_r+0xf6>
 800caca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cad2:	f04f 30ff 	mov.w	r0, #4294967295
 800cad6:	81a3      	strh	r3, [r4, #12]
 800cad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cada:	4407      	add	r7, r0
 800cadc:	1a36      	subs	r6, r6, r0
 800cade:	e7e9      	b.n	800cab4 <__sflush_r+0xd0>
 800cae0:	dfbffffe 	.word	0xdfbffffe

0800cae4 <_fflush_r>:
 800cae4:	b538      	push	{r3, r4, r5, lr}
 800cae6:	690b      	ldr	r3, [r1, #16]
 800cae8:	4605      	mov	r5, r0
 800caea:	460c      	mov	r4, r1
 800caec:	b913      	cbnz	r3, 800caf4 <_fflush_r+0x10>
 800caee:	2500      	movs	r5, #0
 800caf0:	4628      	mov	r0, r5
 800caf2:	bd38      	pop	{r3, r4, r5, pc}
 800caf4:	b118      	cbz	r0, 800cafe <_fflush_r+0x1a>
 800caf6:	6a03      	ldr	r3, [r0, #32]
 800caf8:	b90b      	cbnz	r3, 800cafe <_fflush_r+0x1a>
 800cafa:	f7fe fb9b 	bl	800b234 <__sinit>
 800cafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d0f3      	beq.n	800caee <_fflush_r+0xa>
 800cb06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb08:	07d0      	lsls	r0, r2, #31
 800cb0a:	d404      	bmi.n	800cb16 <_fflush_r+0x32>
 800cb0c:	0599      	lsls	r1, r3, #22
 800cb0e:	d402      	bmi.n	800cb16 <_fflush_r+0x32>
 800cb10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb12:	f7fe fc86 	bl	800b422 <__retarget_lock_acquire_recursive>
 800cb16:	4628      	mov	r0, r5
 800cb18:	4621      	mov	r1, r4
 800cb1a:	f7ff ff63 	bl	800c9e4 <__sflush_r>
 800cb1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb20:	4605      	mov	r5, r0
 800cb22:	07da      	lsls	r2, r3, #31
 800cb24:	d4e4      	bmi.n	800caf0 <_fflush_r+0xc>
 800cb26:	89a3      	ldrh	r3, [r4, #12]
 800cb28:	059b      	lsls	r3, r3, #22
 800cb2a:	d4e1      	bmi.n	800caf0 <_fflush_r+0xc>
 800cb2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb2e:	f7fe fc79 	bl	800b424 <__retarget_lock_release_recursive>
 800cb32:	e7dd      	b.n	800caf0 <_fflush_r+0xc>

0800cb34 <_sbrk_r>:
 800cb34:	b538      	push	{r3, r4, r5, lr}
 800cb36:	2300      	movs	r3, #0
 800cb38:	4d05      	ldr	r5, [pc, #20]	@ (800cb50 <_sbrk_r+0x1c>)
 800cb3a:	4604      	mov	r4, r0
 800cb3c:	4608      	mov	r0, r1
 800cb3e:	602b      	str	r3, [r5, #0]
 800cb40:	f7f4 fd1a 	bl	8001578 <_sbrk>
 800cb44:	1c43      	adds	r3, r0, #1
 800cb46:	d102      	bne.n	800cb4e <_sbrk_r+0x1a>
 800cb48:	682b      	ldr	r3, [r5, #0]
 800cb4a:	b103      	cbz	r3, 800cb4e <_sbrk_r+0x1a>
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	bd38      	pop	{r3, r4, r5, pc}
 800cb50:	20001084 	.word	0x20001084

0800cb54 <memcpy>:
 800cb54:	440a      	add	r2, r1
 800cb56:	4291      	cmp	r1, r2
 800cb58:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb5c:	d100      	bne.n	800cb60 <memcpy+0xc>
 800cb5e:	4770      	bx	lr
 800cb60:	b510      	push	{r4, lr}
 800cb62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb66:	4291      	cmp	r1, r2
 800cb68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb6c:	d1f9      	bne.n	800cb62 <memcpy+0xe>
 800cb6e:	bd10      	pop	{r4, pc}

0800cb70 <__assert_func>:
 800cb70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb72:	4614      	mov	r4, r2
 800cb74:	461a      	mov	r2, r3
 800cb76:	4b09      	ldr	r3, [pc, #36]	@ (800cb9c <__assert_func+0x2c>)
 800cb78:	4605      	mov	r5, r0
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	68d8      	ldr	r0, [r3, #12]
 800cb7e:	b954      	cbnz	r4, 800cb96 <__assert_func+0x26>
 800cb80:	4b07      	ldr	r3, [pc, #28]	@ (800cba0 <__assert_func+0x30>)
 800cb82:	461c      	mov	r4, r3
 800cb84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb88:	9100      	str	r1, [sp, #0]
 800cb8a:	462b      	mov	r3, r5
 800cb8c:	4905      	ldr	r1, [pc, #20]	@ (800cba4 <__assert_func+0x34>)
 800cb8e:	f000 f841 	bl	800cc14 <fiprintf>
 800cb92:	f000 f851 	bl	800cc38 <abort>
 800cb96:	4b04      	ldr	r3, [pc, #16]	@ (800cba8 <__assert_func+0x38>)
 800cb98:	e7f4      	b.n	800cb84 <__assert_func+0x14>
 800cb9a:	bf00      	nop
 800cb9c:	20000188 	.word	0x20000188
 800cba0:	0800d475 	.word	0x0800d475
 800cba4:	0800d447 	.word	0x0800d447
 800cba8:	0800d43a 	.word	0x0800d43a

0800cbac <_calloc_r>:
 800cbac:	b570      	push	{r4, r5, r6, lr}
 800cbae:	fba1 5402 	umull	r5, r4, r1, r2
 800cbb2:	b93c      	cbnz	r4, 800cbc4 <_calloc_r+0x18>
 800cbb4:	4629      	mov	r1, r5
 800cbb6:	f7ff fb09 	bl	800c1cc <_malloc_r>
 800cbba:	4606      	mov	r6, r0
 800cbbc:	b928      	cbnz	r0, 800cbca <_calloc_r+0x1e>
 800cbbe:	2600      	movs	r6, #0
 800cbc0:	4630      	mov	r0, r6
 800cbc2:	bd70      	pop	{r4, r5, r6, pc}
 800cbc4:	220c      	movs	r2, #12
 800cbc6:	6002      	str	r2, [r0, #0]
 800cbc8:	e7f9      	b.n	800cbbe <_calloc_r+0x12>
 800cbca:	462a      	mov	r2, r5
 800cbcc:	4621      	mov	r1, r4
 800cbce:	f7fe fbaa 	bl	800b326 <memset>
 800cbd2:	e7f5      	b.n	800cbc0 <_calloc_r+0x14>

0800cbd4 <__ascii_mbtowc>:
 800cbd4:	b082      	sub	sp, #8
 800cbd6:	b901      	cbnz	r1, 800cbda <__ascii_mbtowc+0x6>
 800cbd8:	a901      	add	r1, sp, #4
 800cbda:	b142      	cbz	r2, 800cbee <__ascii_mbtowc+0x1a>
 800cbdc:	b14b      	cbz	r3, 800cbf2 <__ascii_mbtowc+0x1e>
 800cbde:	7813      	ldrb	r3, [r2, #0]
 800cbe0:	600b      	str	r3, [r1, #0]
 800cbe2:	7812      	ldrb	r2, [r2, #0]
 800cbe4:	1e10      	subs	r0, r2, #0
 800cbe6:	bf18      	it	ne
 800cbe8:	2001      	movne	r0, #1
 800cbea:	b002      	add	sp, #8
 800cbec:	4770      	bx	lr
 800cbee:	4610      	mov	r0, r2
 800cbf0:	e7fb      	b.n	800cbea <__ascii_mbtowc+0x16>
 800cbf2:	f06f 0001 	mvn.w	r0, #1
 800cbf6:	e7f8      	b.n	800cbea <__ascii_mbtowc+0x16>

0800cbf8 <__ascii_wctomb>:
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	4608      	mov	r0, r1
 800cbfc:	b141      	cbz	r1, 800cc10 <__ascii_wctomb+0x18>
 800cbfe:	2aff      	cmp	r2, #255	@ 0xff
 800cc00:	d904      	bls.n	800cc0c <__ascii_wctomb+0x14>
 800cc02:	228a      	movs	r2, #138	@ 0x8a
 800cc04:	f04f 30ff 	mov.w	r0, #4294967295
 800cc08:	601a      	str	r2, [r3, #0]
 800cc0a:	4770      	bx	lr
 800cc0c:	2001      	movs	r0, #1
 800cc0e:	700a      	strb	r2, [r1, #0]
 800cc10:	4770      	bx	lr
	...

0800cc14 <fiprintf>:
 800cc14:	b40e      	push	{r1, r2, r3}
 800cc16:	b503      	push	{r0, r1, lr}
 800cc18:	4601      	mov	r1, r0
 800cc1a:	ab03      	add	r3, sp, #12
 800cc1c:	4805      	ldr	r0, [pc, #20]	@ (800cc34 <fiprintf+0x20>)
 800cc1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc22:	6800      	ldr	r0, [r0, #0]
 800cc24:	9301      	str	r3, [sp, #4]
 800cc26:	f000 f835 	bl	800cc94 <_vfiprintf_r>
 800cc2a:	b002      	add	sp, #8
 800cc2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc30:	b003      	add	sp, #12
 800cc32:	4770      	bx	lr
 800cc34:	20000188 	.word	0x20000188

0800cc38 <abort>:
 800cc38:	2006      	movs	r0, #6
 800cc3a:	b508      	push	{r3, lr}
 800cc3c:	f000 f9fe 	bl	800d03c <raise>
 800cc40:	2001      	movs	r0, #1
 800cc42:	f7f4 fc24 	bl	800148e <_exit>

0800cc46 <__sfputc_r>:
 800cc46:	6893      	ldr	r3, [r2, #8]
 800cc48:	b410      	push	{r4}
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	6093      	str	r3, [r2, #8]
 800cc50:	da07      	bge.n	800cc62 <__sfputc_r+0x1c>
 800cc52:	6994      	ldr	r4, [r2, #24]
 800cc54:	42a3      	cmp	r3, r4
 800cc56:	db01      	blt.n	800cc5c <__sfputc_r+0x16>
 800cc58:	290a      	cmp	r1, #10
 800cc5a:	d102      	bne.n	800cc62 <__sfputc_r+0x1c>
 800cc5c:	bc10      	pop	{r4}
 800cc5e:	f000 b931 	b.w	800cec4 <__swbuf_r>
 800cc62:	6813      	ldr	r3, [r2, #0]
 800cc64:	1c58      	adds	r0, r3, #1
 800cc66:	6010      	str	r0, [r2, #0]
 800cc68:	7019      	strb	r1, [r3, #0]
 800cc6a:	4608      	mov	r0, r1
 800cc6c:	bc10      	pop	{r4}
 800cc6e:	4770      	bx	lr

0800cc70 <__sfputs_r>:
 800cc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc72:	4606      	mov	r6, r0
 800cc74:	460f      	mov	r7, r1
 800cc76:	4614      	mov	r4, r2
 800cc78:	18d5      	adds	r5, r2, r3
 800cc7a:	42ac      	cmp	r4, r5
 800cc7c:	d101      	bne.n	800cc82 <__sfputs_r+0x12>
 800cc7e:	2000      	movs	r0, #0
 800cc80:	e007      	b.n	800cc92 <__sfputs_r+0x22>
 800cc82:	463a      	mov	r2, r7
 800cc84:	4630      	mov	r0, r6
 800cc86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc8a:	f7ff ffdc 	bl	800cc46 <__sfputc_r>
 800cc8e:	1c43      	adds	r3, r0, #1
 800cc90:	d1f3      	bne.n	800cc7a <__sfputs_r+0xa>
 800cc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc94 <_vfiprintf_r>:
 800cc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc98:	460d      	mov	r5, r1
 800cc9a:	4614      	mov	r4, r2
 800cc9c:	4698      	mov	r8, r3
 800cc9e:	4606      	mov	r6, r0
 800cca0:	b09d      	sub	sp, #116	@ 0x74
 800cca2:	b118      	cbz	r0, 800ccac <_vfiprintf_r+0x18>
 800cca4:	6a03      	ldr	r3, [r0, #32]
 800cca6:	b90b      	cbnz	r3, 800ccac <_vfiprintf_r+0x18>
 800cca8:	f7fe fac4 	bl	800b234 <__sinit>
 800ccac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccae:	07d9      	lsls	r1, r3, #31
 800ccb0:	d405      	bmi.n	800ccbe <_vfiprintf_r+0x2a>
 800ccb2:	89ab      	ldrh	r3, [r5, #12]
 800ccb4:	059a      	lsls	r2, r3, #22
 800ccb6:	d402      	bmi.n	800ccbe <_vfiprintf_r+0x2a>
 800ccb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccba:	f7fe fbb2 	bl	800b422 <__retarget_lock_acquire_recursive>
 800ccbe:	89ab      	ldrh	r3, [r5, #12]
 800ccc0:	071b      	lsls	r3, r3, #28
 800ccc2:	d501      	bpl.n	800ccc8 <_vfiprintf_r+0x34>
 800ccc4:	692b      	ldr	r3, [r5, #16]
 800ccc6:	b99b      	cbnz	r3, 800ccf0 <_vfiprintf_r+0x5c>
 800ccc8:	4629      	mov	r1, r5
 800ccca:	4630      	mov	r0, r6
 800cccc:	f000 f938 	bl	800cf40 <__swsetup_r>
 800ccd0:	b170      	cbz	r0, 800ccf0 <_vfiprintf_r+0x5c>
 800ccd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccd4:	07dc      	lsls	r4, r3, #31
 800ccd6:	d504      	bpl.n	800cce2 <_vfiprintf_r+0x4e>
 800ccd8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccdc:	b01d      	add	sp, #116	@ 0x74
 800ccde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce2:	89ab      	ldrh	r3, [r5, #12]
 800cce4:	0598      	lsls	r0, r3, #22
 800cce6:	d4f7      	bmi.n	800ccd8 <_vfiprintf_r+0x44>
 800cce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccea:	f7fe fb9b 	bl	800b424 <__retarget_lock_release_recursive>
 800ccee:	e7f3      	b.n	800ccd8 <_vfiprintf_r+0x44>
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccf4:	2320      	movs	r3, #32
 800ccf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ccfa:	2330      	movs	r3, #48	@ 0x30
 800ccfc:	f04f 0901 	mov.w	r9, #1
 800cd00:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd04:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ceb0 <_vfiprintf_r+0x21c>
 800cd08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd0c:	4623      	mov	r3, r4
 800cd0e:	469a      	mov	sl, r3
 800cd10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd14:	b10a      	cbz	r2, 800cd1a <_vfiprintf_r+0x86>
 800cd16:	2a25      	cmp	r2, #37	@ 0x25
 800cd18:	d1f9      	bne.n	800cd0e <_vfiprintf_r+0x7a>
 800cd1a:	ebba 0b04 	subs.w	fp, sl, r4
 800cd1e:	d00b      	beq.n	800cd38 <_vfiprintf_r+0xa4>
 800cd20:	465b      	mov	r3, fp
 800cd22:	4622      	mov	r2, r4
 800cd24:	4629      	mov	r1, r5
 800cd26:	4630      	mov	r0, r6
 800cd28:	f7ff ffa2 	bl	800cc70 <__sfputs_r>
 800cd2c:	3001      	adds	r0, #1
 800cd2e:	f000 80a7 	beq.w	800ce80 <_vfiprintf_r+0x1ec>
 800cd32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd34:	445a      	add	r2, fp
 800cd36:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd38:	f89a 3000 	ldrb.w	r3, [sl]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f000 809f 	beq.w	800ce80 <_vfiprintf_r+0x1ec>
 800cd42:	2300      	movs	r3, #0
 800cd44:	f04f 32ff 	mov.w	r2, #4294967295
 800cd48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd4c:	f10a 0a01 	add.w	sl, sl, #1
 800cd50:	9304      	str	r3, [sp, #16]
 800cd52:	9307      	str	r3, [sp, #28]
 800cd54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd58:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd5a:	4654      	mov	r4, sl
 800cd5c:	2205      	movs	r2, #5
 800cd5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd62:	4853      	ldr	r0, [pc, #332]	@ (800ceb0 <_vfiprintf_r+0x21c>)
 800cd64:	f7fe fb5f 	bl	800b426 <memchr>
 800cd68:	9a04      	ldr	r2, [sp, #16]
 800cd6a:	b9d8      	cbnz	r0, 800cda4 <_vfiprintf_r+0x110>
 800cd6c:	06d1      	lsls	r1, r2, #27
 800cd6e:	bf44      	itt	mi
 800cd70:	2320      	movmi	r3, #32
 800cd72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd76:	0713      	lsls	r3, r2, #28
 800cd78:	bf44      	itt	mi
 800cd7a:	232b      	movmi	r3, #43	@ 0x2b
 800cd7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd80:	f89a 3000 	ldrb.w	r3, [sl]
 800cd84:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd86:	d015      	beq.n	800cdb4 <_vfiprintf_r+0x120>
 800cd88:	4654      	mov	r4, sl
 800cd8a:	2000      	movs	r0, #0
 800cd8c:	f04f 0c0a 	mov.w	ip, #10
 800cd90:	9a07      	ldr	r2, [sp, #28]
 800cd92:	4621      	mov	r1, r4
 800cd94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd98:	3b30      	subs	r3, #48	@ 0x30
 800cd9a:	2b09      	cmp	r3, #9
 800cd9c:	d94b      	bls.n	800ce36 <_vfiprintf_r+0x1a2>
 800cd9e:	b1b0      	cbz	r0, 800cdce <_vfiprintf_r+0x13a>
 800cda0:	9207      	str	r2, [sp, #28]
 800cda2:	e014      	b.n	800cdce <_vfiprintf_r+0x13a>
 800cda4:	eba0 0308 	sub.w	r3, r0, r8
 800cda8:	fa09 f303 	lsl.w	r3, r9, r3
 800cdac:	4313      	orrs	r3, r2
 800cdae:	46a2      	mov	sl, r4
 800cdb0:	9304      	str	r3, [sp, #16]
 800cdb2:	e7d2      	b.n	800cd5a <_vfiprintf_r+0xc6>
 800cdb4:	9b03      	ldr	r3, [sp, #12]
 800cdb6:	1d19      	adds	r1, r3, #4
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	9103      	str	r1, [sp, #12]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	bfbb      	ittet	lt
 800cdc0:	425b      	neglt	r3, r3
 800cdc2:	f042 0202 	orrlt.w	r2, r2, #2
 800cdc6:	9307      	strge	r3, [sp, #28]
 800cdc8:	9307      	strlt	r3, [sp, #28]
 800cdca:	bfb8      	it	lt
 800cdcc:	9204      	strlt	r2, [sp, #16]
 800cdce:	7823      	ldrb	r3, [r4, #0]
 800cdd0:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdd2:	d10a      	bne.n	800cdea <_vfiprintf_r+0x156>
 800cdd4:	7863      	ldrb	r3, [r4, #1]
 800cdd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdd8:	d132      	bne.n	800ce40 <_vfiprintf_r+0x1ac>
 800cdda:	9b03      	ldr	r3, [sp, #12]
 800cddc:	3402      	adds	r4, #2
 800cdde:	1d1a      	adds	r2, r3, #4
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	9203      	str	r2, [sp, #12]
 800cde4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cde8:	9305      	str	r3, [sp, #20]
 800cdea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ceb4 <_vfiprintf_r+0x220>
 800cdee:	2203      	movs	r2, #3
 800cdf0:	4650      	mov	r0, sl
 800cdf2:	7821      	ldrb	r1, [r4, #0]
 800cdf4:	f7fe fb17 	bl	800b426 <memchr>
 800cdf8:	b138      	cbz	r0, 800ce0a <_vfiprintf_r+0x176>
 800cdfa:	2240      	movs	r2, #64	@ 0x40
 800cdfc:	9b04      	ldr	r3, [sp, #16]
 800cdfe:	eba0 000a 	sub.w	r0, r0, sl
 800ce02:	4082      	lsls	r2, r0
 800ce04:	4313      	orrs	r3, r2
 800ce06:	3401      	adds	r4, #1
 800ce08:	9304      	str	r3, [sp, #16]
 800ce0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce0e:	2206      	movs	r2, #6
 800ce10:	4829      	ldr	r0, [pc, #164]	@ (800ceb8 <_vfiprintf_r+0x224>)
 800ce12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce16:	f7fe fb06 	bl	800b426 <memchr>
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	d03f      	beq.n	800ce9e <_vfiprintf_r+0x20a>
 800ce1e:	4b27      	ldr	r3, [pc, #156]	@ (800cebc <_vfiprintf_r+0x228>)
 800ce20:	bb1b      	cbnz	r3, 800ce6a <_vfiprintf_r+0x1d6>
 800ce22:	9b03      	ldr	r3, [sp, #12]
 800ce24:	3307      	adds	r3, #7
 800ce26:	f023 0307 	bic.w	r3, r3, #7
 800ce2a:	3308      	adds	r3, #8
 800ce2c:	9303      	str	r3, [sp, #12]
 800ce2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce30:	443b      	add	r3, r7
 800ce32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce34:	e76a      	b.n	800cd0c <_vfiprintf_r+0x78>
 800ce36:	460c      	mov	r4, r1
 800ce38:	2001      	movs	r0, #1
 800ce3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce3e:	e7a8      	b.n	800cd92 <_vfiprintf_r+0xfe>
 800ce40:	2300      	movs	r3, #0
 800ce42:	f04f 0c0a 	mov.w	ip, #10
 800ce46:	4619      	mov	r1, r3
 800ce48:	3401      	adds	r4, #1
 800ce4a:	9305      	str	r3, [sp, #20]
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce52:	3a30      	subs	r2, #48	@ 0x30
 800ce54:	2a09      	cmp	r2, #9
 800ce56:	d903      	bls.n	800ce60 <_vfiprintf_r+0x1cc>
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d0c6      	beq.n	800cdea <_vfiprintf_r+0x156>
 800ce5c:	9105      	str	r1, [sp, #20]
 800ce5e:	e7c4      	b.n	800cdea <_vfiprintf_r+0x156>
 800ce60:	4604      	mov	r4, r0
 800ce62:	2301      	movs	r3, #1
 800ce64:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce68:	e7f0      	b.n	800ce4c <_vfiprintf_r+0x1b8>
 800ce6a:	ab03      	add	r3, sp, #12
 800ce6c:	9300      	str	r3, [sp, #0]
 800ce6e:	462a      	mov	r2, r5
 800ce70:	4630      	mov	r0, r6
 800ce72:	4b13      	ldr	r3, [pc, #76]	@ (800cec0 <_vfiprintf_r+0x22c>)
 800ce74:	a904      	add	r1, sp, #16
 800ce76:	f7fd fd93 	bl	800a9a0 <_printf_float>
 800ce7a:	4607      	mov	r7, r0
 800ce7c:	1c78      	adds	r0, r7, #1
 800ce7e:	d1d6      	bne.n	800ce2e <_vfiprintf_r+0x19a>
 800ce80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce82:	07d9      	lsls	r1, r3, #31
 800ce84:	d405      	bmi.n	800ce92 <_vfiprintf_r+0x1fe>
 800ce86:	89ab      	ldrh	r3, [r5, #12]
 800ce88:	059a      	lsls	r2, r3, #22
 800ce8a:	d402      	bmi.n	800ce92 <_vfiprintf_r+0x1fe>
 800ce8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce8e:	f7fe fac9 	bl	800b424 <__retarget_lock_release_recursive>
 800ce92:	89ab      	ldrh	r3, [r5, #12]
 800ce94:	065b      	lsls	r3, r3, #25
 800ce96:	f53f af1f 	bmi.w	800ccd8 <_vfiprintf_r+0x44>
 800ce9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce9c:	e71e      	b.n	800ccdc <_vfiprintf_r+0x48>
 800ce9e:	ab03      	add	r3, sp, #12
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	462a      	mov	r2, r5
 800cea4:	4630      	mov	r0, r6
 800cea6:	4b06      	ldr	r3, [pc, #24]	@ (800cec0 <_vfiprintf_r+0x22c>)
 800cea8:	a904      	add	r1, sp, #16
 800ceaa:	f7fe f817 	bl	800aedc <_printf_i>
 800ceae:	e7e4      	b.n	800ce7a <_vfiprintf_r+0x1e6>
 800ceb0:	0800d577 	.word	0x0800d577
 800ceb4:	0800d57d 	.word	0x0800d57d
 800ceb8:	0800d581 	.word	0x0800d581
 800cebc:	0800a9a1 	.word	0x0800a9a1
 800cec0:	0800cc71 	.word	0x0800cc71

0800cec4 <__swbuf_r>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	460e      	mov	r6, r1
 800cec8:	4614      	mov	r4, r2
 800ceca:	4605      	mov	r5, r0
 800cecc:	b118      	cbz	r0, 800ced6 <__swbuf_r+0x12>
 800cece:	6a03      	ldr	r3, [r0, #32]
 800ced0:	b90b      	cbnz	r3, 800ced6 <__swbuf_r+0x12>
 800ced2:	f7fe f9af 	bl	800b234 <__sinit>
 800ced6:	69a3      	ldr	r3, [r4, #24]
 800ced8:	60a3      	str	r3, [r4, #8]
 800ceda:	89a3      	ldrh	r3, [r4, #12]
 800cedc:	071a      	lsls	r2, r3, #28
 800cede:	d501      	bpl.n	800cee4 <__swbuf_r+0x20>
 800cee0:	6923      	ldr	r3, [r4, #16]
 800cee2:	b943      	cbnz	r3, 800cef6 <__swbuf_r+0x32>
 800cee4:	4621      	mov	r1, r4
 800cee6:	4628      	mov	r0, r5
 800cee8:	f000 f82a 	bl	800cf40 <__swsetup_r>
 800ceec:	b118      	cbz	r0, 800cef6 <__swbuf_r+0x32>
 800ceee:	f04f 37ff 	mov.w	r7, #4294967295
 800cef2:	4638      	mov	r0, r7
 800cef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cef6:	6823      	ldr	r3, [r4, #0]
 800cef8:	6922      	ldr	r2, [r4, #16]
 800cefa:	b2f6      	uxtb	r6, r6
 800cefc:	1a98      	subs	r0, r3, r2
 800cefe:	6963      	ldr	r3, [r4, #20]
 800cf00:	4637      	mov	r7, r6
 800cf02:	4283      	cmp	r3, r0
 800cf04:	dc05      	bgt.n	800cf12 <__swbuf_r+0x4e>
 800cf06:	4621      	mov	r1, r4
 800cf08:	4628      	mov	r0, r5
 800cf0a:	f7ff fdeb 	bl	800cae4 <_fflush_r>
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d1ed      	bne.n	800ceee <__swbuf_r+0x2a>
 800cf12:	68a3      	ldr	r3, [r4, #8]
 800cf14:	3b01      	subs	r3, #1
 800cf16:	60a3      	str	r3, [r4, #8]
 800cf18:	6823      	ldr	r3, [r4, #0]
 800cf1a:	1c5a      	adds	r2, r3, #1
 800cf1c:	6022      	str	r2, [r4, #0]
 800cf1e:	701e      	strb	r6, [r3, #0]
 800cf20:	6962      	ldr	r2, [r4, #20]
 800cf22:	1c43      	adds	r3, r0, #1
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d004      	beq.n	800cf32 <__swbuf_r+0x6e>
 800cf28:	89a3      	ldrh	r3, [r4, #12]
 800cf2a:	07db      	lsls	r3, r3, #31
 800cf2c:	d5e1      	bpl.n	800cef2 <__swbuf_r+0x2e>
 800cf2e:	2e0a      	cmp	r6, #10
 800cf30:	d1df      	bne.n	800cef2 <__swbuf_r+0x2e>
 800cf32:	4621      	mov	r1, r4
 800cf34:	4628      	mov	r0, r5
 800cf36:	f7ff fdd5 	bl	800cae4 <_fflush_r>
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	d0d9      	beq.n	800cef2 <__swbuf_r+0x2e>
 800cf3e:	e7d6      	b.n	800ceee <__swbuf_r+0x2a>

0800cf40 <__swsetup_r>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	4b29      	ldr	r3, [pc, #164]	@ (800cfe8 <__swsetup_r+0xa8>)
 800cf44:	4605      	mov	r5, r0
 800cf46:	6818      	ldr	r0, [r3, #0]
 800cf48:	460c      	mov	r4, r1
 800cf4a:	b118      	cbz	r0, 800cf54 <__swsetup_r+0x14>
 800cf4c:	6a03      	ldr	r3, [r0, #32]
 800cf4e:	b90b      	cbnz	r3, 800cf54 <__swsetup_r+0x14>
 800cf50:	f7fe f970 	bl	800b234 <__sinit>
 800cf54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf58:	0719      	lsls	r1, r3, #28
 800cf5a:	d422      	bmi.n	800cfa2 <__swsetup_r+0x62>
 800cf5c:	06da      	lsls	r2, r3, #27
 800cf5e:	d407      	bmi.n	800cf70 <__swsetup_r+0x30>
 800cf60:	2209      	movs	r2, #9
 800cf62:	602a      	str	r2, [r5, #0]
 800cf64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf68:	f04f 30ff 	mov.w	r0, #4294967295
 800cf6c:	81a3      	strh	r3, [r4, #12]
 800cf6e:	e033      	b.n	800cfd8 <__swsetup_r+0x98>
 800cf70:	0758      	lsls	r0, r3, #29
 800cf72:	d512      	bpl.n	800cf9a <__swsetup_r+0x5a>
 800cf74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf76:	b141      	cbz	r1, 800cf8a <__swsetup_r+0x4a>
 800cf78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf7c:	4299      	cmp	r1, r3
 800cf7e:	d002      	beq.n	800cf86 <__swsetup_r+0x46>
 800cf80:	4628      	mov	r0, r5
 800cf82:	f7ff f8b1 	bl	800c0e8 <_free_r>
 800cf86:	2300      	movs	r3, #0
 800cf88:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf8a:	89a3      	ldrh	r3, [r4, #12]
 800cf8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cf90:	81a3      	strh	r3, [r4, #12]
 800cf92:	2300      	movs	r3, #0
 800cf94:	6063      	str	r3, [r4, #4]
 800cf96:	6923      	ldr	r3, [r4, #16]
 800cf98:	6023      	str	r3, [r4, #0]
 800cf9a:	89a3      	ldrh	r3, [r4, #12]
 800cf9c:	f043 0308 	orr.w	r3, r3, #8
 800cfa0:	81a3      	strh	r3, [r4, #12]
 800cfa2:	6923      	ldr	r3, [r4, #16]
 800cfa4:	b94b      	cbnz	r3, 800cfba <__swsetup_r+0x7a>
 800cfa6:	89a3      	ldrh	r3, [r4, #12]
 800cfa8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cfac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfb0:	d003      	beq.n	800cfba <__swsetup_r+0x7a>
 800cfb2:	4621      	mov	r1, r4
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	f000 f882 	bl	800d0be <__smakebuf_r>
 800cfba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfbe:	f013 0201 	ands.w	r2, r3, #1
 800cfc2:	d00a      	beq.n	800cfda <__swsetup_r+0x9a>
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	60a2      	str	r2, [r4, #8]
 800cfc8:	6962      	ldr	r2, [r4, #20]
 800cfca:	4252      	negs	r2, r2
 800cfcc:	61a2      	str	r2, [r4, #24]
 800cfce:	6922      	ldr	r2, [r4, #16]
 800cfd0:	b942      	cbnz	r2, 800cfe4 <__swsetup_r+0xa4>
 800cfd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cfd6:	d1c5      	bne.n	800cf64 <__swsetup_r+0x24>
 800cfd8:	bd38      	pop	{r3, r4, r5, pc}
 800cfda:	0799      	lsls	r1, r3, #30
 800cfdc:	bf58      	it	pl
 800cfde:	6962      	ldrpl	r2, [r4, #20]
 800cfe0:	60a2      	str	r2, [r4, #8]
 800cfe2:	e7f4      	b.n	800cfce <__swsetup_r+0x8e>
 800cfe4:	2000      	movs	r0, #0
 800cfe6:	e7f7      	b.n	800cfd8 <__swsetup_r+0x98>
 800cfe8:	20000188 	.word	0x20000188

0800cfec <_raise_r>:
 800cfec:	291f      	cmp	r1, #31
 800cfee:	b538      	push	{r3, r4, r5, lr}
 800cff0:	4605      	mov	r5, r0
 800cff2:	460c      	mov	r4, r1
 800cff4:	d904      	bls.n	800d000 <_raise_r+0x14>
 800cff6:	2316      	movs	r3, #22
 800cff8:	6003      	str	r3, [r0, #0]
 800cffa:	f04f 30ff 	mov.w	r0, #4294967295
 800cffe:	bd38      	pop	{r3, r4, r5, pc}
 800d000:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d002:	b112      	cbz	r2, 800d00a <_raise_r+0x1e>
 800d004:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d008:	b94b      	cbnz	r3, 800d01e <_raise_r+0x32>
 800d00a:	4628      	mov	r0, r5
 800d00c:	f000 f830 	bl	800d070 <_getpid_r>
 800d010:	4622      	mov	r2, r4
 800d012:	4601      	mov	r1, r0
 800d014:	4628      	mov	r0, r5
 800d016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d01a:	f000 b817 	b.w	800d04c <_kill_r>
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d00a      	beq.n	800d038 <_raise_r+0x4c>
 800d022:	1c59      	adds	r1, r3, #1
 800d024:	d103      	bne.n	800d02e <_raise_r+0x42>
 800d026:	2316      	movs	r3, #22
 800d028:	6003      	str	r3, [r0, #0]
 800d02a:	2001      	movs	r0, #1
 800d02c:	e7e7      	b.n	800cffe <_raise_r+0x12>
 800d02e:	2100      	movs	r1, #0
 800d030:	4620      	mov	r0, r4
 800d032:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d036:	4798      	blx	r3
 800d038:	2000      	movs	r0, #0
 800d03a:	e7e0      	b.n	800cffe <_raise_r+0x12>

0800d03c <raise>:
 800d03c:	4b02      	ldr	r3, [pc, #8]	@ (800d048 <raise+0xc>)
 800d03e:	4601      	mov	r1, r0
 800d040:	6818      	ldr	r0, [r3, #0]
 800d042:	f7ff bfd3 	b.w	800cfec <_raise_r>
 800d046:	bf00      	nop
 800d048:	20000188 	.word	0x20000188

0800d04c <_kill_r>:
 800d04c:	b538      	push	{r3, r4, r5, lr}
 800d04e:	2300      	movs	r3, #0
 800d050:	4d06      	ldr	r5, [pc, #24]	@ (800d06c <_kill_r+0x20>)
 800d052:	4604      	mov	r4, r0
 800d054:	4608      	mov	r0, r1
 800d056:	4611      	mov	r1, r2
 800d058:	602b      	str	r3, [r5, #0]
 800d05a:	f7f4 fa08 	bl	800146e <_kill>
 800d05e:	1c43      	adds	r3, r0, #1
 800d060:	d102      	bne.n	800d068 <_kill_r+0x1c>
 800d062:	682b      	ldr	r3, [r5, #0]
 800d064:	b103      	cbz	r3, 800d068 <_kill_r+0x1c>
 800d066:	6023      	str	r3, [r4, #0]
 800d068:	bd38      	pop	{r3, r4, r5, pc}
 800d06a:	bf00      	nop
 800d06c:	20001084 	.word	0x20001084

0800d070 <_getpid_r>:
 800d070:	f7f4 b9f6 	b.w	8001460 <_getpid>

0800d074 <__swhatbuf_r>:
 800d074:	b570      	push	{r4, r5, r6, lr}
 800d076:	460c      	mov	r4, r1
 800d078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d07c:	4615      	mov	r5, r2
 800d07e:	2900      	cmp	r1, #0
 800d080:	461e      	mov	r6, r3
 800d082:	b096      	sub	sp, #88	@ 0x58
 800d084:	da0c      	bge.n	800d0a0 <__swhatbuf_r+0x2c>
 800d086:	89a3      	ldrh	r3, [r4, #12]
 800d088:	2100      	movs	r1, #0
 800d08a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d08e:	bf14      	ite	ne
 800d090:	2340      	movne	r3, #64	@ 0x40
 800d092:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d096:	2000      	movs	r0, #0
 800d098:	6031      	str	r1, [r6, #0]
 800d09a:	602b      	str	r3, [r5, #0]
 800d09c:	b016      	add	sp, #88	@ 0x58
 800d09e:	bd70      	pop	{r4, r5, r6, pc}
 800d0a0:	466a      	mov	r2, sp
 800d0a2:	f000 f849 	bl	800d138 <_fstat_r>
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	dbed      	blt.n	800d086 <__swhatbuf_r+0x12>
 800d0aa:	9901      	ldr	r1, [sp, #4]
 800d0ac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d0b0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d0b4:	4259      	negs	r1, r3
 800d0b6:	4159      	adcs	r1, r3
 800d0b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0bc:	e7eb      	b.n	800d096 <__swhatbuf_r+0x22>

0800d0be <__smakebuf_r>:
 800d0be:	898b      	ldrh	r3, [r1, #12]
 800d0c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0c2:	079d      	lsls	r5, r3, #30
 800d0c4:	4606      	mov	r6, r0
 800d0c6:	460c      	mov	r4, r1
 800d0c8:	d507      	bpl.n	800d0da <__smakebuf_r+0x1c>
 800d0ca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d0ce:	6023      	str	r3, [r4, #0]
 800d0d0:	6123      	str	r3, [r4, #16]
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	6163      	str	r3, [r4, #20]
 800d0d6:	b003      	add	sp, #12
 800d0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0da:	466a      	mov	r2, sp
 800d0dc:	ab01      	add	r3, sp, #4
 800d0de:	f7ff ffc9 	bl	800d074 <__swhatbuf_r>
 800d0e2:	9f00      	ldr	r7, [sp, #0]
 800d0e4:	4605      	mov	r5, r0
 800d0e6:	4639      	mov	r1, r7
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	f7ff f86f 	bl	800c1cc <_malloc_r>
 800d0ee:	b948      	cbnz	r0, 800d104 <__smakebuf_r+0x46>
 800d0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0f4:	059a      	lsls	r2, r3, #22
 800d0f6:	d4ee      	bmi.n	800d0d6 <__smakebuf_r+0x18>
 800d0f8:	f023 0303 	bic.w	r3, r3, #3
 800d0fc:	f043 0302 	orr.w	r3, r3, #2
 800d100:	81a3      	strh	r3, [r4, #12]
 800d102:	e7e2      	b.n	800d0ca <__smakebuf_r+0xc>
 800d104:	89a3      	ldrh	r3, [r4, #12]
 800d106:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d10a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d10e:	81a3      	strh	r3, [r4, #12]
 800d110:	9b01      	ldr	r3, [sp, #4]
 800d112:	6020      	str	r0, [r4, #0]
 800d114:	b15b      	cbz	r3, 800d12e <__smakebuf_r+0x70>
 800d116:	4630      	mov	r0, r6
 800d118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d11c:	f000 f81e 	bl	800d15c <_isatty_r>
 800d120:	b128      	cbz	r0, 800d12e <__smakebuf_r+0x70>
 800d122:	89a3      	ldrh	r3, [r4, #12]
 800d124:	f023 0303 	bic.w	r3, r3, #3
 800d128:	f043 0301 	orr.w	r3, r3, #1
 800d12c:	81a3      	strh	r3, [r4, #12]
 800d12e:	89a3      	ldrh	r3, [r4, #12]
 800d130:	431d      	orrs	r5, r3
 800d132:	81a5      	strh	r5, [r4, #12]
 800d134:	e7cf      	b.n	800d0d6 <__smakebuf_r+0x18>
	...

0800d138 <_fstat_r>:
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	2300      	movs	r3, #0
 800d13c:	4d06      	ldr	r5, [pc, #24]	@ (800d158 <_fstat_r+0x20>)
 800d13e:	4604      	mov	r4, r0
 800d140:	4608      	mov	r0, r1
 800d142:	4611      	mov	r1, r2
 800d144:	602b      	str	r3, [r5, #0]
 800d146:	f7f4 f9f1 	bl	800152c <_fstat>
 800d14a:	1c43      	adds	r3, r0, #1
 800d14c:	d102      	bne.n	800d154 <_fstat_r+0x1c>
 800d14e:	682b      	ldr	r3, [r5, #0]
 800d150:	b103      	cbz	r3, 800d154 <_fstat_r+0x1c>
 800d152:	6023      	str	r3, [r4, #0]
 800d154:	bd38      	pop	{r3, r4, r5, pc}
 800d156:	bf00      	nop
 800d158:	20001084 	.word	0x20001084

0800d15c <_isatty_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	2300      	movs	r3, #0
 800d160:	4d05      	ldr	r5, [pc, #20]	@ (800d178 <_isatty_r+0x1c>)
 800d162:	4604      	mov	r4, r0
 800d164:	4608      	mov	r0, r1
 800d166:	602b      	str	r3, [r5, #0]
 800d168:	f7f4 f9ef 	bl	800154a <_isatty>
 800d16c:	1c43      	adds	r3, r0, #1
 800d16e:	d102      	bne.n	800d176 <_isatty_r+0x1a>
 800d170:	682b      	ldr	r3, [r5, #0]
 800d172:	b103      	cbz	r3, 800d176 <_isatty_r+0x1a>
 800d174:	6023      	str	r3, [r4, #0]
 800d176:	bd38      	pop	{r3, r4, r5, pc}
 800d178:	20001084 	.word	0x20001084

0800d17c <_init>:
 800d17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d17e:	bf00      	nop
 800d180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d182:	bc08      	pop	{r3}
 800d184:	469e      	mov	lr, r3
 800d186:	4770      	bx	lr

0800d188 <_fini>:
 800d188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d18a:	bf00      	nop
 800d18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d18e:	bc08      	pop	{r3}
 800d190:	469e      	mov	lr, r3
 800d192:	4770      	bx	lr
